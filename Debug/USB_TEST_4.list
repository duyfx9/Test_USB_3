
USB_TEST_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016b00  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08016cd0  08016cd0  00017cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080170ac  080170ac  000191ec  2**0
                  CONTENTS
  4 .ARM          00000008  080170ac  080170ac  000180ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080170b4  080170b4  000191ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080170b4  080170b4  000180b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080170b8  080170b8  000180b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  080170bc  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00024c88  20000200  080172a8  00019200  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  20024e88  080172a8  00019e88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000191ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000336ef  00000000  00000000  0001921c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000080de  00000000  00000000  0004c90b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026b0  00000000  00000000  000549f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001de0  00000000  00000000  000570a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003094d  00000000  00000000  00058e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000305e2  00000000  00000000  000897cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110e21  00000000  00000000  000b9daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cabd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ac50  00000000  00000000  001cac14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001d5864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016cb8 	.word	0x08016cb8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	08016cb8 	.word	0x08016cb8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <dhcpserver_init>:
///
/// \param     none
///
/// \return    none
void dhcpserver_init( dhcpconf_t *dhcpconf_param )
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
   // register leasing pool
   dhcpconf = dhcpconf_param;
 80005b8:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <dhcpserver_init+0x28>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6013      	str	r3, [r2, #0]
   
   // initialise dhcp handle task
   dhcpserverHandleTaskToNotify = osThreadNew( dhcpserver_handle, NULL, &dhcpserverHandleTask_attributes );
 80005be:	4a07      	ldr	r2, [pc, #28]	@ (80005dc <dhcpserver_init+0x2c>)
 80005c0:	2100      	movs	r1, #0
 80005c2:	4807      	ldr	r0, [pc, #28]	@ (80005e0 <dhcpserver_init+0x30>)
 80005c4:	f007 fab8 	bl	8007b38 <osThreadNew>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a06      	ldr	r2, [pc, #24]	@ (80005e4 <dhcpserver_init+0x34>)
 80005cc:	6013      	str	r3, [r2, #0]
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000220 	.word	0x20000220
 80005dc:	08016e48 	.word	0x08016e48
 80005e0:	080005e9 	.word	0x080005e9
 80005e4:	2000021c 	.word	0x2000021c

080005e8 <dhcpserver_handle>:
///
/// \param     [in]  void *pvParameters
///
/// \return    none
static void dhcpserver_handle( void *pvParameters )
{
 80005e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ea:	b095      	sub	sp, #84	@ 0x54
 80005ec:	af04      	add	r7, sp, #16
 80005ee:	6078      	str	r0, [r7, #4]
   static uint16_t   eintr;   
   static uint16_t   einval; 
   static uint16_t   eelse;
   long              lBytes;
   struct            freertos_sockaddr xClient, xBindAddress;
   uint32_t          xClientLength = sizeof( xClient );
 80005f0:	2308      	movs	r3, #8
 80005f2:	617b      	str	r3, [r7, #20]
   Socket_t          xListeningSocket;
   struct freertos_sockaddr xDestinationAddress;
   
   // allocate heap for the transmit and receive message
	pucTxRxBuffer = ( uint8_t * ) pvPortMalloc( TXRXBUFFERSIZE );
 80005f4:	f240 208a 	movw	r0, #650	@ 0x28a
 80005f8:	f00a fdd6 	bl	800b1a8 <pvPortMalloc>
 80005fc:	63b8      	str	r0, [r7, #56]	@ 0x38
   
   if( pucTxRxBuffer == NULL )
 80005fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000600:	2b00      	cmp	r3, #0
 8000602:	d102      	bne.n	800060a <dhcpserver_handle+0x22>
   {
      vTaskDelete( NULL );
 8000604:	2000      	movs	r0, #0
 8000606:	f008 ff27 	bl	8009458 <vTaskDelete>
   }
   
   // Attempt to open the socket.
   xListeningSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 800060a:	2211      	movs	r2, #17
 800060c:	2102      	movs	r1, #2
 800060e:	2002      	movs	r0, #2
 8000610:	f00d fc3e 	bl	800de90 <FreeRTOS_socket>
 8000614:	6378      	str	r0, [r7, #52]	@ 0x34

   // Check the socket was created.
   configASSERT( xListeningSocket != FREERTOS_INVALID_SOCKET );
 8000616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800061c:	d10d      	bne.n	800063a <dhcpserver_handle+0x52>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800061e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000622:	b672      	cpsid	i
 8000624:	f383 8811 	msr	BASEPRI, r3
 8000628:	f3bf 8f6f 	isb	sy
 800062c:	f3bf 8f4f 	dsb	sy
 8000630:	b662      	cpsie	i
 8000632:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	e7fd      	b.n	8000636 <dhcpserver_handle+0x4e>

   // Bind to port 67.
   xBindAddress.sin_port = FreeRTOS_htons( 67 );
 800063a:	f44f 4386 	mov.w	r3, #17152	@ 0x4300
 800063e:	837b      	strh	r3, [r7, #26]
   FreeRTOS_bind( xListeningSocket, &xBindAddress, sizeof( xBindAddress ) );
 8000640:	f107 0318 	add.w	r3, r7, #24
 8000644:	2208      	movs	r2, #8
 8000646:	4619      	mov	r1, r3
 8000648:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800064a:	f00d fe15 	bl	800e278 <FreeRTOS_bind>
   for( ;; )
   {
       // Receive data from the socket.  ulFlags is zero, so the standard
       // interface is used.  By default the block time is portMAX_DELAY, but it
       // can be changed using FreeRTOS_setsockopt().
       lengthOfbytes = FreeRTOS_recvfrom( xListeningSocket,
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2300      	movs	r3, #0
 800065c:	f240 228a 	movw	r2, #650	@ 0x28a
 8000660:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000662:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000664:	f00d fcb0 	bl	800dfc8 <FreeRTOS_recvfrom>
 8000668:	6338      	str	r0, [r7, #48]	@ 0x30
      //                                   lengthOfbytes = 0                           --> timeout
      //                                   lengthOfbytes = pdFREERTOS_ERRNO_ENOMEM     --> not enough memory on socket
      //                                   lengthOfbytes = pdFREERTOS_ERRNO_ENOTCONN   --> socket was or got closed
      //                                   lengthOfbytes = pdFREERTOS_ERRNO_EINTR      --> if the socket received a signal, causing the read operation to be aborted
      //                                   lengthOfbytes = pdFREERTOS_ERRNO_EINVAL     --> socket is not valid
      if( lengthOfbytes > 0 )
 800066a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800066c:	2b00      	cmp	r3, #0
 800066e:	f340 8114 	ble.w	800089a <dhcpserver_handle+0x2b2>
      {         
         // local variables
         leasetableObj_t *leaseObj;
         
         // process dhcp frames
         dhcpMsg = (DHCP_MSG_t*)pucTxRxBuffer;
 8000672:	4a9e      	ldr	r2, [pc, #632]	@ (80008ec <dhcpserver_handle+0x304>)
 8000674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000676:	6013      	str	r3, [r2, #0]
         
         switch ( dhcpMsg->options[2] )
 8000678:	4b9c      	ldr	r3, [pc, #624]	@ (80008ec <dhcpserver_handle+0x304>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f893 30f2 	ldrb.w	r3, [r3, #242]	@ 0xf2
 8000680:	2b01      	cmp	r3, #1
 8000682:	d002      	beq.n	800068a <dhcpserver_handle+0xa2>
 8000684:	2b03      	cmp	r3, #3
 8000686:	d06f      	beq.n	8000768 <dhcpserver_handle+0x180>
               xDestinationAddress.sin_port = FreeRTOS_htons( 68 );
               FreeRTOS_sendto( xListeningSocket, pucTxRxBuffer, sizeof(DHCP_MSG_t), 0, &xDestinationAddress, sizeof( xDestinationAddress ) );
               break;
      
            default:
                  break;
 8000688:	e158      	b.n	800093c <dhcpserver_handle+0x354>
               leaseObj = dhcpserver_lookupMac( dhcpMsg->chaddr );
 800068a:	4b98      	ldr	r3, [pc, #608]	@ (80008ec <dhcpserver_handle+0x304>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	331c      	adds	r3, #28
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f991 	bl	80009b8 <dhcpserver_lookupMac>
 8000696:	63f8      	str	r0, [r7, #60]	@ 0x3c
               if( leaseObj == NULL )
 8000698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800069a:	2b00      	cmp	r3, #0
 800069c:	d102      	bne.n	80006a4 <dhcpserver_handle+0xbc>
                  leaseObj = dhcpserver_lookupFree();
 800069e:	f000 f9c3 	bl	8000a28 <dhcpserver_lookupFree>
 80006a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
               if( leaseObj == NULL ) 
 80006a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	f000 813f 	beq.w	800092a <dhcpserver_handle+0x342>
               dhcpMsg->op                   = 2;
 80006ac:	4b8f      	ldr	r3, [pc, #572]	@ (80008ec <dhcpserver_handle+0x304>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2202      	movs	r2, #2
 80006b2:	701a      	strb	r2, [r3, #0]
               dhcpMsg->secs                 = 0;
 80006b4:	4b8d      	ldr	r3, [pc, #564]	@ (80008ec <dhcpserver_handle+0x304>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2200      	movs	r2, #0
 80006ba:	811a      	strh	r2, [r3, #8]
               dhcpMsg->flags                = 0;
 80006bc:	4b8b      	ldr	r3, [pc, #556]	@ (80008ec <dhcpserver_handle+0x304>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2200      	movs	r2, #0
 80006c2:	815a      	strh	r2, [r3, #10]
               *(uint32_t *)dhcpMsg->yiaddr  = *(uint32_t *)leaseObj->ip;
 80006c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006c6:	1d9a      	adds	r2, r3, #6
 80006c8:	4b88      	ldr	r3, [pc, #544]	@ (80008ec <dhcpserver_handle+0x304>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	3310      	adds	r3, #16
 80006ce:	6812      	ldr	r2, [r2, #0]
 80006d0:	601a      	str	r2, [r3, #0]
               memcpy(dhcpMsg->magic, magic_cookie, 4);
 80006d2:	4b86      	ldr	r3, [pc, #536]	@ (80008ec <dhcpserver_handle+0x304>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	33ec      	adds	r3, #236	@ 0xec
 80006d8:	4a85      	ldr	r2, [pc, #532]	@ (80008f0 <dhcpserver_handle+0x308>)
 80006da:	6812      	ldr	r2, [r2, #0]
 80006dc:	601a      	str	r2, [r3, #0]
               memset( dhcpMsg->options, 0x00, sizeof(dhcpMsg->options) );
 80006de:	4b83      	ldr	r3, [pc, #524]	@ (80008ec <dhcpserver_handle+0x304>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	33f0      	adds	r3, #240	@ 0xf0
 80006e4:	f240 1213 	movw	r2, #275	@ 0x113
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f015 faad 	bl	8015c4a <memset>
               dhcpserver_fillOptions( dhcpMsg->options, DHCP_OFFER, dhcpconf->domain,
 80006f0:	4b7e      	ldr	r3, [pc, #504]	@ (80008ec <dhcpserver_handle+0x304>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 80006f8:	4b7e      	ldr	r3, [pc, #504]	@ (80008f4 <dhcpserver_handle+0x30c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	68dd      	ldr	r5, [r3, #12]
                  *(uint32_t*)dhcpconf->dns, leaseObj->leasetime, *(uint32_t*)dhcpconf->dhcpip,
 80006fe:	4b7d      	ldr	r3, [pc, #500]	@ (80008f4 <dhcpserver_handle+0x30c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	3304      	adds	r3, #4
               dhcpserver_fillOptions( dhcpMsg->options, DHCP_OFFER, dhcpconf->domain,
 8000704:	681e      	ldr	r6, [r3, #0]
 8000706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000708:	691b      	ldr	r3, [r3, #16]
                  *(uint32_t*)dhcpconf->dns, leaseObj->leasetime, *(uint32_t*)dhcpconf->dhcpip,
 800070a:	4a7a      	ldr	r2, [pc, #488]	@ (80008f4 <dhcpserver_handle+0x30c>)
 800070c:	6812      	ldr	r2, [r2, #0]
               dhcpserver_fillOptions( dhcpMsg->options, DHCP_OFFER, dhcpconf->domain,
 800070e:	6812      	ldr	r2, [r2, #0]
                  *(uint32_t*)dhcpconf->dhcpip, *(uint32_t*)dhcpconf->sub );
 8000710:	4978      	ldr	r1, [pc, #480]	@ (80008f4 <dhcpserver_handle+0x30c>)
 8000712:	6809      	ldr	r1, [r1, #0]
               dhcpserver_fillOptions( dhcpMsg->options, DHCP_OFFER, dhcpconf->domain,
 8000714:	6809      	ldr	r1, [r1, #0]
                  *(uint32_t*)dhcpconf->dhcpip, *(uint32_t*)dhcpconf->sub );
 8000716:	4877      	ldr	r0, [pc, #476]	@ (80008f4 <dhcpserver_handle+0x30c>)
 8000718:	6800      	ldr	r0, [r0, #0]
 800071a:	3008      	adds	r0, #8
               dhcpserver_fillOptions( dhcpMsg->options, DHCP_OFFER, dhcpconf->domain,
 800071c:	6800      	ldr	r0, [r0, #0]
 800071e:	9003      	str	r0, [sp, #12]
 8000720:	9102      	str	r1, [sp, #8]
 8000722:	9201      	str	r2, [sp, #4]
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	4633      	mov	r3, r6
 8000728:	462a      	mov	r2, r5
 800072a:	2102      	movs	r1, #2
 800072c:	4620      	mov	r0, r4
 800072e:	f000 f9ff 	bl	8000b30 <dhcpserver_fillOptions>
               memcpy( pucTxRxBuffer, dhcpMsg, sizeof(DHCP_MSG_t));
 8000732:	4b6e      	ldr	r3, [pc, #440]	@ (80008ec <dhcpserver_handle+0x304>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800073a:	4619      	mov	r1, r3
 800073c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800073e:	f015 fb00 	bl	8015d42 <memcpy>
               xDestinationAddress.sin_addr = FreeRTOS_inet_addr_quick( 255, 255, 255, 255 );
 8000742:	f04f 33ff 	mov.w	r3, #4294967295
 8000746:	613b      	str	r3, [r7, #16]
               xDestinationAddress.sin_port = FreeRTOS_htons( 68 );
 8000748:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800074c:	81fb      	strh	r3, [r7, #14]
               FreeRTOS_sendto( xListeningSocket, pucTxRxBuffer, sizeof(DHCP_MSG_t), 0, &xDestinationAddress, sizeof( xDestinationAddress ) );
 800074e:	2308      	movs	r3, #8
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2300      	movs	r3, #0
 800075a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800075e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000760:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000762:	f00d fce0 	bl	800e126 <FreeRTOS_sendto>
               break;
 8000766:	e0e9      	b.n	800093c <dhcpserver_handle+0x354>
               ptr = dhcpserver_findOption( dhcpMsg->options, sizeof(dhcpMsg->options), DHCP_IPADDRESS);
 8000768:	4b60      	ldr	r3, [pc, #384]	@ (80008ec <dhcpserver_handle+0x304>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	33f0      	adds	r3, #240	@ 0xf0
 800076e:	2232      	movs	r2, #50	@ 0x32
 8000770:	f240 1113 	movw	r1, #275	@ 0x113
 8000774:	4618      	mov	r0, r3
 8000776:	f000 fa85 	bl	8000c84 <dhcpserver_findOption>
 800077a:	62f8      	str	r0, [r7, #44]	@ 0x2c
               if( ptr == NULL )
 800077c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800077e:	2b00      	cmp	r3, #0
 8000780:	f000 80d5 	beq.w	800092e <dhcpserver_handle+0x346>
               if( ptr[1] != 4 )
 8000784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000786:	3301      	adds	r3, #1
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b04      	cmp	r3, #4
 800078c:	f040 80d1 	bne.w	8000932 <dhcpserver_handle+0x34a>
               ptr += 2;
 8000790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000792:	3302      	adds	r3, #2
 8000794:	62fb      	str	r3, [r7, #44]	@ 0x2c
               leaseObj = dhcpserver_lookupMac( dhcpMsg->chaddr );
 8000796:	4b55      	ldr	r3, [pc, #340]	@ (80008ec <dhcpserver_handle+0x304>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	331c      	adds	r3, #28
 800079c:	4618      	mov	r0, r3
 800079e:	f000 f90b 	bl	80009b8 <dhcpserver_lookupMac>
 80007a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
               if( leaseObj != NULL )
 80007a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d002      	beq.n	80007b0 <dhcpserver_handle+0x1c8>
                  dhcpserver_lookupDelete( leaseObj );
 80007aa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80007ac:	f000 f976 	bl	8000a9c <dhcpserver_lookupDelete>
               leaseObj = dhcpserver_lookupIp( *(uint32_t *)ptr ); 
 80007b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 f8c7 	bl	8000948 <dhcpserver_lookupIp>
 80007ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
               if( leaseObj == NULL )
 80007bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007be:	2b00      	cmp	r3, #0
 80007c0:	f000 80b9 	beq.w	8000936 <dhcpserver_handle+0x34e>
               if( dhcpserver_lookupFreeObj(leaseObj) != 1 )
 80007c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80007c6:	f000 f995 	bl	8000af4 <dhcpserver_lookupFreeObj>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	f040 80b4 	bne.w	800093a <dhcpserver_handle+0x352>
               dhcpserver_lookupSetMac( leaseObj, dhcpMsg->chaddr );
 80007d2:	4b46      	ldr	r3, [pc, #280]	@ (80008ec <dhcpserver_handle+0x304>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	331c      	adds	r3, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80007dc:	f000 f974 	bl	8000ac8 <dhcpserver_lookupSetMac>
               memcpy( dhcpMsg->yiaddr, ptr, 4u );
 80007e0:	4b42      	ldr	r3, [pc, #264]	@ (80008ec <dhcpserver_handle+0x304>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	3310      	adds	r3, #16
 80007e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80007e8:	6812      	ldr	r2, [r2, #0]
 80007ea:	601a      	str	r2, [r3, #0]
               dhcpMsg->op = 2;
 80007ec:	4b3f      	ldr	r3, [pc, #252]	@ (80008ec <dhcpserver_handle+0x304>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2202      	movs	r2, #2
 80007f2:	701a      	strb	r2, [r3, #0]
               dhcpMsg->secs = 0;
 80007f4:	4b3d      	ldr	r3, [pc, #244]	@ (80008ec <dhcpserver_handle+0x304>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2200      	movs	r2, #0
 80007fa:	811a      	strh	r2, [r3, #8]
               dhcpMsg->flags = 2;
 80007fc:	4b3b      	ldr	r3, [pc, #236]	@ (80008ec <dhcpserver_handle+0x304>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2202      	movs	r2, #2
 8000802:	815a      	strh	r2, [r3, #10]
               memcpy(dhcpMsg->magic, magic_cookie, 4);
 8000804:	4b39      	ldr	r3, [pc, #228]	@ (80008ec <dhcpserver_handle+0x304>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	33ec      	adds	r3, #236	@ 0xec
 800080a:	4a39      	ldr	r2, [pc, #228]	@ (80008f0 <dhcpserver_handle+0x308>)
 800080c:	6812      	ldr	r2, [r2, #0]
 800080e:	601a      	str	r2, [r3, #0]
               memset( dhcpMsg->options, 0x00, sizeof(dhcpMsg->options) );
 8000810:	4b36      	ldr	r3, [pc, #216]	@ (80008ec <dhcpserver_handle+0x304>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	33f0      	adds	r3, #240	@ 0xf0
 8000816:	f240 1213 	movw	r2, #275	@ 0x113
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f015 fa14 	bl	8015c4a <memset>
               dhcpserver_fillOptions( dhcpMsg->options, DHCP_ACK, dhcpconf->domain,
 8000822:	4b32      	ldr	r3, [pc, #200]	@ (80008ec <dhcpserver_handle+0x304>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 800082a:	4b32      	ldr	r3, [pc, #200]	@ (80008f4 <dhcpserver_handle+0x30c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	68dd      	ldr	r5, [r3, #12]
                  *(uint32_t*)dhcpconf->dns, leaseObj->leasetime, *(uint32_t*)dhcpconf->dhcpip,
 8000830:	4b30      	ldr	r3, [pc, #192]	@ (80008f4 <dhcpserver_handle+0x30c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	3304      	adds	r3, #4
               dhcpserver_fillOptions( dhcpMsg->options, DHCP_ACK, dhcpconf->domain,
 8000836:	681e      	ldr	r6, [r3, #0]
 8000838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800083a:	691b      	ldr	r3, [r3, #16]
                  *(uint32_t*)dhcpconf->dns, leaseObj->leasetime, *(uint32_t*)dhcpconf->dhcpip,
 800083c:	4a2d      	ldr	r2, [pc, #180]	@ (80008f4 <dhcpserver_handle+0x30c>)
 800083e:	6812      	ldr	r2, [r2, #0]
               dhcpserver_fillOptions( dhcpMsg->options, DHCP_ACK, dhcpconf->domain,
 8000840:	6812      	ldr	r2, [r2, #0]
                  *(uint32_t*)dhcpconf->dhcpip, *(uint32_t*)dhcpconf->sub );
 8000842:	492c      	ldr	r1, [pc, #176]	@ (80008f4 <dhcpserver_handle+0x30c>)
 8000844:	6809      	ldr	r1, [r1, #0]
               dhcpserver_fillOptions( dhcpMsg->options, DHCP_ACK, dhcpconf->domain,
 8000846:	6809      	ldr	r1, [r1, #0]
                  *(uint32_t*)dhcpconf->dhcpip, *(uint32_t*)dhcpconf->sub );
 8000848:	482a      	ldr	r0, [pc, #168]	@ (80008f4 <dhcpserver_handle+0x30c>)
 800084a:	6800      	ldr	r0, [r0, #0]
 800084c:	3008      	adds	r0, #8
               dhcpserver_fillOptions( dhcpMsg->options, DHCP_ACK, dhcpconf->domain,
 800084e:	6800      	ldr	r0, [r0, #0]
 8000850:	9003      	str	r0, [sp, #12]
 8000852:	9102      	str	r1, [sp, #8]
 8000854:	9201      	str	r2, [sp, #4]
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	4633      	mov	r3, r6
 800085a:	462a      	mov	r2, r5
 800085c:	2105      	movs	r1, #5
 800085e:	4620      	mov	r0, r4
 8000860:	f000 f966 	bl	8000b30 <dhcpserver_fillOptions>
               memcpy( pucTxRxBuffer, dhcpMsg, sizeof(DHCP_MSG_t));
 8000864:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <dhcpserver_handle+0x304>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800086c:	4619      	mov	r1, r3
 800086e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000870:	f015 fa67 	bl	8015d42 <memcpy>
               xDestinationAddress.sin_addr = FreeRTOS_inet_addr_quick( 255, 255, 255, 255 );
 8000874:	f04f 33ff 	mov.w	r3, #4294967295
 8000878:	613b      	str	r3, [r7, #16]
               xDestinationAddress.sin_port = FreeRTOS_htons( 68 );
 800087a:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800087e:	81fb      	strh	r3, [r7, #14]
               FreeRTOS_sendto( xListeningSocket, pucTxRxBuffer, sizeof(DHCP_MSG_t), 0, &xDestinationAddress, sizeof( xDestinationAddress ) );
 8000880:	2308      	movs	r3, #8
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2300      	movs	r3, #0
 800088c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8000890:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000892:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000894:	f00d fc47 	bl	800e126 <FreeRTOS_sendto>
               break;
 8000898:	e050      	b.n	800093c <dhcpserver_handle+0x354>
         }
      }
      else if( lengthOfbytes == 0 )
 800089a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800089c:	2b00      	cmp	r3, #0
 800089e:	d106      	bne.n	80008ae <dhcpserver_handle+0x2c6>
      {
         // No data was received, but FreeRTOS_recv() did not return an error. Timeout?
         etimeout++;
 80008a0:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <dhcpserver_handle+0x310>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <dhcpserver_handle+0x310>)
 80008aa:	801a      	strh	r2, [r3, #0]
 80008ac:	e6cf      	b.n	800064e <dhcpserver_handle+0x66>
      }
      else if( lengthOfbytes == pdFREERTOS_ERRNO_ENOMEM )                                                                                        
 80008ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008b0:	2b0c      	cmp	r3, #12
 80008b2:	d106      	bne.n	80008c2 <dhcpserver_handle+0x2da>
      {                                                                                                                    
         // Error (maybe the connected socket already shut down the socket?). Attempt graceful shutdown.                   
         enomem++;
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <dhcpserver_handle+0x314>)
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	3301      	adds	r3, #1
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <dhcpserver_handle+0x314>)
 80008be:	801a      	strh	r2, [r3, #0]
 80008c0:	e6c5      	b.n	800064e <dhcpserver_handle+0x66>
      } 
      else if( lengthOfbytes == pdFREERTOS_ERRNO_ENOTCONN )                                                                   
 80008c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008c4:	2b80      	cmp	r3, #128	@ 0x80
 80008c6:	d106      	bne.n	80008d6 <dhcpserver_handle+0x2ee>
      {                                                                                                                       
         // Error (maybe the connected socket already shut down the socket?). Attempt graceful shutdown.                      
         enotconn++;
 80008c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000900 <dhcpserver_handle+0x318>)
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	3301      	adds	r3, #1
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <dhcpserver_handle+0x318>)
 80008d2:	801a      	strh	r2, [r3, #0]
 80008d4:	e6bb      	b.n	800064e <dhcpserver_handle+0x66>
      } 
      else if( lengthOfbytes == pdFREERTOS_ERRNO_EINTR )                                                                      
 80008d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008d8:	2b04      	cmp	r3, #4
 80008da:	d115      	bne.n	8000908 <dhcpserver_handle+0x320>
      {                                                                                                                       
         // Error (maybe the connected socket already shut down the socket?). Attempt graceful shutdown.                      
         eintr++;
 80008dc:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <dhcpserver_handle+0x31c>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	3301      	adds	r3, #1
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	4b07      	ldr	r3, [pc, #28]	@ (8000904 <dhcpserver_handle+0x31c>)
 80008e6:	801a      	strh	r2, [r3, #0]
 80008e8:	e6b1      	b.n	800064e <dhcpserver_handle+0x66>
 80008ea:	bf00      	nop
 80008ec:	20000224 	.word	0x20000224
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000220 	.word	0x20000220
 80008f8:	20000228 	.word	0x20000228
 80008fc:	2000022a 	.word	0x2000022a
 8000900:	2000022c 	.word	0x2000022c
 8000904:	2000022e 	.word	0x2000022e
      } 
      else if( lengthOfbytes == pdFREERTOS_ERRNO_EINVAL )                                                                      
 8000908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800090a:	2b16      	cmp	r3, #22
 800090c:	d106      	bne.n	800091c <dhcpserver_handle+0x334>
      {                                                                                                                       
         // Error (maybe the connected socket already shut down the socket?). Attempt graceful shutdown.                      
         einval++;
 800090e:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <dhcpserver_handle+0x358>)
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	3301      	adds	r3, #1
 8000914:	b29a      	uxth	r2, r3
 8000916:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <dhcpserver_handle+0x358>)
 8000918:	801a      	strh	r2, [r3, #0]
 800091a:	e698      	b.n	800064e <dhcpserver_handle+0x66>
      } 
      else
      {                                                                                                                       
         // Error (maybe the connected socket already shut down the socket?). Attempt graceful shutdown.                      
         eelse++;
 800091c:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <dhcpserver_handle+0x35c>)
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	3301      	adds	r3, #1
 8000922:	b29a      	uxth	r2, r3
 8000924:	4b07      	ldr	r3, [pc, #28]	@ (8000944 <dhcpserver_handle+0x35c>)
 8000926:	801a      	strh	r2, [r3, #0]
 8000928:	e691      	b.n	800064e <dhcpserver_handle+0x66>
                  break;
 800092a:	bf00      	nop
 800092c:	e68f      	b.n	800064e <dhcpserver_handle+0x66>
                  break;
 800092e:	bf00      	nop
 8000930:	e68d      	b.n	800064e <dhcpserver_handle+0x66>
                  break;
 8000932:	bf00      	nop
 8000934:	e68b      	b.n	800064e <dhcpserver_handle+0x66>
                  break;
 8000936:	bf00      	nop
 8000938:	e689      	b.n	800064e <dhcpserver_handle+0x66>
                  break;
 800093a:	bf00      	nop
       lengthOfbytes = FreeRTOS_recvfrom( xListeningSocket,
 800093c:	e687      	b.n	800064e <dhcpserver_handle+0x66>
 800093e:	bf00      	nop
 8000940:	20000230 	.word	0x20000230
 8000944:	20000232 	.word	0x20000232

08000948 <dhcpserver_lookupIp>:
///
/// \param     [in]  uint32_t ip
///
/// \return    pointer to leasetableObj_t
static leasetableObj_t *dhcpserver_lookupIp( uint32_t ip )
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
   if( dhcpconf == NULL )
 8000950:	4b18      	ldr	r3, [pc, #96]	@ (80009b4 <dhcpserver_lookupIp+0x6c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d101      	bne.n	800095c <dhcpserver_lookupIp+0x14>
   {
      return NULL;
 8000958:	2300      	movs	r3, #0
 800095a:	e024      	b.n	80009a6 <dhcpserver_lookupIp+0x5e>
   }
   
   for( uint16_t i=0; i<dhcpconf->tablelength; i++ )
 800095c:	2300      	movs	r3, #0
 800095e:	81fb      	strh	r3, [r7, #14]
 8000960:	e01a      	b.n	8000998 <dhcpserver_lookupIp+0x50>
   {
      if( *(uint32_t *)dhcpconf->leasetable[i].ip == ip )
 8000962:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <dhcpserver_lookupIp+0x6c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	6959      	ldr	r1, [r3, #20]
 8000968:	89fa      	ldrh	r2, [r7, #14]
 800096a:	4613      	mov	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4413      	add	r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	440b      	add	r3, r1
 8000974:	3306      	adds	r3, #6
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	429a      	cmp	r2, r3
 800097c:	d109      	bne.n	8000992 <dhcpserver_lookupIp+0x4a>
      {
         return &dhcpconf->leasetable[i];
 800097e:	4b0d      	ldr	r3, [pc, #52]	@ (80009b4 <dhcpserver_lookupIp+0x6c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	6959      	ldr	r1, [r3, #20]
 8000984:	89fa      	ldrh	r2, [r7, #14]
 8000986:	4613      	mov	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	4413      	add	r3, r2
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	440b      	add	r3, r1
 8000990:	e009      	b.n	80009a6 <dhcpserver_lookupIp+0x5e>
   for( uint16_t i=0; i<dhcpconf->tablelength; i++ )
 8000992:	89fb      	ldrh	r3, [r7, #14]
 8000994:	3301      	adds	r3, #1
 8000996:	81fb      	strh	r3, [r7, #14]
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <dhcpserver_lookupIp+0x6c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	8a1b      	ldrh	r3, [r3, #16]
 800099e:	89fa      	ldrh	r2, [r7, #14]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d3de      	bcc.n	8000962 <dhcpserver_lookupIp+0x1a>
      }
   }
   return NULL;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000220 	.word	0x20000220

080009b8 <dhcpserver_lookupMac>:
///
/// \param     [in]  uint8_t *mac
///
/// \return    pointer to leasetableObj_t
static leasetableObj_t *dhcpserver_lookupMac( uint8_t *mac )
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
   if( dhcpconf == NULL )
 80009c0:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <dhcpserver_lookupMac+0x6c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d101      	bne.n	80009cc <dhcpserver_lookupMac+0x14>
   {
      return NULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	e027      	b.n	8000a1c <dhcpserver_lookupMac+0x64>
   }
   
   for( uint16_t i=0; i<dhcpconf->tablelength; i++ )
 80009cc:	2300      	movs	r3, #0
 80009ce:	81fb      	strh	r3, [r7, #14]
 80009d0:	e01d      	b.n	8000a0e <dhcpserver_lookupMac+0x56>
   {
      if( memcmp( dhcpconf->leasetable[i].mac, mac, 6u ) == 0 )
 80009d2:	4b14      	ldr	r3, [pc, #80]	@ (8000a24 <dhcpserver_lookupMac+0x6c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	6959      	ldr	r1, [r3, #20]
 80009d8:	89fa      	ldrh	r2, [r7, #14]
 80009da:	4613      	mov	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	4413      	add	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	440b      	add	r3, r1
 80009e4:	2206      	movs	r2, #6
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f015 f904 	bl	8015bf6 <memcmp>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d109      	bne.n	8000a08 <dhcpserver_lookupMac+0x50>
      {
         return &dhcpconf->leasetable[i];
 80009f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <dhcpserver_lookupMac+0x6c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	6959      	ldr	r1, [r3, #20]
 80009fa:	89fa      	ldrh	r2, [r7, #14]
 80009fc:	4613      	mov	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	4413      	add	r3, r2
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	440b      	add	r3, r1
 8000a06:	e009      	b.n	8000a1c <dhcpserver_lookupMac+0x64>
   for( uint16_t i=0; i<dhcpconf->tablelength; i++ )
 8000a08:	89fb      	ldrh	r3, [r7, #14]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	81fb      	strh	r3, [r7, #14]
 8000a0e:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <dhcpserver_lookupMac+0x6c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	8a1b      	ldrh	r3, [r3, #16]
 8000a14:	89fa      	ldrh	r2, [r7, #14]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d3db      	bcc.n	80009d2 <dhcpserver_lookupMac+0x1a>
      }
   }
   return NULL;
 8000a1a:	2300      	movs	r3, #0
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000220 	.word	0x20000220

08000a28 <dhcpserver_lookupFree>:
///
/// \param     none
///
/// \return    pointer to leasetableObj_t
static leasetableObj_t *dhcpserver_lookupFree( void )
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
   static const uint8_t empty[6] = {0,0,0,0,0,0};
   if( dhcpconf == NULL )
 8000a2e:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <dhcpserver_lookupFree+0x6c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d101      	bne.n	8000a3a <dhcpserver_lookupFree+0x12>
   {
      return NULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e027      	b.n	8000a8a <dhcpserver_lookupFree+0x62>
   }
   
   for( uint16_t i=0; i<dhcpconf->tablelength; i++ )
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	80fb      	strh	r3, [r7, #6]
 8000a3e:	e01d      	b.n	8000a7c <dhcpserver_lookupFree+0x54>
   {
      if( memcmp( dhcpconf->leasetable[i].mac, empty, 6u ) == 0 )
 8000a40:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <dhcpserver_lookupFree+0x6c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6959      	ldr	r1, [r3, #20]
 8000a46:	88fa      	ldrh	r2, [r7, #6]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4413      	add	r3, r2
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	440b      	add	r3, r1
 8000a52:	2206      	movs	r2, #6
 8000a54:	4910      	ldr	r1, [pc, #64]	@ (8000a98 <dhcpserver_lookupFree+0x70>)
 8000a56:	4618      	mov	r0, r3
 8000a58:	f015 f8cd 	bl	8015bf6 <memcmp>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d109      	bne.n	8000a76 <dhcpserver_lookupFree+0x4e>
      {
         return &dhcpconf->leasetable[i];
 8000a62:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <dhcpserver_lookupFree+0x6c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	6959      	ldr	r1, [r3, #20]
 8000a68:	88fa      	ldrh	r2, [r7, #6]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	4413      	add	r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	440b      	add	r3, r1
 8000a74:	e009      	b.n	8000a8a <dhcpserver_lookupFree+0x62>
   for( uint16_t i=0; i<dhcpconf->tablelength; i++ )
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	80fb      	strh	r3, [r7, #6]
 8000a7c:	4b05      	ldr	r3, [pc, #20]	@ (8000a94 <dhcpserver_lookupFree+0x6c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	8a1b      	ldrh	r3, [r3, #16]
 8000a82:	88fa      	ldrh	r2, [r7, #6]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d3db      	bcc.n	8000a40 <dhcpserver_lookupFree+0x18>
      }
   }
   return NULL;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000220 	.word	0x20000220
 8000a98:	08016e6c 	.word	0x08016e6c

08000a9c <dhcpserver_lookupDelete>:
///
/// \param     [in]  leasetableObj_t* tableObj
///
/// \return    void
static void dhcpserver_lookupDelete( leasetableObj_t* tableObj )
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
   if( dhcpconf == NULL )
 8000aa4:	4b07      	ldr	r3, [pc, #28]	@ (8000ac4 <dhcpserver_lookupDelete+0x28>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d006      	beq.n	8000aba <dhcpserver_lookupDelete+0x1e>
   {
      return;
   }
   
   memset( tableObj->mac, 0x00, 6u );
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2206      	movs	r2, #6
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f015 f8c9 	bl	8015c4a <memset>
 8000ab8:	e000      	b.n	8000abc <dhcpserver_lookupDelete+0x20>
      return;
 8000aba:	bf00      	nop
}
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000220 	.word	0x20000220

08000ac8 <dhcpserver_lookupSetMac>:
///
/// \param     [in]  leasetableObj_t* tableObj
///
/// \return    void
static void dhcpserver_lookupSetMac( leasetableObj_t* tableObj, uint8_t* mac )
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
   if( dhcpconf == NULL )
 8000ad2:	4b07      	ldr	r3, [pc, #28]	@ (8000af0 <dhcpserver_lookupSetMac+0x28>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d006      	beq.n	8000ae8 <dhcpserver_lookupSetMac+0x20>
   {
      return;
   }
   
   memcpy( tableObj->mac, mac, 6u );
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2206      	movs	r2, #6
 8000ade:	6839      	ldr	r1, [r7, #0]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f015 f92e 	bl	8015d42 <memcpy>
 8000ae6:	e000      	b.n	8000aea <dhcpserver_lookupSetMac+0x22>
      return;
 8000ae8:	bf00      	nop
}
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000220 	.word	0x20000220

08000af4 <dhcpserver_lookupFreeObj>:
///
/// \param     [in]  leasetableObj_t* tableObj
///
/// \return    0 = error, 1 = free, 2 = not free
static uint8_t dhcpserver_lookupFreeObj( leasetableObj_t* tableObj )
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
   static const uint8_t empty[6] = {0,0,0,0,0,0};
   if( dhcpconf == NULL )
 8000afc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <dhcpserver_lookupFreeObj+0x34>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d101      	bne.n	8000b08 <dhcpserver_lookupFreeObj+0x14>
   {
      return 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	e00b      	b.n	8000b20 <dhcpserver_lookupFreeObj+0x2c>
   }
   
   if( memcmp( tableObj->mac, empty, 6u ) == 0 )
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2206      	movs	r2, #6
 8000b0c:	4907      	ldr	r1, [pc, #28]	@ (8000b2c <dhcpserver_lookupFreeObj+0x38>)
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f015 f871 	bl	8015bf6 <memcmp>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d101      	bne.n	8000b1e <dhcpserver_lookupFreeObj+0x2a>
   {
      return 1;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e000      	b.n	8000b20 <dhcpserver_lookupFreeObj+0x2c>
   }
   return 2;
 8000b1e:	2302      	movs	r3, #2
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000220 	.word	0x20000220
 8000b2c:	08016e74 	.word	0x08016e74

08000b30 <dhcpserver_fillOptions>:
/// \param     [in]  uint32_t router
/// \param     [in]  uint32_t subnet
///
/// \return    0 = error, 1 = free, 2 = not free
static void dhcpserver_fillOptions( void *dest, uint8_t msg_type, const char *domain, uint32_t dns, uint32_t lease_time, uint32_t serverid, uint32_t router, uint32_t subnet )
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	607a      	str	r2, [r7, #4]
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	72fb      	strb	r3, [r7, #11]
	uint8_t *ptr = (uint8_t *)dest;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	617b      	str	r3, [r7, #20]
	/* ACK message type */
	*ptr++ = 53;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	617a      	str	r2, [r7, #20]
 8000b4a:	2235      	movs	r2, #53	@ 0x35
 8000b4c:	701a      	strb	r2, [r3, #0]
	*ptr++ = 1;
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	1c5a      	adds	r2, r3, #1
 8000b52:	617a      	str	r2, [r7, #20]
 8000b54:	2201      	movs	r2, #1
 8000b56:	701a      	strb	r2, [r3, #0]
	*ptr++ = msg_type;
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	617a      	str	r2, [r7, #20]
 8000b5e:	7afa      	ldrb	r2, [r7, #11]
 8000b60:	701a      	strb	r2, [r3, #0]

	/* dhcp server identifier */
	*ptr++ = DHCP_SERVERID;
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	1c5a      	adds	r2, r3, #1
 8000b66:	617a      	str	r2, [r7, #20]
 8000b68:	2236      	movs	r2, #54	@ 0x36
 8000b6a:	701a      	strb	r2, [r3, #0]
	*ptr++ = 4;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	617a      	str	r2, [r7, #20]
 8000b72:	2204      	movs	r2, #4
 8000b74:	701a      	strb	r2, [r3, #0]
	*(uint32_t *)ptr = serverid;
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b7a:	601a      	str	r2, [r3, #0]
	ptr += 4;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	3304      	adds	r3, #4
 8000b80:	617b      	str	r3, [r7, #20]

	/* lease time */
	*ptr++ = DHCP_LEASETIME;
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	1c5a      	adds	r2, r3, #1
 8000b86:	617a      	str	r2, [r7, #20]
 8000b88:	2233      	movs	r2, #51	@ 0x33
 8000b8a:	701a      	strb	r2, [r3, #0]
	*ptr++ = 4;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	617a      	str	r2, [r7, #20]
 8000b92:	2204      	movs	r2, #4
 8000b94:	701a      	strb	r2, [r3, #0]
	*ptr++ = (lease_time >> 24) & 0xFF;
 8000b96:	6a3b      	ldr	r3, [r7, #32]
 8000b98:	0e19      	lsrs	r1, r3, #24
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	1c5a      	adds	r2, r3, #1
 8000b9e:	617a      	str	r2, [r7, #20]
 8000ba0:	b2ca      	uxtb	r2, r1
 8000ba2:	701a      	strb	r2, [r3, #0]
	*ptr++ = (lease_time >> 16) & 0xFF;
 8000ba4:	6a3b      	ldr	r3, [r7, #32]
 8000ba6:	0c19      	lsrs	r1, r3, #16
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	617a      	str	r2, [r7, #20]
 8000bae:	b2ca      	uxtb	r2, r1
 8000bb0:	701a      	strb	r2, [r3, #0]
	*ptr++ = (lease_time >> 8) & 0xFF;
 8000bb2:	6a3b      	ldr	r3, [r7, #32]
 8000bb4:	0a19      	lsrs	r1, r3, #8
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	1c5a      	adds	r2, r3, #1
 8000bba:	617a      	str	r2, [r7, #20]
 8000bbc:	b2ca      	uxtb	r2, r1
 8000bbe:	701a      	strb	r2, [r3, #0]
	*ptr++ = (lease_time >> 0) & 0xFF;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	1c5a      	adds	r2, r3, #1
 8000bc4:	617a      	str	r2, [r7, #20]
 8000bc6:	6a3a      	ldr	r2, [r7, #32]
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	701a      	strb	r2, [r3, #0]

	/* subnet mask */
	*ptr++ = DHCP_SUBNETMASK;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	617a      	str	r2, [r7, #20]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
	*ptr++ = 4;
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	1c5a      	adds	r2, r3, #1
 8000bda:	617a      	str	r2, [r7, #20]
 8000bdc:	2204      	movs	r2, #4
 8000bde:	701a      	strb	r2, [r3, #0]
	*(uint32_t *)ptr = subnet;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000be4:	601a      	str	r2, [r3, #0]
	ptr += 4;
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3304      	adds	r3, #4
 8000bea:	617b      	str	r3, [r7, #20]

	/* router */
	if (router != 0)
 8000bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d00f      	beq.n	8000c12 <dhcpserver_fillOptions+0xe2>
	{
		*ptr++ = DHCP_ROUTER;
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	617a      	str	r2, [r7, #20]
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	701a      	strb	r2, [r3, #0]
		*ptr++ = 4;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	1c5a      	adds	r2, r3, #1
 8000c00:	617a      	str	r2, [r7, #20]
 8000c02:	2204      	movs	r2, #4
 8000c04:	701a      	strb	r2, [r3, #0]
		*(uint32_t *)ptr = router;
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c0a:	601a      	str	r2, [r3, #0]
		ptr += 4;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	3304      	adds	r3, #4
 8000c10:	617b      	str	r3, [r7, #20]
	}

	/* domain name */
	if (domain != NULL)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d019      	beq.n	8000c4c <dhcpserver_fillOptions+0x11c>
	{
		int len = strlen(domain);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff faf9 	bl	8000210 <strlen>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	613b      	str	r3, [r7, #16]
		*ptr++ = DHCP_DNSDOMAIN;
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	1c5a      	adds	r2, r3, #1
 8000c26:	617a      	str	r2, [r7, #20]
 8000c28:	220f      	movs	r2, #15
 8000c2a:	701a      	strb	r2, [r3, #0]
		*ptr++ = len;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	617a      	str	r2, [r7, #20]
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	701a      	strb	r2, [r3, #0]
		memcpy(ptr, domain, len);
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	6978      	ldr	r0, [r7, #20]
 8000c40:	f015 f87f 	bl	8015d42 <memcpy>
		ptr += len;
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	4413      	add	r3, r2
 8000c4a:	617b      	str	r3, [r7, #20]
	}

	/* domain name server (DNS) */
	if (dns != 0)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d00f      	beq.n	8000c72 <dhcpserver_fillOptions+0x142>
	{
		*ptr++ = DHCP_DNSSERVER;
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	1c5a      	adds	r2, r3, #1
 8000c56:	617a      	str	r2, [r7, #20]
 8000c58:	2206      	movs	r2, #6
 8000c5a:	701a      	strb	r2, [r3, #0]
		*ptr++ = 4;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	1c5a      	adds	r2, r3, #1
 8000c60:	617a      	str	r2, [r7, #20]
 8000c62:	2204      	movs	r2, #4
 8000c64:	701a      	strb	r2, [r3, #0]
		*(uint32_t *)ptr = dns;
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	683a      	ldr	r2, [r7, #0]
 8000c6a:	601a      	str	r2, [r3, #0]
		ptr += 4;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	3304      	adds	r3, #4
 8000c70:	617b      	str	r3, [r7, #20]
	}

	/* end */
	*ptr++ = DHCP_END;
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	1c5a      	adds	r2, r3, #1
 8000c76:	617a      	str	r2, [r7, #20]
 8000c78:	22ff      	movs	r2, #255	@ 0xff
 8000c7a:	701a      	strb	r2, [r3, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <dhcpserver_findOption>:
/// \param     [in]  uint16_t size
/// \param     [in]  uint8_t attr
///
/// \return    0 = error, 1 = free, 2 = not free
static uint8_t *dhcpserver_findOption( uint8_t *attrs, uint16_t size, uint8_t attr )
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	807b      	strh	r3, [r7, #2]
 8000c90:	4613      	mov	r3, r2
 8000c92:	707b      	strb	r3, [r7, #1]
	uint16_t i = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	81fb      	strh	r3, [r7, #14]
   uint16_t next;
	while ((i + 1) < size)
 8000c98:	e01d      	b.n	8000cd6 <dhcpserver_findOption+0x52>
	{
		next = i + attrs[i + 1] + 2;
 8000c9a:	89fb      	ldrh	r3, [r7, #14]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	89fb      	ldrh	r3, [r7, #14]
 8000ca8:	4413      	add	r3, r2
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	3302      	adds	r3, #2
 8000cae:	81bb      	strh	r3, [r7, #12]
		if (next > size)
 8000cb0:	89ba      	ldrh	r2, [r7, #12]
 8000cb2:	887b      	ldrh	r3, [r7, #2]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d901      	bls.n	8000cbc <dhcpserver_findOption+0x38>
      {
         return NULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	e012      	b.n	8000ce2 <dhcpserver_findOption+0x5e>
      }
		if (attrs[i] == attr)
 8000cbc:	89fb      	ldrh	r3, [r7, #14]
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	787a      	ldrb	r2, [r7, #1]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d103      	bne.n	8000cd2 <dhcpserver_findOption+0x4e>
      {
			return attrs + i;
 8000cca:	89fb      	ldrh	r3, [r7, #14]
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	4413      	add	r3, r2
 8000cd0:	e007      	b.n	8000ce2 <dhcpserver_findOption+0x5e>
      }
		i = next;
 8000cd2:	89bb      	ldrh	r3, [r7, #12]
 8000cd4:	81fb      	strh	r3, [r7, #14]
	while ((i + 1) < size)
 8000cd6:	89fb      	ldrh	r3, [r7, #14]
 8000cd8:	1c5a      	adds	r2, r3, #1
 8000cda:	887b      	ldrh	r3, [r7, #2]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	dbdc      	blt.n	8000c9a <dhcpserver_findOption+0x16>
	}
	return NULL;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <dnsserver_init>:
///
/// \param     none
///
/// \return    none
void dnsserver_init( void )
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
   // initialise dns handle task
   dnsserverHandleTaskToNotify = osThreadNew( dnsserver_handle, NULL, &dnsserverHandleTask_attributes );
 8000cf4:	4a04      	ldr	r2, [pc, #16]	@ (8000d08 <dnsserver_init+0x18>)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4804      	ldr	r0, [pc, #16]	@ (8000d0c <dnsserver_init+0x1c>)
 8000cfa:	f006 ff1d 	bl	8007b38 <osThreadNew>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	4a03      	ldr	r2, [pc, #12]	@ (8000d10 <dnsserver_init+0x20>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	08016e7c 	.word	0x08016e7c
 8000d0c:	08000d15 	.word	0x08000d15
 8000d10:	20000234 	.word	0x20000234

08000d14 <dnsserver_handle>:
///
/// \param     [in]  void *pvParameters
///
/// \return    none
static void dnsserver_handle( void *pvParameters )
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b0b0      	sub	sp, #192	@ 0xc0
 8000d18:	af02      	add	r7, sp, #8
 8000d1a:	6078      	str	r0, [r7, #4]
   static uint16_t   eintr;   
   static uint16_t   einval; 
   static uint16_t   eelse;
   long              lBytes;
   struct            freertos_sockaddr xClient, xBindAddress;
   uint32_t          xClientLength = sizeof( xClient );
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   Socket_t          xListeningSocket;
   struct            freertos_sockaddr xDestinationAddress;
   DNS_QUERY_t       dnsQuery;
   
   // allocate heap for the transmit and receive message
	pucTxRxBuffer = ( uint8_t * ) pvPortMalloc( TXRXBUFFERSIZE );
 8000d22:	f240 208a 	movw	r0, #650	@ 0x28a
 8000d26:	f00a fa3f 	bl	800b1a8 <pvPortMalloc>
 8000d2a:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
   
   if( pucTxRxBuffer == NULL )
 8000d2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d102      	bne.n	8000d3c <dnsserver_handle+0x28>
   {
      vTaskDelete( NULL );
 8000d36:	2000      	movs	r0, #0
 8000d38:	f008 fb8e 	bl	8009458 <vTaskDelete>
   }
   
   /* Attempt to open the socket. */
   xListeningSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 8000d3c:	2211      	movs	r2, #17
 8000d3e:	2102      	movs	r1, #2
 8000d40:	2002      	movs	r0, #2
 8000d42:	f00d f8a5 	bl	800de90 <FreeRTOS_socket>
 8000d46:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac

   /* Check the socket was created. */
   configASSERT( xListeningSocket != FREERTOS_INVALID_SOCKET );
 8000d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d52:	d10e      	bne.n	8000d72 <dnsserver_handle+0x5e>
	__asm volatile
 8000d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d58:	b672      	cpsid	i
 8000d5a:	f383 8811 	msr	BASEPRI, r3
 8000d5e:	f3bf 8f6f 	isb	sy
 8000d62:	f3bf 8f4f 	dsb	sy
 8000d66:	b662      	cpsie	i
 8000d68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	e7fd      	b.n	8000d6e <dnsserver_handle+0x5a>

   /* Bind to port 53 for dns messages */
   xBindAddress.sin_port = FreeRTOS_htons( 53 );
 8000d72:	f44f 5354 	mov.w	r3, #13568	@ 0x3500
 8000d76:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
   FreeRTOS_bind( xListeningSocket, &xBindAddress, sizeof( xBindAddress ) );
 8000d7a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000d7e:	2208      	movs	r2, #8
 8000d80:	4619      	mov	r1, r3
 8000d82:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8000d86:	f00d fa77 	bl	800e278 <FreeRTOS_bind>
   for( ;; )
   {
       /* Receive data from the socket.  ulFlags is zero, so the standard
       interface is used.  By default the block time is portMAX_DELAY, but it
       can be changed using FreeRTOS_setsockopt(). */
       lengthOfbytes = FreeRTOS_recvfrom( xListeningSocket,
 8000d8a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2300      	movs	r3, #0
 8000d98:	f240 228a 	movw	r2, #650	@ 0x28a
 8000d9c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8000da0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8000da4:	f00d f910 	bl	800dfc8 <FreeRTOS_recvfrom>
 8000da8:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
      //                                   lengthOfbytes = 0                           --> timeout
      //                                   lengthOfbytes = pdFREERTOS_ERRNO_ENOMEM     --> not enough memory on socket
      //                                   lengthOfbytes = pdFREERTOS_ERRNO_ENOTCONN   --> socket was or got closed
      //                                   lengthOfbytes = pdFREERTOS_ERRNO_EINTR      --> if the socket received a signal, causing the read operation to be aborted
      //                                   lengthOfbytes = pdFREERTOS_ERRNO_EINVAL     --> socket is not valid
      if( lengthOfbytes > 0 )
 8000dac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	f340 80b5 	ble.w	8000f20 <dnsserver_handle+0x20c>
      {         
         if( lengthOfbytes <= sizeof(DNS_HEADER_t) )
 8000db6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000dba:	2b0c      	cmp	r3, #12
 8000dbc:	f240 80ee 	bls.w	8000f9c <dnsserver_handle+0x288>
         }

         // extract the name in the payload
         DNS_RESPONSE_t    *dnsresponse;
         DNS_HEADER_t      *dnsheader;
         uint8_t           namequerylength = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
         uint8_t           namequrtyparsed[50] = {0};
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	f107 030c 	add.w	r3, r7, #12
 8000dce:	222e      	movs	r2, #46	@ 0x2e
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f014 ff39 	bl	8015c4a <memset>
         uint8_t           *namequery = pucTxRxBuffer + sizeof(DNS_HEADER_t) + 1;
 8000dd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000ddc:	330d      	adds	r3, #13
 8000dde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
         
         namequerylength = strlen((char const*)namequery);
 8000de2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8000de6:	f7ff fa13 	bl	8000210 <strlen>
 8000dea:	4603      	mov	r3, r0
 8000dec:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
         if( namequerylength > 50 )
 8000df0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8000df4:	2b32      	cmp	r3, #50	@ 0x32
 8000df6:	f200 80d3 	bhi.w	8000fa0 <dnsserver_handle+0x28c>
            // name too long
            continue;
         }
         
         // parse the name query
         for( uint8_t i=0; i<49; i++ )
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
 8000e00:	e038      	b.n	8000e74 <dnsserver_handle+0x160>
         {
            if( namequery[i] <= 0x3f && namequery[i] > 0u )
 8000e02:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8000e06:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8000e0a:	4413      	add	r3, r2
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e10:	d80f      	bhi.n	8000e32 <dnsserver_handle+0x11e>
 8000e12:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8000e16:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d007      	beq.n	8000e32 <dnsserver_handle+0x11e>
            {
               namequrtyparsed[i] = '.';
 8000e22:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8000e26:	33b8      	adds	r3, #184	@ 0xb8
 8000e28:	443b      	add	r3, r7
 8000e2a:	222e      	movs	r2, #46	@ 0x2e
 8000e2c:	f803 2cb0 	strb.w	r2, [r3, #-176]
 8000e30:	e01b      	b.n	8000e6a <dnsserver_handle+0x156>
            }
            else if( namequery[i] == 0 )
 8000e32:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8000e36:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8000e3a:	4413      	add	r3, r2
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d107      	bne.n	8000e52 <dnsserver_handle+0x13e>
            {
               namequrtyparsed[i] = 0;
 8000e42:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8000e46:	33b8      	adds	r3, #184	@ 0xb8
 8000e48:	443b      	add	r3, r7
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f803 2cb0 	strb.w	r2, [r3, #-176]
               break;
 8000e50:	e014      	b.n	8000e7c <dnsserver_handle+0x168>
            }
            else
            {
               namequrtyparsed[i] = namequery[i];
 8000e52:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8000e56:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8000e5a:	441a      	add	r2, r3
 8000e5c:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	33b8      	adds	r3, #184	@ 0xb8
 8000e64:	443b      	add	r3, r7
 8000e66:	f803 2cb0 	strb.w	r2, [r3, #-176]
         for( uint8_t i=0; i<49; i++ )
 8000e6a:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8000e6e:	3301      	adds	r3, #1
 8000e70:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
 8000e74:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8000e78:	2b30      	cmp	r3, #48	@ 0x30
 8000e7a:	d9c2      	bls.n	8000e02 <dnsserver_handle+0xee>
            }
         }
         
         // compare with host name (this device)
         if( memcmp( namequrtyparsed, HOSTNAMEDNS, strlen(HOSTNAMEDNS) ) != 0 )
 8000e7c:	f107 0308 	add.w	r3, r7, #8
 8000e80:	2208      	movs	r2, #8
 8000e82:	4949      	ldr	r1, [pc, #292]	@ (8000fa8 <dnsserver_handle+0x294>)
 8000e84:	4618      	mov	r0, r3
 8000e86:	f014 feb6 	bl	8015bf6 <memcmp>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	f040 8089 	bne.w	8000fa4 <dnsserver_handle+0x290>
            // not our hostname
            continue;
         }
         
         // prepare response to query
         dnsheader               = (DNS_HEADER_t*)pucTxRxBuffer;
 8000e92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000e96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
         dnsheader->flags        |= (uint16_t)FLAG_QRESPONSE;
 8000e9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000e9e:	885b      	ldrh	r3, [r3, #2]
 8000ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000eaa:	805a      	strh	r2, [r3, #2]
         dnsheader->n_record[1]  = FreeRTOS_htons(1);
 8000eac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000eb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eb4:	80da      	strh	r2, [r3, #6]
         dnsresponse             = (DNS_RESPONSE_t*)(pucTxRxBuffer+lengthOfbytes);
 8000eb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000eba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8000ebe:	4413      	add	r3, r2
 8000ec0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
         dnsresponse->name       = FreeRTOS_htons(0xC00C);
 8000ec4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000ec8:	f44f 624c 	mov.w	r2, #3264	@ 0xcc0
 8000ecc:	801a      	strh	r2, [r3, #0]
         dnsresponse->type       = FreeRTOS_htons(1);
 8000ece:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000ed2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ed6:	805a      	strh	r2, [r3, #2]
         dnsresponse->dnsclass   = FreeRTOS_htons(1);
 8000ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000edc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ee0:	809a      	strh	r2, [r3, #4]
         dnsresponse->ttl        = FreeRTOS_htonl(32);
 8000ee2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000ee6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000eea:	609a      	str	r2, [r3, #8]
         dnsresponse->len        = FreeRTOS_htons(4);
 8000eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000ef0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ef4:	819a      	strh	r2, [r3, #12]
         dnsresponse->addr       = FreeRTOS_inet_addr_quick( IP1, IP2, IP3, IP4 );
 8000ef6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000efa:	4a2c      	ldr	r2, [pc, #176]	@ (8000fac <dnsserver_handle+0x298>)
 8000efc:	611a      	str	r2, [r3, #16]

         // send the query response
         FreeRTOS_sendto( xListeningSocket, pucTxRxBuffer, lengthOfbytes+sizeof(DNS_RESPONSE_t), 0, &xClient, sizeof( xClient ) );
 8000efe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f02:	f103 0214 	add.w	r2, r3, #20
 8000f06:	2308      	movs	r3, #8
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8000f16:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8000f1a:	f00d f904 	bl	800e126 <FreeRTOS_sendto>
 8000f1e:	e734      	b.n	8000d8a <dnsserver_handle+0x76>
      }
      else if( lengthOfbytes == 0 )
 8000f20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d106      	bne.n	8000f36 <dnsserver_handle+0x222>
      {
         // No data was received, but FreeRTOS_recv() did not return an error. Timeout?
         etimeout++;
 8000f28:	4b21      	ldr	r3, [pc, #132]	@ (8000fb0 <dnsserver_handle+0x29c>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb0 <dnsserver_handle+0x29c>)
 8000f32:	801a      	strh	r2, [r3, #0]
 8000f34:	e729      	b.n	8000d8a <dnsserver_handle+0x76>
      }
      else if( lengthOfbytes == pdFREERTOS_ERRNO_ENOMEM )                                                                                        
 8000f36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f3a:	2b0c      	cmp	r3, #12
 8000f3c:	d106      	bne.n	8000f4c <dnsserver_handle+0x238>
      {                                                                                                                    
         // Error (maybe the connected socket already shut down the socket?). Attempt graceful shutdown.                   
         enomem++;
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb4 <dnsserver_handle+0x2a0>)
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <dnsserver_handle+0x2a0>)
 8000f48:	801a      	strh	r2, [r3, #0]
 8000f4a:	e71e      	b.n	8000d8a <dnsserver_handle+0x76>
      } 
      else if( lengthOfbytes == pdFREERTOS_ERRNO_ENOTCONN )                                                                   
 8000f4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f50:	2b80      	cmp	r3, #128	@ 0x80
 8000f52:	d106      	bne.n	8000f62 <dnsserver_handle+0x24e>
      {                                                                                                                       
         // Error (maybe the connected socket already shut down the socket?). Attempt graceful shutdown.                      
         enotconn++;
 8000f54:	4b18      	ldr	r3, [pc, #96]	@ (8000fb8 <dnsserver_handle+0x2a4>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <dnsserver_handle+0x2a4>)
 8000f5e:	801a      	strh	r2, [r3, #0]
 8000f60:	e713      	b.n	8000d8a <dnsserver_handle+0x76>
      } 
      else if( lengthOfbytes == pdFREERTOS_ERRNO_EINTR )                                                                      
 8000f62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	d106      	bne.n	8000f78 <dnsserver_handle+0x264>
      {                                                                                                                       
         // Error (maybe the connected socket already shut down the socket?). Attempt graceful shutdown.                      
         eintr++;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	@ (8000fbc <dnsserver_handle+0x2a8>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <dnsserver_handle+0x2a8>)
 8000f74:	801a      	strh	r2, [r3, #0]
 8000f76:	e708      	b.n	8000d8a <dnsserver_handle+0x76>
      } 
      else if( lengthOfbytes == pdFREERTOS_ERRNO_EINVAL )                                                                      
 8000f78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000f7c:	2b16      	cmp	r3, #22
 8000f7e:	d106      	bne.n	8000f8e <dnsserver_handle+0x27a>
      {                                                                                                                       
         // Error (maybe the connected socket already shut down the socket?). Attempt graceful shutdown.                      
         einval++;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <dnsserver_handle+0x2ac>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	3301      	adds	r3, #1
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc0 <dnsserver_handle+0x2ac>)
 8000f8a:	801a      	strh	r2, [r3, #0]
 8000f8c:	e6fd      	b.n	8000d8a <dnsserver_handle+0x76>
      } 
      else
      {                                                                                                                       
         // Error (maybe the connected socket already shut down the socket?). Attempt graceful shutdown.                      
         eelse++;
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <dnsserver_handle+0x2b0>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	3301      	adds	r3, #1
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <dnsserver_handle+0x2b0>)
 8000f98:	801a      	strh	r2, [r3, #0]
 8000f9a:	e6f6      	b.n	8000d8a <dnsserver_handle+0x76>
            continue;
 8000f9c:	bf00      	nop
 8000f9e:	e6f4      	b.n	8000d8a <dnsserver_handle+0x76>
            continue;
 8000fa0:	bf00      	nop
 8000fa2:	e6f2      	b.n	8000d8a <dnsserver_handle+0x76>
            continue;
 8000fa4:	bf00      	nop
       lengthOfbytes = FreeRTOS_recvfrom( xListeningSocket,
 8000fa6:	e6f0      	b.n	8000d8a <dnsserver_handle+0x76>
 8000fa8:	08016ce8 	.word	0x08016ce8
 8000fac:	0102a8c0 	.word	0x0102a8c0
 8000fb0:	20000238 	.word	0x20000238
 8000fb4:	2000023a 	.word	0x2000023a
 8000fb8:	2000023c 	.word	0x2000023c
 8000fbc:	2000023e 	.word	0x2000023e
 8000fc0:	20000240 	.word	0x20000240
 8000fc4:	20000242 	.word	0x20000242

08000fc8 <HAL_ETH_Init>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Init( ETH_HandleTypeDef * heth )
        {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg = 0uL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
            uint32_t hclk = 60000000uL;
 8000fd4:	4b49      	ldr	r3, [pc, #292]	@ (80010fc <HAL_ETH_Init+0x134>)
 8000fd6:	613b      	str	r3, [r7, #16]
            uint32_t err = ETH_SUCCESS;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]

            /* Check the ETH peripheral state */
            if( heth == NULL )
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <HAL_ETH_Init+0x1e>
            {
                return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e086      	b.n	80010f4 <HAL_ETH_Init+0x12c>
            assert_param( IS_ETH_AUTONEGOTIATION( heth->Init.AutoNegotiation ) );
            assert_param( IS_ETH_RX_MODE( heth->Init.RxMode ) );
            assert_param( IS_ETH_CHECKSUM_MODE( heth->Init.ChecksumMode ) );
            assert_param( IS_ETH_MEDIA_INTERFACE( heth->Init.MediaInterface ) );

            if( heth->State == HAL_ETH_STATE_RESET )
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <HAL_ETH_Init+0x30>
            {
                /* Init the low level hardware : GPIO, CLOCK, NVIC. */
                HAL_ETH_MspInit( heth );
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 f890 	bl	8001118 <HAL_ETH_MspInit>
            }

            /* Enable SYSCFG Clock */
            __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff8:	4b41      	ldr	r3, [pc, #260]	@ (8001100 <HAL_ETH_Init+0x138>)
 8000ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffc:	4a40      	ldr	r2, [pc, #256]	@ (8001100 <HAL_ETH_Init+0x138>)
 8000ffe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001002:	6453      	str	r3, [r2, #68]	@ 0x44
 8001004:	4b3e      	ldr	r3, [pc, #248]	@ (8001100 <HAL_ETH_Init+0x138>)
 8001006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]

            /* Select MII or RMII Mode*/
            SYSCFG->PMC &= ~( SYSCFG_PMC_MII_RMII_SEL );
 8001010:	4b3c      	ldr	r3, [pc, #240]	@ (8001104 <HAL_ETH_Init+0x13c>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	4a3b      	ldr	r2, [pc, #236]	@ (8001104 <HAL_ETH_Init+0x13c>)
 8001016:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800101a:	6053      	str	r3, [r2, #4]
            SYSCFG->PMC |= ( uint32_t ) heth->Init.MediaInterface;
 800101c:	4b39      	ldr	r3, [pc, #228]	@ (8001104 <HAL_ETH_Init+0x13c>)
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	4937      	ldr	r1, [pc, #220]	@ (8001104 <HAL_ETH_Init+0x13c>)
 8001026:	4313      	orrs	r3, r2
 8001028:	604b      	str	r3, [r1, #4]

            /* Ethernet Software reset */
            /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
            /* After reset all the registers holds their respective reset values */
            /* Also enable EDFE: Enhanced descriptor format enable. */
            heth->Instance->DMABMR |= ETH_DMABMR_SR | ETH_DMABMR_EDE;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	f043 0381 	orr.w	r3, r3, #129	@ 0x81
 800103c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001040:	6013      	str	r3, [r2, #0]

            /* Wait for software reset */
            while( ( heth->Instance->DMABMR & ETH_DMABMR_SR ) != ( uint32_t ) RESET )
 8001042:	bf00      	nop
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f6      	bne.n	8001044 <HAL_ETH_Init+0x7c>
                /* If your program hangs here, please check the value of 'ipconfigUSE_RMII'. */
            }

            /*-------------------------------- MAC Initialization ----------------------*/
            /* Get the ETHERNET MACMIIAR value */
            tmpreg = heth->Instance->MACMIIAR;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	617b      	str	r3, [r7, #20]
            /* Clear CSR Clock Range CR[2:0] bits */
            tmpreg &= ETH_MACMIIAR_CR_MASK;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	f023 031c 	bic.w	r3, r3, #28
 8001064:	617b      	str	r3, [r7, #20]

            /* Get hclk frequency value (e.g. 168,000,000) */
            hclk = HAL_RCC_GetHCLKFreq();
 8001066:	f003 fd23 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
 800106a:	6138      	str	r0, [r7, #16]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000uL ) && ( hclk < 35000000uL ) )
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4a26      	ldr	r2, [pc, #152]	@ (8001108 <HAL_ETH_Init+0x140>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d908      	bls.n	8001086 <HAL_ETH_Init+0xbe>
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4a25      	ldr	r2, [pc, #148]	@ (800110c <HAL_ETH_Init+0x144>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d804      	bhi.n	8001086 <HAL_ETH_Init+0xbe>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div16;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f043 0308 	orr.w	r3, r3, #8
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e027      	b.n	80010d6 <HAL_ETH_Init+0x10e>
            }
            else if( ( hclk >= 35000000uL ) && ( hclk < 60000000uL ) )
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4a20      	ldr	r2, [pc, #128]	@ (800110c <HAL_ETH_Init+0x144>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d908      	bls.n	80010a0 <HAL_ETH_Init+0xd8>
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4a1a      	ldr	r2, [pc, #104]	@ (80010fc <HAL_ETH_Init+0x134>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d204      	bcs.n	80010a0 <HAL_ETH_Init+0xd8>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div26;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f043 030c 	orr.w	r3, r3, #12
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	e01a      	b.n	80010d6 <HAL_ETH_Init+0x10e>
            }
            else if( ( hclk >= 60000000uL ) && ( hclk < 100000000uL ) )
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4a16      	ldr	r2, [pc, #88]	@ (80010fc <HAL_ETH_Init+0x134>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d303      	bcc.n	80010b0 <HAL_ETH_Init+0xe8>
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4a19      	ldr	r2, [pc, #100]	@ (8001110 <HAL_ETH_Init+0x148>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d911      	bls.n	80010d4 <HAL_ETH_Init+0x10c>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div42;
            }
            else if( ( hclk >= 100000000uL ) && ( hclk < 150000000uL ) )
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4a17      	ldr	r2, [pc, #92]	@ (8001110 <HAL_ETH_Init+0x148>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d908      	bls.n	80010ca <HAL_ETH_Init+0x102>
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4a16      	ldr	r2, [pc, #88]	@ (8001114 <HAL_ETH_Init+0x14c>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d804      	bhi.n	80010ca <HAL_ETH_Init+0x102>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div62;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	e005      	b.n	80010d6 <HAL_ETH_Init+0x10e>
            }
            else /* ( ( hclk >= 150000000uL ) && ( hclk <= 183000000uL ) ) */
            {
                /* CSR Clock Range between 150-183 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div102;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	f043 0310 	orr.w	r3, r3, #16
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	e000      	b.n	80010d6 <HAL_ETH_Init+0x10e>
                tmpreg |= ( uint32_t ) ETH_MACMIIAR_CR_Div42;
 80010d4:	bf00      	nop
            }
            /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
            heth->Instance->MACMIIAR = ( uint32_t ) tmpreg;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	611a      	str	r2, [r3, #16]

            /* Initialise the MACB and set all PHY properties */
            vMACBProbePhy();
 80010de:	f012 fb53 	bl	8013788 <vMACBProbePhy>

            /* Config MAC and DMA */
            ETH_MACDMAConfig( heth, err );
 80010e2:	68f9      	ldr	r1, [r7, #12]
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 faa9 	bl	800163c <ETH_MACDMAConfig>

            /* Set ETH HAL State to Ready */
            heth->State = HAL_ETH_STATE_READY;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2201      	movs	r2, #1
 80010ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

            /* Return function status */
            return HAL_OK;
 80010f2:	2300      	movs	r3, #0
        }
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	03938700 	.word	0x03938700
 8001100:	40023800 	.word	0x40023800
 8001104:	40013800 	.word	0x40013800
 8001108:	01312cff 	.word	0x01312cff
 800110c:	02160ebf 	.word	0x02160ebf
 8001110:	05f5e0ff 	.word	0x05f5e0ff
 8001114:	08f0d17f 	.word	0x08f0d17f

08001118 <HAL_ETH_MspInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_MspInit( ETH_HandleTypeDef * heth )
        {
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_MspInit could be implemented in the user file
             */
            ( void ) heth;
        }
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_ETH_ReadPHYRegister>:
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_ReadPHYRegister( ETH_HandleTypeDef * heth,
                                                   uint16_t PHYReg,
                                                   uint32_t * RegValue )
        {
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	460b      	mov	r3, r1
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	817b      	strh	r3, [r7, #10]
            uint32_t tmpreg = 0uL;
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
            uint32_t tickstart = 0uL;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]

            /* Check parameters */
            assert_param( IS_ETH_PHY_ADDRESS( heth->Init.PhyAddress ) );

            /* Check the ETH peripheral state */
            if( heth->State == HAL_ETH_STATE_BUSY_RD )
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b82      	cmp	r3, #130	@ 0x82
 800114c:	d102      	bne.n	8001154 <HAL_ETH_ReadPHYRegister+0x28>
            {
                xResult = HAL_BUSY;
 800114e:	2302      	movs	r3, #2
 8001150:	77fb      	strb	r3, [r7, #31]
 8001152:	e056      	b.n	8001202 <HAL_ETH_ReadPHYRegister+0xd6>
            }
            else
            {
                __HAL_LOCK( heth );
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800115a:	2b01      	cmp	r3, #1
 800115c:	d101      	bne.n	8001162 <HAL_ETH_ReadPHYRegister+0x36>
 800115e:	2302      	movs	r3, #2
 8001160:	e050      	b.n	8001204 <HAL_ETH_ReadPHYRegister+0xd8>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

                /* Set ETH HAL State to BUSY_RD */
                heth->State = HAL_ETH_STATE_BUSY_RD;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2282      	movs	r2, #130	@ 0x82
 800116e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

                /* Get the ETHERNET MACMIIAR value */
                tmpreg = heth->Instance->MACMIIAR;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	61bb      	str	r3, [r7, #24]

                /* Keep only the CSR Clock Range CR[2:0] bits value */
                tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	f003 031c 	and.w	r3, r3, #28
 8001180:	61bb      	str	r3, [r7, #24]

                /* Prepare the MII address register value */
                tmpreg |= ( ( ( uint32_t ) heth->Init.PhyAddress << 11 ) & ETH_MACMIIAR_PA ); /* Set the PHY device address   */
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	8a1b      	ldrh	r3, [r3, #16]
 8001186:	02db      	lsls	r3, r3, #11
 8001188:	b29b      	uxth	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
                tmpreg |= ( ( ( uint32_t ) PHYReg << 6 ) & ETH_MACMIIAR_MR );                 /* Set the PHY register address */
 8001190:	897b      	ldrh	r3, [r7, #10]
 8001192:	019b      	lsls	r3, r3, #6
 8001194:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
                tmpreg &= ~ETH_MACMIIAR_MW;                                                   /* Set the read mode            */
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	f023 0302 	bic.w	r3, r3, #2
 80011a4:	61bb      	str	r3, [r7, #24]
                tmpreg |= ETH_MACMIIAR_MB;                                                    /* Set the MII Busy bit         */
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	61bb      	str	r3, [r7, #24]

                /* Write the result value into the MII Address register */
                heth->Instance->MACMIIAR = tmpreg;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	611a      	str	r2, [r3, #16]

                /* Get tick */
                tickstart = HAL_GetTick();
 80011b6:	f001 fae9 	bl	800278c <HAL_GetTick>
 80011ba:	6178      	str	r0, [r7, #20]

                /* Check for the Busy flag */
                while( 1 )
                {
                    tmpreg = heth->Instance->MACMIIAR;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	61bb      	str	r3, [r7, #24]

                    if( ( tmpreg & ETH_MACMIIAR_MB ) == 0uL )
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d107      	bne.n	80011de <HAL_ETH_ReadPHYRegister+0xb2>
                    {
                        /* Get MACMIIDR value */
                        *RegValue = ( uint32_t ) heth->Instance->MACMIIDR;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	695a      	ldr	r2, [r3, #20]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	601a      	str	r2, [r3, #0]
                        xResult = HAL_OK;
 80011d8:	2300      	movs	r3, #0
 80011da:	77fb      	strb	r3, [r7, #31]
                        break;
 80011dc:	e009      	b.n	80011f2 <HAL_ETH_ReadPHYRegister+0xc6>
                    }

                    /* Check for the Timeout */
                    if( ( HAL_GetTick() - tickstart ) > PHY_READ_TO )
 80011de:	f001 fad5 	bl	800278c <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011ec:	d3e6      	bcc.n	80011bc <HAL_ETH_ReadPHYRegister+0x90>
                    {
                        xResult = HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	77fb      	strb	r3, [r7, #31]
                        break;
                    }
                }

                /* Set ETH HAL State to READY */
                heth->State = HAL_ETH_STATE_READY;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

                /* Process Unlocked */
                __HAL_UNLOCK( heth );
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            /* Return function status */
            return xResult;
 8001202:	7ffb      	ldrb	r3, [r7, #31]
        }
 8001204:	4618      	mov	r0, r3
 8001206:	3720      	adds	r7, #32
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_ETH_WritePHYRegister>:
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_WritePHYRegister( ETH_HandleTypeDef * heth,
                                                    uint16_t PHYReg,
                                                    uint32_t RegValue )
        {
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	460b      	mov	r3, r1
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	817b      	strh	r3, [r7, #10]
            uint32_t tmpreg = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
            uint32_t tickstart = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]

            /* Check parameters */
            assert_param( IS_ETH_PHY_ADDRESS( heth->Init.PhyAddress ) );

            /* Check the ETH peripheral state */
            if( heth->State == HAL_ETH_STATE_BUSY_WR )
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b42      	cmp	r3, #66	@ 0x42
 800122c:	d102      	bne.n	8001234 <HAL_ETH_WritePHYRegister+0x28>
            {
                xResult = HAL_BUSY;
 800122e:	2302      	movs	r3, #2
 8001230:	77fb      	strb	r3, [r7, #31]
 8001232:	e056      	b.n	80012e2 <HAL_ETH_WritePHYRegister+0xd6>
            }
            else
            {
                __HAL_LOCK( heth );
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800123a:	2b01      	cmp	r3, #1
 800123c:	d101      	bne.n	8001242 <HAL_ETH_WritePHYRegister+0x36>
 800123e:	2302      	movs	r3, #2
 8001240:	e050      	b.n	80012e4 <HAL_ETH_WritePHYRegister+0xd8>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

                /* Set ETH HAL State to BUSY_WR */
                heth->State = HAL_ETH_STATE_BUSY_WR;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2242      	movs	r2, #66	@ 0x42
 800124e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

                /* Get the ETHERNET MACMIIAR value */
                tmpreg = heth->Instance->MACMIIAR;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	61bb      	str	r3, [r7, #24]

                /* Keep only the CSR Clock Range CR[2:0] bits value */
                tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	f003 031c 	and.w	r3, r3, #28
 8001260:	61bb      	str	r3, [r7, #24]

                /* Prepare the MII register address value */
                tmpreg |= ( ( ( uint32_t ) heth->Init.PhyAddress << 11 ) & ETH_MACMIIAR_PA ); /* Set the PHY device address */
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	8a1b      	ldrh	r3, [r3, #16]
 8001266:	02db      	lsls	r3, r3, #11
 8001268:	b29b      	uxth	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
                tmpreg |= ( ( ( uint32_t ) PHYReg << 6 ) & ETH_MACMIIAR_MR );                 /* Set the PHY register address */
 8001270:	897b      	ldrh	r3, [r7, #10]
 8001272:	019b      	lsls	r3, r3, #6
 8001274:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
                tmpreg |= ETH_MACMIIAR_MW;                                                    /* Set the write mode */
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
                tmpreg |= ETH_MACMIIAR_MB;                                                    /* Set the MII Busy bit */
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	61bb      	str	r3, [r7, #24]

                /* Give the value to the MII data register */
                heth->Instance->MACMIIDR = ( uint16_t ) RegValue;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	b29a      	uxth	r2, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	615a      	str	r2, [r3, #20]

                /* Write the result value into the MII Address register */
                heth->Instance->MACMIIAR = tmpreg;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	611a      	str	r2, [r3, #16]

                /* Get tick */
                tickstart = HAL_GetTick();
 80012a0:	f001 fa74 	bl	800278c <HAL_GetTick>
 80012a4:	6178      	str	r0, [r7, #20]

                /* Check for the Busy flag */
                while( 1 )
                {
                    tmpreg = heth->Instance->MACMIIAR;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	61bb      	str	r3, [r7, #24]

                    if( ( tmpreg & ETH_MACMIIAR_MB ) == 0ul )
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <HAL_ETH_WritePHYRegister+0xb2>
                    {
                        xResult = HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	77fb      	strb	r3, [r7, #31]
                        break;
 80012bc:	e009      	b.n	80012d2 <HAL_ETH_WritePHYRegister+0xc6>
                    }

                    /* Check for the Timeout */
                    if( ( HAL_GetTick() - tickstart ) > PHY_WRITE_TO )
 80012be:	f001 fa65 	bl	800278c <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012cc:	d3eb      	bcc.n	80012a6 <HAL_ETH_WritePHYRegister+0x9a>
                    {
                        xResult = HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	77fb      	strb	r3, [r7, #31]
                        break;
                    }
                }

                /* Set ETH HAL State to READY */
                heth->State = HAL_ETH_STATE_READY;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
                /* Process Unlocked */
                __HAL_UNLOCK( heth );
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            /* Return function status */
            return xResult;
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
        }
 80012e4:	4618      	mov	r0, r3
 80012e6:	3720      	adds	r7, #32
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_ETH_Start>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Start( ETH_HandleTypeDef * heth )
        {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
            /* Process Locked */
            __HAL_LOCK( heth );
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d101      	bne.n	8001302 <HAL_ETH_Start+0x16>
 80012fe:	2302      	movs	r3, #2
 8001300:	e01f      	b.n	8001342 <HAL_ETH_Start+0x56>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            /* Set the ETH peripheral state to BUSY */
            heth->State = HAL_ETH_STATE_BUSY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2202      	movs	r2, #2
 800130e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

            /* Enable transmit state machine of the MAC for transmission on the MII */
            ETH_MACTransmissionEnable( heth );
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 fb60 	bl	80019d8 <ETH_MACTransmissionEnable>

            /* Enable receive state machine of the MAC for reception from the MII */
            ETH_MACReceptionEnable( heth );
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 fb81 	bl	8001a20 <ETH_MACReceptionEnable>

            /* Flush Transmit FIFO */
            ETH_FlushTransmitFIFO( heth );
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 fbf8 	bl	8001b14 <ETH_FlushTransmitFIFO>

            /* Start DMA transmission */
            ETH_DMATransmissionEnable( heth );
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 fba1 	bl	8001a6c <ETH_DMATransmissionEnable>

            /* Start DMA reception */
            ETH_DMAReceptionEnable( heth );
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 fbc8 	bl	8001ac0 <ETH_DMAReceptionEnable>

            /* Set the ETH state to READY*/
            heth->State = HAL_ETH_STATE_READY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK( heth );
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            /* Return function status */
            return HAL_OK;
 8001340:	2300      	movs	r3, #0
        }
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_ETH_Stop>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Stop( ETH_HandleTypeDef * heth )
        {
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
            /* Process Locked */
            __HAL_LOCK( heth );
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001358:	2b01      	cmp	r3, #1
 800135a:	d101      	bne.n	8001360 <HAL_ETH_Stop+0x16>
 800135c:	2302      	movs	r3, #2
 800135e:	e01f      	b.n	80013a0 <HAL_ETH_Stop+0x56>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            /* Set the ETH peripheral state to BUSY */
            heth->State = HAL_ETH_STATE_BUSY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2202      	movs	r2, #2
 800136c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

            /* Stop DMA transmission */
            ETH_DMATransmissionDisable( heth );
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 fb90 	bl	8001a96 <ETH_DMATransmissionDisable>

            /* Stop DMA reception */
            ETH_DMAReceptionDisable( heth );
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 fbb7 	bl	8001aea <ETH_DMAReceptionDisable>

            /* Disable receive state machine of the MAC for reception from the MII */
            ETH_MACReceptionDisable( heth );
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 fb62 	bl	8001a46 <ETH_MACReceptionDisable>

            /* Flush Transmit FIFO */
            ETH_FlushTransmitFIFO( heth );
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 fbc6 	bl	8001b14 <ETH_FlushTransmitFIFO>

            /* Disable transmit state machine of the MAC for transmission on the MII */
            ETH_MACTransmissionDisable( heth );
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 fb37 	bl	80019fc <ETH_MACTransmissionDisable>

            /* Set the ETH state*/
            heth->State = HAL_ETH_STATE_READY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK( heth );
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            /* Return function status */
            return HAL_OK;
 800139e:	2300      	movs	r3, #0
        }
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <vRegisterDelay>:

        static void vRegisterDelay()
        {
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
             * 100 Mhz = 160 loops
             *  84 Mhz = 134 loops
             */
        #define WAIT_TIME_NS    1600uL          /* 1.6 microseconds */
        #define CPU_MAX_FREQ    SystemCoreClock /* 84, 100, 168 or 180 MHz */
            uint32_t NOP_COUNT = ( WAIT_TIME_NS * ( CPU_MAX_FREQ / 1000uL ) ) / 1000000uL;
 80013ae:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <vRegisterDelay+0x48>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a10      	ldr	r2, [pc, #64]	@ (80013f4 <vRegisterDelay+0x4c>)
 80013b4:	fba2 2303 	umull	r2, r3, r2, r3
 80013b8:	099b      	lsrs	r3, r3, #6
 80013ba:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80013be:	fb02 f303 	mul.w	r3, r2, r3
 80013c2:	4a0d      	ldr	r2, [pc, #52]	@ (80013f8 <vRegisterDelay+0x50>)
 80013c4:	fba2 2303 	umull	r2, r3, r2, r3
 80013c8:	0c9b      	lsrs	r3, r3, #18
 80013ca:	603b      	str	r3, [r7, #0]

            for( uxCount = NOP_COUNT; uxCount > 0uL; uxCount-- )
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	e003      	b.n	80013da <vRegisterDelay+0x32>
            {
                __NOP();
 80013d2:	bf00      	nop
            for( uxCount = NOP_COUNT; uxCount > 0uL; uxCount-- )
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1f8      	bne.n	80013d2 <vRegisterDelay+0x2a>
            }
        }
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000004 	.word	0x20000004
 80013f4:	10624dd3 	.word	0x10624dd3
 80013f8:	431bde83 	.word	0x431bde83

080013fc <prvWriteMACFCR>:

        static void prvWriteMACFCR( ETH_HandleTypeDef * heth,
                                    uint32_t ulValue )
        {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
            /* Enable the MAC transmission */
            heth->Instance->MACFCR = ulValue;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	619a      	str	r2, [r3, #24]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles.
             * Read it back, wait a ms and */
            ( void ) heth->Instance->MACFCR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	699b      	ldr	r3, [r3, #24]

            vRegisterDelay();
 8001414:	f7ff ffc8 	bl	80013a8 <vRegisterDelay>

            heth->Instance->MACFCR = ulValue;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	619a      	str	r2, [r3, #24]
        }
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <prvWriteDMAOMR>:

        static void prvWriteDMAOMR( ETH_HandleTypeDef * heth,
                                    uint32_t ulValue )
        {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
            /* Enable the MAC transmission */
            heth->Instance->DMAOMR = ulValue;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800143a:	461a      	mov	r2, r3
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	6193      	str	r3, [r2, #24]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles.
             * Read it back, wait a ms and */
            ( void ) heth->Instance->DMAOMR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001448:	699b      	ldr	r3, [r3, #24]

            vRegisterDelay();
 800144a:	f7ff ffad 	bl	80013a8 <vRegisterDelay>

            heth->Instance->DMAOMR = ulValue;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001456:	461a      	mov	r2, r3
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	6193      	str	r3, [r2, #24]
        }
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <prvWriteMACCR>:

        static void prvWriteMACCR( ETH_HandleTypeDef * heth,
                                   uint32_t ulValue )
        {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
            /* Enable the MAC transmission */
            heth->Instance->MACCR = ulValue;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	601a      	str	r2, [r3, #0]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles.
             * Read it back, wait a ms and */
            ( void ) heth->Instance->MACCR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]

            vRegisterDelay();
 800147c:	f7ff ff94 	bl	80013a8 <vRegisterDelay>

            heth->Instance->MACCR = ulValue;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	601a      	str	r2, [r3, #0]
        }
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_ETH_ConfigMAC>:
 * @param  macconf: MAC Configuration structure
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_ConfigMAC( ETH_HandleTypeDef * heth,
                                             ETH_MACInitTypeDef * macconf )
        {
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
            uint32_t tmpreg = 0uL;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]

            /* Process Locked */
            __HAL_LOCK( heth );
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d101      	bne.n	80014ac <HAL_ETH_ConfigMAC+0x1c>
 80014a8:	2302      	movs	r3, #2
 80014aa:	e0c1      	b.n	8001630 <HAL_ETH_ConfigMAC+0x1a0>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            /* Set the ETH peripheral state to BUSY */
            heth->State = HAL_ETH_STATE_BUSY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2202      	movs	r2, #2
 80014b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

            assert_param( IS_ETH_SPEED( heth->Init.Speed ) );
            assert_param( IS_ETH_DUPLEX_MODE( heth->Init.DuplexMode ) );

            if( macconf != NULL )
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 8099 	beq.w	80015f6 <HAL_ETH_ConfigMAC+0x166>
                assert_param( IS_ETH_VLAN_TAG_COMPARISON( macconf->VLANTagComparison ) );
                assert_param( IS_ETH_VLAN_TAG_IDENTIFIER( macconf->VLANTagIdentifier ) );

                /*------------------------ ETHERNET MACCR Configuration --------------------*/
                /* Get the ETHERNET MACCR value */
                tmpreg = heth->Instance->MACCR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	60fb      	str	r3, [r7, #12]
                /* Clear WD, PCE, PS, TE and RE bits */
                tmpreg &= ETH_MACCR_CLEAR_MASK;
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	4b5a      	ldr	r3, [pc, #360]	@ (8001638 <HAL_ETH_ConfigMAC+0x1a8>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]

                tmpreg |= ( uint32_t ) (
                    macconf->Watchdog |
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
                    macconf->Jabber |
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
                    macconf->Watchdog |
 80014dc:	431a      	orrs	r2, r3
                    macconf->InterFrameGap |
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
                    macconf->Jabber |
 80014e2:	431a      	orrs	r2, r3
                    macconf->CarrierSense |
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
                    macconf->InterFrameGap |
 80014e8:	431a      	orrs	r2, r3
                    heth->Init.Speed |
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
                    macconf->CarrierSense |
 80014ee:	431a      	orrs	r2, r3
                    macconf->ReceiveOwn |
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	691b      	ldr	r3, [r3, #16]
                    heth->Init.Speed |
 80014f4:	431a      	orrs	r2, r3
                    macconf->LoopbackMode |
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	695b      	ldr	r3, [r3, #20]
                    macconf->ReceiveOwn |
 80014fa:	431a      	orrs	r2, r3
                    heth->Init.DuplexMode |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
                    macconf->LoopbackMode |
 8001500:	431a      	orrs	r2, r3
                    macconf->ChecksumOffload |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	699b      	ldr	r3, [r3, #24]
                    heth->Init.DuplexMode |
 8001506:	431a      	orrs	r2, r3
                    macconf->RetryTransmission |
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	69db      	ldr	r3, [r3, #28]
                    macconf->ChecksumOffload |
 800150c:	431a      	orrs	r2, r3
                    macconf->AutomaticPadCRCStrip |
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	6a1b      	ldr	r3, [r3, #32]
                    macconf->RetryTransmission |
 8001512:	431a      	orrs	r2, r3
                    macconf->BackOffLimit |
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                    macconf->AutomaticPadCRCStrip |
 8001518:	431a      	orrs	r2, r3
                    macconf->DeferralCheck );
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                    macconf->BackOffLimit |
 800151e:	4313      	orrs	r3, r2
                tmpreg |= ( uint32_t ) (
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]

                /* Write to ETHERNET MACCR */
                prvWriteMACCR( heth, tmpreg );
 8001526:	68f9      	ldr	r1, [r7, #12]
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff9b 	bl	8001464 <prvWriteMACCR>

                /*----------------------- ETHERNET MACFFR Configuration --------------------*/
                /* Write to ETHERNET MACFFR */
                heth->Instance->MACFFR = ( uint32_t ) (
                    macconf->ReceiveAll |
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                    macconf->SourceAddrFilter |
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                    macconf->ReceiveAll |
 8001536:	431a      	orrs	r2, r3
                    macconf->PassControlFrames |
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                    macconf->SourceAddrFilter |
 800153c:	431a      	orrs	r2, r3
                    macconf->BroadcastFramesReception |
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                    macconf->PassControlFrames |
 8001542:	431a      	orrs	r2, r3
                    macconf->DestinationAddrFilter |
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                    macconf->BroadcastFramesReception |
 8001548:	431a      	orrs	r2, r3
                    macconf->PromiscuousMode |
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                    macconf->DestinationAddrFilter |
 800154e:	431a      	orrs	r2, r3
                    macconf->MulticastFramesFilter |
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    macconf->PromiscuousMode |
 8001554:	ea42 0103 	orr.w	r1, r2, r3
                    macconf->UnicastFramesFilter );
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
                heth->Instance->MACFFR = ( uint32_t ) (
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
                    macconf->MulticastFramesFilter |
 8001560:	430a      	orrs	r2, r1
                heth->Instance->MACFFR = ( uint32_t ) (
 8001562:	605a      	str	r2, [r3, #4]

                /* Wait until the write operation will be taken into account :
                 * at least four TX_CLK/RX_CLK clock cycles */
                tmpreg = heth->Instance->MACFFR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	60fb      	str	r3, [r7, #12]
                vRegisterDelay();
 800156c:	f7ff ff1c 	bl	80013a8 <vRegisterDelay>
                heth->Instance->MACFFR = tmpreg;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	605a      	str	r2, [r3, #4]

                /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
                /* Write to ETHERNET MACHTHR */
                heth->Instance->MACHTHR = ( uint32_t ) macconf->HashTableHigh;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001580:	609a      	str	r2, [r3, #8]

                /* Write to ETHERNET MACHTLR */
                heth->Instance->MACHTLR = ( uint32_t ) macconf->HashTableLow;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800158a:	60da      	str	r2, [r3, #12]
                /*----------------------- ETHERNET MACFCR Configuration --------------------*/

                /* Get the ETHERNET MACFCR value */
                tmpreg = heth->Instance->MACFCR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	60fb      	str	r3, [r7, #12]
                /* Clear xx bits */
                tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800159a:	4013      	ands	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]

                tmpreg |= ( uint32_t ) ( (
                                             macconf->PauseTime << 16 ) |
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a2:	041a      	lsls	r2, r3, #16
                                         macconf->ZeroQuantaPause |
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                                             macconf->PauseTime << 16 ) |
 80015a8:	431a      	orrs	r2, r3
                                         macconf->PauseLowThreshold |
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                                         macconf->ZeroQuantaPause |
 80015ae:	431a      	orrs	r2, r3
                                         macconf->UnicastPauseFrameDetect |
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                                         macconf->PauseLowThreshold |
 80015b4:	431a      	orrs	r2, r3
                                         macconf->ReceiveFlowControl |
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                                         macconf->UnicastPauseFrameDetect |
 80015ba:	431a      	orrs	r2, r3
                                         macconf->TransmitFlowControl );
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                                         macconf->ReceiveFlowControl |
 80015c0:	4313      	orrs	r3, r2
                tmpreg |= ( uint32_t ) ( (
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	60fb      	str	r3, [r7, #12]

                /* Write to ETHERNET MACFCR */
                prvWriteMACFCR( heth, tmpreg );
 80015c8:	68f9      	ldr	r1, [r7, #12]
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ff16 	bl	80013fc <prvWriteMACFCR>

                /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
                heth->Instance->MACVLANTR = ( uint32_t ) ( macconf->VLANTagComparison |
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
                                                           macconf->VLANTagIdentifier );
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
                heth->Instance->MACVLANTR = ( uint32_t ) ( macconf->VLANTagComparison |
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	430a      	orrs	r2, r1
 80015de:	61da      	str	r2, [r3, #28]

                /* Wait until the write operation will be taken into account :
                 * at least four TX_CLK/RX_CLK clock cycles */
                tmpreg = heth->Instance->MACVLANTR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	60fb      	str	r3, [r7, #12]
                vRegisterDelay();
 80015e8:	f7ff fede 	bl	80013a8 <vRegisterDelay>
                heth->Instance->MACVLANTR = tmpreg;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	61da      	str	r2, [r3, #28]
 80015f4:	e013      	b.n	800161e <HAL_ETH_ConfigMAC+0x18e>
            }
            else /* macconf == NULL : here we just configure Speed and Duplex mode */
            {
                /*------------------------ ETHERNET MACCR Configuration --------------------*/
                /* Get the ETHERNET MACCR value */
                tmpreg = heth->Instance->MACCR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]

                /* Clear FES and DM bits */
                tmpreg &= ~( ( uint32_t ) 0x00004800uL );
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001604:	60fb      	str	r3, [r7, #12]

                tmpreg |= ( uint32_t ) ( heth->Init.Speed | heth->Init.DuplexMode );
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	4313      	orrs	r3, r2
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]

                /* Write to ETHERNET MACCR */
                prvWriteMACCR( heth, tmpreg );
 8001616:	68f9      	ldr	r1, [r7, #12]
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff23 	bl	8001464 <prvWriteMACCR>
            }

            /* Set the ETH state to Ready */
            heth->State = HAL_ETH_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK( heth );
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            /* Return function status */
            return HAL_OK;
 800162e:	2300      	movs	r3, #0
        }
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	ff20810f 	.word	0xff20810f

0800163c <ETH_MACDMAConfig>:
 * @param  err: Ethernet Init error
 * @retval HAL status
 */
        static void ETH_MACDMAConfig( ETH_HandleTypeDef * heth,
                                      uint32_t err )
        {
 800163c:	b580      	push	{r7, lr}
 800163e:	b0b0      	sub	sp, #192	@ 0xc0
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
            ETH_MACInitTypeDef macinit;
            ETH_DMAInitTypeDef dmainit;
            uint32_t tmpreg = 0uL;
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

            if( err != ETH_SUCCESS ) /* Auto-negotiation failed */
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d007      	beq.n	8001662 <ETH_MACDMAConfig+0x26>
            {
                /* Set Ethernet duplex mode to Full-duplex */
                heth->Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001658:	60da      	str	r2, [r3, #12]

                /* Set Ethernet speed to 100M */
                heth->Init.Speed = ETH_SPEED_100M;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001660:	609a      	str	r2, [r3, #8]
            }

            /* Ethernet MAC default initialization **************************************/
            macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	64bb      	str	r3, [r7, #72]	@ 0x48
            macinit.Jabber = ETH_JABBER_ENABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	64fb      	str	r3, [r7, #76]	@ 0x4c
            macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800166a:	2300      	movs	r3, #0
 800166c:	653b      	str	r3, [r7, #80]	@ 0x50
            macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	657b      	str	r3, [r7, #84]	@ 0x54
            macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	65bb      	str	r3, [r7, #88]	@ 0x58
            macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001676:	2300      	movs	r3, #0
 8001678:	65fb      	str	r3, [r7, #92]	@ 0x5c

            if( heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE )
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d103      	bne.n	800168a <ETH_MACDMAConfig+0x4e>
            {
                macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001682:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001686:	663b      	str	r3, [r7, #96]	@ 0x60
 8001688:	e001      	b.n	800168e <ETH_MACDMAConfig+0x52>
            }
            else
            {
                macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	663b      	str	r3, [r7, #96]	@ 0x60
            }

            macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800168e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001692:	667b      	str	r3, [r7, #100]	@ 0x64
            macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	66bb      	str	r3, [r7, #104]	@ 0x68
            macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001698:	2300      	movs	r3, #0
 800169a:	66fb      	str	r3, [r7, #108]	@ 0x6c
            macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	673b      	str	r3, [r7, #112]	@ 0x70
            macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	677b      	str	r3, [r7, #116]	@ 0x74
            macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	67bb      	str	r3, [r7, #120]	@ 0x78
            macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80016a8:	2340      	movs	r3, #64	@ 0x40
 80016aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
            macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80016be:	2300      	movs	r3, #0
 80016c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            macinit.HashTableHigh = 0x0uL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            macinit.HashTableLow = 0x0uL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
            macinit.PauseTime = 0x0uL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80016dc:	2380      	movs	r3, #128	@ 0x80
 80016de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
            macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
            macinit.VLANTagIdentifier = 0x0uL;
 8001700:	2300      	movs	r3, #0
 8001702:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

            /*------------------------ ETHERNET MACCR Configuration --------------------*/
            /* Get the ETHERNET MACCR value */
            tmpreg = heth->Instance->MACCR;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            /* Clear WD, PCE, PS, TE and RE bits */
            tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001710:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001714:	4b90      	ldr	r3, [pc, #576]	@ (8001958 <ETH_MACDMAConfig+0x31c>)
 8001716:	4013      	ands	r3, r2
 8001718:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            /* Set the IPCO bit according to ETH ChecksumOffload value */
            /* Set the DR bit according to ETH RetryTransmission value */
            /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
            /* Set the BL bit according to ETH BackOffLimit value */
            /* Set the DC bit according to ETH DeferralCheck value */
            tmpreg |= ( uint32_t ) ( macinit.Watchdog |
 800171c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                                     macinit.Jabber |
 800171e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
            tmpreg |= ( uint32_t ) ( macinit.Watchdog |
 8001720:	431a      	orrs	r2, r3
                                     macinit.InterFrameGap |
 8001722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                                     macinit.Jabber |
 8001724:	431a      	orrs	r2, r3
                                     macinit.CarrierSense |
 8001726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                                     macinit.InterFrameGap |
 8001728:	431a      	orrs	r2, r3
                                     heth->Init.Speed |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
                                     macinit.CarrierSense |
 800172e:	431a      	orrs	r2, r3
                                     macinit.ReceiveOwn |
 8001730:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                                     heth->Init.Speed |
 8001732:	431a      	orrs	r2, r3
                                     macinit.LoopbackMode |
 8001734:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                                     macinit.ReceiveOwn |
 8001736:	431a      	orrs	r2, r3
                                     heth->Init.DuplexMode |
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
                                     macinit.LoopbackMode |
 800173c:	431a      	orrs	r2, r3
                                     macinit.ChecksumOffload |
 800173e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                                     heth->Init.DuplexMode |
 8001740:	431a      	orrs	r2, r3
                                     macinit.RetryTransmission |
 8001742:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                                     macinit.ChecksumOffload |
 8001744:	431a      	orrs	r2, r3
                                     macinit.AutomaticPadCRCStrip |
 8001746:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                                     macinit.RetryTransmission |
 8001748:	431a      	orrs	r2, r3
                                     macinit.BackOffLimit |
 800174a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                                     macinit.AutomaticPadCRCStrip |
 800174c:	431a      	orrs	r2, r3
                                     macinit.DeferralCheck );
 800174e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                                     macinit.BackOffLimit |
 8001750:	4313      	orrs	r3, r2
            tmpreg |= ( uint32_t ) ( macinit.Watchdog |
 8001752:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001756:	4313      	orrs	r3, r2
 8001758:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

            /* Write to ETHERNET MACCR */
            prvWriteMACCR( heth, tmpreg );
 800175c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff fe7f 	bl	8001464 <prvWriteMACCR>
            /* Set the DAIF bit according to ETH DestinationAddrFilter value */
            /* Set the PR bit according to ETH PromiscuousMode value */
            /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
            /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
            /* Write to ETHERNET MACFFR */
            heth->Instance->MACFFR = ( uint32_t ) ( macinit.ReceiveAll |
 8001766:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                                    macinit.SourceAddrFilter |
 8001768:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
            heth->Instance->MACFFR = ( uint32_t ) ( macinit.ReceiveAll |
 800176a:	431a      	orrs	r2, r3
                                                    macinit.PassControlFrames |
 800176c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                                    macinit.SourceAddrFilter |
 800176e:	431a      	orrs	r2, r3
                                                    macinit.BroadcastFramesReception |
 8001770:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                                    macinit.PassControlFrames |
 8001774:	431a      	orrs	r2, r3
                                                    macinit.DestinationAddrFilter |
 8001776:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                                    macinit.BroadcastFramesReception |
 800177a:	431a      	orrs	r2, r3
                                                    macinit.PromiscuousMode |
 800177c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                                    macinit.DestinationAddrFilter |
 8001780:	431a      	orrs	r2, r3
                                                    macinit.MulticastFramesFilter |
 8001782:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                                    macinit.PromiscuousMode |
 8001786:	ea42 0103 	orr.w	r1, r2, r3
                                                    macinit.UnicastFramesFilter );
 800178a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
            heth->Instance->MACFFR = ( uint32_t ) ( macinit.ReceiveAll |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
                                                    macinit.MulticastFramesFilter |
 8001792:	430a      	orrs	r2, r1
            heth->Instance->MACFFR = ( uint32_t ) ( macinit.ReceiveAll |
 8001794:	605a      	str	r2, [r3, #4]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles */
            tmpreg = heth->Instance->MACFFR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            vRegisterDelay();
 80017a0:	f7ff fe02 	bl	80013a8 <vRegisterDelay>
            heth->Instance->MACFFR = tmpreg;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80017ac:	605a      	str	r2, [r3, #4]

            /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
            /* Write to ETHERNET MACHTHR */
            heth->Instance->MACHTHR = ( uint32_t ) macinit.HashTableHigh;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80017b6:	609a      	str	r2, [r3, #8]

            /* Write to ETHERNET MACHTLR */
            heth->Instance->MACHTLR = ( uint32_t ) macinit.HashTableLow;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80017c0:	60da      	str	r2, [r3, #12]
            /*----------------------- ETHERNET MACFCR Configuration -------------------*/

            /* Get the ETHERNET MACFCR value */
            tmpreg = heth->Instance->MACFCR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            /* Clear xx bits */
            tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80017cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80017d0:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80017d4:	4013      	ands	r3, r2
 80017d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
            /* Set the PLT bit according to ETH PauseLowThreshold value */
            /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
            /* Set the RFE bit according to ETH ReceiveFlowControl value */
            /* Set the TFE bit according to ETH TransmitFlowControl value */
            tmpreg |= ( uint32_t ) ( ( macinit.PauseTime << 16 ) |
 80017da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80017de:	041a      	lsls	r2, r3, #16
                                     macinit.ZeroQuantaPause |
 80017e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
            tmpreg |= ( uint32_t ) ( ( macinit.PauseTime << 16 ) |
 80017e4:	431a      	orrs	r2, r3
                                     macinit.PauseLowThreshold |
 80017e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                                     macinit.ZeroQuantaPause |
 80017ea:	431a      	orrs	r2, r3
                                     macinit.UnicastPauseFrameDetect |
 80017ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                                     macinit.PauseLowThreshold |
 80017f0:	431a      	orrs	r2, r3
                                     macinit.ReceiveFlowControl |
 80017f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                                     macinit.UnicastPauseFrameDetect |
 80017f6:	431a      	orrs	r2, r3
                                     macinit.TransmitFlowControl );
 80017f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                                     macinit.ReceiveFlowControl |
 80017fc:	4313      	orrs	r3, r2
            tmpreg |= ( uint32_t ) ( ( macinit.PauseTime << 16 ) |
 80017fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001802:	4313      	orrs	r3, r2
 8001804:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

            /* Write to ETHERNET MACFCR */
            prvWriteMACFCR( heth, tmpreg );
 8001808:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff fdf5 	bl	80013fc <prvWriteMACFCR>

            /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
            /* Set the ETV bit according to ETH VLANTagComparison value */
            /* Set the VL bit according to ETH VLANTagIdentifier value */
            heth->Instance->MACVLANTR = ( uint32_t ) ( macinit.VLANTagComparison |
 8001812:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                                       macinit.VLANTagIdentifier );
 8001816:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
            heth->Instance->MACVLANTR = ( uint32_t ) ( macinit.VLANTagComparison |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	61da      	str	r2, [r3, #28]

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles */
            tmpreg = heth->Instance->MACVLANTR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            vRegisterDelay();
 800182c:	f7ff fdbc 	bl	80013a8 <vRegisterDelay>
            heth->Instance->MACVLANTR = tmpreg;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001838:	61da      	str	r2, [r3, #28]

            /* Ethernet DMA default initialization ************************************/
            dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	60bb      	str	r3, [r7, #8]
            dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800183e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001842:	60fb      	str	r3, [r7, #12]
            dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
            dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8001848:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800184c:	617b      	str	r3, [r7, #20]
            dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
            dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
            dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	623b      	str	r3, [r7, #32]
            dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
            dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800185e:	2304      	movs	r3, #4
 8001860:	62bb      	str	r3, [r7, #40]	@ 0x28
            dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001862:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001866:	62fb      	str	r3, [r7, #44]	@ 0x2c
            dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001868:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800186c:	633b      	str	r3, [r7, #48]	@ 0x30
            dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800186e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001872:	637b      	str	r3, [r7, #52]	@ 0x34
            dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001874:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001878:	63bb      	str	r3, [r7, #56]	@ 0x38
            dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800187a:	2380      	movs	r3, #128	@ 0x80
 800187c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            dmainit.DescriptorSkipLength = 0x0uL;
 800187e:	2300      	movs	r3, #0
 8001880:	643b      	str	r3, [r7, #64]	@ 0x40
            dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001882:	2300      	movs	r3, #0
 8001884:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Get the ETHERNET DMAOMR value */
            tmpreg = heth->Instance->DMAOMR;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            /* Clear xx bits */
            tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001894:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001898:	4b30      	ldr	r3, [pc, #192]	@ (800195c <ETH_MACDMAConfig+0x320>)
 800189a:	4013      	ands	r3, r2
 800189c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            /* Set the TTC bit according to ETH TransmitThresholdControl value */
            /* Set the FEF bit according to ETH ForwardErrorFrames value */
            /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
            /* Set the RTC bit according to ETH ReceiveThresholdControl value */
            /* Set the OSF bit according to ETH SecondFrameOperate value */
            tmpreg |= ( uint32_t ) ( dmainit.DropTCPIPChecksumErrorFrame |
 80018a0:	68ba      	ldr	r2, [r7, #8]
                                     dmainit.ReceiveStoreForward |
 80018a2:	68fb      	ldr	r3, [r7, #12]
            tmpreg |= ( uint32_t ) ( dmainit.DropTCPIPChecksumErrorFrame |
 80018a4:	431a      	orrs	r2, r3
                                     dmainit.FlushReceivedFrame |
 80018a6:	693b      	ldr	r3, [r7, #16]
                                     dmainit.ReceiveStoreForward |
 80018a8:	431a      	orrs	r2, r3
                                     dmainit.TransmitStoreForward |
 80018aa:	697b      	ldr	r3, [r7, #20]
                                     dmainit.FlushReceivedFrame |
 80018ac:	431a      	orrs	r2, r3
                                     dmainit.TransmitThresholdControl |
 80018ae:	69bb      	ldr	r3, [r7, #24]
                                     dmainit.TransmitStoreForward |
 80018b0:	431a      	orrs	r2, r3
                                     dmainit.ForwardErrorFrames |
 80018b2:	69fb      	ldr	r3, [r7, #28]
                                     dmainit.TransmitThresholdControl |
 80018b4:	431a      	orrs	r2, r3
                                     dmainit.ForwardUndersizedGoodFrames |
 80018b6:	6a3b      	ldr	r3, [r7, #32]
                                     dmainit.ForwardErrorFrames |
 80018b8:	431a      	orrs	r2, r3
                                     dmainit.ReceiveThresholdControl |
 80018ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                                     dmainit.ForwardUndersizedGoodFrames |
 80018bc:	431a      	orrs	r2, r3
                                     dmainit.SecondFrameOperate );
 80018be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                                     dmainit.ReceiveThresholdControl |
 80018c0:	4313      	orrs	r3, r2
            tmpreg |= ( uint32_t ) ( dmainit.DropTCPIPChecksumErrorFrame |
 80018c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80018c6:	4313      	orrs	r3, r2
 80018c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

            /* Write to ETHERNET DMAOMR */
            prvWriteDMAOMR( heth, tmpreg );
 80018cc:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff fda9 	bl	8001428 <prvWriteDMAOMR>
            /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
            /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
            /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
            /* Set the DSL bit according to ETH DesciptorSkipLength value */
            /* Set the PR and DA bits according to ETH DMAArbitration value */
            heth->Instance->DMABMR = ( uint32_t ) ( dmainit.AddressAlignedBeats |
 80018d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
                                                    dmainit.FixedBurst |
 80018d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
            heth->Instance->DMABMR = ( uint32_t ) ( dmainit.AddressAlignedBeats |
 80018da:	431a      	orrs	r2, r3
                                                    dmainit.RxDMABurstLength | /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80018dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                                    dmainit.FixedBurst |
 80018de:	431a      	orrs	r2, r3
                                                    dmainit.TxDMABurstLength |
 80018e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                                    dmainit.RxDMABurstLength | /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80018e2:	431a      	orrs	r2, r3
                                                    dmainit.EnhancedDescriptorFormat |
 80018e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                                    dmainit.TxDMABurstLength |
 80018e6:	431a      	orrs	r2, r3
                                                    ( dmainit.DescriptorSkipLength << 2 ) |
 80018e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018ea:	009b      	lsls	r3, r3, #2
                                                    dmainit.EnhancedDescriptorFormat |
 80018ec:	431a      	orrs	r2, r3
                                                    dmainit.DMAArbitration |
 80018ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                                    ( dmainit.DescriptorSkipLength << 2 ) |
 80018f0:	4313      	orrs	r3, r2
            heth->Instance->DMABMR = ( uint32_t ) ( dmainit.AddressAlignedBeats |
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018fe:	6013      	str	r3, [r2, #0]
                                                    ETH_DMABMR_USP ); /* Enable use of separate PBL for Rx and Tx */

            /* Wait until the write operation will be taken into account:
             * at least four TX_CLK/RX_CLK clock cycles */
            tmpreg = heth->Instance->DMABMR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            vRegisterDelay();
 800190e:	f7ff fd4b 	bl	80013a8 <vRegisterDelay>
            heth->Instance->DMABMR = tmpreg;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800191a:	461a      	mov	r2, r3
 800191c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001920:	6013      	str	r3, [r2, #0]

            if( heth->Init.RxMode == ETH_RXINTERRUPT_MODE )
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d10b      	bne.n	8001942 <ETH_MACDMAConfig+0x306>
            {
                /* Enable the Ethernet Rx Interrupt */
                __HAL_ETH_DMA_ENABLE_IT( ( heth ), ETH_DMA_IT_NIS | ETH_DMA_IT_R );
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001932:	69d9      	ldr	r1, [r3, #28]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <ETH_MACDMAConfig+0x324>)
 800193a:	430b      	orrs	r3, r1
 800193c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001940:	61d3      	str	r3, [r2, #28]
            }

            /* Initialize MAC address in ethernet MAC */
            ETH_MACAddressConfig( heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr );
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	461a      	mov	r2, r3
 8001948:	2100      	movs	r1, #0
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f80a 	bl	8001964 <ETH_MACAddressConfig>
        }
 8001950:	bf00      	nop
 8001952:	37c0      	adds	r7, #192	@ 0xc0
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	ff20810f 	.word	0xff20810f
 800195c:	f8de3f23 	.word	0xf8de3f23
 8001960:	00010040 	.word	0x00010040

08001964 <ETH_MACAddressConfig>:
 * @retval HAL status
 */
        static void ETH_MACAddressConfig( ETH_HandleTypeDef * heth,
                                          uint32_t MacAddr,
                                          uint8_t * Addr )
        {
 8001964:	b480      	push	{r7}
 8001966:	b087      	sub	sp, #28
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
            /* Check the parameters */
            assert_param( IS_ETH_MAC_ADDRESS0123( MacAddr ) );

            /* Calculate the selected MAC address high register */
            /* Register ETH_MACA0HR: Bit 31 MO: Always 1. */
            tmpreg = 0x80000000uL | ( ( uint32_t ) Addr[ 5 ] << 8 ) | ( uint32_t ) Addr[ 4 ];
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3305      	adds	r3, #5
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	3204      	adds	r2, #4
 800197c:	7812      	ldrb	r2, [r2, #0]
 800197e:	4313      	orrs	r3, r2
 8001980:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001984:	617b      	str	r3, [r7, #20]
            /* Load the selected MAC address high register */
            ( *( __IO uint32_t * ) ( ( uint32_t ) ( ETH_MAC_ADDR_HBASE + MacAddr ) ) ) = tmpreg;
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <ETH_MACAddressConfig+0x6c>)
 800198a:	4413      	add	r3, r2
 800198c:	461a      	mov	r2, r3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	6013      	str	r3, [r2, #0]
            /* Calculate the selected MAC address low register */
            tmpreg = ( ( uint32_t ) Addr[ 3 ] << 24 ) | ( ( uint32_t ) Addr[ 2 ] << 16 ) | ( ( uint32_t ) Addr[ 1 ] << 8 ) | Addr[ 0 ];
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3303      	adds	r3, #3
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	061a      	lsls	r2, r3, #24
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3302      	adds	r3, #2
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	041b      	lsls	r3, r3, #16
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3301      	adds	r3, #1
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	021b      	lsls	r3, r3, #8
 80019ac:	4313      	orrs	r3, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	7812      	ldrb	r2, [r2, #0]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	617b      	str	r3, [r7, #20]

            /* Load the selected MAC address low register */
            ( *( __IO uint32_t * ) ( ( uint32_t ) ( ETH_MAC_ADDR_LBASE + MacAddr ) ) ) = tmpreg;
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <ETH_MACAddressConfig+0x70>)
 80019ba:	4413      	add	r3, r2
 80019bc:	461a      	mov	r2, r3
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	6013      	str	r3, [r2, #0]
        }
 80019c2:	bf00      	nop
 80019c4:	371c      	adds	r7, #28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40028040 	.word	0x40028040
 80019d4:	40028044 	.word	0x40028044

080019d8 <ETH_MACTransmissionEnable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MACTransmissionEnable( ETH_HandleTypeDef * heth )
        {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg = heth->Instance->MACCR | ETH_MACCR_TE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f043 0308 	orr.w	r3, r3, #8
 80019ea:	60fb      	str	r3, [r7, #12]

            prvWriteMACCR( heth, tmpreg );
 80019ec:	68f9      	ldr	r1, [r7, #12]
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff fd38 	bl	8001464 <prvWriteMACCR>
        }
 80019f4:	bf00      	nop
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <ETH_MACTransmissionDisable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MACTransmissionDisable( ETH_HandleTypeDef * heth )
        {
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg = heth->Instance->MACCR & ~( ETH_MACCR_TE );
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 0308 	bic.w	r3, r3, #8
 8001a0e:	60fb      	str	r3, [r7, #12]

            prvWriteMACCR( heth, tmpreg );
 8001a10:	68f9      	ldr	r1, [r7, #12]
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fd26 	bl	8001464 <prvWriteMACCR>
        }
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <ETH_MACReceptionEnable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MACReceptionEnable( ETH_HandleTypeDef * heth )
        {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
            __IO uint32_t tmpreg = heth->Instance->MACCR | ETH_MACCR_RE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	60fb      	str	r3, [r7, #12]

            prvWriteMACCR( heth, tmpreg );
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4619      	mov	r1, r3
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff fd13 	bl	8001464 <prvWriteMACCR>
        }
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <ETH_MACReceptionDisable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MACReceptionDisable( ETH_HandleTypeDef * heth )
        {
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b084      	sub	sp, #16
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
            __IO uint32_t tmpreg = heth->Instance->MACCR & ~( ETH_MACCR_RE );
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	60fb      	str	r3, [r7, #12]

            prvWriteMACCR( heth, tmpreg );
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff fd00 	bl	8001464 <prvWriteMACCR>
        }
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <ETH_DMATransmissionEnable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATransmissionEnable( ETH_HandleTypeDef * heth )
        {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
            /* Enable the DMA transmission */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR | ETH_DMAOMR_ST;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a82:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4619      	mov	r1, r3
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff fccd 	bl	8001428 <prvWriteDMAOMR>
        }
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <ETH_DMATransmissionDisable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATransmissionDisable( ETH_HandleTypeDef * heth )
        {
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
            /* Disable the DMA transmission */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR & ~( ETH_DMAOMR_ST );
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001aac:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fcb8 	bl	8001428 <prvWriteDMAOMR>
        }
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <ETH_DMAReceptionEnable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMAReceptionEnable( ETH_HandleTypeDef * heth )
        {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
            /* Enable the DMA reception */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR | ETH_DMAOMR_SR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f043 0302 	orr.w	r3, r3, #2
 8001ad6:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4619      	mov	r1, r3
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff fca3 	bl	8001428 <prvWriteDMAOMR>
        }
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <ETH_DMAReceptionDisable>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMAReceptionDisable( ETH_HandleTypeDef * heth )
        {
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
            /* Disable the DMA reception */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR & ~( ETH_DMAOMR_SR );
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f023 0302 	bic.w	r3, r3, #2
 8001b00:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4619      	mov	r1, r3
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff fc8e 	bl	8001428 <prvWriteDMAOMR>
        }
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <ETH_FlushTransmitFIFO>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_FlushTransmitFIFO( ETH_HandleTypeDef * heth )
        {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
            /* Set the Flush Transmit FIFO bit */
            __IO uint32_t tmpreg = heth->Instance->DMAOMR | ETH_DMAOMR_FTF;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b2a:	60fb      	str	r3, [r7, #12]

            prvWriteDMAOMR( heth, tmpreg );
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff fc79 	bl	8001428 <prvWriteDMAOMR>
        }
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <main>:
///
/// \return    none


int main( void )
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
   // Reset of all peripherals, Initializes the Flash interface and the Systick.
   HAL_Init();
 8001b44:	f000 fe01 	bl	800274a <HAL_Init>

   // Configure the system clock.
   systemClock_Config();
 8001b48:	f000 f852 	bl	8001bf0 <systemClock_Config>

   // Init peripherals
//   monitor_init();
//   led_init();
   tcpip_init();
 8001b4c:	f000 fca6 	bl	800249c <tcpip_init>
   usb_init();
 8001b50:	f013 f9d6 	bl	8014f00 <usb_init>
   init_btn();
 8001b54:	f000 f82a 	bl	8001bac <init_btn>

//    Set the queue on the tcpip stack io
   tcpQueue.messageDirection  = TCP_TO_USB;
 8001b58:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <main+0x5c>)
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   tcpQueue.output            = usb_output;
 8001b60:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <main+0x5c>)
 8001b62:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba0 <main+0x60>)
 8001b6a:	f8c2 3b34 	str.w	r3, [r2, #2868]	@ 0xb34
   queue_init(&tcpQueue);
 8001b6e:	480b      	ldr	r0, [pc, #44]	@ (8001b9c <main+0x5c>)
 8001b70:	f000 f8ba 	bl	8001ce8 <queue_init>

    //Set the queue on the usb io
   usbQueue.messageDirection   = USB_TO_TCP;
 8001b74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba4 <main+0x64>)
 8001b76:	2204      	movs	r2, #4
 8001b78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   usbQueue.output             = tcpip_output;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <main+0x64>)
 8001b7e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b08      	ldr	r3, [pc, #32]	@ (8001ba8 <main+0x68>)
 8001b86:	f8c2 3b34 	str.w	r3, [r2, #2868]	@ 0xb34
   queue_init(&usbQueue);
 8001b8a:	4806      	ldr	r0, [pc, #24]	@ (8001ba4 <main+0x64>)
 8001b8c:	f000 f8ac 	bl	8001ce8 <queue_init>

   // Init scheduler
   osKernelInitialize();
 8001b90:	f005 ff68 	bl	8007a64 <osKernelInitialize>

   // Start scheduler
   osKernelStart();
 8001b94:	f005 ff9a 	bl	8007acc <osKernelStart>

   // Infinite loop
   while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <main+0x58>
 8001b9c:	20000244 	.word	0x20000244
 8001ba0:	08014fb1 	.word	0x08014fb1
 8001ba4:	20002d7c 	.word	0x20002d7c
 8001ba8:	08002589 	.word	0x08002589

08001bac <init_btn>:
///
/// \param     none
///
/// \return    none
static void init_btn( void )
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
   // Enable GPIOA Clock
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001be8 <init_btn+0x3c>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8001be8 <init_btn+0x3c>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <init_btn+0x3c>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]

   // Configure PA0 as input for getting the btn status.
   GPIO_InitTypeDef  GPIO_InitStruct;
   GPIO_InitStruct.Pin     = GPIO_PIN_0;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	607b      	str	r3, [r7, #4]
   GPIO_InitStruct.Mode    = GPIO_MODE_INPUT;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
   GPIO_InitStruct.Pull    = GPIO_PULLUP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4804      	ldr	r0, [pc, #16]	@ (8001bec <init_btn+0x40>)
 8001bdc:	f000 fee8 	bl	80029b0 <HAL_GPIO_Init>
}
 8001be0:	bf00      	nop
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020000 	.word	0x40020000

08001bf0 <systemClock_Config>:
///
/// \param     none
///
/// \return    none
void systemClock_Config( void )
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b094      	sub	sp, #80	@ 0x50
 8001bf4:	af00      	add	r7, sp, #0
   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bf6:	f107 0320 	add.w	r3, r7, #32
 8001bfa:	2230      	movs	r2, #48	@ 0x30
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f014 f823 	bl	8015c4a <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c04:	f107 030c 	add.w	r3, r7, #12
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]

   /** Configure the main internal regulator output voltage
   */
   __HAL_RCC_PWR_CLK_ENABLE();
 8001c14:	4b26      	ldr	r3, [pc, #152]	@ (8001cb0 <systemClock_Config+0xc0>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c18:	4a25      	ldr	r2, [pc, #148]	@ (8001cb0 <systemClock_Config+0xc0>)
 8001c1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c20:	4b23      	ldr	r3, [pc, #140]	@ (8001cb0 <systemClock_Config+0xc0>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c2c:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <systemClock_Config+0xc4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a20      	ldr	r2, [pc, #128]	@ (8001cb4 <systemClock_Config+0xc4>)
 8001c32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb4 <systemClock_Config+0xc4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
   /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c44:	2301      	movs	r3, #1
 8001c46:	623b      	str	r3, [r7, #32]
   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c4c:	627b      	str	r3, [r7, #36]	@ 0x24
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	63bb      	str	r3, [r7, #56]	@ 0x38
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   RCC_OscInitStruct.PLL.PLLM = 25;
 8001c58:	2319      	movs	r3, #25
 8001c5a:	643b      	str	r3, [r7, #64]	@ 0x40
   RCC_OscInitStruct.PLL.PLLN = 192;
 8001c5c:	23c0      	movs	r3, #192	@ 0xc0
 8001c5e:	647b      	str	r3, [r7, #68]	@ 0x44
   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c60:	2302      	movs	r3, #2
 8001c62:	64bb      	str	r3, [r7, #72]	@ 0x48
   RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c64:	2304      	movs	r3, #4
 8001c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c68:	f107 0320 	add.w	r3, r7, #32
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f002 fac9 	bl	8004204 <HAL_RCC_OscConfig>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <systemClock_Config+0x8c>
   {
      Error_Handler();
 8001c78:	f000 f830 	bl	8001cdc <Error_Handler>
   }
   /** Initializes the CPU, AHB and APB buses clocks
   */
   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c7c:	230f      	movs	r3, #15
 8001c7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c80:	2302      	movs	r3, #2
 8001c82:	613b      	str	r3, [r7, #16]
   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c8c:	61bb      	str	r3, [r7, #24]
   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]

   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	2103      	movs	r1, #3
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f002 fd57 	bl	800474c <HAL_RCC_ClockConfig>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <systemClock_Config+0xb8>
   {
      Error_Handler();
 8001ca4:	f000 f81a 	bl	8001cdc <Error_Handler>
   }
}
 8001ca8:	bf00      	nop
 8001caa:	3750      	adds	r7, #80	@ 0x50
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40007000 	.word	0x40007000

08001cb8 <HAL_TIM_PeriodElapsedCallback>:
///
/// \param     [in]  TIM_HandleTypeDef *htim
///
/// \return    none
void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef *htim )
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
   if (htim->Instance == TIM1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a04      	ldr	r2, [pc, #16]	@ (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d101      	bne.n	8001cce <HAL_TIM_PeriodElapsedCallback+0x16>
   {
      HAL_IncTick();
 8001cca:	f000 fd4b 	bl	8002764 <HAL_IncTick>
   }
   if (htim->Instance == TIM2)
   {
    //  led_set();
   }
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40010000 	.word	0x40010000

08001cdc <Error_Handler>:
///
/// \param     [in]  TIM_HandleTypeDef *htim
///
/// \return    none
void Error_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce0:	b672      	cpsid	i
}
 8001ce2:	bf00      	nop
   // User can add his own implementation to report the HAL error return state
   __disable_irq();
   while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <Error_Handler+0x8>

08001ce8 <queue_init>:
///
/// \param     [in/out] queue_handle_t *queueHandle
///
/// \return    none
void queue_init( queue_handle_t *queueHandle )
{   
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf0:	b672      	cpsid	i
}
 8001cf2:	bf00      	nop
   // disable irq to avoid racing conditions
   __disable_irq(); 
   
   // init statistics to 0
   queueHandle->dataPacketsIN          = 0;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	605a      	str	r2, [r3, #4]
   queueHandle->bytesIN                = 0;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
   queueHandle->dataPacketsOUT         = 0;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
   queueHandle->bytesOUT               = 0;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
   queueHandle->queueFull              = 0;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	619a      	str	r2, [r3, #24]
   queueHandle->queueLengthPeak        = 0;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
   queueHandle->queueLength            = 0;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61da      	str	r2, [r3, #28]
   queueHandle->headIndex              = QUEUELENGTH;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001d24:	461a      	mov	r2, r3
 8001d26:	2307      	movs	r3, #7
 8001d28:	f8c2 3b24 	str.w	r3, [r2, #2852]	@ 0xb24
   queueHandle->tailIndex              = QUEUELENGTH;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001d32:	461a      	mov	r2, r3
 8001d34:	2307      	movs	r3, #7
 8001d36:	f8c2 3b28 	str.w	r3, [r2, #2856]	@ 0xb28
   
   // cleanup the queue
   for( uint8_t i = 0; i < QUEUELENGTH; i++ )
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	73fb      	strb	r3, [r7, #15]
 8001d3e:	e031      	b.n	8001da4 <queue_init+0xbc>
   {
      memset( queueHandle->queue[i].data, 0x00, QUEUEBUFFERLENGTH );
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	f240 6224 	movw	r2, #1572	@ 0x624
 8001d46:	fb02 f303 	mul.w	r3, r2, r3
 8001d4a:	3328      	adds	r3, #40	@ 0x28
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	4413      	add	r3, r2
 8001d50:	f240 621a 	movw	r2, #1562	@ 0x61a
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f013 ff77 	bl	8015c4a <memset>
      queueHandle->queue[i].dataLength       = 0;
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	f240 6124 	movw	r1, #1572	@ 0x624
 8001d64:	fb01 f303 	mul.w	r3, r1, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 63c9 	add.w	r3, r3, #1608	@ 0x648
 8001d6e:	2200      	movs	r2, #0
 8001d70:	801a      	strh	r2, [r3, #0]
      queueHandle->queue[i].messageStatus    = EMPTY_TX;
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	f240 6124 	movw	r1, #1572	@ 0x624
 8001d7a:	fb01 f303 	mul.w	r3, r1, r3
 8001d7e:	4413      	add	r3, r2
 8001d80:	f203 634a 	addw	r3, r3, #1610	@ 0x64a
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
      queueHandle->queue[i].dataStart        = NULL;
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	f240 6124 	movw	r1, #1572	@ 0x624
 8001d90:	fb01 f303 	mul.w	r3, r1, r3
 8001d94:	4413      	add	r3, r2
 8001d96:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
   for( uint8_t i = 0; i < QUEUELENGTH; i++ )
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	3301      	adds	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d9ca      	bls.n	8001d40 <queue_init+0x58>
   
   // queue status - the tail is used to transmitt messages. As long as the
   // peripheral is sending the tail thus the queue status remains TAIL_BLOCKED 
   // because of doing zero opy. After a transmission has been completed the 
   // queue status will be set back to TAIL_UNBLOCKED.
   queueHandle->queueStatus            = TAIL_UNBLOCKED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001db0:	b662      	cpsie	i
}
 8001db2:	bf00      	nop
   
   // disable irq
   __enable_irq(); 
}
 8001db4:	bf00      	nop
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <queue_dequeue>:
///
/// \param     [in/out] queue_handle_t *queueHandle
///
/// \return    none
inline void queue_dequeue( queue_handle_t *queueHandle )
{   
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
   // Transmission complete unblock the tail.
   queueHandle->queueStatus = TAIL_UNBLOCKED;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
  
   if( queueHandle->queue[queueHandle->tailIndex%QUEUELENGTH].messageStatus != PROCESSING_TX )
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001dd0:	f8d3 1b28 	ldr.w	r1, [r3, #2856]	@ 0xb28
 8001dd4:	4b56      	ldr	r3, [pc, #344]	@ (8001f30 <queue_dequeue+0x174>)
 8001dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8001dda:	1aca      	subs	r2, r1, r3
 8001ddc:	0852      	lsrs	r2, r2, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	089a      	lsrs	r2, r3, #2
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	1a9b      	subs	r3, r3, r2
 8001de8:	1aca      	subs	r2, r1, r3
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	f240 6324 	movw	r3, #1572	@ 0x624
 8001df0:	fb02 f303 	mul.w	r3, r2, r3
 8001df4:	440b      	add	r3, r1
 8001df6:	f203 634a 	addw	r3, r3, #1610	@ 0x64a
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d00b      	beq.n	8001e18 <queue_dequeue+0x5c>
   {
      // Spurious error check for debugging
      queueHandle->spuriousError++;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001e06:	f8d3 3b30 	ldr.w	r3, [r3, #2864]	@ 0xb30
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001e12:	f8c2 3b30 	str.w	r3, [r2, #2864]	@ 0xb30
      return;
 8001e16:	e085      	b.n	8001f24 <queue_dequeue+0x168>
   }
   
   // Check if tail and head index are ok.
   if( queueHandle->tailIndex < queueHandle->headIndex )
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001e1e:	f8d3 2b28 	ldr.w	r2, [r3, #2856]	@ 0xb28
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001e28:	f8d3 3b24 	ldr.w	r3, [r3, #2852]	@ 0xb24
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d26e      	bcs.n	8001f0e <queue_dequeue+0x152>
   {
      // Update queue statistics.
      queueHandle->dataPacketsOUT++;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	60da      	str	r2, [r3, #12]
      queueHandle->bytesOUT += queueHandle->queue[queueHandle->tailIndex%QUEUELENGTH].dataLength; // note: this are the frame bytes without preamble and crc value
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6918      	ldr	r0, [r3, #16]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001e44:	f8d3 1b28 	ldr.w	r1, [r3, #2856]	@ 0xb28
 8001e48:	4b39      	ldr	r3, [pc, #228]	@ (8001f30 <queue_dequeue+0x174>)
 8001e4a:	fba3 2301 	umull	r2, r3, r3, r1
 8001e4e:	1aca      	subs	r2, r1, r3
 8001e50:	0852      	lsrs	r2, r2, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	089a      	lsrs	r2, r3, #2
 8001e56:	4613      	mov	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	1a9b      	subs	r3, r3, r2
 8001e5c:	1aca      	subs	r2, r1, r3
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	f240 6324 	movw	r3, #1572	@ 0x624
 8001e64:	fb02 f303 	mul.w	r3, r2, r3
 8001e68:	440b      	add	r3, r1
 8001e6a:	f503 63c9 	add.w	r3, r3, #1608	@ 0x648
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	18c2      	adds	r2, r0, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	611a      	str	r2, [r3, #16]
      
      // Set message status.
      queueHandle->queue[queueHandle->tailIndex%QUEUELENGTH].data[0] = 0x00;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001e7c:	f8d3 1b28 	ldr.w	r1, [r3, #2856]	@ 0xb28
 8001e80:	4b2b      	ldr	r3, [pc, #172]	@ (8001f30 <queue_dequeue+0x174>)
 8001e82:	fba3 2301 	umull	r2, r3, r3, r1
 8001e86:	1aca      	subs	r2, r1, r3
 8001e88:	0852      	lsrs	r2, r2, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	089a      	lsrs	r2, r3, #2
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	1a9b      	subs	r3, r3, r2
 8001e94:	1aca      	subs	r2, r1, r3
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	f240 6324 	movw	r3, #1572	@ 0x624
 8001e9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3328      	adds	r3, #40	@ 0x28
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
      queueHandle->queue[queueHandle->tailIndex%QUEUELENGTH].messageStatus = EMPTY_TX;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001eae:	f8d3 1b28 	ldr.w	r1, [r3, #2856]	@ 0xb28
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f30 <queue_dequeue+0x174>)
 8001eb4:	fba3 2301 	umull	r2, r3, r3, r1
 8001eb8:	1aca      	subs	r2, r1, r3
 8001eba:	0852      	lsrs	r2, r2, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	089a      	lsrs	r2, r3, #2
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	1aca      	subs	r2, r1, r3
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	f240 6324 	movw	r3, #1572	@ 0x624
 8001ece:	fb02 f303 	mul.w	r3, r2, r3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	f203 634a 	addw	r3, r3, #1610	@ 0x64a
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
      
      // Set tail number.
      queueHandle->tailIndex++;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ee2:	f8d3 3b28 	ldr.w	r3, [r3, #2856]	@ 0xb28
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001eee:	f8c2 3b28 	str.w	r3, [r2, #2856]	@ 0xb28
      
      // set queue length
      queueHandle->queueLength = queueHandle->headIndex - queueHandle->tailIndex;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ef8:	f8d3 2b24 	ldr.w	r2, [r3, #2852]	@ 0xb24
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f02:	f8d3 3b28 	ldr.w	r3, [r3, #2856]	@ 0xb28
 8001f06:	1ad2      	subs	r2, r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	61da      	str	r2, [r3, #28]
 8001f0c:	e00a      	b.n	8001f24 <queue_dequeue+0x168>
   }
   else
   {
      queueHandle->tailError++;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f14:	f8d3 3b2c 	ldr.w	r3, [r3, #2860]	@ 0xb2c
 8001f18:	3301      	adds	r3, #1
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001f20:	f8c2 3b2c 	str.w	r3, [r2, #2860]	@ 0xb2c
   }
}
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	24924925 	.word	0x24924925

08001f34 <queue_enqueue>:
///
/// \param     [in/out] queue_handle_t *queueHandle
///
/// \return    uint8_t* data pointer
inline uint8_t* queue_enqueue( uint8_t* dataStart, uint16_t dataLength, queue_handle_t *queueHandle )
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	817b      	strh	r3, [r7, #10]
   // Integer type wrap arround check and set for head and tail index.
   if( queueHandle->headIndex < QUEUELENGTH )
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f48:	f8d3 3b24 	ldr.w	r3, [r3, #2852]	@ 0xb24
 8001f4c:	2b06      	cmp	r3, #6
 8001f4e:	d815      	bhi.n	8001f7c <queue_enqueue+0x48>
   {
      queueHandle->headIndex += QUEUELENGTH;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f56:	f8d3 3b24 	ldr.w	r3, [r3, #2852]	@ 0xb24
 8001f5a:	3307      	adds	r3, #7
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001f62:	f8c2 3b24 	str.w	r3, [r2, #2852]	@ 0xb24
      queueHandle->tailIndex += QUEUELENGTH;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f6c:	f8d3 3b28 	ldr.w	r3, [r3, #2856]	@ 0xb28
 8001f70:	3307      	adds	r3, #7
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001f78:	f8c2 3b28 	str.w	r3, [r2, #2856]	@ 0xb28
   }
   
   // Ringbuffer not full?
   if( (queueHandle->headIndex - queueHandle->tailIndex) < QUEUELENGTH-1 )
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f82:	f8d3 2b24 	ldr.w	r2, [r3, #2852]	@ 0xb24
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f8c:	f8d3 3b28 	ldr.w	r3, [r3, #2856]	@ 0xb28
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b05      	cmp	r3, #5
 8001f94:	f200 8097 	bhi.w	80020c6 <queue_enqueue+0x192>
   {
      // Get actual index in the ringbuffer.
      uint8_t arrayIndex = queueHandle->headIndex%QUEUELENGTH;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f9e:	f8d3 2b24 	ldr.w	r2, [r3, #2852]	@ 0xb24
 8001fa2:	4b5a      	ldr	r3, [pc, #360]	@ (800210c <queue_enqueue+0x1d8>)
 8001fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8001fa8:	1ad1      	subs	r1, r2, r3
 8001faa:	0849      	lsrs	r1, r1, #1
 8001fac:	440b      	add	r3, r1
 8001fae:	0899      	lsrs	r1, r3, #2
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	1a5b      	subs	r3, r3, r1
 8001fb6:	1ad1      	subs	r1, r2, r3
 8001fb8:	460b      	mov	r3, r1
 8001fba:	75fb      	strb	r3, [r7, #23]
      
      // Set data length in the message object.
      queueHandle->queue[arrayIndex].dataLength = dataLength;
 8001fbc:	7dfb      	ldrb	r3, [r7, #23]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	f240 6124 	movw	r1, #1572	@ 0x624
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 63c9 	add.w	r3, r3, #1608	@ 0x648
 8001fce:	897a      	ldrh	r2, [r7, #10]
 8001fd0:	801a      	strh	r2, [r3, #0]
      
      // Set data start pointer in the databuffer of the message object.
      queueHandle->queue[arrayIndex].dataStart = dataStart;
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	f240 6124 	movw	r1, #1572	@ 0x624
 8001fda:	fb01 f303 	mul.w	r3, r1, r3
 8001fde:	4413      	add	r3, r2
 8001fe0:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	601a      	str	r2, [r3, #0]
      
      // Set message status in the message object.
      queueHandle->queue[arrayIndex].messageStatus = READY_FOR_TX;
 8001fe8:	7dfb      	ldrb	r3, [r7, #23]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	f240 6124 	movw	r1, #1572	@ 0x624
 8001ff0:	fb01 f303 	mul.w	r3, r1, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f203 634a 	addw	r3, r3, #1610	@ 0x64a
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
      
      // Update queue statistics.
      queueHandle->frameCounter++;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	615a      	str	r2, [r3, #20]
      queueHandle->dataPacketsIN++;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	605a      	str	r2, [r3, #4]
      queueHandle->bytesIN += dataLength;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	897b      	ldrh	r3, [r7, #10]
 8002018:	441a      	add	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	609a      	str	r2, [r3, #8]
      if( queueHandle->queueLength > queueHandle->queueLengthPeak )
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69da      	ldr	r2, [r3, #28]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	429a      	cmp	r2, r3
 8002028:	d903      	bls.n	8002032 <queue_enqueue+0xfe>
      {
         queueHandle->queueLengthPeak = queueHandle->queueLength;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69da      	ldr	r2, [r3, #28]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	621a      	str	r2, [r3, #32]
      }
      
      // Increment absolute head index
      queueHandle->headIndex++;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002038:	f8d3 3b24 	ldr.w	r3, [r3, #2852]	@ 0xb24
 800203c:	3301      	adds	r3, #1
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002044:	f8c2 3b24 	str.w	r3, [r2, #2852]	@ 0xb24
      
      // set queue length
      queueHandle->queueLength = queueHandle->headIndex - queueHandle->tailIndex;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800204e:	f8d3 2b24 	ldr.w	r2, [r3, #2852]	@ 0xb24
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002058:	f8d3 3b28 	ldr.w	r3, [r3, #2856]	@ 0xb28
 800205c:	1ad2      	subs	r2, r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	61da      	str	r2, [r3, #28]
      
      // Set receiving state on the queue object.
      queueHandle->queue[queueHandle->headIndex%QUEUELENGTH].messageStatus = RECEIVING_RX;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002068:	f8d3 1b24 	ldr.w	r1, [r3, #2852]	@ 0xb24
 800206c:	4b27      	ldr	r3, [pc, #156]	@ (800210c <queue_enqueue+0x1d8>)
 800206e:	fba3 2301 	umull	r2, r3, r3, r1
 8002072:	1aca      	subs	r2, r1, r3
 8002074:	0852      	lsrs	r2, r2, #1
 8002076:	4413      	add	r3, r2
 8002078:	089a      	lsrs	r2, r3, #2
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	1a9b      	subs	r3, r3, r2
 8002080:	1aca      	subs	r2, r1, r3
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	f240 6324 	movw	r3, #1572	@ 0x624
 8002088:	fb02 f303 	mul.w	r3, r2, r3
 800208c:	440b      	add	r3, r1
 800208e:	f203 634a 	addw	r3, r3, #1610	@ 0x64a
 8002092:	2203      	movs	r2, #3
 8002094:	701a      	strb	r2, [r3, #0]

      // Return new pointer.
      return queueHandle->queue[queueHandle->headIndex%QUEUELENGTH].data;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800209c:	f8d3 1b24 	ldr.w	r1, [r3, #2852]	@ 0xb24
 80020a0:	4b1a      	ldr	r3, [pc, #104]	@ (800210c <queue_enqueue+0x1d8>)
 80020a2:	fba3 2301 	umull	r2, r3, r3, r1
 80020a6:	1aca      	subs	r2, r1, r3
 80020a8:	0852      	lsrs	r2, r2, #1
 80020aa:	4413      	add	r3, r2
 80020ac:	089a      	lsrs	r2, r3, #2
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	1a9b      	subs	r3, r3, r2
 80020b4:	1aca      	subs	r2, r1, r3
 80020b6:	f240 6324 	movw	r3, #1572	@ 0x624
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	3328      	adds	r3, #40	@ 0x28
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	e01b      	b.n	80020fe <queue_enqueue+0x1ca>
   }

   // Queue is full, return old pointer.
   queueHandle->queueFull++;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	619a      	str	r2, [r3, #24]
   return queueHandle->queue[queueHandle->headIndex%QUEUELENGTH].data;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80020d6:	f8d3 1b24 	ldr.w	r1, [r3, #2852]	@ 0xb24
 80020da:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <queue_enqueue+0x1d8>)
 80020dc:	fba3 2301 	umull	r2, r3, r3, r1
 80020e0:	1aca      	subs	r2, r1, r3
 80020e2:	0852      	lsrs	r2, r2, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	089a      	lsrs	r2, r3, #2
 80020e8:	4613      	mov	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	1a9b      	subs	r3, r3, r2
 80020ee:	1aca      	subs	r2, r1, r3
 80020f0:	f240 6324 	movw	r3, #1572	@ 0x624
 80020f4:	fb02 f303 	mul.w	r3, r2, r3
 80020f8:	3328      	adds	r3, #40	@ 0x28
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4413      	add	r3, r2
}
 80020fe:	4618      	mov	r0, r3
 8002100:	371c      	adds	r7, #28
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	24924925 	.word	0x24924925

08002110 <queue_getHeadBuffer>:
///
/// \param     [in/out] queue_handle_t *queueHandle
///
/// \return    uint8_t* data pointer
uint8_t* queue_getHeadBuffer( queue_handle_t *queueHandle )
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
   return queueHandle->queue[queueHandle->headIndex%QUEUELENGTH].data;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800211e:	f8d3 1b24 	ldr.w	r1, [r3, #2852]	@ 0xb24
 8002122:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <queue_getHeadBuffer+0x44>)
 8002124:	fba3 2301 	umull	r2, r3, r3, r1
 8002128:	1aca      	subs	r2, r1, r3
 800212a:	0852      	lsrs	r2, r2, #1
 800212c:	4413      	add	r3, r2
 800212e:	089a      	lsrs	r2, r3, #2
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	1a9b      	subs	r3, r3, r2
 8002136:	1aca      	subs	r2, r1, r3
 8002138:	f240 6324 	movw	r3, #1572	@ 0x624
 800213c:	fb02 f303 	mul.w	r3, r2, r3
 8002140:	3328      	adds	r3, #40	@ 0x28
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	4413      	add	r3, r2
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	24924925 	.word	0x24924925

08002158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800215e:	4b11      	ldr	r3, [pc, #68]	@ (80021a4 <HAL_MspInit+0x4c>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	4a10      	ldr	r2, [pc, #64]	@ (80021a4 <HAL_MspInit+0x4c>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002168:	6413      	str	r3, [r2, #64]	@ 0x40
 800216a:	4b0e      	ldr	r3, [pc, #56]	@ (80021a4 <HAL_MspInit+0x4c>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002176:	4b0b      	ldr	r3, [pc, #44]	@ (80021a4 <HAL_MspInit+0x4c>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	4a0a      	ldr	r2, [pc, #40]	@ (80021a4 <HAL_MspInit+0x4c>)
 800217c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002180:	6453      	str	r3, [r2, #68]	@ 0x44
 8002182:	4b08      	ldr	r3, [pc, #32]	@ (80021a4 <HAL_MspInit+0x4c>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800218e:	2200      	movs	r2, #0
 8002190:	210f      	movs	r1, #15
 8002192:	f06f 0001 	mvn.w	r0, #1
 8002196:	f000 fbe1 	bl	800295c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800

080021a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08c      	sub	sp, #48	@ 0x30
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80021b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002278 <HAL_InitTick+0xd0>)
 80021ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002278 <HAL_InitTick+0xd0>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80021c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002278 <HAL_InitTick+0xd0>)
 80021c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021d0:	f107 020c 	add.w	r2, r7, #12
 80021d4:	f107 0310 	add.w	r3, r7, #16
 80021d8:	4611      	mov	r1, r2
 80021da:	4618      	mov	r0, r3
 80021dc:	f002 fc88 	bl	8004af0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80021e0:	f002 fc72 	bl	8004ac8 <HAL_RCC_GetPCLK2Freq>
 80021e4:	4603      	mov	r3, r0
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ec:	4a23      	ldr	r2, [pc, #140]	@ (800227c <HAL_InitTick+0xd4>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	0c9b      	lsrs	r3, r3, #18
 80021f4:	3b01      	subs	r3, #1
 80021f6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80021f8:	4b21      	ldr	r3, [pc, #132]	@ (8002280 <HAL_InitTick+0xd8>)
 80021fa:	4a22      	ldr	r2, [pc, #136]	@ (8002284 <HAL_InitTick+0xdc>)
 80021fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80021fe:	4b20      	ldr	r3, [pc, #128]	@ (8002280 <HAL_InitTick+0xd8>)
 8002200:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002204:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002206:	4a1e      	ldr	r2, [pc, #120]	@ (8002280 <HAL_InitTick+0xd8>)
 8002208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800220c:	4b1c      	ldr	r3, [pc, #112]	@ (8002280 <HAL_InitTick+0xd8>)
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002212:	4b1b      	ldr	r3, [pc, #108]	@ (8002280 <HAL_InitTick+0xd8>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002218:	4b19      	ldr	r3, [pc, #100]	@ (8002280 <HAL_InitTick+0xd8>)
 800221a:	2200      	movs	r2, #0
 800221c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800221e:	4818      	ldr	r0, [pc, #96]	@ (8002280 <HAL_InitTick+0xd8>)
 8002220:	f002 fc98 	bl	8004b54 <HAL_TIM_Base_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800222a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800222e:	2b00      	cmp	r3, #0
 8002230:	d11b      	bne.n	800226a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002232:	4813      	ldr	r0, [pc, #76]	@ (8002280 <HAL_InitTick+0xd8>)
 8002234:	f002 fcf0 	bl	8004c18 <HAL_TIM_Base_Start_IT>
 8002238:	4603      	mov	r3, r0
 800223a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800223e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002242:	2b00      	cmp	r3, #0
 8002244:	d111      	bne.n	800226a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002246:	2019      	movs	r0, #25
 8002248:	f000 fba4 	bl	8002994 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b0f      	cmp	r3, #15
 8002250:	d808      	bhi.n	8002264 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002252:	2200      	movs	r2, #0
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	2019      	movs	r0, #25
 8002258:	f000 fb80 	bl	800295c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800225c:	4a0a      	ldr	r2, [pc, #40]	@ (8002288 <HAL_InitTick+0xe0>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e002      	b.n	800226a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800226a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800226e:	4618      	mov	r0, r3
 8002270:	3730      	adds	r7, #48	@ 0x30
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800
 800227c:	431bde83 	.word	0x431bde83
 8002280:	200058b4 	.word	0x200058b4
 8002284:	40010000 	.word	0x40010000
 8002288:	20000078 	.word	0x20000078

0800228c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <NMI_Handler+0x4>

08002294 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <HardFault_Handler+0x4>

0800229c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a0:	bf00      	nop
 80022a2:	e7fd      	b.n	80022a0 <MemManage_Handler+0x4>

080022a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <BusFault_Handler+0x4>

080022ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <UsageFault_Handler+0x4>

080022b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022c8:	4802      	ldr	r0, [pc, #8]	@ (80022d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80022ca:	f002 fd1d 	bl	8004d08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200058b4 	.word	0x200058b4

080022d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022dc:	4802      	ldr	r0, [pc, #8]	@ (80022e8 <OTG_FS_IRQHandler+0x10>)
 80022de:	f000 fe4b 	bl	8002f78 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20024854 	.word	0x20024854

080022ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return 1;
 80022f0:	2301      	movs	r3, #1
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <_kill>:

int _kill(int pid, int sig)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002306:	f013 fcef 	bl	8015ce8 <__errno>
 800230a:	4603      	mov	r3, r0
 800230c:	2216      	movs	r2, #22
 800230e:	601a      	str	r2, [r3, #0]
  return -1;
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <_exit>:

void _exit (int status)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002324:	f04f 31ff 	mov.w	r1, #4294967295
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ffe7 	bl	80022fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800232e:	bf00      	nop
 8002330:	e7fd      	b.n	800232e <_exit+0x12>

08002332 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	e00a      	b.n	800235a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002344:	f3af 8000 	nop.w
 8002348:	4601      	mov	r1, r0
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	60ba      	str	r2, [r7, #8]
 8002350:	b2ca      	uxtb	r2, r1
 8002352:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	3301      	adds	r3, #1
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	429a      	cmp	r2, r3
 8002360:	dbf0      	blt.n	8002344 <_read+0x12>
  }

  return len;
 8002362:	687b      	ldr	r3, [r7, #4]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	e009      	b.n	8002392 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	60ba      	str	r2, [r7, #8]
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3301      	adds	r3, #1
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	429a      	cmp	r2, r3
 8002398:	dbf1      	blt.n	800237e <_write+0x12>
  }
  return len;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <_close>:

int _close(int file)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023cc:	605a      	str	r2, [r3, #4]
  return 0;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <_isatty>:

int _isatty(int file)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023e4:	2301      	movs	r3, #1
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b085      	sub	sp, #20
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002414:	4a14      	ldr	r2, [pc, #80]	@ (8002468 <_sbrk+0x5c>)
 8002416:	4b15      	ldr	r3, [pc, #84]	@ (800246c <_sbrk+0x60>)
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002420:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002428:	4b11      	ldr	r3, [pc, #68]	@ (8002470 <_sbrk+0x64>)
 800242a:	4a12      	ldr	r2, [pc, #72]	@ (8002474 <_sbrk+0x68>)
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242e:	4b10      	ldr	r3, [pc, #64]	@ (8002470 <_sbrk+0x64>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	429a      	cmp	r2, r3
 800243a:	d207      	bcs.n	800244c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800243c:	f013 fc54 	bl	8015ce8 <__errno>
 8002440:	4603      	mov	r3, r0
 8002442:	220c      	movs	r2, #12
 8002444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295
 800244a:	e009      	b.n	8002460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800244c:	4b08      	ldr	r3, [pc, #32]	@ (8002470 <_sbrk+0x64>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002452:	4b07      	ldr	r3, [pc, #28]	@ (8002470 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	4a05      	ldr	r2, [pc, #20]	@ (8002470 <_sbrk+0x64>)
 800245c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245e:	68fb      	ldr	r3, [r7, #12]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20050000 	.word	0x20050000
 800246c:	00000400 	.word	0x00000400
 8002470:	20005900 	.word	0x20005900
 8002474:	20024e88 	.word	0x20024e88

08002478 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800247c:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <SystemInit+0x20>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002482:	4a05      	ldr	r2, [pc, #20]	@ (8002498 <SystemInit+0x20>)
 8002484:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002488:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <tcpip_init>:
///
/// \param     none
///
/// \return    none
void tcpip_init( void )
{   
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af02      	add	r7, sp, #8
   // init random number generator
   tcpip_rngInit();
 80024a2:	f000 f911 	bl	80026c8 <tcpip_rngInit>
   
   // initialise the TCP/IP stack.
   FreeRTOS_IPInit( ucIPAddressFLASH, ucNetMaskFLASH, ucGatewayAddressFLASH, ucDNSServerAddressFLASH, ucMACAddressFLASH );  
 80024a6:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <tcpip_init+0x30>)
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <tcpip_init+0x34>)
 80024ac:	4a09      	ldr	r2, [pc, #36]	@ (80024d4 <tcpip_init+0x38>)
 80024ae:	490a      	ldr	r1, [pc, #40]	@ (80024d8 <tcpip_init+0x3c>)
 80024b0:	480a      	ldr	r0, [pc, #40]	@ (80024dc <tcpip_init+0x40>)
 80024b2:	f00a fb7b 	bl	800cbac <FreeRTOS_IPInit>
   
   // initialise receive complete task
   tcpip_macTaskToNotify = osThreadNew( tcpip_macTask, NULL, &macReceiveTask_attributes );
 80024b6:	4a0a      	ldr	r2, [pc, #40]	@ (80024e0 <tcpip_init+0x44>)
 80024b8:	2100      	movs	r1, #0
 80024ba:	480a      	ldr	r0, [pc, #40]	@ (80024e4 <tcpip_init+0x48>)
 80024bc:	f005 fb3c 	bl	8007b38 <osThreadNew>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4a09      	ldr	r2, [pc, #36]	@ (80024e8 <tcpip_init+0x4c>)
 80024c4:	6013      	str	r3, [r2, #0]
}
 80024c6:	bf00      	nop
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	08016ebc 	.word	0x08016ebc
 80024d0:	08016ecc 	.word	0x08016ecc
 80024d4:	08016ec8 	.word	0x08016ec8
 80024d8:	08016ec4 	.word	0x08016ec4
 80024dc:	08016eb8 	.word	0x08016eb8
 80024e0:	08016ed0 	.word	0x08016ed0
 80024e4:	080025e5 	.word	0x080025e5
 80024e8:	20005920 	.word	0x20005920

080024ec <vApplicationIPNetworkEventHook>:
///
/// \param     [in]  eIPCallbackEvent_t eNetworkEvent
///
/// \return    none
void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
   static BaseType_t xTasksAlreadyCreated = pdFALSE;

   // If the network has just come up...
   if( eNetworkEvent == eNetworkUp )
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10b      	bne.n	8002514 <vApplicationIPNetworkEventHook+0x28>
   {
      // ...create the tasks that use the IP stack if they have not already been
      // created.
      if( xTasksAlreadyCreated == pdFALSE )
 80024fc:	4b07      	ldr	r3, [pc, #28]	@ (800251c <vApplicationIPNetworkEventHook+0x30>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <vApplicationIPNetworkEventHook+0x28>
      {
         // start webserver
         //httpserver_init();
         
         // start dhcp server
         dhcpserver_init(&dhcpconf);
 8002504:	4806      	ldr	r0, [pc, #24]	@ (8002520 <vApplicationIPNetworkEventHook+0x34>)
 8002506:	f7fe f853 	bl	80005b0 <dhcpserver_init>
         
         // start dns server
         dnsserver_init();
 800250a:	f7fe fbf1 	bl	8000cf0 <dnsserver_init>
      
         // set the task created flag
         xTasksAlreadyCreated = pdTRUE;
 800250e:	4b03      	ldr	r3, [pc, #12]	@ (800251c <vApplicationIPNetworkEventHook+0x30>)
 8002510:	2201      	movs	r2, #1
 8002512:	601a      	str	r2, [r3, #0]
      }
   }
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20005924 	.word	0x20005924
 8002520:	20000060 	.word	0x20000060

08002524 <uxRand>:
///
/// \param     none
///
/// \return    UBaseType_t random number
UBaseType_t uxRand( void )
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
	return tcpip_getRandomNumber();
 8002528:	f000 f8d6 	bl	80026d8 <tcpip_getRandomNumber>
 800252c:	4603      	mov	r3, r0
}
 800252e:	4618      	mov	r0, r3
 8002530:	bd80      	pop	{r7, pc}

08002532 <xApplicationGetRandomNumber>:
///
/// \param     none
///
/// \return    UBaseType_t random number
extern BaseType_t xApplicationGetRandomNumber( uint32_t * pulNumber )
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
   *pulNumber = tcpip_getRandomNumber();
 800253a:	f000 f8cd 	bl	80026d8 <tcpip_getRandomNumber>
 800253e:	4602      	mov	r2, r0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	601a      	str	r2, [r3, #0]
   return pdTRUE;
 8002544:	2301      	movs	r3, #1
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <ulApplicationGetNextSequenceNumber>:
///            [in]  uint32_t ulDestinationAddress
///            [in]  uint16_t usDestinationPort
///
/// \return    uint32_t random number from function uxRand()
extern uint32_t ulApplicationGetNextSequenceNumber( uint32_t ulSourceAddress, uint16_t usSourcePort, uint32_t ulDestinationAddress, uint16_t usDestinationPort )
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	461a      	mov	r2, r3
 800255a:	460b      	mov	r3, r1
 800255c:	817b      	strh	r3, [r7, #10]
 800255e:	4613      	mov	r3, r2
 8002560:	813b      	strh	r3, [r7, #8]
	( void ) ulSourceAddress;
	( void ) usSourcePort;
	( void ) ulDestinationAddress;
	( void ) usDestinationPort;

	return uxRand();
 8002562:	f7ff ffdf 	bl	8002524 <uxRand>
 8002566:	4603      	mov	r3, r0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <pcApplicationHostnameHook>:
/// \param     none
///
/// \return    const char* pointer to device hostname
#if( ipconfigUSE_LLMNR != 0 ) || ( ipconfigUSE_NBNS != 0 ) || ( ipconfigDHCP_REGISTER_HOSTNAME == 1 )
const char *pcApplicationHostnameHook( void )
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
   return mainDEVICE_NICK_NAME;
 8002574:	4b03      	ldr	r3, [pc, #12]	@ (8002584 <pcApplicationHostnameHook+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000008 	.word	0x20000008

08002588 <tcpip_output>:
/// \param     [in] uint8_t* buffer
/// \param     [in] uint16_t length
///
/// \return    0 = not send, 1 = send
uint8_t tcpip_output( uint8_t* buffer, uint16_t length )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	807b      	strh	r3, [r7, #2]
   if( buffer == NULL || length == 0 )
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <tcpip_output+0x18>
 800259a:	887b      	ldrh	r3, [r7, #2]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d104      	bne.n	80025aa <tcpip_output+0x22>
   {
      queue_dequeue( &usbQueue );
 80025a0:	480d      	ldr	r0, [pc, #52]	@ (80025d8 <tcpip_output+0x50>)
 80025a2:	f7ff fc0b 	bl	8001dbc <queue_dequeue>
      return 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	e011      	b.n	80025ce <tcpip_output+0x46>
   }

   if( processingIdle != RESET )
 80025aa:	4b0c      	ldr	r3, [pc, #48]	@ (80025dc <tcpip_output+0x54>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00c      	beq.n	80025cc <tcpip_output+0x44>
   {
      // set states to processing new frame from the mac layer
      currentFrame.data = buffer;
 80025b2:	4a0b      	ldr	r2, [pc, #44]	@ (80025e0 <tcpip_output+0x58>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6013      	str	r3, [r2, #0]
      currentFrame.length = length;
 80025b8:	4a09      	ldr	r2, [pc, #36]	@ (80025e0 <tcpip_output+0x58>)
 80025ba:	887b      	ldrh	r3, [r7, #2]
 80025bc:	8093      	strh	r3, [r2, #4]
      processingIdle = RESET;
 80025be:	4b07      	ldr	r3, [pc, #28]	@ (80025dc <tcpip_output+0x54>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
      tcpip_invokeMacTask();
 80025c4:	f000 f86e 	bl	80026a4 <tcpip_invokeMacTask>
      return 1;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <tcpip_output+0x46>
   }
   
   return 0;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20002d7c 	.word	0x20002d7c
 80025dc:	2000000c 	.word	0x2000000c
 80025e0:	20005918 	.word	0x20005918

080025e4 <tcpip_macTask>:
///
/// \param     [in]  void *pvParameters
///
/// \return    none
static void tcpip_macTask( void *pvParameters )
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
   {
      /* Wait for the Ethernet MAC interrupt to indicate that another packet
      has been received.  The task notification is used in a similar way to a
      counting semaphore to count Rx events, but is a lot more efficient than
      a semaphore. */
      ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
 80025ec:	f04f 31ff 	mov.w	r1, #4294967295
 80025f0:	2000      	movs	r0, #0
 80025f2:	f007 fed5 	bl	800a3a0 <ulTaskNotifyTake>
        
      rxMacCallCounter++;
 80025f6:	4b25      	ldr	r3, [pc, #148]	@ (800268c <tcpip_macTask+0xa8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	3301      	adds	r3, #1
 80025fc:	4a23      	ldr	r2, [pc, #140]	@ (800268c <tcpip_macTask+0xa8>)
 80025fe:	6013      	str	r3, [r2, #0]

      // set the bytes received variable
      xBytesReceived = currentFrame.length;
 8002600:	4b23      	ldr	r3, [pc, #140]	@ (8002690 <tcpip_macTask+0xac>)
 8002602:	889b      	ldrh	r3, [r3, #4]
 8002604:	61fb      	str	r3, [r7, #28]
      xFramePointer = currentFrame.data;
 8002606:	4b22      	ldr	r3, [pc, #136]	@ (8002690 <tcpip_macTask+0xac>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	61bb      	str	r3, [r7, #24]
      
      /* Allocate a network buffer descriptor that points to a buffer
      large enough to hold the received frame.  As this is the simple
      rather than efficient example the received data will just be copied
      into this buffer. */
      pxBufferDescriptor = (NetworkBufferDescriptor_t*)pxGetNetworkBufferWithDescriptor( xBytesReceived, 0 );
 800260c:	2100      	movs	r1, #0
 800260e:	69f8      	ldr	r0, [r7, #28]
 8002610:	f011 febe 	bl	8014390 <pxGetNetworkBufferWithDescriptor>
 8002614:	6178      	str	r0, [r7, #20]
      
      if( pxBufferDescriptor != NULL )
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d026      	beq.n	800266a <tcpip_macTask+0x86>
      {
         // copy data onto the heap release frame from fifo
         memcpy(pxBufferDescriptor->pucEthernetBuffer, (uint8_t*)xFramePointer, xBytesReceived);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	69b9      	ldr	r1, [r7, #24]
 8002624:	4618      	mov	r0, r3
 8002626:	f013 fb8c 	bl	8015d42 <memcpy>
         
         // set the pointer back
         pxBufferDescriptor->xDataLength = xBytesReceived;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	61da      	str	r2, [r3, #28]
         
         /* See if the data contained in the received Ethernet frame needs
         to be processed.  NOTE! It is preferable to do this in
         the interrupt service routine itself, which would remove the need
         to unblock this task for packets that don't need processing. */
         if( eConsiderFrameForProcessing( pxBufferDescriptor->pucEthernetBuffer ) == eProcessBuffer )
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	4618      	mov	r0, r3
 8002636:	f00a fc2d 	bl	800ce94 <eConsiderFrameForProcessing>
 800263a:	4603      	mov	r3, r0
 800263c:	2b01      	cmp	r3, #1
 800263e:	d110      	bne.n	8002662 <tcpip_macTask+0x7e>
         {
            /* The event about to be sent to the TCP/IP is an Rx event. */
            xRxEvent.eEventType = eNetworkRxEvent;
 8002640:	2301      	movs	r3, #1
 8002642:	733b      	strb	r3, [r7, #12]
            
            /* pvData is used to point to the network buffer descriptor that
            now references the received data. */
            xRxEvent.pvData = ( void * ) pxBufferDescriptor;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	613b      	str	r3, [r7, #16]
            
            /* Send the data to the TCP/IP stack. */
            if( xSendEventStructToIPTask( &xRxEvent, 0 ) == pdFALSE )
 8002648:	f107 030c 	add.w	r3, r7, #12
 800264c:	2100      	movs	r1, #0
 800264e:	4618      	mov	r0, r3
 8002650:	f00a fbbc 	bl	800cdcc <xSendEventStructToIPTask>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10c      	bne.n	8002674 <tcpip_macTask+0x90>
            {
               /* The buffer could not be sent to the IP task so the buffer
               must be released. */
               vReleaseNetworkBufferAndDescriptor( pxBufferDescriptor );
 800265a:	6978      	ldr	r0, [r7, #20]
 800265c:	f011 fee8 	bl	8014430 <vReleaseNetworkBufferAndDescriptor>
 8002660:	e008      	b.n	8002674 <tcpip_macTask+0x90>
         }
         else
         {
            /* The Ethernet frame can be dropped, but the Ethernet buffer
            must be released. */
            vReleaseNetworkBufferAndDescriptor( pxBufferDescriptor );
 8002662:	6978      	ldr	r0, [r7, #20]
 8002664:	f011 fee4 	bl	8014430 <vReleaseNetworkBufferAndDescriptor>
 8002668:	e004      	b.n	8002674 <tcpip_macTask+0x90>
      else
      {
         /* The event was lost because a network buffer was not available.
         Call the standard trace macro to log the occurrence. */
         iptraceETHERNET_RX_EVENT_LOST();
         rxMacErrCounter++;
 800266a:	4b0a      	ldr	r3, [pc, #40]	@ (8002694 <tcpip_macTask+0xb0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	3301      	adds	r3, #1
 8002670:	4a08      	ldr	r2, [pc, #32]	@ (8002694 <tcpip_macTask+0xb0>)
 8002672:	6013      	str	r3, [r2, #0]
      }

      // reset the processing frame flag
      processingIdle = SET;
 8002674:	4b08      	ldr	r3, [pc, #32]	@ (8002698 <tcpip_macTask+0xb4>)
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]
      mac_statistic.counterTxFrame++;  // this is likely to send a frame from rndis view
 800267a:	4b08      	ldr	r3, [pc, #32]	@ (800269c <tcpip_macTask+0xb8>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	3301      	adds	r3, #1
 8002680:	4a06      	ldr	r2, [pc, #24]	@ (800269c <tcpip_macTask+0xb8>)
 8002682:	6093      	str	r3, [r2, #8]
      queue_dequeue( &usbQueue );
 8002684:	4806      	ldr	r0, [pc, #24]	@ (80026a0 <tcpip_macTask+0xbc>)
 8002686:	f7ff fb99 	bl	8001dbc <queue_dequeue>
      ulTaskNotifyTake( pdFALSE, portMAX_DELAY );
 800268a:	e7af      	b.n	80025ec <tcpip_macTask+0x8>
 800268c:	20005928 	.word	0x20005928
 8002690:	20005918 	.word	0x20005918
 8002694:	2000592c 	.word	0x2000592c
 8002698:	2000000c 	.word	0x2000000c
 800269c:	20005904 	.word	0x20005904
 80026a0:	20002d7c 	.word	0x20002d7c

080026a4 <tcpip_invokeMacTask>:
///
/// \param     none
///
/// \return    none
static void tcpip_invokeMacTask( void )
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
   if( tcpip_macTaskToNotify != NULL )
 80026a8:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <tcpip_invokeMacTask+0x20>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d006      	beq.n	80026be <tcpip_invokeMacTask+0x1a>
   {
      // Notify to start the emac task to process the next frame from fifo
      xTaskNotifyGive( tcpip_macTaskToNotify );
 80026b0:	4b04      	ldr	r3, [pc, #16]	@ (80026c4 <tcpip_invokeMacTask+0x20>)
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	2300      	movs	r3, #0
 80026b6:	2202      	movs	r2, #2
 80026b8:	2100      	movs	r1, #0
 80026ba:	f007 feb9 	bl	800a430 <xTaskGenericNotify>
   }
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20005920 	.word	0x20005920

080026c8 <tcpip_rngInit>:
///
/// \param     none
///
/// \return    none
static void tcpip_rngInit( void )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
   srand(  (uint32_t)((const uint32_t *)0x48CD)  );
 80026cc:	f644 00cd 	movw	r0, #18637	@ 0x48cd
 80026d0:	f013 f8ec 	bl	80158ac <srand>
}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <tcpip_getRandomNumber>:
///
/// \param     none
///
/// \return    uint32_t random number
static uint32_t tcpip_getRandomNumber( void )
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
   return rand()%0xffffffff;
 80026dc:	f013 f914 	bl	8015908 <rand>
 80026e0:	4603      	mov	r3, r0
 80026e2:	461a      	mov	r2, r3
 80026e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80026e8:	bf2c      	ite	cs
 80026ea:	2301      	movcs	r3, #1
 80026ec:	2300      	movcc	r3, #0
 80026ee:	425b      	negs	r3, r3
 80026f0:	1ad3      	subs	r3, r2, r3
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002730 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026fc:	f7ff febc 	bl	8002478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002700:	480c      	ldr	r0, [pc, #48]	@ (8002734 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002702:	490d      	ldr	r1, [pc, #52]	@ (8002738 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002704:	4a0d      	ldr	r2, [pc, #52]	@ (800273c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002708:	e002      	b.n	8002710 <LoopCopyDataInit>

0800270a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800270a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800270c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800270e:	3304      	adds	r3, #4

08002710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002714:	d3f9      	bcc.n	800270a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002716:	4a0a      	ldr	r2, [pc, #40]	@ (8002740 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002718:	4c0a      	ldr	r4, [pc, #40]	@ (8002744 <LoopFillZerobss+0x22>)
  movs r3, #0
 800271a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800271c:	e001      	b.n	8002722 <LoopFillZerobss>

0800271e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800271e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002720:	3204      	adds	r2, #4

08002722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002724:	d3fb      	bcc.n	800271e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002726:	f013 fae5 	bl	8015cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800272a:	f7ff fa09 	bl	8001b40 <main>
  bx  lr    
 800272e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002730:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002738:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800273c:	080170bc 	.word	0x080170bc
  ldr r2, =_sbss
 8002740:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002744:	20024e88 	.word	0x20024e88

08002748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002748:	e7fe      	b.n	8002748 <ADC_IRQHandler>

0800274a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800274e:	2003      	movs	r0, #3
 8002750:	f000 f8f9 	bl	8002946 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002754:	200f      	movs	r0, #15
 8002756:	f7ff fd27 	bl	80021a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800275a:	f7ff fcfd 	bl	8002158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002768:	4b06      	ldr	r3, [pc, #24]	@ (8002784 <HAL_IncTick+0x20>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <HAL_IncTick+0x24>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4413      	add	r3, r2
 8002774:	4a04      	ldr	r2, [pc, #16]	@ (8002788 <HAL_IncTick+0x24>)
 8002776:	6013      	str	r3, [r2, #0]
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	2000007c 	.word	0x2000007c
 8002788:	20005930 	.word	0x20005930

0800278c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return uwTick;
 8002790:	4b03      	ldr	r3, [pc, #12]	@ (80027a0 <HAL_GetTick+0x14>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20005930 	.word	0x20005930

080027a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027ac:	f7ff ffee 	bl	800278c <HAL_GetTick>
 80027b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027bc:	d005      	beq.n	80027ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027be:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <HAL_Delay+0x44>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ca:	bf00      	nop
 80027cc:	f7ff ffde 	bl	800278c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d8f7      	bhi.n	80027cc <HAL_Delay+0x28>
  {
  }
}
 80027dc:	bf00      	nop
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	2000007c 	.word	0x2000007c

080027ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027fc:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <__NVIC_SetPriorityGrouping+0x40>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002808:	4013      	ands	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002814:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <__NVIC_SetPriorityGrouping+0x44>)
 8002816:	4313      	orrs	r3, r2
 8002818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800281a:	4a04      	ldr	r2, [pc, #16]	@ (800282c <__NVIC_SetPriorityGrouping+0x40>)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	60d3      	str	r3, [r2, #12]
}
 8002820:	bf00      	nop
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000ed00 	.word	0xe000ed00
 8002830:	05fa0000 	.word	0x05fa0000

08002834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002838:	4b04      	ldr	r3, [pc, #16]	@ (800284c <__NVIC_GetPriorityGrouping+0x18>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	f003 0307 	and.w	r3, r3, #7
}
 8002842:	4618      	mov	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	2b00      	cmp	r3, #0
 8002860:	db0b      	blt.n	800287a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	f003 021f 	and.w	r2, r3, #31
 8002868:	4907      	ldr	r1, [pc, #28]	@ (8002888 <__NVIC_EnableIRQ+0x38>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	2001      	movs	r0, #1
 8002872:	fa00 f202 	lsl.w	r2, r0, r2
 8002876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000e100 	.word	0xe000e100

0800288c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	6039      	str	r1, [r7, #0]
 8002896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	2b00      	cmp	r3, #0
 800289e:	db0a      	blt.n	80028b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	490c      	ldr	r1, [pc, #48]	@ (80028d8 <__NVIC_SetPriority+0x4c>)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	0112      	lsls	r2, r2, #4
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	440b      	add	r3, r1
 80028b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b4:	e00a      	b.n	80028cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	4908      	ldr	r1, [pc, #32]	@ (80028dc <__NVIC_SetPriority+0x50>)
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	3b04      	subs	r3, #4
 80028c4:	0112      	lsls	r2, r2, #4
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	440b      	add	r3, r1
 80028ca:	761a      	strb	r2, [r3, #24]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	e000e100 	.word	0xe000e100
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	@ 0x24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f1c3 0307 	rsb	r3, r3, #7
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	bf28      	it	cs
 80028fe:	2304      	movcs	r3, #4
 8002900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3304      	adds	r3, #4
 8002906:	2b06      	cmp	r3, #6
 8002908:	d902      	bls.n	8002910 <NVIC_EncodePriority+0x30>
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3b03      	subs	r3, #3
 800290e:	e000      	b.n	8002912 <NVIC_EncodePriority+0x32>
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	f04f 32ff 	mov.w	r2, #4294967295
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43da      	mvns	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	401a      	ands	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002928:	f04f 31ff 	mov.w	r1, #4294967295
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	43d9      	mvns	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	4313      	orrs	r3, r2
         );
}
 800293a:	4618      	mov	r0, r3
 800293c:	3724      	adds	r7, #36	@ 0x24
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff ff4c 	bl	80027ec <__NVIC_SetPriorityGrouping>
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800296e:	f7ff ff61 	bl	8002834 <__NVIC_GetPriorityGrouping>
 8002972:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	6978      	ldr	r0, [r7, #20]
 800297a:	f7ff ffb1 	bl	80028e0 <NVIC_EncodePriority>
 800297e:	4602      	mov	r2, r0
 8002980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff ff80 	bl	800288c <__NVIC_SetPriority>
}
 800298c:	bf00      	nop
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff ff54 	bl	8002850 <__NVIC_EnableIRQ>
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	@ 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	e175      	b.n	8002cbc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029d0:	2201      	movs	r2, #1
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	f040 8164 	bne.w	8002cb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d005      	beq.n	8002a06 <HAL_GPIO_Init+0x56>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d130      	bne.n	8002a68 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	2203      	movs	r2, #3
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43db      	mvns	r3, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 0201 	and.w	r2, r3, #1
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d017      	beq.n	8002aa4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	2203      	movs	r2, #3
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d123      	bne.n	8002af8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	08da      	lsrs	r2, r3, #3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3208      	adds	r2, #8
 8002ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	220f      	movs	r2, #15
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	08da      	lsrs	r2, r3, #3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3208      	adds	r2, #8
 8002af2:	69b9      	ldr	r1, [r7, #24]
 8002af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	2203      	movs	r2, #3
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0203 	and.w	r2, r3, #3
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 80be 	beq.w	8002cb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3a:	4b66      	ldr	r3, [pc, #408]	@ (8002cd4 <HAL_GPIO_Init+0x324>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3e:	4a65      	ldr	r2, [pc, #404]	@ (8002cd4 <HAL_GPIO_Init+0x324>)
 8002b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b46:	4b63      	ldr	r3, [pc, #396]	@ (8002cd4 <HAL_GPIO_Init+0x324>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b52:	4a61      	ldr	r2, [pc, #388]	@ (8002cd8 <HAL_GPIO_Init+0x328>)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	3302      	adds	r3, #2
 8002b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	220f      	movs	r2, #15
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a58      	ldr	r2, [pc, #352]	@ (8002cdc <HAL_GPIO_Init+0x32c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d037      	beq.n	8002bee <HAL_GPIO_Init+0x23e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a57      	ldr	r2, [pc, #348]	@ (8002ce0 <HAL_GPIO_Init+0x330>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d031      	beq.n	8002bea <HAL_GPIO_Init+0x23a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a56      	ldr	r2, [pc, #344]	@ (8002ce4 <HAL_GPIO_Init+0x334>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d02b      	beq.n	8002be6 <HAL_GPIO_Init+0x236>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a55      	ldr	r2, [pc, #340]	@ (8002ce8 <HAL_GPIO_Init+0x338>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d025      	beq.n	8002be2 <HAL_GPIO_Init+0x232>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a54      	ldr	r2, [pc, #336]	@ (8002cec <HAL_GPIO_Init+0x33c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01f      	beq.n	8002bde <HAL_GPIO_Init+0x22e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a53      	ldr	r2, [pc, #332]	@ (8002cf0 <HAL_GPIO_Init+0x340>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d019      	beq.n	8002bda <HAL_GPIO_Init+0x22a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a52      	ldr	r2, [pc, #328]	@ (8002cf4 <HAL_GPIO_Init+0x344>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <HAL_GPIO_Init+0x226>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a51      	ldr	r2, [pc, #324]	@ (8002cf8 <HAL_GPIO_Init+0x348>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00d      	beq.n	8002bd2 <HAL_GPIO_Init+0x222>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a50      	ldr	r2, [pc, #320]	@ (8002cfc <HAL_GPIO_Init+0x34c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d007      	beq.n	8002bce <HAL_GPIO_Init+0x21e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a4f      	ldr	r2, [pc, #316]	@ (8002d00 <HAL_GPIO_Init+0x350>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d101      	bne.n	8002bca <HAL_GPIO_Init+0x21a>
 8002bc6:	2309      	movs	r3, #9
 8002bc8:	e012      	b.n	8002bf0 <HAL_GPIO_Init+0x240>
 8002bca:	230a      	movs	r3, #10
 8002bcc:	e010      	b.n	8002bf0 <HAL_GPIO_Init+0x240>
 8002bce:	2308      	movs	r3, #8
 8002bd0:	e00e      	b.n	8002bf0 <HAL_GPIO_Init+0x240>
 8002bd2:	2307      	movs	r3, #7
 8002bd4:	e00c      	b.n	8002bf0 <HAL_GPIO_Init+0x240>
 8002bd6:	2306      	movs	r3, #6
 8002bd8:	e00a      	b.n	8002bf0 <HAL_GPIO_Init+0x240>
 8002bda:	2305      	movs	r3, #5
 8002bdc:	e008      	b.n	8002bf0 <HAL_GPIO_Init+0x240>
 8002bde:	2304      	movs	r3, #4
 8002be0:	e006      	b.n	8002bf0 <HAL_GPIO_Init+0x240>
 8002be2:	2303      	movs	r3, #3
 8002be4:	e004      	b.n	8002bf0 <HAL_GPIO_Init+0x240>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e002      	b.n	8002bf0 <HAL_GPIO_Init+0x240>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <HAL_GPIO_Init+0x240>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	f002 0203 	and.w	r2, r2, #3
 8002bf6:	0092      	lsls	r2, r2, #2
 8002bf8:	4093      	lsls	r3, r2
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c00:	4935      	ldr	r1, [pc, #212]	@ (8002cd8 <HAL_GPIO_Init+0x328>)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	089b      	lsrs	r3, r3, #2
 8002c06:	3302      	adds	r3, #2
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d04 <HAL_GPIO_Init+0x354>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c32:	4a34      	ldr	r2, [pc, #208]	@ (8002d04 <HAL_GPIO_Init+0x354>)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c38:	4b32      	ldr	r3, [pc, #200]	@ (8002d04 <HAL_GPIO_Init+0x354>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c5c:	4a29      	ldr	r2, [pc, #164]	@ (8002d04 <HAL_GPIO_Init+0x354>)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c62:	4b28      	ldr	r3, [pc, #160]	@ (8002d04 <HAL_GPIO_Init+0x354>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c86:	4a1f      	ldr	r2, [pc, #124]	@ (8002d04 <HAL_GPIO_Init+0x354>)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d04 <HAL_GPIO_Init+0x354>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cb0:	4a14      	ldr	r2, [pc, #80]	@ (8002d04 <HAL_GPIO_Init+0x354>)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	61fb      	str	r3, [r7, #28]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	2b0f      	cmp	r3, #15
 8002cc0:	f67f ae86 	bls.w	80029d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	3724      	adds	r7, #36	@ 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40013800 	.word	0x40013800
 8002cdc:	40020000 	.word	0x40020000
 8002ce0:	40020400 	.word	0x40020400
 8002ce4:	40020800 	.word	0x40020800
 8002ce8:	40020c00 	.word	0x40020c00
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40021400 	.word	0x40021400
 8002cf4:	40021800 	.word	0x40021800
 8002cf8:	40021c00 	.word	0x40021c00
 8002cfc:	40022000 	.word	0x40022000
 8002d00:	40022400 	.word	0x40022400
 8002d04:	40013c00 	.word	0x40013c00

08002d08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e108      	b.n	8002f2c <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d106      	bne.n	8002d3a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f012 fabf 	bl	80152b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d48:	d102      	bne.n	8002d50 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f002 fade 	bl	8005316 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	7c1a      	ldrb	r2, [r3, #16]
 8002d62:	f88d 2000 	strb.w	r2, [sp]
 8002d66:	3304      	adds	r3, #4
 8002d68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d6a:	f002 f9c7 	bl	80050fc <USB_CoreInit>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0d5      	b.n	8002f2c <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2100      	movs	r1, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f002 fad6 	bl	8005338 <USB_SetCurrentMode>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d005      	beq.n	8002d9e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2202      	movs	r2, #2
 8002d96:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e0c6      	b.n	8002f2c <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]
 8002da2:	e04a      	b.n	8002e3a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002da4:	7bfa      	ldrb	r2, [r7, #15]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	3315      	adds	r3, #21
 8002db4:	2201      	movs	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002db8:	7bfa      	ldrb	r2, [r7, #15]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	3314      	adds	r3, #20
 8002dc8:	7bfa      	ldrb	r2, [r7, #15]
 8002dca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002dcc:	7bfa      	ldrb	r2, [r7, #15]
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	b298      	uxth	r0, r3
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	332e      	adds	r3, #46	@ 0x2e
 8002de0:	4602      	mov	r2, r0
 8002de2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	3318      	adds	r3, #24
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002df8:	7bfa      	ldrb	r2, [r7, #15]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	331c      	adds	r3, #28
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e0c:	7bfa      	ldrb	r2, [r7, #15]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	3320      	adds	r3, #32
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e20:	7bfa      	ldrb	r2, [r7, #15]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3324      	adds	r3, #36	@ 0x24
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	3301      	adds	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	791b      	ldrb	r3, [r3, #4]
 8002e3e:	7bfa      	ldrb	r2, [r7, #15]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d3af      	bcc.n	8002da4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e44:	2300      	movs	r3, #0
 8002e46:	73fb      	strb	r3, [r7, #15]
 8002e48:	e044      	b.n	8002ed4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e4a:	7bfa      	ldrb	r2, [r7, #15]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e60:	7bfa      	ldrb	r2, [r7, #15]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e76:	7bfa      	ldrb	r2, [r7, #15]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ea2:	7bfa      	ldrb	r2, [r7, #15]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002eb8:	7bfa      	ldrb	r2, [r7, #15]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	791b      	ldrb	r3, [r3, #4]
 8002ed8:	7bfa      	ldrb	r2, [r7, #15]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d3b5      	bcc.n	8002e4a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	7c1a      	ldrb	r2, [r3, #16]
 8002ee6:	f88d 2000 	strb.w	r2, [sp]
 8002eea:	3304      	adds	r3, #4
 8002eec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eee:	f002 fa6f 	bl	80053d0 <USB_DevInit>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e013      	b.n	8002f2c <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	7b1b      	ldrb	r3, [r3, #12]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d102      	bne.n	8002f20 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f001 f942 	bl	80041a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f003 faae 	bl	8006486 <USB_DevDisconnect>

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_PCD_Start+0x16>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e012      	b.n	8002f70 <HAL_PCD_Start+0x3c>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f002 f9cc 	bl	80052f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f003 fa6f 	bl	8006444 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f78:	b590      	push	{r4, r7, lr}
 8002f7a:	b08d      	sub	sp, #52	@ 0x34
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f003 fb2d 	bl	80065ee <USB_GetMode>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f040 84b9 	bne.w	800390e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f003 fa91 	bl	80064c8 <USB_ReadInterrupts>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 84af 	beq.w	800390c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	0a1b      	lsrs	r3, r3, #8
 8002fb8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f003 fa7e 	bl	80064c8 <USB_ReadInterrupts>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d107      	bne.n	8002fe6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f002 0202 	and.w	r2, r2, #2
 8002fe4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f003 fa6c 	bl	80064c8 <USB_ReadInterrupts>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b10      	cmp	r3, #16
 8002ff8:	d161      	bne.n	80030be <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699a      	ldr	r2, [r3, #24]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0210 	bic.w	r2, r2, #16
 8003008:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	f003 020f 	and.w	r2, r3, #15
 8003016:	4613      	mov	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	4413      	add	r3, r2
 8003026:	3304      	adds	r3, #4
 8003028:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	0c5b      	lsrs	r3, r3, #17
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	2b02      	cmp	r3, #2
 8003034:	d124      	bne.n	8003080 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800303c:	4013      	ands	r3, r2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d035      	beq.n	80030ae <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800304c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003050:	b29b      	uxth	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	6a38      	ldr	r0, [r7, #32]
 8003056:	f003 f8a3 	bl	80061a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003066:	441a      	add	r2, r3
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	091b      	lsrs	r3, r3, #4
 8003074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003078:	441a      	add	r2, r3
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	615a      	str	r2, [r3, #20]
 800307e:	e016      	b.n	80030ae <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	0c5b      	lsrs	r3, r3, #17
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	2b06      	cmp	r3, #6
 800308a:	d110      	bne.n	80030ae <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003092:	2208      	movs	r2, #8
 8003094:	4619      	mov	r1, r3
 8003096:	6a38      	ldr	r0, [r7, #32]
 8003098:	f003 f882 	bl	80061a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030a8:	441a      	add	r2, r3
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699a      	ldr	r2, [r3, #24]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0210 	orr.w	r2, r2, #16
 80030bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f003 fa00 	bl	80064c8 <USB_ReadInterrupts>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030ce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80030d2:	f040 80a7 	bne.w	8003224 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f003 fa05 	bl	80064ee <USB_ReadDevAllOutEpInterrupt>
 80030e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80030e6:	e099      	b.n	800321c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80030e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 808e 	beq.w	8003210 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f003 fa29 	bl	8006556 <USB_ReadDevOutEPInterrupt>
 8003104:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00c      	beq.n	800312a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	4413      	add	r3, r2
 8003118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800311c:	461a      	mov	r2, r3
 800311e:	2301      	movs	r3, #1
 8003120:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003122:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 feb7 	bl	8003e98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00c      	beq.n	800314e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	4413      	add	r3, r2
 800313c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003140:	461a      	mov	r2, r3
 8003142:	2308      	movs	r3, #8
 8003144:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003146:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 ff8d 	bl	8004068 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f003 0310 	and.w	r3, r3, #16
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003164:	461a      	mov	r2, r3
 8003166:	2310      	movs	r3, #16
 8003168:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d030      	beq.n	80031d6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317c:	2b80      	cmp	r3, #128	@ 0x80
 800317e:	d109      	bne.n	8003194 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	69fa      	ldr	r2, [r7, #28]
 800318a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800318e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003192:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	4413      	add	r3, r2
 80031a6:	3304      	adds	r3, #4
 80031a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	78db      	ldrb	r3, [r3, #3]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d108      	bne.n	80031c4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2200      	movs	r2, #0
 80031b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80031b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	4619      	mov	r1, r3
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f012 f986 	bl	80154d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80031c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031d0:	461a      	mov	r2, r3
 80031d2:	2302      	movs	r3, #2
 80031d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ec:	461a      	mov	r2, r3
 80031ee:	2320      	movs	r3, #32
 80031f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d009      	beq.n	8003210 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80031fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	4413      	add	r3, r2
 8003204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003208:	461a      	mov	r2, r3
 800320a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800320e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003212:	3301      	adds	r3, #1
 8003214:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800321c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321e:	2b00      	cmp	r3, #0
 8003220:	f47f af62 	bne.w	80030e8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f003 f94d 	bl	80064c8 <USB_ReadInterrupts>
 800322e:	4603      	mov	r3, r0
 8003230:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003234:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003238:	f040 80db 	bne.w	80033f2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f003 f96e 	bl	8006522 <USB_ReadDevAllInEpInterrupt>
 8003246:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800324c:	e0cd      	b.n	80033ea <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800324e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 80c2 	beq.w	80033de <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f003 f994 	bl	8006592 <USB_ReadDevInEPInterrupt>
 800326a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d057      	beq.n	8003326 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	2201      	movs	r2, #1
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800328a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	43db      	mvns	r3, r3
 8003290:	69f9      	ldr	r1, [r7, #28]
 8003292:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003296:	4013      	ands	r3, r2
 8003298:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800329a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032a6:	461a      	mov	r2, r3
 80032a8:	2301      	movs	r3, #1
 80032aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	799b      	ldrb	r3, [r3, #6]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d132      	bne.n	800331a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032b8:	4613      	mov	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4413      	add	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	3320      	adds	r3, #32
 80032c4:	6819      	ldr	r1, [r3, #0]
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ca:	4613      	mov	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4403      	add	r3, r0
 80032d4:	331c      	adds	r3, #28
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4419      	add	r1, r3
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032de:	4613      	mov	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4403      	add	r3, r0
 80032e8:	3320      	adds	r3, #32
 80032ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80032ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d113      	bne.n	800331a <HAL_PCD_IRQHandler+0x3a2>
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f6:	4613      	mov	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	3324      	adds	r3, #36	@ 0x24
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d108      	bne.n	800331a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003312:	461a      	mov	r2, r3
 8003314:	2101      	movs	r1, #1
 8003316:	f003 f99d 	bl	8006654 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331c:	b2db      	uxtb	r3, r3
 800331e:	4619      	mov	r1, r3
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f012 f853 	bl	80153cc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800333c:	461a      	mov	r2, r3
 800333e:	2308      	movs	r3, #8
 8003340:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800334c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003358:	461a      	mov	r2, r3
 800335a:	2310      	movs	r3, #16
 800335c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	4413      	add	r3, r2
 8003370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003374:	461a      	mov	r2, r3
 8003376:	2340      	movs	r3, #64	@ 0x40
 8003378:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d023      	beq.n	80033cc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003384:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003386:	6a38      	ldr	r0, [r7, #32]
 8003388:	f002 f980 	bl	800568c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800338c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800338e:	4613      	mov	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	3310      	adds	r3, #16
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	4413      	add	r3, r2
 800339c:	3304      	adds	r3, #4
 800339e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	78db      	ldrb	r3, [r3, #3]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d108      	bne.n	80033ba <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2200      	movs	r2, #0
 80033ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	4619      	mov	r1, r3
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f012 f89d 	bl	80154f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033c6:	461a      	mov	r2, r3
 80033c8:	2302      	movs	r3, #2
 80033ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80033d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 fcd0 	bl	8003d7e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e0:	3301      	adds	r3, #1
 80033e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80033e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e6:	085b      	lsrs	r3, r3, #1
 80033e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80033ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f47f af2e 	bne.w	800324e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f003 f866 	bl	80064c8 <USB_ReadInterrupts>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003402:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003406:	d122      	bne.n	800344e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	69fa      	ldr	r2, [r7, #28]
 8003412:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003416:	f023 0301 	bic.w	r3, r3, #1
 800341a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003422:	2b01      	cmp	r3, #1
 8003424:	d108      	bne.n	8003438 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800342e:	2100      	movs	r1, #0
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 fedb 	bl	80041ec <HAL_PCDEx_LPM_Callback>
 8003436:	e002      	b.n	800343e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f012 f83b 	bl	80154b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800344c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f003 f838 	bl	80064c8 <USB_ReadInterrupts>
 8003458:	4603      	mov	r3, r0
 800345a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800345e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003462:	d112      	bne.n	800348a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b01      	cmp	r3, #1
 8003472:	d102      	bne.n	800347a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f011 fff7 	bl	8015468 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003488:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f003 f81a 	bl	80064c8 <USB_ReadInterrupts>
 8003494:	4603      	mov	r3, r0
 8003496:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800349a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800349e:	d121      	bne.n	80034e4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80034ae:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d111      	bne.n	80034de <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c8:	089b      	lsrs	r3, r3, #2
 80034ca:	f003 020f 	and.w	r2, r3, #15
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80034d4:	2101      	movs	r1, #1
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fe88 	bl	80041ec <HAL_PCDEx_LPM_Callback>
 80034dc:	e002      	b.n	80034e4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f011 ffc2 	bl	8015468 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f002 ffed 	bl	80064c8 <USB_ReadInterrupts>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034f8:	f040 80b7 	bne.w	800366a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800350a:	f023 0301 	bic.w	r3, r3, #1
 800350e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2110      	movs	r1, #16
 8003516:	4618      	mov	r0, r3
 8003518:	f002 f8b8 	bl	800568c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800351c:	2300      	movs	r3, #0
 800351e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003520:	e046      	b.n	80035b0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	4413      	add	r3, r2
 800352a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800352e:	461a      	mov	r2, r3
 8003530:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003534:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	4413      	add	r3, r2
 800353e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003546:	0151      	lsls	r1, r2, #5
 8003548:	69fa      	ldr	r2, [r7, #28]
 800354a:	440a      	add	r2, r1
 800354c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003550:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003554:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003562:	461a      	mov	r2, r3
 8003564:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003568:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800356a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	4413      	add	r3, r2
 8003572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800357a:	0151      	lsls	r1, r2, #5
 800357c:	69fa      	ldr	r2, [r7, #28]
 800357e:	440a      	add	r2, r1
 8003580:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003584:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003588:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800358a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800359a:	0151      	lsls	r1, r2, #5
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	440a      	add	r2, r1
 80035a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035a4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80035a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ac:	3301      	adds	r3, #1
 80035ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	791b      	ldrb	r3, [r3, #4]
 80035b4:	461a      	mov	r2, r3
 80035b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d3b2      	bcc.n	8003522 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	69fa      	ldr	r2, [r7, #28]
 80035c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035ca:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80035ce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	7bdb      	ldrb	r3, [r3, #15]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d016      	beq.n	8003606 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035e2:	69fa      	ldr	r2, [r7, #28]
 80035e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035e8:	f043 030b 	orr.w	r3, r3, #11
 80035ec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f8:	69fa      	ldr	r2, [r7, #28]
 80035fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035fe:	f043 030b 	orr.w	r3, r3, #11
 8003602:	6453      	str	r3, [r2, #68]	@ 0x44
 8003604:	e015      	b.n	8003632 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003614:	4619      	mov	r1, r3
 8003616:	f242 032b 	movw	r3, #8235	@ 0x202b
 800361a:	4313      	orrs	r3, r2
 800361c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	69fa      	ldr	r2, [r7, #28]
 8003628:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800362c:	f043 030b 	orr.w	r3, r3, #11
 8003630:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003640:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003644:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003654:	461a      	mov	r2, r3
 8003656:	f002 fffd 	bl	8006654 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695a      	ldr	r2, [r3, #20]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003668:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f002 ff2a 	bl	80064c8 <USB_ReadInterrupts>
 8003674:	4603      	mov	r3, r0
 8003676:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800367a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800367e:	d123      	bne.n	80036c8 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f002 ffc1 	bl	800660c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f002 f875 	bl	800577e <USB_GetDevSpeed>
 8003694:	4603      	mov	r3, r0
 8003696:	461a      	mov	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681c      	ldr	r4, [r3, #0]
 80036a0:	f001 fa06 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
 80036a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036aa:	461a      	mov	r2, r3
 80036ac:	4620      	mov	r0, r4
 80036ae:	f001 fd7f 	bl	80051b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f011 feba 	bl	801542c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695a      	ldr	r2, [r3, #20]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80036c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f002 fefb 	bl	80064c8 <USB_ReadInterrupts>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d10a      	bne.n	80036f2 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f011 fe97 	bl	8015410 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f002 0208 	and.w	r2, r2, #8
 80036f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f002 fee6 	bl	80064c8 <USB_ReadInterrupts>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003702:	2b80      	cmp	r3, #128	@ 0x80
 8003704:	d123      	bne.n	800374e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003712:	2301      	movs	r3, #1
 8003714:	627b      	str	r3, [r7, #36]	@ 0x24
 8003716:	e014      	b.n	8003742 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800371c:	4613      	mov	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	4413      	add	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d105      	bne.n	800373c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003732:	b2db      	uxtb	r3, r3
 8003734:	4619      	mov	r1, r3
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 faf0 	bl	8003d1c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800373c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373e:	3301      	adds	r3, #1
 8003740:	627b      	str	r3, [r7, #36]	@ 0x24
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	791b      	ldrb	r3, [r3, #4]
 8003746:	461a      	mov	r2, r3
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374a:	4293      	cmp	r3, r2
 800374c:	d3e4      	bcc.n	8003718 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f002 feb8 	bl	80064c8 <USB_ReadInterrupts>
 8003758:	4603      	mov	r3, r0
 800375a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800375e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003762:	d13c      	bne.n	80037de <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003764:	2301      	movs	r3, #1
 8003766:	627b      	str	r3, [r7, #36]	@ 0x24
 8003768:	e02b      	b.n	80037c2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	4413      	add	r3, r2
 8003772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	3318      	adds	r3, #24
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d115      	bne.n	80037bc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003790:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003792:	2b00      	cmp	r3, #0
 8003794:	da12      	bge.n	80037bc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800379a:	4613      	mov	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	3317      	adds	r3, #23
 80037a6:	2201      	movs	r2, #1
 80037a8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80037aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	4619      	mov	r1, r3
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 fab0 	bl	8003d1c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037be:	3301      	adds	r3, #1
 80037c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	791b      	ldrb	r3, [r3, #4]
 80037c6:	461a      	mov	r2, r3
 80037c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d3cd      	bcc.n	800376a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80037dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f002 fe70 	bl	80064c8 <USB_ReadInterrupts>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037f2:	d156      	bne.n	80038a2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037f4:	2301      	movs	r3, #1
 80037f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037f8:	e045      	b.n	8003886 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800380e:	4613      	mov	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d12e      	bne.n	8003880 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003822:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003824:	2b00      	cmp	r3, #0
 8003826:	da2b      	bge.n	8003880 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003834:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003838:	429a      	cmp	r2, r3
 800383a:	d121      	bne.n	8003880 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003840:	4613      	mov	r3, r2
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	4413      	add	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800384e:	2201      	movs	r2, #1
 8003850:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	69fa      	ldr	r2, [r7, #28]
 8003874:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003878:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800387c:	6053      	str	r3, [r2, #4]
            break;
 800387e:	e008      	b.n	8003892 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003882:	3301      	adds	r3, #1
 8003884:	627b      	str	r3, [r7, #36]	@ 0x24
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	791b      	ldrb	r3, [r3, #4]
 800388a:	461a      	mov	r2, r3
 800388c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388e:	4293      	cmp	r3, r2
 8003890:	d3b3      	bcc.n	80037fa <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80038a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f002 fe0e 	bl	80064c8 <USB_ReadInterrupts>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80038b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b6:	d10a      	bne.n	80038ce <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f011 fe2d 	bl	8015518 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80038cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f002 fdf8 	bl	80064c8 <USB_ReadInterrupts>
 80038d8:	4603      	mov	r3, r0
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d115      	bne.n	800390e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f011 fe1d 	bl	8015534 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6859      	ldr	r1, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	e000      	b.n	800390e <HAL_PCD_IRQHandler+0x996>
      return;
 800390c:	bf00      	nop
    }
  }
}
 800390e:	3734      	adds	r7, #52	@ 0x34
 8003910:	46bd      	mov	sp, r7
 8003912:	bd90      	pop	{r4, r7, pc}

08003914 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_PCD_SetAddress+0x1a>
 800392a:	2302      	movs	r3, #2
 800392c:	e012      	b.n	8003954 <HAL_PCD_SetAddress+0x40>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	78fa      	ldrb	r2, [r7, #3]
 8003942:	4611      	mov	r1, r2
 8003944:	4618      	mov	r0, r3
 8003946:	f002 fd57 	bl	80063f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	4608      	mov	r0, r1
 8003966:	4611      	mov	r1, r2
 8003968:	461a      	mov	r2, r3
 800396a:	4603      	mov	r3, r0
 800396c:	70fb      	strb	r3, [r7, #3]
 800396e:	460b      	mov	r3, r1
 8003970:	803b      	strh	r3, [r7, #0]
 8003972:	4613      	mov	r3, r2
 8003974:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800397a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800397e:	2b00      	cmp	r3, #0
 8003980:	da0f      	bge.n	80039a2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	f003 020f 	and.w	r2, r3, #15
 8003988:	4613      	mov	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	4413      	add	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	3310      	adds	r3, #16
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	4413      	add	r3, r2
 8003996:	3304      	adds	r3, #4
 8003998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	705a      	strb	r2, [r3, #1]
 80039a0:	e00f      	b.n	80039c2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039a2:	78fb      	ldrb	r3, [r7, #3]
 80039a4:	f003 020f 	and.w	r2, r3, #15
 80039a8:	4613      	mov	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	4413      	add	r3, r2
 80039b8:	3304      	adds	r3, #4
 80039ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039ce:	883a      	ldrh	r2, [r7, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	78ba      	ldrb	r2, [r7, #2]
 80039d8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	785b      	ldrb	r3, [r3, #1]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d004      	beq.n	80039ec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039ec:	78bb      	ldrb	r3, [r7, #2]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d102      	bne.n	80039f8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_PCD_EP_Open+0xaa>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e00e      	b.n	8003a24 <HAL_PCD_EP_Open+0xc8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68f9      	ldr	r1, [r7, #12]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f001 fed7 	bl	80057c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003a22:	7afb      	ldrb	r3, [r7, #11]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	da0f      	bge.n	8003a60 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	f003 020f 	and.w	r2, r3, #15
 8003a46:	4613      	mov	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	3310      	adds	r3, #16
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	4413      	add	r3, r2
 8003a54:	3304      	adds	r3, #4
 8003a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	705a      	strb	r2, [r3, #1]
 8003a5e:	e00f      	b.n	8003a80 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	f003 020f 	and.w	r2, r3, #15
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	4413      	add	r3, r2
 8003a76:	3304      	adds	r3, #4
 8003a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a80:	78fb      	ldrb	r3, [r7, #3]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_PCD_EP_Close+0x6e>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e00e      	b.n	8003ab8 <HAL_PCD_EP_Close+0x8c>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68f9      	ldr	r1, [r7, #12]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f001 ff15 	bl	80058d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	607a      	str	r2, [r7, #4]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	460b      	mov	r3, r1
 8003ace:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ad0:	7afb      	ldrb	r3, [r7, #11]
 8003ad2:	f003 020f 	and.w	r2, r3, #15
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2200      	movs	r2, #0
 8003afa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	2200      	movs	r2, #0
 8003b00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b02:	7afb      	ldrb	r3, [r7, #11]
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	799b      	ldrb	r3, [r3, #6]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d102      	bne.n	8003b1c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	799b      	ldrb	r3, [r3, #6]
 8003b24:	461a      	mov	r2, r3
 8003b26:	6979      	ldr	r1, [r7, #20]
 8003b28:	f001 ffb2 	bl	8005a90 <USB_EPStartXfer>

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b086      	sub	sp, #24
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	460b      	mov	r3, r1
 8003b44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b46:	7afb      	ldrb	r3, [r7, #11]
 8003b48:	f003 020f 	and.w	r2, r3, #15
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	3310      	adds	r3, #16
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4413      	add	r3, r2
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2201      	movs	r2, #1
 8003b74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b76:	7afb      	ldrb	r3, [r7, #11]
 8003b78:	f003 030f 	and.w	r3, r3, #15
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	799b      	ldrb	r3, [r3, #6]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d102      	bne.n	8003b90 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	799b      	ldrb	r3, [r3, #6]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	6979      	ldr	r1, [r7, #20]
 8003b9c:	f001 ff78 	bl	8005a90 <USB_EPStartXfer>

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bb6:	78fb      	ldrb	r3, [r7, #3]
 8003bb8:	f003 030f 	and.w	r3, r3, #15
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	7912      	ldrb	r2, [r2, #4]
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e04f      	b.n	8003c68 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	da0f      	bge.n	8003bf0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bd0:	78fb      	ldrb	r3, [r7, #3]
 8003bd2:	f003 020f 	and.w	r2, r3, #15
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	3310      	adds	r3, #16
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	4413      	add	r3, r2
 8003be4:	3304      	adds	r3, #4
 8003be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2201      	movs	r2, #1
 8003bec:	705a      	strb	r2, [r3, #1]
 8003bee:	e00d      	b.n	8003c0c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bf0:	78fa      	ldrb	r2, [r7, #3]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	4413      	add	r3, r2
 8003c02:	3304      	adds	r3, #4
 8003c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	f003 030f 	and.w	r3, r3, #15
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_PCD_EP_SetStall+0x82>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e01d      	b.n	8003c68 <HAL_PCD_EP_SetStall+0xbe>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68f9      	ldr	r1, [r7, #12]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f002 fb08 	bl	8006250 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c40:	78fb      	ldrb	r3, [r7, #3]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	7999      	ldrb	r1, [r3, #6]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c58:	461a      	mov	r2, r3
 8003c5a:	f002 fcfb 	bl	8006654 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	7912      	ldrb	r2, [r2, #4]
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d901      	bls.n	8003c8e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e042      	b.n	8003d14 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	da0f      	bge.n	8003cb6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c96:	78fb      	ldrb	r3, [r7, #3]
 8003c98:	f003 020f 	and.w	r2, r3, #15
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	3310      	adds	r3, #16
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	4413      	add	r3, r2
 8003caa:	3304      	adds	r3, #4
 8003cac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	705a      	strb	r2, [r3, #1]
 8003cb4:	e00f      	b.n	8003cd6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	f003 020f 	and.w	r2, r3, #15
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	4413      	add	r3, r2
 8003ccc:	3304      	adds	r3, #4
 8003cce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_PCD_EP_ClrStall+0x86>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e00e      	b.n	8003d14 <HAL_PCD_EP_ClrStall+0xa4>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68f9      	ldr	r1, [r7, #12]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f002 fb11 	bl	800632c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	460b      	mov	r3, r1
 8003d26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	da0c      	bge.n	8003d4a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d30:	78fb      	ldrb	r3, [r7, #3]
 8003d32:	f003 020f 	and.w	r2, r3, #15
 8003d36:	4613      	mov	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4413      	add	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	3310      	adds	r3, #16
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	4413      	add	r3, r2
 8003d44:	3304      	adds	r3, #4
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	e00c      	b.n	8003d64 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d4a:	78fb      	ldrb	r3, [r7, #3]
 8003d4c:	f003 020f 	and.w	r2, r3, #15
 8003d50:	4613      	mov	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	4413      	add	r3, r2
 8003d60:	3304      	adds	r3, #4
 8003d62:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68f9      	ldr	r1, [r7, #12]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f002 f930 	bl	8005fd0 <USB_EPStopXfer>
 8003d70:	4603      	mov	r3, r0
 8003d72:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003d74:	7afb      	ldrb	r3, [r7, #11]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b08a      	sub	sp, #40	@ 0x28
 8003d82:	af02      	add	r7, sp, #8
 8003d84:	6078      	str	r0, [r7, #4]
 8003d86:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	3310      	adds	r3, #16
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	4413      	add	r3, r2
 8003da2:	3304      	adds	r3, #4
 8003da4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	695a      	ldr	r2, [r3, #20]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d901      	bls.n	8003db6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e06b      	b.n	8003e8e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d902      	bls.n	8003dd2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	3303      	adds	r3, #3
 8003dd6:	089b      	lsrs	r3, r3, #2
 8003dd8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dda:	e02a      	b.n	8003e32 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	69fa      	ldr	r2, [r7, #28]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d902      	bls.n	8003df8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	3303      	adds	r3, #3
 8003dfc:	089b      	lsrs	r3, r3, #2
 8003dfe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	68d9      	ldr	r1, [r3, #12]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	4603      	mov	r3, r0
 8003e14:	6978      	ldr	r0, [r7, #20]
 8003e16:	f002 f985 	bl	8006124 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	441a      	add	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	695a      	ldr	r2, [r3, #20]
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	441a      	add	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d809      	bhi.n	8003e5c <PCD_WriteEmptyTxFifo+0xde>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	695a      	ldr	r2, [r3, #20]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d203      	bcs.n	8003e5c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1bf      	bne.n	8003ddc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d811      	bhi.n	8003e8c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	2201      	movs	r2, #1
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	6939      	ldr	r1, [r7, #16]
 8003e84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e88:	4013      	ands	r3, r2
 8003e8a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3720      	adds	r7, #32
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	333c      	adds	r3, #60	@ 0x3c
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	799b      	ldrb	r3, [r3, #6]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d17b      	bne.n	8003fc6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f003 0308 	and.w	r3, r3, #8
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d015      	beq.n	8003f04 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	4a61      	ldr	r2, [pc, #388]	@ (8004060 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	f240 80b9 	bls.w	8004054 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 80b3 	beq.w	8004054 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003efa:	461a      	mov	r2, r3
 8003efc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f00:	6093      	str	r3, [r2, #8]
 8003f02:	e0a7      	b.n	8004054 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	2320      	movs	r3, #32
 8003f1e:	6093      	str	r3, [r2, #8]
 8003f20:	e098      	b.n	8004054 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f040 8093 	bne.w	8004054 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	4a4b      	ldr	r2, [pc, #300]	@ (8004060 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d90f      	bls.n	8003f56 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f52:	6093      	str	r3, [r2, #8]
 8003f54:	e07e      	b.n	8004054 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	4413      	add	r3, r2
 8003f68:	3304      	adds	r3, #4
 8003f6a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1a      	ldr	r2, [r3, #32]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	0159      	lsls	r1, r3, #5
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	440b      	add	r3, r1
 8003f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f82:	1ad2      	subs	r2, r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d114      	bne.n	8003fb8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d109      	bne.n	8003faa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	f002 fb56 	bl	8006654 <USB_EP0_OutStart>
 8003fa8:	e006      	b.n	8003fb8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	441a      	add	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f011 f9e2 	bl	8015388 <HAL_PCD_DataOutStageCallback>
 8003fc4:	e046      	b.n	8004054 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	4a26      	ldr	r2, [pc, #152]	@ (8004064 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d124      	bne.n	8004018 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fea:	6093      	str	r3, [r2, #8]
 8003fec:	e032      	b.n	8004054 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f003 0320 	and.w	r3, r3, #32
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004004:	461a      	mov	r2, r3
 8004006:	2320      	movs	r3, #32
 8004008:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	b2db      	uxtb	r3, r3
 800400e:	4619      	mov	r1, r3
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f011 f9b9 	bl	8015388 <HAL_PCD_DataOutStageCallback>
 8004016:	e01d      	b.n	8004054 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d114      	bne.n	8004048 <PCD_EP_OutXfrComplete_int+0x1b0>
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	4613      	mov	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d108      	bne.n	8004048 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004040:	461a      	mov	r2, r3
 8004042:	2100      	movs	r1, #0
 8004044:	f002 fb06 	bl	8006654 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	4619      	mov	r1, r3
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f011 f99a 	bl	8015388 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3720      	adds	r7, #32
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	4f54300a 	.word	0x4f54300a
 8004064:	4f54310a 	.word	0x4f54310a

08004068 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	333c      	adds	r3, #60	@ 0x3c
 8004080:	3304      	adds	r3, #4
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4a15      	ldr	r2, [pc, #84]	@ (80040f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d90e      	bls.n	80040bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d009      	beq.n	80040bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040b4:	461a      	mov	r2, r3
 80040b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f011 f951 	bl	8015364 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4a0a      	ldr	r2, [pc, #40]	@ (80040f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d90c      	bls.n	80040e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	799b      	ldrb	r3, [r3, #6]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d108      	bne.n	80040e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040dc:	461a      	mov	r2, r3
 80040de:	2101      	movs	r1, #1
 80040e0:	f002 fab8 	bl	8006654 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	4f54300a 	.word	0x4f54300a

080040f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	70fb      	strb	r3, [r7, #3]
 8004100:	4613      	mov	r3, r2
 8004102:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d107      	bne.n	8004122 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004112:	883b      	ldrh	r3, [r7, #0]
 8004114:	0419      	lsls	r1, r3, #16
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	430a      	orrs	r2, r1
 800411e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004120:	e028      	b.n	8004174 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004128:	0c1b      	lsrs	r3, r3, #16
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	4413      	add	r3, r2
 800412e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004130:	2300      	movs	r3, #0
 8004132:	73fb      	strb	r3, [r7, #15]
 8004134:	e00d      	b.n	8004152 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	3340      	adds	r3, #64	@ 0x40
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	4413      	add	r3, r2
 800414a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	3301      	adds	r3, #1
 8004150:	73fb      	strb	r3, [r7, #15]
 8004152:	7bfa      	ldrb	r2, [r7, #15]
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	3b01      	subs	r3, #1
 8004158:	429a      	cmp	r2, r3
 800415a:	d3ec      	bcc.n	8004136 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800415c:	883b      	ldrh	r3, [r7, #0]
 800415e:	0418      	lsls	r0, r3, #16
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6819      	ldr	r1, [r3, #0]
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	3b01      	subs	r3, #1
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	4302      	orrs	r2, r0
 800416c:	3340      	adds	r3, #64	@ 0x40
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	460b      	mov	r3, r1
 800418c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	887a      	ldrh	r2, [r7, #2]
 8004194:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80041d2:	4b05      	ldr	r3, [pc, #20]	@ (80041e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	10000003 	.word	0x10000003

080041ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800420c:	2300      	movs	r3, #0
 800420e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e291      	b.n	800473e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 8087 	beq.w	8004336 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004228:	4b96      	ldr	r3, [pc, #600]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	2b04      	cmp	r3, #4
 8004232:	d00c      	beq.n	800424e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004234:	4b93      	ldr	r3, [pc, #588]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 030c 	and.w	r3, r3, #12
 800423c:	2b08      	cmp	r3, #8
 800423e:	d112      	bne.n	8004266 <HAL_RCC_OscConfig+0x62>
 8004240:	4b90      	ldr	r3, [pc, #576]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004248:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800424c:	d10b      	bne.n	8004266 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800424e:	4b8d      	ldr	r3, [pc, #564]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d06c      	beq.n	8004334 <HAL_RCC_OscConfig+0x130>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d168      	bne.n	8004334 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e26b      	b.n	800473e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800426e:	d106      	bne.n	800427e <HAL_RCC_OscConfig+0x7a>
 8004270:	4b84      	ldr	r3, [pc, #528]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a83      	ldr	r2, [pc, #524]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 8004276:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	e02e      	b.n	80042dc <HAL_RCC_OscConfig+0xd8>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10c      	bne.n	80042a0 <HAL_RCC_OscConfig+0x9c>
 8004286:	4b7f      	ldr	r3, [pc, #508]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a7e      	ldr	r2, [pc, #504]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 800428c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	4b7c      	ldr	r3, [pc, #496]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a7b      	ldr	r2, [pc, #492]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 8004298:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	e01d      	b.n	80042dc <HAL_RCC_OscConfig+0xd8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCC_OscConfig+0xc0>
 80042aa:	4b76      	ldr	r3, [pc, #472]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a75      	ldr	r2, [pc, #468]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 80042b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	4b73      	ldr	r3, [pc, #460]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a72      	ldr	r2, [pc, #456]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 80042bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	e00b      	b.n	80042dc <HAL_RCC_OscConfig+0xd8>
 80042c4:	4b6f      	ldr	r3, [pc, #444]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a6e      	ldr	r2, [pc, #440]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 80042ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	4b6c      	ldr	r3, [pc, #432]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a6b      	ldr	r2, [pc, #428]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 80042d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d013      	beq.n	800430c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e4:	f7fe fa52 	bl	800278c <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ec:	f7fe fa4e 	bl	800278c <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b64      	cmp	r3, #100	@ 0x64
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e21f      	b.n	800473e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fe:	4b61      	ldr	r3, [pc, #388]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCC_OscConfig+0xe8>
 800430a:	e014      	b.n	8004336 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430c:	f7fe fa3e 	bl	800278c <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004314:	f7fe fa3a 	bl	800278c <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	@ 0x64
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e20b      	b.n	800473e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004326:	4b57      	ldr	r3, [pc, #348]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <HAL_RCC_OscConfig+0x110>
 8004332:	e000      	b.n	8004336 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d069      	beq.n	8004416 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004342:	4b50      	ldr	r3, [pc, #320]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 030c 	and.w	r3, r3, #12
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00b      	beq.n	8004366 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800434e:	4b4d      	ldr	r3, [pc, #308]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 030c 	and.w	r3, r3, #12
 8004356:	2b08      	cmp	r3, #8
 8004358:	d11c      	bne.n	8004394 <HAL_RCC_OscConfig+0x190>
 800435a:	4b4a      	ldr	r3, [pc, #296]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d116      	bne.n	8004394 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004366:	4b47      	ldr	r3, [pc, #284]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d005      	beq.n	800437e <HAL_RCC_OscConfig+0x17a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d001      	beq.n	800437e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e1df      	b.n	800473e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437e:	4b41      	ldr	r3, [pc, #260]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	493d      	ldr	r1, [pc, #244]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 800438e:	4313      	orrs	r3, r2
 8004390:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004392:	e040      	b.n	8004416 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d023      	beq.n	80043e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800439c:	4b39      	ldr	r3, [pc, #228]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a38      	ldr	r2, [pc, #224]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 80043a2:	f043 0301 	orr.w	r3, r3, #1
 80043a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a8:	f7fe f9f0 	bl	800278c <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043b0:	f7fe f9ec 	bl	800278c <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e1bd      	b.n	800473e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c2:	4b30      	ldr	r3, [pc, #192]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f0      	beq.n	80043b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4929      	ldr	r1, [pc, #164]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]
 80043e2:	e018      	b.n	8004416 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043e4:	4b27      	ldr	r3, [pc, #156]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a26      	ldr	r2, [pc, #152]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 80043ea:	f023 0301 	bic.w	r3, r3, #1
 80043ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fe f9cc 	bl	800278c <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f8:	f7fe f9c8 	bl	800278c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e199      	b.n	800473e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440a:	4b1e      	ldr	r3, [pc, #120]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d038      	beq.n	8004494 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d019      	beq.n	800445e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800442a:	4b16      	ldr	r3, [pc, #88]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 800442c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800442e:	4a15      	ldr	r2, [pc, #84]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 8004430:	f043 0301 	orr.w	r3, r3, #1
 8004434:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004436:	f7fe f9a9 	bl	800278c <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800443e:	f7fe f9a5 	bl	800278c <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e176      	b.n	800473e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004450:	4b0c      	ldr	r3, [pc, #48]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 8004452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <HAL_RCC_OscConfig+0x23a>
 800445c:	e01a      	b.n	8004494 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800445e:	4b09      	ldr	r3, [pc, #36]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 8004460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004462:	4a08      	ldr	r2, [pc, #32]	@ (8004484 <HAL_RCC_OscConfig+0x280>)
 8004464:	f023 0301 	bic.w	r3, r3, #1
 8004468:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446a:	f7fe f98f 	bl	800278c <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004470:	e00a      	b.n	8004488 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004472:	f7fe f98b 	bl	800278c <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d903      	bls.n	8004488 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e15c      	b.n	800473e <HAL_RCC_OscConfig+0x53a>
 8004484:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004488:	4b91      	ldr	r3, [pc, #580]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 800448a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1ee      	bne.n	8004472 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 80a4 	beq.w	80045ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044a2:	4b8b      	ldr	r3, [pc, #556]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10d      	bne.n	80044ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ae:	4b88      	ldr	r3, [pc, #544]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 80044b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b2:	4a87      	ldr	r2, [pc, #540]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 80044b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80044ba:	4b85      	ldr	r3, [pc, #532]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c2:	60bb      	str	r3, [r7, #8]
 80044c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c6:	2301      	movs	r3, #1
 80044c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044ca:	4b82      	ldr	r3, [pc, #520]	@ (80046d4 <HAL_RCC_OscConfig+0x4d0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d118      	bne.n	8004508 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80044d6:	4b7f      	ldr	r3, [pc, #508]	@ (80046d4 <HAL_RCC_OscConfig+0x4d0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a7e      	ldr	r2, [pc, #504]	@ (80046d4 <HAL_RCC_OscConfig+0x4d0>)
 80044dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044e2:	f7fe f953 	bl	800278c <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ea:	f7fe f94f 	bl	800278c <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b64      	cmp	r3, #100	@ 0x64
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e120      	b.n	800473e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044fc:	4b75      	ldr	r3, [pc, #468]	@ (80046d4 <HAL_RCC_OscConfig+0x4d0>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0f0      	beq.n	80044ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d106      	bne.n	800451e <HAL_RCC_OscConfig+0x31a>
 8004510:	4b6f      	ldr	r3, [pc, #444]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 8004512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004514:	4a6e      	ldr	r2, [pc, #440]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 8004516:	f043 0301 	orr.w	r3, r3, #1
 800451a:	6713      	str	r3, [r2, #112]	@ 0x70
 800451c:	e02d      	b.n	800457a <HAL_RCC_OscConfig+0x376>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10c      	bne.n	8004540 <HAL_RCC_OscConfig+0x33c>
 8004526:	4b6a      	ldr	r3, [pc, #424]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 8004528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452a:	4a69      	ldr	r2, [pc, #420]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 800452c:	f023 0301 	bic.w	r3, r3, #1
 8004530:	6713      	str	r3, [r2, #112]	@ 0x70
 8004532:	4b67      	ldr	r3, [pc, #412]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004536:	4a66      	ldr	r2, [pc, #408]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 8004538:	f023 0304 	bic.w	r3, r3, #4
 800453c:	6713      	str	r3, [r2, #112]	@ 0x70
 800453e:	e01c      	b.n	800457a <HAL_RCC_OscConfig+0x376>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b05      	cmp	r3, #5
 8004546:	d10c      	bne.n	8004562 <HAL_RCC_OscConfig+0x35e>
 8004548:	4b61      	ldr	r3, [pc, #388]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 800454a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454c:	4a60      	ldr	r2, [pc, #384]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 800454e:	f043 0304 	orr.w	r3, r3, #4
 8004552:	6713      	str	r3, [r2, #112]	@ 0x70
 8004554:	4b5e      	ldr	r3, [pc, #376]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004558:	4a5d      	ldr	r2, [pc, #372]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004560:	e00b      	b.n	800457a <HAL_RCC_OscConfig+0x376>
 8004562:	4b5b      	ldr	r3, [pc, #364]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004566:	4a5a      	ldr	r2, [pc, #360]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 8004568:	f023 0301 	bic.w	r3, r3, #1
 800456c:	6713      	str	r3, [r2, #112]	@ 0x70
 800456e:	4b58      	ldr	r3, [pc, #352]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 8004570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004572:	4a57      	ldr	r2, [pc, #348]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 8004574:	f023 0304 	bic.w	r3, r3, #4
 8004578:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d015      	beq.n	80045ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004582:	f7fe f903 	bl	800278c <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004588:	e00a      	b.n	80045a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800458a:	f7fe f8ff 	bl	800278c <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004598:	4293      	cmp	r3, r2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e0ce      	b.n	800473e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a0:	4b4b      	ldr	r3, [pc, #300]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 80045a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0ee      	beq.n	800458a <HAL_RCC_OscConfig+0x386>
 80045ac:	e014      	b.n	80045d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ae:	f7fe f8ed 	bl	800278c <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b4:	e00a      	b.n	80045cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b6:	f7fe f8e9 	bl	800278c <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e0b8      	b.n	800473e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045cc:	4b40      	ldr	r3, [pc, #256]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1ee      	bne.n	80045b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d105      	bne.n	80045ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045de:	4b3c      	ldr	r3, [pc, #240]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	4a3b      	ldr	r2, [pc, #236]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 80045e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045e8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 80a4 	beq.w	800473c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045f4:	4b36      	ldr	r3, [pc, #216]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 030c 	and.w	r3, r3, #12
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d06b      	beq.n	80046d8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2b02      	cmp	r3, #2
 8004606:	d149      	bne.n	800469c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004608:	4b31      	ldr	r3, [pc, #196]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a30      	ldr	r2, [pc, #192]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 800460e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7fe f8ba 	bl	800278c <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461c:	f7fe f8b6 	bl	800278c <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e087      	b.n	800473e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462e:	4b28      	ldr	r3, [pc, #160]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69da      	ldr	r2, [r3, #28]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004648:	019b      	lsls	r3, r3, #6
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004650:	085b      	lsrs	r3, r3, #1
 8004652:	3b01      	subs	r3, #1
 8004654:	041b      	lsls	r3, r3, #16
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465c:	061b      	lsls	r3, r3, #24
 800465e:	4313      	orrs	r3, r2
 8004660:	4a1b      	ldr	r2, [pc, #108]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 8004662:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004666:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004668:	4b19      	ldr	r3, [pc, #100]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a18      	ldr	r2, [pc, #96]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 800466e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004674:	f7fe f88a 	bl	800278c <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467c:	f7fe f886 	bl	800278c <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e057      	b.n	800473e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800468e:	4b10      	ldr	r3, [pc, #64]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0f0      	beq.n	800467c <HAL_RCC_OscConfig+0x478>
 800469a:	e04f      	b.n	800473c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469c:	4b0c      	ldr	r3, [pc, #48]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a0b      	ldr	r2, [pc, #44]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 80046a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a8:	f7fe f870 	bl	800278c <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b0:	f7fe f86c 	bl	800278c <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e03d      	b.n	800473e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c2:	4b03      	ldr	r3, [pc, #12]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f0      	bne.n	80046b0 <HAL_RCC_OscConfig+0x4ac>
 80046ce:	e035      	b.n	800473c <HAL_RCC_OscConfig+0x538>
 80046d0:	40023800 	.word	0x40023800
 80046d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80046d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004748 <HAL_RCC_OscConfig+0x544>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d028      	beq.n	8004738 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d121      	bne.n	8004738 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fe:	429a      	cmp	r2, r3
 8004700:	d11a      	bne.n	8004738 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004708:	4013      	ands	r3, r2
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800470e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004710:	4293      	cmp	r3, r2
 8004712:	d111      	bne.n	8004738 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471e:	085b      	lsrs	r3, r3, #1
 8004720:	3b01      	subs	r3, #1
 8004722:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004724:	429a      	cmp	r2, r3
 8004726:	d107      	bne.n	8004738 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004732:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004734:	429a      	cmp	r2, r3
 8004736:	d001      	beq.n	800473c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40023800 	.word	0x40023800

0800474c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0d0      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004764:	4b6a      	ldr	r3, [pc, #424]	@ (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d910      	bls.n	8004794 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004772:	4b67      	ldr	r3, [pc, #412]	@ (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f023 020f 	bic.w	r2, r3, #15
 800477a:	4965      	ldr	r1, [pc, #404]	@ (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	4313      	orrs	r3, r2
 8004780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004782:	4b63      	ldr	r3, [pc, #396]	@ (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d001      	beq.n	8004794 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0b8      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d020      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047ac:	4b59      	ldr	r3, [pc, #356]	@ (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	4a58      	ldr	r2, [pc, #352]	@ (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80047b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047c4:	4b53      	ldr	r3, [pc, #332]	@ (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	4a52      	ldr	r2, [pc, #328]	@ (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80047ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d0:	4b50      	ldr	r3, [pc, #320]	@ (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	494d      	ldr	r1, [pc, #308]	@ (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d040      	beq.n	8004870 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d107      	bne.n	8004806 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f6:	4b47      	ldr	r3, [pc, #284]	@ (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d115      	bne.n	800482e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e07f      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d107      	bne.n	800481e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480e:	4b41      	ldr	r3, [pc, #260]	@ (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d109      	bne.n	800482e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e073      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481e:	4b3d      	ldr	r3, [pc, #244]	@ (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e06b      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800482e:	4b39      	ldr	r3, [pc, #228]	@ (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f023 0203 	bic.w	r2, r3, #3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	4936      	ldr	r1, [pc, #216]	@ (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 800483c:	4313      	orrs	r3, r2
 800483e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004840:	f7fd ffa4 	bl	800278c <HAL_GetTick>
 8004844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004846:	e00a      	b.n	800485e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004848:	f7fd ffa0 	bl	800278c <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e053      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485e:	4b2d      	ldr	r3, [pc, #180]	@ (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 020c 	and.w	r2, r3, #12
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	429a      	cmp	r2, r3
 800486e:	d1eb      	bne.n	8004848 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004870:	4b27      	ldr	r3, [pc, #156]	@ (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d210      	bcs.n	80048a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487e:	4b24      	ldr	r3, [pc, #144]	@ (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 020f 	bic.w	r2, r3, #15
 8004886:	4922      	ldr	r1, [pc, #136]	@ (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	4313      	orrs	r3, r2
 800488c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800488e:	4b20      	ldr	r3, [pc, #128]	@ (8004910 <HAL_RCC_ClockConfig+0x1c4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e032      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ac:	4b19      	ldr	r3, [pc, #100]	@ (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	4916      	ldr	r1, [pc, #88]	@ (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048ca:	4b12      	ldr	r3, [pc, #72]	@ (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	490e      	ldr	r1, [pc, #56]	@ (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048de:	f000 f821 	bl	8004924 <HAL_RCC_GetSysClockFreq>
 80048e2:	4602      	mov	r2, r0
 80048e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004914 <HAL_RCC_ClockConfig+0x1c8>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	091b      	lsrs	r3, r3, #4
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	490a      	ldr	r1, [pc, #40]	@ (8004918 <HAL_RCC_ClockConfig+0x1cc>)
 80048f0:	5ccb      	ldrb	r3, [r1, r3]
 80048f2:	fa22 f303 	lsr.w	r3, r2, r3
 80048f6:	4a09      	ldr	r2, [pc, #36]	@ (800491c <HAL_RCC_ClockConfig+0x1d0>)
 80048f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048fa:	4b09      	ldr	r3, [pc, #36]	@ (8004920 <HAL_RCC_ClockConfig+0x1d4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fd fc52 	bl	80021a8 <HAL_InitTick>

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	40023c00 	.word	0x40023c00
 8004914:	40023800 	.word	0x40023800
 8004918:	08016ea0 	.word	0x08016ea0
 800491c:	20000004 	.word	0x20000004
 8004920:	20000078 	.word	0x20000078

08004924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004928:	b090      	sub	sp, #64	@ 0x40
 800492a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800492c:	2300      	movs	r3, #0
 800492e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004930:	2300      	movs	r3, #0
 8004932:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004934:	2300      	movs	r3, #0
 8004936:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800493c:	4b59      	ldr	r3, [pc, #356]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 030c 	and.w	r3, r3, #12
 8004944:	2b08      	cmp	r3, #8
 8004946:	d00d      	beq.n	8004964 <HAL_RCC_GetSysClockFreq+0x40>
 8004948:	2b08      	cmp	r3, #8
 800494a:	f200 80a1 	bhi.w	8004a90 <HAL_RCC_GetSysClockFreq+0x16c>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <HAL_RCC_GetSysClockFreq+0x34>
 8004952:	2b04      	cmp	r3, #4
 8004954:	d003      	beq.n	800495e <HAL_RCC_GetSysClockFreq+0x3a>
 8004956:	e09b      	b.n	8004a90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004958:	4b53      	ldr	r3, [pc, #332]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x184>)
 800495a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800495c:	e09b      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800495e:	4b53      	ldr	r3, [pc, #332]	@ (8004aac <HAL_RCC_GetSysClockFreq+0x188>)
 8004960:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004962:	e098      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004964:	4b4f      	ldr	r3, [pc, #316]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800496c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800496e:	4b4d      	ldr	r3, [pc, #308]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d028      	beq.n	80049cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800497a:	4b4a      	ldr	r3, [pc, #296]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	099b      	lsrs	r3, r3, #6
 8004980:	2200      	movs	r2, #0
 8004982:	623b      	str	r3, [r7, #32]
 8004984:	627a      	str	r2, [r7, #36]	@ 0x24
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800498c:	2100      	movs	r1, #0
 800498e:	4b47      	ldr	r3, [pc, #284]	@ (8004aac <HAL_RCC_GetSysClockFreq+0x188>)
 8004990:	fb03 f201 	mul.w	r2, r3, r1
 8004994:	2300      	movs	r3, #0
 8004996:	fb00 f303 	mul.w	r3, r0, r3
 800499a:	4413      	add	r3, r2
 800499c:	4a43      	ldr	r2, [pc, #268]	@ (8004aac <HAL_RCC_GetSysClockFreq+0x188>)
 800499e:	fba0 1202 	umull	r1, r2, r0, r2
 80049a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049a4:	460a      	mov	r2, r1
 80049a6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80049a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049aa:	4413      	add	r3, r2
 80049ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049b0:	2200      	movs	r2, #0
 80049b2:	61bb      	str	r3, [r7, #24]
 80049b4:	61fa      	str	r2, [r7, #28]
 80049b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80049be:	f7fb fc7f 	bl	80002c0 <__aeabi_uldivmod>
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	4613      	mov	r3, r2
 80049c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049ca:	e053      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049cc:	4b35      	ldr	r3, [pc, #212]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	099b      	lsrs	r3, r3, #6
 80049d2:	2200      	movs	r2, #0
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	617a      	str	r2, [r7, #20]
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80049de:	f04f 0b00 	mov.w	fp, #0
 80049e2:	4652      	mov	r2, sl
 80049e4:	465b      	mov	r3, fp
 80049e6:	f04f 0000 	mov.w	r0, #0
 80049ea:	f04f 0100 	mov.w	r1, #0
 80049ee:	0159      	lsls	r1, r3, #5
 80049f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049f4:	0150      	lsls	r0, r2, #5
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	ebb2 080a 	subs.w	r8, r2, sl
 80049fe:	eb63 090b 	sbc.w	r9, r3, fp
 8004a02:	f04f 0200 	mov.w	r2, #0
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a16:	ebb2 0408 	subs.w	r4, r2, r8
 8004a1a:	eb63 0509 	sbc.w	r5, r3, r9
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	00eb      	lsls	r3, r5, #3
 8004a28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a2c:	00e2      	lsls	r2, r4, #3
 8004a2e:	4614      	mov	r4, r2
 8004a30:	461d      	mov	r5, r3
 8004a32:	eb14 030a 	adds.w	r3, r4, sl
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	eb45 030b 	adc.w	r3, r5, fp
 8004a3c:	607b      	str	r3, [r7, #4]
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	028b      	lsls	r3, r1, #10
 8004a4e:	4621      	mov	r1, r4
 8004a50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a54:	4621      	mov	r1, r4
 8004a56:	028a      	lsls	r2, r1, #10
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a5e:	2200      	movs	r2, #0
 8004a60:	60bb      	str	r3, [r7, #8]
 8004a62:	60fa      	str	r2, [r7, #12]
 8004a64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a68:	f7fb fc2a 	bl	80002c0 <__aeabi_uldivmod>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4613      	mov	r3, r2
 8004a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a74:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	0c1b      	lsrs	r3, r3, #16
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	3301      	adds	r3, #1
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004a84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a8e:	e002      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a90:	4b05      	ldr	r3, [pc, #20]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3740      	adds	r7, #64	@ 0x40
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	00f42400 	.word	0x00f42400
 8004aac:	017d7840 	.word	0x017d7840

08004ab0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab4:	4b03      	ldr	r3, [pc, #12]	@ (8004ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	20000004 	.word	0x20000004

08004ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004acc:	f7ff fff0 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b05      	ldr	r3, [pc, #20]	@ (8004ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	0b5b      	lsrs	r3, r3, #13
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	4903      	ldr	r1, [pc, #12]	@ (8004aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	08016eb0 	.word	0x08016eb0

08004af0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	220f      	movs	r2, #15
 8004afe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b00:	4b12      	ldr	r3, [pc, #72]	@ (8004b4c <HAL_RCC_GetClockConfig+0x5c>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 0203 	and.w	r2, r3, #3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b4c <HAL_RCC_GetClockConfig+0x5c>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b18:	4b0c      	ldr	r3, [pc, #48]	@ (8004b4c <HAL_RCC_GetClockConfig+0x5c>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004b24:	4b09      	ldr	r3, [pc, #36]	@ (8004b4c <HAL_RCC_GetClockConfig+0x5c>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	08db      	lsrs	r3, r3, #3
 8004b2a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b32:	4b07      	ldr	r3, [pc, #28]	@ (8004b50 <HAL_RCC_GetClockConfig+0x60>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 020f 	and.w	r2, r3, #15
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	601a      	str	r2, [r3, #0]
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	40023c00 	.word	0x40023c00

08004b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e049      	b.n	8004bfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f841 	bl	8004c02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f000 f9e8 	bl	8004f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d001      	beq.n	8004c30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e054      	b.n	8004cda <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a26      	ldr	r2, [pc, #152]	@ (8004ce8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d022      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x80>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c5a:	d01d      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x80>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a22      	ldr	r2, [pc, #136]	@ (8004cec <HAL_TIM_Base_Start_IT+0xd4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d018      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x80>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a21      	ldr	r2, [pc, #132]	@ (8004cf0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d013      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x80>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a1f      	ldr	r2, [pc, #124]	@ (8004cf4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00e      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x80>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d009      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x80>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a1c      	ldr	r2, [pc, #112]	@ (8004cfc <HAL_TIM_Base_Start_IT+0xe4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x80>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a1b      	ldr	r2, [pc, #108]	@ (8004d00 <HAL_TIM_Base_Start_IT+0xe8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d115      	bne.n	8004cc4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	4b19      	ldr	r3, [pc, #100]	@ (8004d04 <HAL_TIM_Base_Start_IT+0xec>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b06      	cmp	r3, #6
 8004ca8:	d015      	beq.n	8004cd6 <HAL_TIM_Base_Start_IT+0xbe>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cb0:	d011      	beq.n	8004cd6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0201 	orr.w	r2, r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc2:	e008      	b.n	8004cd6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0201 	orr.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	e000      	b.n	8004cd8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40010000 	.word	0x40010000
 8004cec:	40000400 	.word	0x40000400
 8004cf0:	40000800 	.word	0x40000800
 8004cf4:	40000c00 	.word	0x40000c00
 8004cf8:	40010400 	.word	0x40010400
 8004cfc:	40014000 	.word	0x40014000
 8004d00:	40001800 	.word	0x40001800
 8004d04:	00010007 	.word	0x00010007

08004d08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d020      	beq.n	8004d6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d01b      	beq.n	8004d6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0202 	mvn.w	r2, #2
 8004d3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f8e9 	bl	8004f2a <HAL_TIM_IC_CaptureCallback>
 8004d58:	e005      	b.n	8004d66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f8db 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f8ec 	bl	8004f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d020      	beq.n	8004db8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01b      	beq.n	8004db8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f06f 0204 	mvn.w	r2, #4
 8004d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f8c3 	bl	8004f2a <HAL_TIM_IC_CaptureCallback>
 8004da4:	e005      	b.n	8004db2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f8b5 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f8c6 	bl	8004f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d020      	beq.n	8004e04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d01b      	beq.n	8004e04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f06f 0208 	mvn.w	r2, #8
 8004dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2204      	movs	r2, #4
 8004dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f89d 	bl	8004f2a <HAL_TIM_IC_CaptureCallback>
 8004df0:	e005      	b.n	8004dfe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f88f 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f8a0 	bl	8004f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f003 0310 	and.w	r3, r3, #16
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d020      	beq.n	8004e50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d01b      	beq.n	8004e50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f06f 0210 	mvn.w	r2, #16
 8004e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2208      	movs	r2, #8
 8004e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f877 	bl	8004f2a <HAL_TIM_IC_CaptureCallback>
 8004e3c:	e005      	b.n	8004e4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f869 	bl	8004f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f87a 	bl	8004f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00c      	beq.n	8004e74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d007      	beq.n	8004e74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f06f 0201 	mvn.w	r2, #1
 8004e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fc ff22 	bl	8001cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d104      	bne.n	8004e88 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00c      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d007      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f919 	bl	80050d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00c      	beq.n	8004ec6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d007      	beq.n	8004ec6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f911 	bl	80050e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00c      	beq.n	8004eea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d007      	beq.n	8004eea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f834 	bl	8004f52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f003 0320 	and.w	r3, r3, #32
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00c      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f06f 0220 	mvn.w	r2, #32
 8004f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f8d9 	bl	80050c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f0e:	bf00      	nop
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b083      	sub	sp, #12
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
	...

08004f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a46      	ldr	r2, [pc, #280]	@ (8005094 <TIM_Base_SetConfig+0x12c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d013      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f86:	d00f      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a43      	ldr	r2, [pc, #268]	@ (8005098 <TIM_Base_SetConfig+0x130>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00b      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a42      	ldr	r2, [pc, #264]	@ (800509c <TIM_Base_SetConfig+0x134>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d007      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a41      	ldr	r2, [pc, #260]	@ (80050a0 <TIM_Base_SetConfig+0x138>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d003      	beq.n	8004fa8 <TIM_Base_SetConfig+0x40>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a40      	ldr	r2, [pc, #256]	@ (80050a4 <TIM_Base_SetConfig+0x13c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d108      	bne.n	8004fba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a35      	ldr	r2, [pc, #212]	@ (8005094 <TIM_Base_SetConfig+0x12c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d02b      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc8:	d027      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a32      	ldr	r2, [pc, #200]	@ (8005098 <TIM_Base_SetConfig+0x130>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d023      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a31      	ldr	r2, [pc, #196]	@ (800509c <TIM_Base_SetConfig+0x134>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d01f      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a30      	ldr	r2, [pc, #192]	@ (80050a0 <TIM_Base_SetConfig+0x138>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d01b      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a2f      	ldr	r2, [pc, #188]	@ (80050a4 <TIM_Base_SetConfig+0x13c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d017      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a2e      	ldr	r2, [pc, #184]	@ (80050a8 <TIM_Base_SetConfig+0x140>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d013      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80050ac <TIM_Base_SetConfig+0x144>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00f      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a2c      	ldr	r2, [pc, #176]	@ (80050b0 <TIM_Base_SetConfig+0x148>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00b      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a2b      	ldr	r2, [pc, #172]	@ (80050b4 <TIM_Base_SetConfig+0x14c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d007      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a2a      	ldr	r2, [pc, #168]	@ (80050b8 <TIM_Base_SetConfig+0x150>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d003      	beq.n	800501a <TIM_Base_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a29      	ldr	r2, [pc, #164]	@ (80050bc <TIM_Base_SetConfig+0x154>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d108      	bne.n	800502c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a10      	ldr	r2, [pc, #64]	@ (8005094 <TIM_Base_SetConfig+0x12c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d003      	beq.n	8005060 <TIM_Base_SetConfig+0xf8>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a12      	ldr	r2, [pc, #72]	@ (80050a4 <TIM_Base_SetConfig+0x13c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d103      	bne.n	8005068 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b01      	cmp	r3, #1
 8005078:	d105      	bne.n	8005086 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f023 0201 	bic.w	r2, r3, #1
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	611a      	str	r2, [r3, #16]
  }
}
 8005086:	bf00      	nop
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40010000 	.word	0x40010000
 8005098:	40000400 	.word	0x40000400
 800509c:	40000800 	.word	0x40000800
 80050a0:	40000c00 	.word	0x40000c00
 80050a4:	40010400 	.word	0x40010400
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40014400 	.word	0x40014400
 80050b0:	40014800 	.word	0x40014800
 80050b4:	40001800 	.word	0x40001800
 80050b8:	40001c00 	.word	0x40001c00
 80050bc:	40002000 	.word	0x40002000

080050c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050fc:	b084      	sub	sp, #16
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	f107 001c 	add.w	r0, r7, #28
 800510a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800510e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005112:	2b01      	cmp	r3, #1
 8005114:	d121      	bne.n	800515a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800511a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	4b21      	ldr	r3, [pc, #132]	@ (80051ac <USB_CoreInit+0xb0>)
 8005128:	4013      	ands	r3, r2
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800513a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800513e:	2b01      	cmp	r3, #1
 8005140:	d105      	bne.n	800514e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f001 fade 	bl	8006710 <USB_CoreReset>
 8005154:	4603      	mov	r3, r0
 8005156:	73fb      	strb	r3, [r7, #15]
 8005158:	e010      	b.n	800517c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f001 fad2 	bl	8006710 <USB_CoreReset>
 800516c:	4603      	mov	r3, r0
 800516e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005174:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800517c:	7fbb      	ldrb	r3, [r7, #30]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d10b      	bne.n	800519a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f043 0206 	orr.w	r2, r3, #6
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f043 0220 	orr.w	r2, r3, #32
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800519a:	7bfb      	ldrb	r3, [r7, #15]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051a6:	b004      	add	sp, #16
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	ffbdffbf 	.word	0xffbdffbf

080051b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	4613      	mov	r3, r2
 80051bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d165      	bne.n	8005290 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4a41      	ldr	r2, [pc, #260]	@ (80052cc <USB_SetTurnaroundTime+0x11c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d906      	bls.n	80051da <USB_SetTurnaroundTime+0x2a>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4a40      	ldr	r2, [pc, #256]	@ (80052d0 <USB_SetTurnaroundTime+0x120>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d202      	bcs.n	80051da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80051d4:	230f      	movs	r3, #15
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	e062      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	4a3c      	ldr	r2, [pc, #240]	@ (80052d0 <USB_SetTurnaroundTime+0x120>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d306      	bcc.n	80051f0 <USB_SetTurnaroundTime+0x40>
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	4a3b      	ldr	r2, [pc, #236]	@ (80052d4 <USB_SetTurnaroundTime+0x124>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d202      	bcs.n	80051f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80051ea:	230e      	movs	r3, #14
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	e057      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4a38      	ldr	r2, [pc, #224]	@ (80052d4 <USB_SetTurnaroundTime+0x124>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d306      	bcc.n	8005206 <USB_SetTurnaroundTime+0x56>
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4a37      	ldr	r2, [pc, #220]	@ (80052d8 <USB_SetTurnaroundTime+0x128>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d202      	bcs.n	8005206 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005200:	230d      	movs	r3, #13
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	e04c      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	4a33      	ldr	r2, [pc, #204]	@ (80052d8 <USB_SetTurnaroundTime+0x128>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d306      	bcc.n	800521c <USB_SetTurnaroundTime+0x6c>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	4a32      	ldr	r2, [pc, #200]	@ (80052dc <USB_SetTurnaroundTime+0x12c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d802      	bhi.n	800521c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005216:	230c      	movs	r3, #12
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	e041      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4a2f      	ldr	r2, [pc, #188]	@ (80052dc <USB_SetTurnaroundTime+0x12c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d906      	bls.n	8005232 <USB_SetTurnaroundTime+0x82>
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	4a2e      	ldr	r2, [pc, #184]	@ (80052e0 <USB_SetTurnaroundTime+0x130>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d802      	bhi.n	8005232 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800522c:	230b      	movs	r3, #11
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	e036      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	4a2a      	ldr	r2, [pc, #168]	@ (80052e0 <USB_SetTurnaroundTime+0x130>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d906      	bls.n	8005248 <USB_SetTurnaroundTime+0x98>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	4a29      	ldr	r2, [pc, #164]	@ (80052e4 <USB_SetTurnaroundTime+0x134>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d802      	bhi.n	8005248 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005242:	230a      	movs	r3, #10
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	e02b      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	4a26      	ldr	r2, [pc, #152]	@ (80052e4 <USB_SetTurnaroundTime+0x134>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d906      	bls.n	800525e <USB_SetTurnaroundTime+0xae>
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	4a25      	ldr	r2, [pc, #148]	@ (80052e8 <USB_SetTurnaroundTime+0x138>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d202      	bcs.n	800525e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005258:	2309      	movs	r3, #9
 800525a:	617b      	str	r3, [r7, #20]
 800525c:	e020      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	4a21      	ldr	r2, [pc, #132]	@ (80052e8 <USB_SetTurnaroundTime+0x138>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d306      	bcc.n	8005274 <USB_SetTurnaroundTime+0xc4>
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	4a20      	ldr	r2, [pc, #128]	@ (80052ec <USB_SetTurnaroundTime+0x13c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d802      	bhi.n	8005274 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800526e:	2308      	movs	r3, #8
 8005270:	617b      	str	r3, [r7, #20]
 8005272:	e015      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4a1d      	ldr	r2, [pc, #116]	@ (80052ec <USB_SetTurnaroundTime+0x13c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d906      	bls.n	800528a <USB_SetTurnaroundTime+0xda>
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4a1c      	ldr	r2, [pc, #112]	@ (80052f0 <USB_SetTurnaroundTime+0x140>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d202      	bcs.n	800528a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005284:	2307      	movs	r3, #7
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	e00a      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800528a:	2306      	movs	r3, #6
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	e007      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005290:	79fb      	ldrb	r3, [r7, #7]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d102      	bne.n	800529c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005296:	2309      	movs	r3, #9
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	e001      	b.n	80052a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800529c:	2309      	movs	r3, #9
 800529e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	029b      	lsls	r3, r3, #10
 80052b4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80052b8:	431a      	orrs	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	00d8acbf 	.word	0x00d8acbf
 80052d0:	00e4e1c0 	.word	0x00e4e1c0
 80052d4:	00f42400 	.word	0x00f42400
 80052d8:	01067380 	.word	0x01067380
 80052dc:	011a499f 	.word	0x011a499f
 80052e0:	01312cff 	.word	0x01312cff
 80052e4:	014ca43f 	.word	0x014ca43f
 80052e8:	016e3600 	.word	0x016e3600
 80052ec:	01a6ab1f 	.word	0x01a6ab1f
 80052f0:	01e84800 	.word	0x01e84800

080052f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f043 0201 	orr.w	r2, r3, #1
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f023 0201 	bic.w	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	460b      	mov	r3, r1
 8005342:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d115      	bne.n	8005386 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005366:	200a      	movs	r0, #10
 8005368:	f7fd fa1c 	bl	80027a4 <HAL_Delay>
      ms += 10U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	330a      	adds	r3, #10
 8005370:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f001 f93b 	bl	80065ee <USB_GetMode>
 8005378:	4603      	mov	r3, r0
 800537a:	2b01      	cmp	r3, #1
 800537c:	d01e      	beq.n	80053bc <USB_SetCurrentMode+0x84>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2bc7      	cmp	r3, #199	@ 0xc7
 8005382:	d9f0      	bls.n	8005366 <USB_SetCurrentMode+0x2e>
 8005384:	e01a      	b.n	80053bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005386:	78fb      	ldrb	r3, [r7, #3]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d115      	bne.n	80053b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005398:	200a      	movs	r0, #10
 800539a:	f7fd fa03 	bl	80027a4 <HAL_Delay>
      ms += 10U;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	330a      	adds	r3, #10
 80053a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f001 f922 	bl	80065ee <USB_GetMode>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <USB_SetCurrentMode+0x84>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2bc7      	cmp	r3, #199	@ 0xc7
 80053b4:	d9f0      	bls.n	8005398 <USB_SetCurrentMode+0x60>
 80053b6:	e001      	b.n	80053bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e005      	b.n	80053c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2bc8      	cmp	r3, #200	@ 0xc8
 80053c0:	d101      	bne.n	80053c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053d0:	b084      	sub	sp, #16
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b086      	sub	sp, #24
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80053de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80053ea:	2300      	movs	r3, #0
 80053ec:	613b      	str	r3, [r7, #16]
 80053ee:	e009      	b.n	8005404 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	3340      	adds	r3, #64	@ 0x40
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	2200      	movs	r2, #0
 80053fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	3301      	adds	r3, #1
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	2b0e      	cmp	r3, #14
 8005408:	d9f2      	bls.n	80053f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800540a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800540e:	2b00      	cmp	r3, #0
 8005410:	d11c      	bne.n	800544c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005420:	f043 0302 	orr.w	r3, r3, #2
 8005424:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800542a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	e005      	b.n	8005458 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005450:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800545e:	461a      	mov	r2, r3
 8005460:	2300      	movs	r3, #0
 8005462:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005464:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005468:	2b01      	cmp	r3, #1
 800546a:	d10d      	bne.n	8005488 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800546c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005470:	2b00      	cmp	r3, #0
 8005472:	d104      	bne.n	800547e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005474:	2100      	movs	r1, #0
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f968 	bl	800574c <USB_SetDevSpeed>
 800547c:	e008      	b.n	8005490 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800547e:	2101      	movs	r1, #1
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f963 	bl	800574c <USB_SetDevSpeed>
 8005486:	e003      	b.n	8005490 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005488:	2103      	movs	r1, #3
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f95e 	bl	800574c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005490:	2110      	movs	r1, #16
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f8fa 	bl	800568c <USB_FlushTxFifo>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f924 	bl	80056f0 <USB_FlushRxFifo>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054b8:	461a      	mov	r2, r3
 80054ba:	2300      	movs	r3, #0
 80054bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054c4:	461a      	mov	r2, r3
 80054c6:	2300      	movs	r3, #0
 80054c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054d0:	461a      	mov	r2, r3
 80054d2:	2300      	movs	r3, #0
 80054d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054d6:	2300      	movs	r3, #0
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	e043      	b.n	8005564 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054f2:	d118      	bne.n	8005526 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005506:	461a      	mov	r2, r3
 8005508:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	e013      	b.n	8005538 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800551c:	461a      	mov	r2, r3
 800551e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	e008      	b.n	8005538 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005532:	461a      	mov	r2, r3
 8005534:	2300      	movs	r3, #0
 8005536:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005544:	461a      	mov	r2, r3
 8005546:	2300      	movs	r3, #0
 8005548:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005556:	461a      	mov	r2, r3
 8005558:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800555c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	3301      	adds	r3, #1
 8005562:	613b      	str	r3, [r7, #16]
 8005564:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005568:	461a      	mov	r2, r3
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	4293      	cmp	r3, r2
 800556e:	d3b5      	bcc.n	80054dc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005570:	2300      	movs	r3, #0
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	e043      	b.n	80055fe <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005588:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800558c:	d118      	bne.n	80055c0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10a      	bne.n	80055aa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a0:	461a      	mov	r2, r3
 80055a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	e013      	b.n	80055d2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055b6:	461a      	mov	r2, r3
 80055b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	e008      	b.n	80055d2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055cc:	461a      	mov	r2, r3
 80055ce:	2300      	movs	r3, #0
 80055d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055de:	461a      	mov	r2, r3
 80055e0:	2300      	movs	r3, #0
 80055e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f0:	461a      	mov	r2, r3
 80055f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80055f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	3301      	adds	r3, #1
 80055fc:	613b      	str	r3, [r7, #16]
 80055fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005602:	461a      	mov	r2, r3
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4293      	cmp	r3, r2
 8005608:	d3b5      	bcc.n	8005576 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005618:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800561c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800562a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800562c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005630:	2b00      	cmp	r3, #0
 8005632:	d105      	bne.n	8005640 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	f043 0210 	orr.w	r2, r3, #16
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699a      	ldr	r2, [r3, #24]
 8005644:	4b0f      	ldr	r3, [pc, #60]	@ (8005684 <USB_DevInit+0x2b4>)
 8005646:	4313      	orrs	r3, r2
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800564c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	f043 0208 	orr.w	r2, r3, #8
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005660:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005664:	2b01      	cmp	r3, #1
 8005666:	d105      	bne.n	8005674 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	699a      	ldr	r2, [r3, #24]
 800566c:	4b06      	ldr	r3, [pc, #24]	@ (8005688 <USB_DevInit+0x2b8>)
 800566e:	4313      	orrs	r3, r2
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005674:	7dfb      	ldrb	r3, [r7, #23]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005680:	b004      	add	sp, #16
 8005682:	4770      	bx	lr
 8005684:	803c3800 	.word	0x803c3800
 8005688:	40000004 	.word	0x40000004

0800568c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005696:	2300      	movs	r3, #0
 8005698:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	3301      	adds	r3, #1
 800569e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056a6:	d901      	bls.n	80056ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e01b      	b.n	80056e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	daf2      	bge.n	800569a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	019b      	lsls	r3, r3, #6
 80056bc:	f043 0220 	orr.w	r2, r3, #32
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3301      	adds	r3, #1
 80056c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056d0:	d901      	bls.n	80056d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e006      	b.n	80056e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d0f0      	beq.n	80056c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3301      	adds	r3, #1
 8005700:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005708:	d901      	bls.n	800570e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e018      	b.n	8005740 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	daf2      	bge.n	80056fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2210      	movs	r2, #16
 800571e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	3301      	adds	r3, #1
 8005724:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800572c:	d901      	bls.n	8005732 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e006      	b.n	8005740 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0310 	and.w	r3, r3, #16
 800573a:	2b10      	cmp	r3, #16
 800573c:	d0f0      	beq.n	8005720 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	68f9      	ldr	r1, [r7, #12]
 8005768:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800576c:	4313      	orrs	r3, r2
 800576e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800577e:	b480      	push	{r7}
 8005780:	b087      	sub	sp, #28
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 0306 	and.w	r3, r3, #6
 8005796:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d102      	bne.n	80057a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800579e:	2300      	movs	r3, #0
 80057a0:	75fb      	strb	r3, [r7, #23]
 80057a2:	e00a      	b.n	80057ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d002      	beq.n	80057b0 <USB_GetDevSpeed+0x32>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b06      	cmp	r3, #6
 80057ae:	d102      	bne.n	80057b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80057b0:	2302      	movs	r3, #2
 80057b2:	75fb      	strb	r3, [r7, #23]
 80057b4:	e001      	b.n	80057ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80057b6:	230f      	movs	r3, #15
 80057b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80057ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	371c      	adds	r7, #28
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	785b      	ldrb	r3, [r3, #1]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d139      	bne.n	8005858 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057ea:	69da      	ldr	r2, [r3, #28]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	2101      	movs	r1, #1
 80057f6:	fa01 f303 	lsl.w	r3, r1, r3
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	68f9      	ldr	r1, [r7, #12]
 80057fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005802:	4313      	orrs	r3, r2
 8005804:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d153      	bne.n	80058c4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	791b      	ldrb	r3, [r3, #4]
 8005836:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005838:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	059b      	lsls	r3, r3, #22
 800583e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005840:	431a      	orrs	r2, r3
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	0159      	lsls	r1, r3, #5
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	440b      	add	r3, r1
 800584a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800584e:	4619      	mov	r1, r3
 8005850:	4b20      	ldr	r3, [pc, #128]	@ (80058d4 <USB_ActivateEndpoint+0x10c>)
 8005852:	4313      	orrs	r3, r2
 8005854:	600b      	str	r3, [r1, #0]
 8005856:	e035      	b.n	80058c4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800585e:	69da      	ldr	r2, [r3, #28]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	f003 030f 	and.w	r3, r3, #15
 8005868:	2101      	movs	r1, #1
 800586a:	fa01 f303 	lsl.w	r3, r1, r3
 800586e:	041b      	lsls	r3, r3, #16
 8005870:	68f9      	ldr	r1, [r7, #12]
 8005872:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005876:	4313      	orrs	r3, r2
 8005878:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d119      	bne.n	80058c4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	791b      	ldrb	r3, [r3, #4]
 80058aa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058ac:	430b      	orrs	r3, r1
 80058ae:	431a      	orrs	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	0159      	lsls	r1, r3, #5
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	440b      	add	r3, r1
 80058b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058bc:	4619      	mov	r1, r3
 80058be:	4b05      	ldr	r3, [pc, #20]	@ (80058d4 <USB_ActivateEndpoint+0x10c>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	10008000 	.word	0x10008000

080058d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	785b      	ldrb	r3, [r3, #1]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d161      	bne.n	80059b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005906:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800590a:	d11f      	bne.n	800594c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4413      	add	r3, r2
 8005914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	0151      	lsls	r1, r2, #5
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	440a      	add	r2, r1
 8005922:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005926:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800592a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	0151      	lsls	r1, r2, #5
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	440a      	add	r2, r1
 8005942:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005946:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800594a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005952:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	f003 030f 	and.w	r3, r3, #15
 800595c:	2101      	movs	r1, #1
 800595e:	fa01 f303 	lsl.w	r3, r1, r3
 8005962:	b29b      	uxth	r3, r3
 8005964:	43db      	mvns	r3, r3
 8005966:	68f9      	ldr	r1, [r7, #12]
 8005968:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800596c:	4013      	ands	r3, r2
 800596e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005976:	69da      	ldr	r2, [r3, #28]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	f003 030f 	and.w	r3, r3, #15
 8005980:	2101      	movs	r1, #1
 8005982:	fa01 f303 	lsl.w	r3, r1, r3
 8005986:	b29b      	uxth	r3, r3
 8005988:	43db      	mvns	r3, r3
 800598a:	68f9      	ldr	r1, [r7, #12]
 800598c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005990:	4013      	ands	r3, r2
 8005992:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	0159      	lsls	r1, r3, #5
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	440b      	add	r3, r1
 80059aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059ae:	4619      	mov	r1, r3
 80059b0:	4b35      	ldr	r3, [pc, #212]	@ (8005a88 <USB_DeactivateEndpoint+0x1b0>)
 80059b2:	4013      	ands	r3, r2
 80059b4:	600b      	str	r3, [r1, #0]
 80059b6:	e060      	b.n	8005a7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059ce:	d11f      	bne.n	8005a10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	0151      	lsls	r1, r2, #5
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	440a      	add	r2, r1
 80059e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80059ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	0151      	lsls	r1, r2, #5
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	440a      	add	r2, r1
 8005a06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	f003 030f 	and.w	r3, r3, #15
 8005a20:	2101      	movs	r1, #1
 8005a22:	fa01 f303 	lsl.w	r3, r1, r3
 8005a26:	041b      	lsls	r3, r3, #16
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	68f9      	ldr	r1, [r7, #12]
 8005a2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a30:	4013      	ands	r3, r2
 8005a32:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a3a:	69da      	ldr	r2, [r3, #28]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	2101      	movs	r1, #1
 8005a46:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4a:	041b      	lsls	r3, r3, #16
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	68f9      	ldr	r1, [r7, #12]
 8005a50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a54:	4013      	ands	r3, r2
 8005a56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	0159      	lsls	r1, r3, #5
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	440b      	add	r3, r1
 8005a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a72:	4619      	mov	r1, r3
 8005a74:	4b05      	ldr	r3, [pc, #20]	@ (8005a8c <USB_DeactivateEndpoint+0x1b4>)
 8005a76:	4013      	ands	r3, r2
 8005a78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	ec337800 	.word	0xec337800
 8005a8c:	eff37800 	.word	0xeff37800

08005a90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08a      	sub	sp, #40	@ 0x28
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	785b      	ldrb	r3, [r3, #1]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	f040 8181 	bne.w	8005db4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d132      	bne.n	8005b20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	0159      	lsls	r1, r3, #5
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	440b      	add	r3, r1
 8005ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4ba5      	ldr	r3, [pc, #660]	@ (8005d6c <USB_EPStartXfer+0x2dc>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	0151      	lsls	r1, r2, #5
 8005aee:	69fa      	ldr	r2, [r7, #28]
 8005af0:	440a      	add	r2, r1
 8005af2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005af6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005afa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b08:	691a      	ldr	r2, [r3, #16]
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	0159      	lsls	r1, r3, #5
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	440b      	add	r3, r1
 8005b12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b16:	4619      	mov	r1, r3
 8005b18:	4b95      	ldr	r3, [pc, #596]	@ (8005d70 <USB_EPStartXfer+0x2e0>)
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	610b      	str	r3, [r1, #16]
 8005b1e:	e092      	b.n	8005c46 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b2c:	691a      	ldr	r2, [r3, #16]
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	0159      	lsls	r1, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	440b      	add	r3, r1
 8005b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4b8c      	ldr	r3, [pc, #560]	@ (8005d70 <USB_EPStartXfer+0x2e0>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	0159      	lsls	r1, r3, #5
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	440b      	add	r3, r1
 8005b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4b83      	ldr	r3, [pc, #524]	@ (8005d6c <USB_EPStartXfer+0x2dc>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d11a      	bne.n	8005ba0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	691a      	ldr	r2, [r3, #16]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d903      	bls.n	8005b7e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	0151      	lsls	r1, r2, #5
 8005b90:	69fa      	ldr	r2, [r7, #28]
 8005b92:	440a      	add	r2, r1
 8005b94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b9c:	6113      	str	r3, [r2, #16]
 8005b9e:	e01b      	b.n	8005bd8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bac:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	6919      	ldr	r1, [r3, #16]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	440b      	add	r3, r1
 8005bb8:	1e59      	subs	r1, r3, #1
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bc2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005bc4:	4b6b      	ldr	r3, [pc, #428]	@ (8005d74 <USB_EPStartXfer+0x2e4>)
 8005bc6:	400b      	ands	r3, r1
 8005bc8:	69b9      	ldr	r1, [r7, #24]
 8005bca:	0148      	lsls	r0, r1, #5
 8005bcc:	69f9      	ldr	r1, [r7, #28]
 8005bce:	4401      	add	r1, r0
 8005bd0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be4:	691a      	ldr	r2, [r3, #16]
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bee:	69b9      	ldr	r1, [r7, #24]
 8005bf0:	0148      	lsls	r0, r1, #5
 8005bf2:	69f9      	ldr	r1, [r7, #28]
 8005bf4:	4401      	add	r1, r0
 8005bf6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	791b      	ldrb	r3, [r3, #4]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d11f      	bne.n	8005c46 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	0151      	lsls	r1, r2, #5
 8005c18:	69fa      	ldr	r2, [r7, #28]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c20:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005c24:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	0151      	lsls	r1, r2, #5
 8005c38:	69fa      	ldr	r2, [r7, #28]
 8005c3a:	440a      	add	r2, r1
 8005c3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005c44:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005c46:	79fb      	ldrb	r3, [r7, #7]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d14b      	bne.n	8005ce4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d009      	beq.n	8005c68 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c60:	461a      	mov	r2, r3
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	791b      	ldrb	r3, [r3, #4]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d128      	bne.n	8005cc2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d110      	bne.n	8005ca2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	0151      	lsls	r1, r2, #5
 8005c92:	69fa      	ldr	r2, [r7, #28]
 8005c94:	440a      	add	r2, r1
 8005c96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c9a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	e00f      	b.n	8005cc2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cc0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	69fa      	ldr	r2, [r7, #28]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cdc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005ce0:	6013      	str	r3, [r2, #0]
 8005ce2:	e16a      	b.n	8005fba <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	0151      	lsls	r1, r2, #5
 8005cf6:	69fa      	ldr	r2, [r7, #28]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cfe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005d02:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	791b      	ldrb	r3, [r3, #4]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d015      	beq.n	8005d38 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 8152 	beq.w	8005fba <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	2101      	movs	r1, #1
 8005d28:	fa01 f303 	lsl.w	r3, r1, r3
 8005d2c:	69f9      	ldr	r1, [r7, #28]
 8005d2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d32:	4313      	orrs	r3, r2
 8005d34:	634b      	str	r3, [r1, #52]	@ 0x34
 8005d36:	e140      	b.n	8005fba <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d117      	bne.n	8005d78 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	0151      	lsls	r1, r2, #5
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	440a      	add	r2, r1
 8005d5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d62:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d66:	6013      	str	r3, [r2, #0]
 8005d68:	e016      	b.n	8005d98 <USB_EPStartXfer+0x308>
 8005d6a:	bf00      	nop
 8005d6c:	e007ffff 	.word	0xe007ffff
 8005d70:	fff80000 	.word	0xfff80000
 8005d74:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	0151      	lsls	r1, r2, #5
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	440a      	add	r2, r1
 8005d8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d96:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	68d9      	ldr	r1, [r3, #12]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	781a      	ldrb	r2, [r3, #0]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	b298      	uxth	r0, r3
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	4603      	mov	r3, r0
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f9b9 	bl	8006124 <USB_WritePacket>
 8005db2:	e102      	b.n	8005fba <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	0159      	lsls	r1, r3, #5
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	440b      	add	r3, r1
 8005dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dce:	4619      	mov	r1, r3
 8005dd0:	4b7c      	ldr	r3, [pc, #496]	@ (8005fc4 <USB_EPStartXfer+0x534>)
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de2:	691a      	ldr	r2, [r3, #16]
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	0159      	lsls	r1, r3, #5
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	440b      	add	r3, r1
 8005dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df0:	4619      	mov	r1, r3
 8005df2:	4b75      	ldr	r3, [pc, #468]	@ (8005fc8 <USB_EPStartXfer+0x538>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d12f      	bne.n	8005e5e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	689a      	ldr	r2, [r3, #8]
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e22:	691a      	ldr	r2, [r3, #16]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e2c:	69b9      	ldr	r1, [r7, #24]
 8005e2e:	0148      	lsls	r0, r1, #5
 8005e30:	69f9      	ldr	r1, [r7, #28]
 8005e32:	4401      	add	r1, r0
 8005e34:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	0151      	lsls	r1, r2, #5
 8005e4e:	69fa      	ldr	r2, [r7, #28]
 8005e50:	440a      	add	r2, r1
 8005e52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e5a:	6113      	str	r3, [r2, #16]
 8005e5c:	e05f      	b.n	8005f1e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d123      	bne.n	8005eae <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e72:	691a      	ldr	r2, [r3, #16]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e7c:	69b9      	ldr	r1, [r7, #24]
 8005e7e:	0148      	lsls	r0, r1, #5
 8005e80:	69f9      	ldr	r1, [r7, #28]
 8005e82:	4401      	add	r1, r0
 8005e84:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	0151      	lsls	r1, r2, #5
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	440a      	add	r2, r1
 8005ea2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ea6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005eaa:	6113      	str	r3, [r2, #16]
 8005eac:	e037      	b.n	8005f1e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	691a      	ldr	r2, [r3, #16]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	1e5a      	subs	r2, r3, #1
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	8afa      	ldrh	r2, [r7, #22]
 8005eca:	fb03 f202 	mul.w	r2, r3, r2
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ede:	691a      	ldr	r2, [r3, #16]
 8005ee0:	8afb      	ldrh	r3, [r7, #22]
 8005ee2:	04d9      	lsls	r1, r3, #19
 8005ee4:	4b39      	ldr	r3, [pc, #228]	@ (8005fcc <USB_EPStartXfer+0x53c>)
 8005ee6:	400b      	ands	r3, r1
 8005ee8:	69b9      	ldr	r1, [r7, #24]
 8005eea:	0148      	lsls	r0, r1, #5
 8005eec:	69f9      	ldr	r1, [r7, #28]
 8005eee:	4401      	add	r1, r0
 8005ef0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f04:	691a      	ldr	r2, [r3, #16]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f0e:	69b9      	ldr	r1, [r7, #24]
 8005f10:	0148      	lsls	r0, r1, #5
 8005f12:	69f9      	ldr	r1, [r7, #28]
 8005f14:	4401      	add	r1, r0
 8005f16:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005f1e:	79fb      	ldrb	r3, [r7, #7]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d10d      	bne.n	8005f40 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d009      	beq.n	8005f40 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	68d9      	ldr	r1, [r3, #12]
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f3c:	460a      	mov	r2, r1
 8005f3e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	791b      	ldrb	r3, [r3, #4]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d128      	bne.n	8005f9a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d110      	bne.n	8005f7a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	0151      	lsls	r1, r2, #5
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	440a      	add	r2, r1
 8005f6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f72:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f76:	6013      	str	r3, [r2, #0]
 8005f78:	e00f      	b.n	8005f9a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	0151      	lsls	r1, r2, #5
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	440a      	add	r2, r1
 8005f90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f98:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	69fa      	ldr	r2, [r7, #28]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fb4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005fb8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3720      	adds	r7, #32
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	fff80000 	.word	0xfff80000
 8005fc8:	e007ffff 	.word	0xe007ffff
 8005fcc:	1ff80000 	.word	0x1ff80000

08005fd0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	785b      	ldrb	r3, [r3, #1]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d14a      	bne.n	8006084 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006002:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006006:	f040 8086 	bne.w	8006116 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	7812      	ldrb	r2, [r2, #0]
 800601e:	0151      	lsls	r1, r2, #5
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	440a      	add	r2, r1
 8006024:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006028:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800602c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	7812      	ldrb	r2, [r2, #0]
 8006042:	0151      	lsls	r1, r2, #5
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	440a      	add	r2, r1
 8006048:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800604c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006050:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3301      	adds	r3, #1
 8006056:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800605e:	4293      	cmp	r3, r2
 8006060:	d902      	bls.n	8006068 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	75fb      	strb	r3, [r7, #23]
          break;
 8006066:	e056      	b.n	8006116 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800607c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006080:	d0e7      	beq.n	8006052 <USB_EPStopXfer+0x82>
 8006082:	e048      	b.n	8006116 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	015a      	lsls	r2, r3, #5
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	4413      	add	r3, r2
 800608e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006098:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800609c:	d13b      	bne.n	8006116 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	7812      	ldrb	r2, [r2, #0]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80060c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	7812      	ldrb	r2, [r2, #0]
 80060d6:	0151      	lsls	r1, r2, #5
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	440a      	add	r2, r1
 80060dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	3301      	adds	r3, #1
 80060ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d902      	bls.n	80060fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	75fb      	strb	r3, [r7, #23]
          break;
 80060fa:	e00c      	b.n	8006116 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006110:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006114:	d0e7      	beq.n	80060e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006116:	7dfb      	ldrb	r3, [r7, #23]
}
 8006118:	4618      	mov	r0, r3
 800611a:	371c      	adds	r7, #28
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006124:	b480      	push	{r7}
 8006126:	b089      	sub	sp, #36	@ 0x24
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	4611      	mov	r1, r2
 8006130:	461a      	mov	r2, r3
 8006132:	460b      	mov	r3, r1
 8006134:	71fb      	strb	r3, [r7, #7]
 8006136:	4613      	mov	r3, r2
 8006138:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006142:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006146:	2b00      	cmp	r3, #0
 8006148:	d123      	bne.n	8006192 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800614a:	88bb      	ldrh	r3, [r7, #4]
 800614c:	3303      	adds	r3, #3
 800614e:	089b      	lsrs	r3, r3, #2
 8006150:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006152:	2300      	movs	r3, #0
 8006154:	61bb      	str	r3, [r7, #24]
 8006156:	e018      	b.n	800618a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006158:	79fb      	ldrb	r3, [r7, #7]
 800615a:	031a      	lsls	r2, r3, #12
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	4413      	add	r3, r2
 8006160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006164:	461a      	mov	r2, r3
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	3301      	adds	r3, #1
 8006170:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	3301      	adds	r3, #1
 8006176:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	3301      	adds	r3, #1
 800617c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	3301      	adds	r3, #1
 8006182:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	3301      	adds	r3, #1
 8006188:	61bb      	str	r3, [r7, #24]
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	429a      	cmp	r2, r3
 8006190:	d3e2      	bcc.n	8006158 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3724      	adds	r7, #36	@ 0x24
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b08b      	sub	sp, #44	@ 0x2c
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	4613      	mov	r3, r2
 80061ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80061b6:	88fb      	ldrh	r3, [r7, #6]
 80061b8:	089b      	lsrs	r3, r3, #2
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80061be:	88fb      	ldrh	r3, [r7, #6]
 80061c0:	f003 0303 	and.w	r3, r3, #3
 80061c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80061c6:	2300      	movs	r3, #0
 80061c8:	623b      	str	r3, [r7, #32]
 80061ca:	e014      	b.n	80061f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80061d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061da:	3301      	adds	r3, #1
 80061dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e0:	3301      	adds	r3, #1
 80061e2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e6:	3301      	adds	r3, #1
 80061e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80061ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ec:	3301      	adds	r3, #1
 80061ee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	3301      	adds	r3, #1
 80061f4:	623b      	str	r3, [r7, #32]
 80061f6:	6a3a      	ldr	r2, [r7, #32]
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d3e6      	bcc.n	80061cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80061fe:	8bfb      	ldrh	r3, [r7, #30]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d01e      	beq.n	8006242 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006204:	2300      	movs	r3, #0
 8006206:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800620e:	461a      	mov	r2, r3
 8006210:	f107 0310 	add.w	r3, r7, #16
 8006214:	6812      	ldr	r2, [r2, #0]
 8006216:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	b2db      	uxtb	r3, r3
 800621e:	00db      	lsls	r3, r3, #3
 8006220:	fa22 f303 	lsr.w	r3, r2, r3
 8006224:	b2da      	uxtb	r2, r3
 8006226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006228:	701a      	strb	r2, [r3, #0]
      i++;
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	3301      	adds	r3, #1
 800622e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006232:	3301      	adds	r3, #1
 8006234:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006236:	8bfb      	ldrh	r3, [r7, #30]
 8006238:	3b01      	subs	r3, #1
 800623a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800623c:	8bfb      	ldrh	r3, [r7, #30]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1ea      	bne.n	8006218 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006244:	4618      	mov	r0, r3
 8006246:	372c      	adds	r7, #44	@ 0x2c
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	785b      	ldrb	r3, [r3, #1]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d12c      	bne.n	80062c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	db12      	blt.n	80062a4 <USB_EPSetStall+0x54>
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00f      	beq.n	80062a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	0151      	lsls	r1, r2, #5
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	440a      	add	r2, r1
 800629a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800629e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80062a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	0151      	lsls	r1, r2, #5
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	440a      	add	r2, r1
 80062ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80062c2:	6013      	str	r3, [r2, #0]
 80062c4:	e02b      	b.n	800631e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	db12      	blt.n	80062fe <USB_EPSetStall+0xae>
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00f      	beq.n	80062fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	0151      	lsls	r1, r2, #5
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	440a      	add	r2, r1
 80062f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80062fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	0151      	lsls	r1, r2, #5
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	440a      	add	r2, r1
 8006314:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006318:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800631c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	785b      	ldrb	r3, [r3, #1]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d128      	bne.n	800639a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	0151      	lsls	r1, r2, #5
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	440a      	add	r2, r1
 800635e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006362:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006366:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	791b      	ldrb	r3, [r3, #4]
 800636c:	2b03      	cmp	r3, #3
 800636e:	d003      	beq.n	8006378 <USB_EPClearStall+0x4c>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	791b      	ldrb	r3, [r3, #4]
 8006374:	2b02      	cmp	r3, #2
 8006376:	d138      	bne.n	80063ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	0151      	lsls	r1, r2, #5
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	440a      	add	r2, r1
 800638e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006392:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	e027      	b.n	80063ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	0151      	lsls	r1, r2, #5
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	440a      	add	r2, r1
 80063b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80063b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	791b      	ldrb	r3, [r3, #4]
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d003      	beq.n	80063ca <USB_EPClearStall+0x9e>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	791b      	ldrb	r3, [r3, #4]
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d10f      	bne.n	80063ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	0151      	lsls	r1, r2, #5
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	440a      	add	r2, r1
 80063e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	460b      	mov	r3, r1
 8006402:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006416:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800641a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	78fb      	ldrb	r3, [r7, #3]
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800642c:	68f9      	ldr	r1, [r7, #12]
 800642e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006432:	4313      	orrs	r3, r2
 8006434:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800645e:	f023 0303 	bic.w	r3, r3, #3
 8006462:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006472:	f023 0302 	bic.w	r3, r3, #2
 8006476:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006486:	b480      	push	{r7}
 8006488:	b085      	sub	sp, #20
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80064a0:	f023 0303 	bic.w	r3, r3, #3
 80064a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064b4:	f043 0302 	orr.w	r3, r3, #2
 80064b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4013      	ands	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80064e0:	68fb      	ldr	r3, [r7, #12]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b085      	sub	sp, #20
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	4013      	ands	r3, r2
 8006510:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	0c1b      	lsrs	r3, r3, #16
}
 8006516:	4618      	mov	r0, r3
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006522:	b480      	push	{r7}
 8006524:	b085      	sub	sp, #20
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	4013      	ands	r3, r2
 8006544:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	b29b      	uxth	r3, r3
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006556:	b480      	push	{r7}
 8006558:	b085      	sub	sp, #20
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	460b      	mov	r3, r1
 8006560:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006566:	78fb      	ldrb	r3, [r7, #3]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	4013      	ands	r3, r2
 8006582:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006584:	68bb      	ldr	r3, [r7, #8]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006592:	b480      	push	{r7}
 8006594:	b087      	sub	sp, #28
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	460b      	mov	r3, r1
 800659c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80065b6:	78fb      	ldrb	r3, [r7, #3]
 80065b8:	f003 030f 	and.w	r3, r3, #15
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	fa22 f303 	lsr.w	r3, r2, r3
 80065c2:	01db      	lsls	r3, r3, #7
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80065cc:	78fb      	ldrb	r3, [r7, #3]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	4013      	ands	r3, r2
 80065de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065e0:	68bb      	ldr	r3, [r7, #8]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	371c      	adds	r7, #28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	695b      	ldr	r3, [r3, #20]
 80065fa:	f003 0301 	and.w	r3, r3, #1
}
 80065fe:	4618      	mov	r0, r3
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
	...

0800660c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800660c:	b480      	push	{r7}
 800660e:	b085      	sub	sp, #20
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006626:	4619      	mov	r1, r3
 8006628:	4b09      	ldr	r3, [pc, #36]	@ (8006650 <USB_ActivateSetup+0x44>)
 800662a:	4013      	ands	r3, r2
 800662c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800663c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006640:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	fffff800 	.word	0xfffff800

08006654 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	460b      	mov	r3, r1
 800665e:	607a      	str	r2, [r7, #4]
 8006660:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	333c      	adds	r3, #60	@ 0x3c
 800666a:	3304      	adds	r3, #4
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	4a26      	ldr	r2, [pc, #152]	@ (800670c <USB_EP0_OutStart+0xb8>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d90a      	bls.n	800668e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006684:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006688:	d101      	bne.n	800668e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	e037      	b.n	80066fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006694:	461a      	mov	r2, r3
 8006696:	2300      	movs	r3, #0
 8006698:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80066ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066bc:	f043 0318 	orr.w	r3, r3, #24
 80066c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066d0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80066d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80066d6:	7afb      	ldrb	r3, [r7, #11]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d10f      	bne.n	80066fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e2:	461a      	mov	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066f6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80066fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	371c      	adds	r7, #28
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	4f54300a 	.word	0x4f54300a

08006710 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	3301      	adds	r3, #1
 8006720:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006728:	d901      	bls.n	800672e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e01b      	b.n	8006766 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	daf2      	bge.n	800671c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006736:	2300      	movs	r3, #0
 8006738:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	f043 0201 	orr.w	r2, r3, #1
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	3301      	adds	r3, #1
 800674a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006752:	d901      	bls.n	8006758 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e006      	b.n	8006766 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b01      	cmp	r3, #1
 8006762:	d0f0      	beq.n	8006746 <USB_CoreReset+0x36>

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b086      	sub	sp, #24
 8006776:	af00      	add	r7, sp, #0
 8006778:	60f8      	str	r0, [r7, #12]
 800677a:	60b9      	str	r1, [r7, #8]
 800677c:	4613      	mov	r3, r2
 800677e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006786:	2303      	movs	r3, #3
 8006788:	e01f      	b.n	80067ca <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	79fa      	ldrb	r2, [r7, #7]
 80067bc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f00e fec6 	bl	8015550 <USBD_LL_Init>
 80067c4:	4603      	mov	r3, r0
 80067c6:	75fb      	strb	r3, [r7, #23]

  return ret;
 80067c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b084      	sub	sp, #16
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067dc:	2300      	movs	r3, #0
 80067de:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e016      	b.n	8006818 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00b      	beq.n	8006816 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006806:	f107 020e 	add.w	r2, r7, #14
 800680a:	4610      	mov	r0, r2
 800680c:	4798      	blx	r3
 800680e:	4602      	mov	r2, r0
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f00e fee3 	bl	80155f4 <USBD_LL_Start>
 800682e:	4603      	mov	r3, r0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	460b      	mov	r3, r1
 8006858:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800685a:	2303      	movs	r3, #3
 800685c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006864:	2b00      	cmp	r3, #0
 8006866:	d009      	beq.n	800687c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	78fa      	ldrb	r2, [r7, #3]
 8006872:	4611      	mov	r1, r2
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	4798      	blx	r3
 8006878:	4603      	mov	r3, r0
 800687a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800687c:	7bfb      	ldrb	r3, [r7, #15]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b082      	sub	sp, #8
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	460b      	mov	r3, r1
 8006890:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006898:	2b00      	cmp	r3, #0
 800689a:	d007      	beq.n	80068ac <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	78fa      	ldrb	r2, [r7, #3]
 80068a6:	4611      	mov	r1, r2
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	4798      	blx	r3
  }

  return USBD_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80068c6:	6839      	ldr	r1, [r7, #0]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 ff99 	bl	8007800 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80068dc:	461a      	mov	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80068ea:	f003 031f 	and.w	r3, r3, #31
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d01a      	beq.n	8006928 <USBD_LL_SetupStage+0x72>
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d822      	bhi.n	800693c <USBD_LL_SetupStage+0x86>
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <USBD_LL_SetupStage+0x4a>
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d00a      	beq.n	8006914 <USBD_LL_SetupStage+0x5e>
 80068fe:	e01d      	b.n	800693c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fa6b 	bl	8006de4 <USBD_StdDevReq>
 800690e:	4603      	mov	r3, r0
 8006910:	73fb      	strb	r3, [r7, #15]
      break;
 8006912:	e020      	b.n	8006956 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 facf 	bl	8006ec0 <USBD_StdItfReq>
 8006922:	4603      	mov	r3, r0
 8006924:	73fb      	strb	r3, [r7, #15]
      break;
 8006926:	e016      	b.n	8006956 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fb0e 	bl	8006f52 <USBD_StdEPReq>
 8006936:	4603      	mov	r3, r0
 8006938:	73fb      	strb	r3, [r7, #15]
      break;
 800693a:	e00c      	b.n	8006956 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006942:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006946:	b2db      	uxtb	r3, r3
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f00e feb7 	bl	80156be <USBD_LL_StallEP>
 8006950:	4603      	mov	r3, r0
 8006952:	73fb      	strb	r3, [r7, #15]
      break;
 8006954:	bf00      	nop
  }

  return ret;
 8006956:	7bfb      	ldrb	r3, [r7, #15]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	460b      	mov	r3, r1
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800696e:	7afb      	ldrb	r3, [r7, #11]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d138      	bne.n	80069e6 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800697a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006982:	2b03      	cmp	r3, #3
 8006984:	d14a      	bne.n	8006a1c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	689a      	ldr	r2, [r3, #8]
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	429a      	cmp	r2, r3
 8006990:	d913      	bls.n	80069ba <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	689a      	ldr	r2, [r3, #8]
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	1ad2      	subs	r2, r2, r3
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	4293      	cmp	r3, r2
 80069aa:	bf28      	it	cs
 80069ac:	4613      	movcs	r3, r2
 80069ae:	461a      	mov	r2, r3
 80069b0:	6879      	ldr	r1, [r7, #4]
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f001 f818 	bl	80079e8 <USBD_CtlContinueRx>
 80069b8:	e030      	b.n	8006a1c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b03      	cmp	r3, #3
 80069c4:	d10b      	bne.n	80069de <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d005      	beq.n	80069de <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f001 f813 	bl	8007a0a <USBD_CtlSendStatus>
 80069e4:	e01a      	b.n	8006a1c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d114      	bne.n	8006a1c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00e      	beq.n	8006a1c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	7afa      	ldrb	r2, [r7, #11]
 8006a08:	4611      	mov	r1, r2
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	4798      	blx	r3
 8006a0e:	4603      	mov	r3, r0
 8006a10:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006a12:	7dfb      	ldrb	r3, [r7, #23]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006a18:	7dfb      	ldrb	r3, [r7, #23]
 8006a1a:	e000      	b.n	8006a1e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
	...

08006a28 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	460b      	mov	r3, r1
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  
  static uint32_t usbcoreDataIn;
  usbcoreDataIn++;
 8006a36:	4b4a      	ldr	r3, [pc, #296]	@ (8006b60 <USBD_LL_DataInStage+0x138>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	4a48      	ldr	r2, [pc, #288]	@ (8006b60 <USBD_LL_DataInStage+0x138>)
 8006a3e:	6013      	str	r3, [r2, #0]

  if (epnum == 0U)
 8006a40:	7afb      	ldrb	r3, [r7, #11]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d16b      	bne.n	8006b1e <USBD_LL_DataInStage+0xf6>
  {
    pep = &pdev->ep_in[0];
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	3314      	adds	r3, #20
 8006a4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d156      	bne.n	8006b04 <USBD_LL_DataInStage+0xdc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d914      	bls.n	8006a8c <USBD_LL_DataInStage+0x64>
      {
        pep->rem_length -= pep->maxpacket;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	689a      	ldr	r2, [r3, #8]
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	1ad2      	subs	r2, r2, r3
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	461a      	mov	r2, r3
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 ff87 	bl	800798c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a7e:	2300      	movs	r3, #0
 8006a80:	2200      	movs	r2, #0
 8006a82:	2100      	movs	r1, #0
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f00e fec4 	bl	8015812 <USBD_LL_PrepareReceive>
 8006a8a:	e03b      	b.n	8006b04 <USBD_LL_DataInStage+0xdc>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	68da      	ldr	r2, [r3, #12]
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d11c      	bne.n	8006ad2 <USBD_LL_DataInStage+0xaa>
            (pep->total_length >= pep->maxpacket) &&
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d316      	bcc.n	8006ad2 <USBD_LL_DataInStage+0xaa>
            (pep->total_length < pdev->ep0_data_len))
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d20f      	bcs.n	8006ad2 <USBD_LL_DataInStage+0xaa>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 ff68 	bl	800798c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2100      	movs	r1, #0
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f00e fea1 	bl	8015812 <USBD_LL_PrepareReceive>
 8006ad0:	e018      	b.n	8006b04 <USBD_LL_DataInStage+0xdc>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b03      	cmp	r3, #3
 8006adc:	d10b      	bne.n	8006af6 <USBD_LL_DataInStage+0xce>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d005      	beq.n	8006af6 <USBD_LL_DataInStage+0xce>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006af6:	2180      	movs	r1, #128	@ 0x80
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f00e fde0 	bl	80156be <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f000 ff96 	bl	8007a30 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d122      	bne.n	8006b54 <USBD_LL_DataInStage+0x12c>
    {
      (void)USBD_RunTestMode(pdev);
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f7ff fe92 	bl	8006838 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006b1c:	e01a      	b.n	8006b54 <USBD_LL_DataInStage+0x12c>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d114      	bne.n	8006b54 <USBD_LL_DataInStage+0x12c>
    {
      if (pdev->pClass->DataIn != NULL)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00e      	beq.n	8006b54 <USBD_LL_DataInStage+0x12c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	7afa      	ldrb	r2, [r7, #11]
 8006b40:	4611      	mov	r1, r2
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	4798      	blx	r3
 8006b46:	4603      	mov	r3, r0
 8006b48:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d001      	beq.n	8006b54 <USBD_LL_DataInStage+0x12c>
        {
          return ret;
 8006b50:	7dfb      	ldrb	r3, [r7, #23]
 8006b52:	e000      	b.n	8006b56 <USBD_LL_DataInStage+0x12e>
        }
      }
    }
  }

  return USBD_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20005934 	.word	0x20005934

08006b64 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e02f      	b.n	8006bf8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00f      	beq.n	8006bc2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d009      	beq.n	8006bc2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	6852      	ldr	r2, [r2, #4]
 8006bba:	b2d2      	uxtb	r2, r2
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bc2:	2340      	movs	r3, #64	@ 0x40
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f00e fd2e 	bl	801562a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2240      	movs	r2, #64	@ 0x40
 8006bda:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bde:	2340      	movs	r3, #64	@ 0x40
 8006be0:	2200      	movs	r2, #0
 8006be2:	2180      	movs	r1, #128	@ 0x80
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f00e fd20 	bl	801562a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2240      	movs	r2, #64	@ 0x40
 8006bf4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	78fa      	ldrb	r2, [r7, #3]
 8006c10:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2204      	movs	r2, #4
 8006c3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d106      	bne.n	8006c6e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006c66:	b2da      	uxtb	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e012      	b.n	8006cb8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d10b      	bne.n	8006cb6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e014      	b.n	8006d04 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d10d      	bne.n	8006d02 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d007      	beq.n	8006d02 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	78fa      	ldrb	r2, [r7, #3]
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e014      	b.n	8006d50 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d10d      	bne.n	8006d4e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d007      	beq.n	8006d4e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d46:	78fa      	ldrb	r2, [r7, #3]
 8006d48:	4611      	mov	r1, r2
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b082      	sub	sp, #8
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d009      	beq.n	8006d9c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	6852      	ldr	r2, [r2, #4]
 8006d94:	b2d2      	uxtb	r2, r2
 8006d96:	4611      	mov	r1, r2
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	4798      	blx	r3
  }

  return USBD_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b087      	sub	sp, #28
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006dc4:	8a3b      	ldrh	r3, [r7, #16]
 8006dc6:	021b      	lsls	r3, r3, #8
 8006dc8:	b21a      	sxth	r2, r3
 8006dca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	b21b      	sxth	r3, r3
 8006dd2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006dd4:	89fb      	ldrh	r3, [r7, #14]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	371c      	adds	r7, #28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
	...

08006de4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006dfa:	2b40      	cmp	r3, #64	@ 0x40
 8006dfc:	d005      	beq.n	8006e0a <USBD_StdDevReq+0x26>
 8006dfe:	2b40      	cmp	r3, #64	@ 0x40
 8006e00:	d853      	bhi.n	8006eaa <USBD_StdDevReq+0xc6>
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00b      	beq.n	8006e1e <USBD_StdDevReq+0x3a>
 8006e06:	2b20      	cmp	r3, #32
 8006e08:	d14f      	bne.n	8006eaa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	4798      	blx	r3
 8006e18:	4603      	mov	r3, r0
 8006e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e1c:	e04a      	b.n	8006eb4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	785b      	ldrb	r3, [r3, #1]
 8006e22:	2b09      	cmp	r3, #9
 8006e24:	d83b      	bhi.n	8006e9e <USBD_StdDevReq+0xba>
 8006e26:	a201      	add	r2, pc, #4	@ (adr r2, 8006e2c <USBD_StdDevReq+0x48>)
 8006e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2c:	08006e81 	.word	0x08006e81
 8006e30:	08006e95 	.word	0x08006e95
 8006e34:	08006e9f 	.word	0x08006e9f
 8006e38:	08006e8b 	.word	0x08006e8b
 8006e3c:	08006e9f 	.word	0x08006e9f
 8006e40:	08006e5f 	.word	0x08006e5f
 8006e44:	08006e55 	.word	0x08006e55
 8006e48:	08006e9f 	.word	0x08006e9f
 8006e4c:	08006e77 	.word	0x08006e77
 8006e50:	08006e69 	.word	0x08006e69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f9de 	bl	8007218 <USBD_GetDescriptor>
          break;
 8006e5c:	e024      	b.n	8006ea8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fb43 	bl	80074ec <USBD_SetAddress>
          break;
 8006e66:	e01f      	b.n	8006ea8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fb82 	bl	8007574 <USBD_SetConfig>
 8006e70:	4603      	mov	r3, r0
 8006e72:	73fb      	strb	r3, [r7, #15]
          break;
 8006e74:	e018      	b.n	8006ea8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 fc21 	bl	80076c0 <USBD_GetConfig>
          break;
 8006e7e:	e013      	b.n	8006ea8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fc52 	bl	800772c <USBD_GetStatus>
          break;
 8006e88:	e00e      	b.n	8006ea8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fc81 	bl	8007794 <USBD_SetFeature>
          break;
 8006e92:	e009      	b.n	8006ea8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fc90 	bl	80077bc <USBD_ClrFeature>
          break;
 8006e9c:	e004      	b.n	8006ea8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fce7 	bl	8007874 <USBD_CtlError>
          break;
 8006ea6:	bf00      	nop
      }
      break;
 8006ea8:	e004      	b.n	8006eb4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fce1 	bl	8007874 <USBD_CtlError>
      break;
 8006eb2:	bf00      	nop
  }

  return ret;
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop

08006ec0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ed6:	2b40      	cmp	r3, #64	@ 0x40
 8006ed8:	d005      	beq.n	8006ee6 <USBD_StdItfReq+0x26>
 8006eda:	2b40      	cmp	r3, #64	@ 0x40
 8006edc:	d82f      	bhi.n	8006f3e <USBD_StdItfReq+0x7e>
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <USBD_StdItfReq+0x26>
 8006ee2:	2b20      	cmp	r3, #32
 8006ee4:	d12b      	bne.n	8006f3e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d81d      	bhi.n	8006f30 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	889b      	ldrh	r3, [r3, #4]
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d813      	bhi.n	8006f26 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	4798      	blx	r3
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	88db      	ldrh	r3, [r3, #6]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d110      	bne.n	8006f3a <USBD_StdItfReq+0x7a>
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10d      	bne.n	8006f3a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fd73 	bl	8007a0a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f24:	e009      	b.n	8006f3a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fca3 	bl	8007874 <USBD_CtlError>
          break;
 8006f2e:	e004      	b.n	8006f3a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fc9e 	bl	8007874 <USBD_CtlError>
          break;
 8006f38:	e000      	b.n	8006f3c <USBD_StdItfReq+0x7c>
          break;
 8006f3a:	bf00      	nop
      }
      break;
 8006f3c:	e004      	b.n	8006f48 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fc97 	bl	8007874 <USBD_CtlError>
      break;
 8006f46:	bf00      	nop
  }

  return ret;
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	889b      	ldrh	r3, [r3, #4]
 8006f64:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f6e:	2b40      	cmp	r3, #64	@ 0x40
 8006f70:	d007      	beq.n	8006f82 <USBD_StdEPReq+0x30>
 8006f72:	2b40      	cmp	r3, #64	@ 0x40
 8006f74:	f200 8145 	bhi.w	8007202 <USBD_StdEPReq+0x2b0>
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00c      	beq.n	8006f96 <USBD_StdEPReq+0x44>
 8006f7c:	2b20      	cmp	r3, #32
 8006f7e:	f040 8140 	bne.w	8007202 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	6839      	ldr	r1, [r7, #0]
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	4798      	blx	r3
 8006f90:	4603      	mov	r3, r0
 8006f92:	73fb      	strb	r3, [r7, #15]
      break;
 8006f94:	e13a      	b.n	800720c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	785b      	ldrb	r3, [r3, #1]
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d007      	beq.n	8006fae <USBD_StdEPReq+0x5c>
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	f300 8129 	bgt.w	80071f6 <USBD_StdEPReq+0x2a4>
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d07f      	beq.n	80070a8 <USBD_StdEPReq+0x156>
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d03c      	beq.n	8007026 <USBD_StdEPReq+0xd4>
 8006fac:	e123      	b.n	80071f6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d002      	beq.n	8006fc0 <USBD_StdEPReq+0x6e>
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d016      	beq.n	8006fec <USBD_StdEPReq+0x9a>
 8006fbe:	e02c      	b.n	800701a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fc0:	7bbb      	ldrb	r3, [r7, #14]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00d      	beq.n	8006fe2 <USBD_StdEPReq+0x90>
 8006fc6:	7bbb      	ldrb	r3, [r7, #14]
 8006fc8:	2b80      	cmp	r3, #128	@ 0x80
 8006fca:	d00a      	beq.n	8006fe2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006fcc:	7bbb      	ldrb	r3, [r7, #14]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f00e fb74 	bl	80156be <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fd6:	2180      	movs	r1, #128	@ 0x80
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f00e fb70 	bl	80156be <USBD_LL_StallEP>
 8006fde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fe0:	e020      	b.n	8007024 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fc45 	bl	8007874 <USBD_CtlError>
              break;
 8006fea:	e01b      	b.n	8007024 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	885b      	ldrh	r3, [r3, #2]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10e      	bne.n	8007012 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00b      	beq.n	8007012 <USBD_StdEPReq+0xc0>
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	2b80      	cmp	r3, #128	@ 0x80
 8006ffe:	d008      	beq.n	8007012 <USBD_StdEPReq+0xc0>
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	88db      	ldrh	r3, [r3, #6]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d104      	bne.n	8007012 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007008:	7bbb      	ldrb	r3, [r7, #14]
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f00e fb56 	bl	80156be <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fcf9 	bl	8007a0a <USBD_CtlSendStatus>

              break;
 8007018:	e004      	b.n	8007024 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fc29 	bl	8007874 <USBD_CtlError>
              break;
 8007022:	bf00      	nop
          }
          break;
 8007024:	e0ec      	b.n	8007200 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b02      	cmp	r3, #2
 8007030:	d002      	beq.n	8007038 <USBD_StdEPReq+0xe6>
 8007032:	2b03      	cmp	r3, #3
 8007034:	d016      	beq.n	8007064 <USBD_StdEPReq+0x112>
 8007036:	e030      	b.n	800709a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007038:	7bbb      	ldrb	r3, [r7, #14]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00d      	beq.n	800705a <USBD_StdEPReq+0x108>
 800703e:	7bbb      	ldrb	r3, [r7, #14]
 8007040:	2b80      	cmp	r3, #128	@ 0x80
 8007042:	d00a      	beq.n	800705a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007044:	7bbb      	ldrb	r3, [r7, #14]
 8007046:	4619      	mov	r1, r3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f00e fb38 	bl	80156be <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800704e:	2180      	movs	r1, #128	@ 0x80
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f00e fb34 	bl	80156be <USBD_LL_StallEP>
 8007056:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007058:	e025      	b.n	80070a6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fc09 	bl	8007874 <USBD_CtlError>
              break;
 8007062:	e020      	b.n	80070a6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	885b      	ldrh	r3, [r3, #2]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d11b      	bne.n	80070a4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800706c:	7bbb      	ldrb	r3, [r7, #14]
 800706e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007072:	2b00      	cmp	r3, #0
 8007074:	d004      	beq.n	8007080 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007076:	7bbb      	ldrb	r3, [r7, #14]
 8007078:	4619      	mov	r1, r3
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f00e fb3e 	bl	80156fc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fcc2 	bl	8007a0a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	4798      	blx	r3
 8007094:	4603      	mov	r3, r0
 8007096:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007098:	e004      	b.n	80070a4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fbe9 	bl	8007874 <USBD_CtlError>
              break;
 80070a2:	e000      	b.n	80070a6 <USBD_StdEPReq+0x154>
              break;
 80070a4:	bf00      	nop
          }
          break;
 80070a6:	e0ab      	b.n	8007200 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d002      	beq.n	80070ba <USBD_StdEPReq+0x168>
 80070b4:	2b03      	cmp	r3, #3
 80070b6:	d032      	beq.n	800711e <USBD_StdEPReq+0x1cc>
 80070b8:	e097      	b.n	80071ea <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070ba:	7bbb      	ldrb	r3, [r7, #14]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d007      	beq.n	80070d0 <USBD_StdEPReq+0x17e>
 80070c0:	7bbb      	ldrb	r3, [r7, #14]
 80070c2:	2b80      	cmp	r3, #128	@ 0x80
 80070c4:	d004      	beq.n	80070d0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80070c6:	6839      	ldr	r1, [r7, #0]
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fbd3 	bl	8007874 <USBD_CtlError>
                break;
 80070ce:	e091      	b.n	80071f4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	da0b      	bge.n	80070f0 <USBD_StdEPReq+0x19e>
 80070d8:	7bbb      	ldrb	r3, [r7, #14]
 80070da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	3310      	adds	r3, #16
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	4413      	add	r3, r2
 80070ec:	3304      	adds	r3, #4
 80070ee:	e00b      	b.n	8007108 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070f0:	7bbb      	ldrb	r3, [r7, #14]
 80070f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070f6:	4613      	mov	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	4413      	add	r3, r2
 8007106:	3304      	adds	r3, #4
 8007108:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2200      	movs	r2, #0
 800710e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2202      	movs	r2, #2
 8007114:	4619      	mov	r1, r3
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fc1d 	bl	8007956 <USBD_CtlSendData>
              break;
 800711c:	e06a      	b.n	80071f4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800711e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007122:	2b00      	cmp	r3, #0
 8007124:	da11      	bge.n	800714a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	f003 020f 	and.w	r2, r3, #15
 800712c:	6879      	ldr	r1, [r7, #4]
 800712e:	4613      	mov	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	440b      	add	r3, r1
 8007138:	3324      	adds	r3, #36	@ 0x24
 800713a:	881b      	ldrh	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d117      	bne.n	8007170 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fb96 	bl	8007874 <USBD_CtlError>
                  break;
 8007148:	e054      	b.n	80071f4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	f003 020f 	and.w	r2, r3, #15
 8007150:	6879      	ldr	r1, [r7, #4]
 8007152:	4613      	mov	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	440b      	add	r3, r1
 800715c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d104      	bne.n	8007170 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fb83 	bl	8007874 <USBD_CtlError>
                  break;
 800716e:	e041      	b.n	80071f4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007174:	2b00      	cmp	r3, #0
 8007176:	da0b      	bge.n	8007190 <USBD_StdEPReq+0x23e>
 8007178:	7bbb      	ldrb	r3, [r7, #14]
 800717a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800717e:	4613      	mov	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	3310      	adds	r3, #16
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	4413      	add	r3, r2
 800718c:	3304      	adds	r3, #4
 800718e:	e00b      	b.n	80071a8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007196:	4613      	mov	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	4413      	add	r3, r2
 80071a6:	3304      	adds	r3, #4
 80071a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80071aa:	7bbb      	ldrb	r3, [r7, #14]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <USBD_StdEPReq+0x264>
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	2b80      	cmp	r3, #128	@ 0x80
 80071b4:	d103      	bne.n	80071be <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	2200      	movs	r2, #0
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	e00e      	b.n	80071dc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80071be:	7bbb      	ldrb	r3, [r7, #14]
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f00e fab9 	bl	801573a <USBD_LL_IsStallEP>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2201      	movs	r2, #1
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	e002      	b.n	80071dc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2200      	movs	r2, #0
 80071da:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2202      	movs	r2, #2
 80071e0:	4619      	mov	r1, r3
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fbb7 	bl	8007956 <USBD_CtlSendData>
              break;
 80071e8:	e004      	b.n	80071f4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fb41 	bl	8007874 <USBD_CtlError>
              break;
 80071f2:	bf00      	nop
          }
          break;
 80071f4:	e004      	b.n	8007200 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fb3b 	bl	8007874 <USBD_CtlError>
          break;
 80071fe:	bf00      	nop
      }
      break;
 8007200:	e004      	b.n	800720c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fb35 	bl	8007874 <USBD_CtlError>
      break;
 800720a:	bf00      	nop
  }

  return ret;
 800720c:	7bfb      	ldrb	r3, [r7, #15]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007226:	2300      	movs	r3, #0
 8007228:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800722a:	2300      	movs	r3, #0
 800722c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	885b      	ldrh	r3, [r3, #2]
 8007232:	0a1b      	lsrs	r3, r3, #8
 8007234:	b29b      	uxth	r3, r3
 8007236:	3b01      	subs	r3, #1
 8007238:	2b06      	cmp	r3, #6
 800723a:	f200 8128 	bhi.w	800748e <USBD_GetDescriptor+0x276>
 800723e:	a201      	add	r2, pc, #4	@ (adr r2, 8007244 <USBD_GetDescriptor+0x2c>)
 8007240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007244:	08007261 	.word	0x08007261
 8007248:	08007279 	.word	0x08007279
 800724c:	080072b9 	.word	0x080072b9
 8007250:	0800748f 	.word	0x0800748f
 8007254:	0800748f 	.word	0x0800748f
 8007258:	0800742f 	.word	0x0800742f
 800725c:	0800745b 	.word	0x0800745b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	7c12      	ldrb	r2, [r2, #16]
 800726c:	f107 0108 	add.w	r1, r7, #8
 8007270:	4610      	mov	r0, r2
 8007272:	4798      	blx	r3
 8007274:	60f8      	str	r0, [r7, #12]
      break;
 8007276:	e112      	b.n	800749e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	7c1b      	ldrb	r3, [r3, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10d      	bne.n	800729c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007288:	f107 0208 	add.w	r2, r7, #8
 800728c:	4610      	mov	r0, r2
 800728e:	4798      	blx	r3
 8007290:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3301      	adds	r3, #1
 8007296:	2202      	movs	r2, #2
 8007298:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800729a:	e100      	b.n	800749e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a4:	f107 0208 	add.w	r2, r7, #8
 80072a8:	4610      	mov	r0, r2
 80072aa:	4798      	blx	r3
 80072ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3301      	adds	r3, #1
 80072b2:	2202      	movs	r2, #2
 80072b4:	701a      	strb	r2, [r3, #0]
      break;
 80072b6:	e0f2      	b.n	800749e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	885b      	ldrh	r3, [r3, #2]
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b05      	cmp	r3, #5
 80072c0:	f200 80ac 	bhi.w	800741c <USBD_GetDescriptor+0x204>
 80072c4:	a201      	add	r2, pc, #4	@ (adr r2, 80072cc <USBD_GetDescriptor+0xb4>)
 80072c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ca:	bf00      	nop
 80072cc:	080072e5 	.word	0x080072e5
 80072d0:	08007319 	.word	0x08007319
 80072d4:	0800734d 	.word	0x0800734d
 80072d8:	08007381 	.word	0x08007381
 80072dc:	080073b5 	.word	0x080073b5
 80072e0:	080073e9 	.word	0x080073e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00b      	beq.n	8007308 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	7c12      	ldrb	r2, [r2, #16]
 80072fc:	f107 0108 	add.w	r1, r7, #8
 8007300:	4610      	mov	r0, r2
 8007302:	4798      	blx	r3
 8007304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007306:	e091      	b.n	800742c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fab2 	bl	8007874 <USBD_CtlError>
            err++;
 8007310:	7afb      	ldrb	r3, [r7, #11]
 8007312:	3301      	adds	r3, #1
 8007314:	72fb      	strb	r3, [r7, #11]
          break;
 8007316:	e089      	b.n	800742c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00b      	beq.n	800733c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	7c12      	ldrb	r2, [r2, #16]
 8007330:	f107 0108 	add.w	r1, r7, #8
 8007334:	4610      	mov	r0, r2
 8007336:	4798      	blx	r3
 8007338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800733a:	e077      	b.n	800742c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fa98 	bl	8007874 <USBD_CtlError>
            err++;
 8007344:	7afb      	ldrb	r3, [r7, #11]
 8007346:	3301      	adds	r3, #1
 8007348:	72fb      	strb	r3, [r7, #11]
          break;
 800734a:	e06f      	b.n	800742c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00b      	beq.n	8007370 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	7c12      	ldrb	r2, [r2, #16]
 8007364:	f107 0108 	add.w	r1, r7, #8
 8007368:	4610      	mov	r0, r2
 800736a:	4798      	blx	r3
 800736c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800736e:	e05d      	b.n	800742c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fa7e 	bl	8007874 <USBD_CtlError>
            err++;
 8007378:	7afb      	ldrb	r3, [r7, #11]
 800737a:	3301      	adds	r3, #1
 800737c:	72fb      	strb	r3, [r7, #11]
          break;
 800737e:	e055      	b.n	800742c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00b      	beq.n	80073a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	7c12      	ldrb	r2, [r2, #16]
 8007398:	f107 0108 	add.w	r1, r7, #8
 800739c:	4610      	mov	r0, r2
 800739e:	4798      	blx	r3
 80073a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073a2:	e043      	b.n	800742c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fa64 	bl	8007874 <USBD_CtlError>
            err++;
 80073ac:	7afb      	ldrb	r3, [r7, #11]
 80073ae:	3301      	adds	r3, #1
 80073b0:	72fb      	strb	r3, [r7, #11]
          break;
 80073b2:	e03b      	b.n	800742c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00b      	beq.n	80073d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	7c12      	ldrb	r2, [r2, #16]
 80073cc:	f107 0108 	add.w	r1, r7, #8
 80073d0:	4610      	mov	r0, r2
 80073d2:	4798      	blx	r3
 80073d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073d6:	e029      	b.n	800742c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fa4a 	bl	8007874 <USBD_CtlError>
            err++;
 80073e0:	7afb      	ldrb	r3, [r7, #11]
 80073e2:	3301      	adds	r3, #1
 80073e4:	72fb      	strb	r3, [r7, #11]
          break;
 80073e6:	e021      	b.n	800742c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00b      	beq.n	800740c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	7c12      	ldrb	r2, [r2, #16]
 8007400:	f107 0108 	add.w	r1, r7, #8
 8007404:	4610      	mov	r0, r2
 8007406:	4798      	blx	r3
 8007408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800740a:	e00f      	b.n	800742c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fa30 	bl	8007874 <USBD_CtlError>
            err++;
 8007414:	7afb      	ldrb	r3, [r7, #11]
 8007416:	3301      	adds	r3, #1
 8007418:	72fb      	strb	r3, [r7, #11]
          break;
 800741a:	e007      	b.n	800742c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fa28 	bl	8007874 <USBD_CtlError>
          err++;
 8007424:	7afb      	ldrb	r3, [r7, #11]
 8007426:	3301      	adds	r3, #1
 8007428:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800742a:	bf00      	nop
      }
      break;
 800742c:	e037      	b.n	800749e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	7c1b      	ldrb	r3, [r3, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d109      	bne.n	800744a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800743c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800743e:	f107 0208 	add.w	r2, r7, #8
 8007442:	4610      	mov	r0, r2
 8007444:	4798      	blx	r3
 8007446:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007448:	e029      	b.n	800749e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 fa11 	bl	8007874 <USBD_CtlError>
        err++;
 8007452:	7afb      	ldrb	r3, [r7, #11]
 8007454:	3301      	adds	r3, #1
 8007456:	72fb      	strb	r3, [r7, #11]
      break;
 8007458:	e021      	b.n	800749e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	7c1b      	ldrb	r3, [r3, #16]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10d      	bne.n	800747e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800746a:	f107 0208 	add.w	r2, r7, #8
 800746e:	4610      	mov	r0, r2
 8007470:	4798      	blx	r3
 8007472:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3301      	adds	r3, #1
 8007478:	2207      	movs	r2, #7
 800747a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800747c:	e00f      	b.n	800749e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f9f7 	bl	8007874 <USBD_CtlError>
        err++;
 8007486:	7afb      	ldrb	r3, [r7, #11]
 8007488:	3301      	adds	r3, #1
 800748a:	72fb      	strb	r3, [r7, #11]
      break;
 800748c:	e007      	b.n	800749e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f9ef 	bl	8007874 <USBD_CtlError>
      err++;
 8007496:	7afb      	ldrb	r3, [r7, #11]
 8007498:	3301      	adds	r3, #1
 800749a:	72fb      	strb	r3, [r7, #11]
      break;
 800749c:	bf00      	nop
  }

  if (err != 0U)
 800749e:	7afb      	ldrb	r3, [r7, #11]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d11e      	bne.n	80074e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	88db      	ldrh	r3, [r3, #6]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d016      	beq.n	80074da <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80074ac:	893b      	ldrh	r3, [r7, #8]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00e      	beq.n	80074d0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	88da      	ldrh	r2, [r3, #6]
 80074b6:	893b      	ldrh	r3, [r7, #8]
 80074b8:	4293      	cmp	r3, r2
 80074ba:	bf28      	it	cs
 80074bc:	4613      	movcs	r3, r2
 80074be:	b29b      	uxth	r3, r3
 80074c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80074c2:	893b      	ldrh	r3, [r7, #8]
 80074c4:	461a      	mov	r2, r3
 80074c6:	68f9      	ldr	r1, [r7, #12]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fa44 	bl	8007956 <USBD_CtlSendData>
 80074ce:	e009      	b.n	80074e4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f9ce 	bl	8007874 <USBD_CtlError>
 80074d8:	e004      	b.n	80074e4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fa95 	bl	8007a0a <USBD_CtlSendStatus>
 80074e0:	e000      	b.n	80074e4 <USBD_GetDescriptor+0x2cc>
    return;
 80074e2:	bf00      	nop
  }
}
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop

080074ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	889b      	ldrh	r3, [r3, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d131      	bne.n	8007562 <USBD_SetAddress+0x76>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	88db      	ldrh	r3, [r3, #6]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d12d      	bne.n	8007562 <USBD_SetAddress+0x76>
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	885b      	ldrh	r3, [r3, #2]
 800750a:	2b7f      	cmp	r3, #127	@ 0x7f
 800750c:	d829      	bhi.n	8007562 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	885b      	ldrh	r3, [r3, #2]
 8007512:	b2db      	uxtb	r3, r3
 8007514:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007518:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b03      	cmp	r3, #3
 8007524:	d104      	bne.n	8007530 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f9a3 	bl	8007874 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800752e:	e01d      	b.n	800756c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	7bfa      	ldrb	r2, [r7, #15]
 8007534:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f00e f928 	bl	8015792 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fa61 	bl	8007a0a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d004      	beq.n	8007558 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2202      	movs	r2, #2
 8007552:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007556:	e009      	b.n	800756c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007560:	e004      	b.n	800756c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f985 	bl	8007874 <USBD_CtlError>
  }
}
 800756a:	bf00      	nop
 800756c:	bf00      	nop
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	885b      	ldrh	r3, [r3, #2]
 8007586:	b2da      	uxtb	r2, r3
 8007588:	4b4c      	ldr	r3, [pc, #304]	@ (80076bc <USBD_SetConfig+0x148>)
 800758a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800758c:	4b4b      	ldr	r3, [pc, #300]	@ (80076bc <USBD_SetConfig+0x148>)
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d905      	bls.n	80075a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f96c 	bl	8007874 <USBD_CtlError>
    return USBD_FAIL;
 800759c:	2303      	movs	r3, #3
 800759e:	e088      	b.n	80076b2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d002      	beq.n	80075b2 <USBD_SetConfig+0x3e>
 80075ac:	2b03      	cmp	r3, #3
 80075ae:	d025      	beq.n	80075fc <USBD_SetConfig+0x88>
 80075b0:	e071      	b.n	8007696 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80075b2:	4b42      	ldr	r3, [pc, #264]	@ (80076bc <USBD_SetConfig+0x148>)
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d01c      	beq.n	80075f4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80075ba:	4b40      	ldr	r3, [pc, #256]	@ (80076bc <USBD_SetConfig+0x148>)
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80075c4:	4b3d      	ldr	r3, [pc, #244]	@ (80076bc <USBD_SetConfig+0x148>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	4619      	mov	r1, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7ff f93f 	bl	800684e <USBD_SetClassConfig>
 80075d0:	4603      	mov	r3, r0
 80075d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d004      	beq.n	80075e4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80075da:	6839      	ldr	r1, [r7, #0]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f949 	bl	8007874 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80075e2:	e065      	b.n	80076b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fa10 	bl	8007a0a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2203      	movs	r2, #3
 80075ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80075f2:	e05d      	b.n	80076b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fa08 	bl	8007a0a <USBD_CtlSendStatus>
      break;
 80075fa:	e059      	b.n	80076b0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80075fc:	4b2f      	ldr	r3, [pc, #188]	@ (80076bc <USBD_SetConfig+0x148>)
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d112      	bne.n	800762a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2202      	movs	r2, #2
 8007608:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800760c:	4b2b      	ldr	r3, [pc, #172]	@ (80076bc <USBD_SetConfig+0x148>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	461a      	mov	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007616:	4b29      	ldr	r3, [pc, #164]	@ (80076bc <USBD_SetConfig+0x148>)
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7ff f932 	bl	8006886 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f9f1 	bl	8007a0a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007628:	e042      	b.n	80076b0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800762a:	4b24      	ldr	r3, [pc, #144]	@ (80076bc <USBD_SetConfig+0x148>)
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	429a      	cmp	r2, r3
 8007636:	d02a      	beq.n	800768e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	b2db      	uxtb	r3, r3
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f7ff f920 	bl	8006886 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007646:	4b1d      	ldr	r3, [pc, #116]	@ (80076bc <USBD_SetConfig+0x148>)
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	461a      	mov	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007650:	4b1a      	ldr	r3, [pc, #104]	@ (80076bc <USBD_SetConfig+0x148>)
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	4619      	mov	r1, r3
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7ff f8f9 	bl	800684e <USBD_SetClassConfig>
 800765c:	4603      	mov	r3, r0
 800765e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007660:	7bfb      	ldrb	r3, [r7, #15]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00f      	beq.n	8007686 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f903 	bl	8007874 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	b2db      	uxtb	r3, r3
 8007674:	4619      	mov	r1, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7ff f905 	bl	8006886 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2202      	movs	r2, #2
 8007680:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007684:	e014      	b.n	80076b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f9bf 	bl	8007a0a <USBD_CtlSendStatus>
      break;
 800768c:	e010      	b.n	80076b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f9bb 	bl	8007a0a <USBD_CtlSendStatus>
      break;
 8007694:	e00c      	b.n	80076b0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f8eb 	bl	8007874 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800769e:	4b07      	ldr	r3, [pc, #28]	@ (80076bc <USBD_SetConfig+0x148>)
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7ff f8ee 	bl	8006886 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80076aa:	2303      	movs	r3, #3
 80076ac:	73fb      	strb	r3, [r7, #15]
      break;
 80076ae:	bf00      	nop
  }

  return ret;
 80076b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	20005938 	.word	0x20005938

080076c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	88db      	ldrh	r3, [r3, #6]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d004      	beq.n	80076dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80076d2:	6839      	ldr	r1, [r7, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 f8cd 	bl	8007874 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80076da:	e023      	b.n	8007724 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	dc02      	bgt.n	80076ee <USBD_GetConfig+0x2e>
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	dc03      	bgt.n	80076f4 <USBD_GetConfig+0x34>
 80076ec:	e015      	b.n	800771a <USBD_GetConfig+0x5a>
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d00b      	beq.n	800770a <USBD_GetConfig+0x4a>
 80076f2:	e012      	b.n	800771a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	3308      	adds	r3, #8
 80076fe:	2201      	movs	r2, #1
 8007700:	4619      	mov	r1, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f927 	bl	8007956 <USBD_CtlSendData>
        break;
 8007708:	e00c      	b.n	8007724 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3304      	adds	r3, #4
 800770e:	2201      	movs	r2, #1
 8007710:	4619      	mov	r1, r3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f91f 	bl	8007956 <USBD_CtlSendData>
        break;
 8007718:	e004      	b.n	8007724 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f8a9 	bl	8007874 <USBD_CtlError>
        break;
 8007722:	bf00      	nop
}
 8007724:	bf00      	nop
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800773c:	b2db      	uxtb	r3, r3
 800773e:	3b01      	subs	r3, #1
 8007740:	2b02      	cmp	r3, #2
 8007742:	d81e      	bhi.n	8007782 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	88db      	ldrh	r3, [r3, #6]
 8007748:	2b02      	cmp	r3, #2
 800774a:	d004      	beq.n	8007756 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f890 	bl	8007874 <USBD_CtlError>
        break;
 8007754:	e01a      	b.n	800778c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007762:	2b00      	cmp	r3, #0
 8007764:	d005      	beq.n	8007772 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	f043 0202 	orr.w	r2, r3, #2
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	330c      	adds	r3, #12
 8007776:	2202      	movs	r2, #2
 8007778:	4619      	mov	r1, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f8eb 	bl	8007956 <USBD_CtlSendData>
      break;
 8007780:	e004      	b.n	800778c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f875 	bl	8007874 <USBD_CtlError>
      break;
 800778a:	bf00      	nop
  }
}
 800778c:	bf00      	nop
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	885b      	ldrh	r3, [r3, #2]
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d106      	bne.n	80077b4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f92b 	bl	8007a0a <USBD_CtlSendStatus>
  }
}
 80077b4:	bf00      	nop
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	3b01      	subs	r3, #1
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d80b      	bhi.n	80077ec <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	885b      	ldrh	r3, [r3, #2]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d10c      	bne.n	80077f6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f910 	bl	8007a0a <USBD_CtlSendStatus>
      }
      break;
 80077ea:	e004      	b.n	80077f6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f840 	bl	8007874 <USBD_CtlError>
      break;
 80077f4:	e000      	b.n	80077f8 <USBD_ClrFeature+0x3c>
      break;
 80077f6:	bf00      	nop
  }
}
 80077f8:	bf00      	nop
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	781a      	ldrb	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3301      	adds	r3, #1
 800781a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	781a      	ldrb	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	3301      	adds	r3, #1
 8007828:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f7ff fabb 	bl	8006da6 <SWAPBYTE>
 8007830:	4603      	mov	r3, r0
 8007832:	461a      	mov	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3301      	adds	r3, #1
 800783c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3301      	adds	r3, #1
 8007842:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f7ff faae 	bl	8006da6 <SWAPBYTE>
 800784a:	4603      	mov	r3, r0
 800784c:	461a      	mov	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3301      	adds	r3, #1
 8007856:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	3301      	adds	r3, #1
 800785c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f7ff faa1 	bl	8006da6 <SWAPBYTE>
 8007864:	4603      	mov	r3, r0
 8007866:	461a      	mov	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	80da      	strh	r2, [r3, #6]
}
 800786c:	bf00      	nop
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800787e:	2180      	movs	r1, #128	@ 0x80
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f00d ff1c 	bl	80156be <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007886:	2100      	movs	r1, #0
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f00d ff18 	bl	80156be <USBD_LL_StallEP>
}
 800788e:	bf00      	nop
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b086      	sub	sp, #24
 800789a:	af00      	add	r7, sp, #0
 800789c:	60f8      	str	r0, [r7, #12]
 800789e:	60b9      	str	r1, [r7, #8]
 80078a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d036      	beq.n	800791a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80078b0:	6938      	ldr	r0, [r7, #16]
 80078b2:	f000 f836 	bl	8007922 <USBD_GetLen>
 80078b6:	4603      	mov	r3, r0
 80078b8:	3301      	adds	r3, #1
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	b29a      	uxth	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	4413      	add	r3, r2
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	7812      	ldrb	r2, [r2, #0]
 80078ce:	701a      	strb	r2, [r3, #0]
  idx++;
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
 80078d2:	3301      	adds	r3, #1
 80078d4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	4413      	add	r3, r2
 80078dc:	2203      	movs	r2, #3
 80078de:	701a      	strb	r2, [r3, #0]
  idx++;
 80078e0:	7dfb      	ldrb	r3, [r7, #23]
 80078e2:	3301      	adds	r3, #1
 80078e4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80078e6:	e013      	b.n	8007910 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80078e8:	7dfb      	ldrb	r3, [r7, #23]
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	4413      	add	r3, r2
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	7812      	ldrb	r2, [r2, #0]
 80078f2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	3301      	adds	r3, #1
 80078f8:	613b      	str	r3, [r7, #16]
    idx++;
 80078fa:	7dfb      	ldrb	r3, [r7, #23]
 80078fc:	3301      	adds	r3, #1
 80078fe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007900:	7dfb      	ldrb	r3, [r7, #23]
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	4413      	add	r3, r2
 8007906:	2200      	movs	r2, #0
 8007908:	701a      	strb	r2, [r3, #0]
    idx++;
 800790a:	7dfb      	ldrb	r3, [r7, #23]
 800790c:	3301      	adds	r3, #1
 800790e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e7      	bne.n	80078e8 <USBD_GetString+0x52>
 8007918:	e000      	b.n	800791c <USBD_GetString+0x86>
    return;
 800791a:	bf00      	nop
  }
}
 800791c:	3718      	adds	r7, #24
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007922:	b480      	push	{r7}
 8007924:	b085      	sub	sp, #20
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800792a:	2300      	movs	r3, #0
 800792c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007932:	e005      	b.n	8007940 <USBD_GetLen+0x1e>
  {
    len++;
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	3301      	adds	r3, #1
 8007938:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	3301      	adds	r3, #1
 800793e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1f5      	bne.n	8007934 <USBD_GetLen+0x12>
  }

  return len;
 8007948:	7bfb      	ldrb	r3, [r7, #15]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	60b9      	str	r1, [r7, #8]
 8007960:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2202      	movs	r2, #2
 8007966:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	2100      	movs	r1, #0
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f00d ff27 	bl	80157d0 <USBD_LL_Transmit>

  return USBD_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	2100      	movs	r1, #0
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f00d ff16 	bl	80157d0 <USBD_LL_Transmit>

  return USBD_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b084      	sub	sp, #16
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	60f8      	str	r0, [r7, #12]
 80079b6:	60b9      	str	r1, [r7, #8]
 80079b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2203      	movs	r2, #3
 80079be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	2100      	movs	r1, #0
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f00d ff1a 	bl	8015812 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	2100      	movs	r1, #0
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f00d ff09 	bl	8015812 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b082      	sub	sp, #8
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2204      	movs	r2, #4
 8007a16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	2100      	movs	r1, #0
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f00d fed5 	bl	80157d0 <USBD_LL_Transmit>

  return USBD_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2205      	movs	r2, #5
 8007a3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a40:	2300      	movs	r3, #0
 8007a42:	2200      	movs	r2, #0
 8007a44:	2100      	movs	r1, #0
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f00d fee3 	bl	8015812 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007a56:	b480      	push	{r7}
 8007a58:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007a5a:	bf00      	nop
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a6a:	f3ef 8305 	mrs	r3, IPSR
 8007a6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a70:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10f      	bne.n	8007a96 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a76:	f3ef 8310 	mrs	r3, PRIMASK
 8007a7a:	607b      	str	r3, [r7, #4]
  return(result);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d105      	bne.n	8007a8e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a82:	f3ef 8311 	mrs	r3, BASEPRI
 8007a86:	603b      	str	r3, [r7, #0]
  return(result);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d007      	beq.n	8007a9e <osKernelInitialize+0x3a>
 8007a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8007ac8 <osKernelInitialize+0x64>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d103      	bne.n	8007a9e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007a96:	f06f 0305 	mvn.w	r3, #5
 8007a9a:	60fb      	str	r3, [r7, #12]
 8007a9c:	e00c      	b.n	8007ab8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8007ac8 <osKernelInitialize+0x64>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d105      	bne.n	8007ab2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007aa6:	4b08      	ldr	r3, [pc, #32]	@ (8007ac8 <osKernelInitialize+0x64>)
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007aac:	2300      	movs	r3, #0
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	e002      	b.n	8007ab8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	2000593c 	.word	0x2000593c

08007acc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ad2:	f3ef 8305 	mrs	r3, IPSR
 8007ad6:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ad8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10f      	bne.n	8007afe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ade:	f3ef 8310 	mrs	r3, PRIMASK
 8007ae2:	607b      	str	r3, [r7, #4]
  return(result);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d105      	bne.n	8007af6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007aea:	f3ef 8311 	mrs	r3, BASEPRI
 8007aee:	603b      	str	r3, [r7, #0]
  return(result);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d007      	beq.n	8007b06 <osKernelStart+0x3a>
 8007af6:	4b0f      	ldr	r3, [pc, #60]	@ (8007b34 <osKernelStart+0x68>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d103      	bne.n	8007b06 <osKernelStart+0x3a>
    stat = osErrorISR;
 8007afe:	f06f 0305 	mvn.w	r3, #5
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	e010      	b.n	8007b28 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007b06:	4b0b      	ldr	r3, [pc, #44]	@ (8007b34 <osKernelStart+0x68>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d109      	bne.n	8007b22 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007b0e:	f7ff ffa2 	bl	8007a56 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007b12:	4b08      	ldr	r3, [pc, #32]	@ (8007b34 <osKernelStart+0x68>)
 8007b14:	2202      	movs	r2, #2
 8007b16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007b18:	f001 fd4c 	bl	80095b4 <vTaskStartScheduler>
      stat = osOK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	60fb      	str	r3, [r7, #12]
 8007b20:	e002      	b.n	8007b28 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007b22:	f04f 33ff 	mov.w	r3, #4294967295
 8007b26:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007b28:	68fb      	ldr	r3, [r7, #12]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	2000593c 	.word	0x2000593c

08007b38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b090      	sub	sp, #64	@ 0x40
 8007b3c:	af04      	add	r7, sp, #16
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007b44:	2300      	movs	r3, #0
 8007b46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b48:	f3ef 8305 	mrs	r3, IPSR
 8007b4c:	61fb      	str	r3, [r7, #28]
  return(result);
 8007b4e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f040 808f 	bne.w	8007c74 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b56:	f3ef 8310 	mrs	r3, PRIMASK
 8007b5a:	61bb      	str	r3, [r7, #24]
  return(result);
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d105      	bne.n	8007b6e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b62:	f3ef 8311 	mrs	r3, BASEPRI
 8007b66:	617b      	str	r3, [r7, #20]
  return(result);
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d003      	beq.n	8007b76 <osThreadNew+0x3e>
 8007b6e:	4b44      	ldr	r3, [pc, #272]	@ (8007c80 <osThreadNew+0x148>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d07e      	beq.n	8007c74 <osThreadNew+0x13c>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d07b      	beq.n	8007c74 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007b7c:	2380      	movs	r3, #128	@ 0x80
 8007b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007b80:	2318      	movs	r3, #24
 8007b82:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8007b84:	2300      	movs	r3, #0
 8007b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8007b88:	f04f 33ff 	mov.w	r3, #4294967295
 8007b8c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d045      	beq.n	8007c20 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <osThreadNew+0x6a>
        name = attr->name;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d002      	beq.n	8007bb0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d008      	beq.n	8007bc8 <osThreadNew+0x90>
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb8:	2b38      	cmp	r3, #56	@ 0x38
 8007bba:	d805      	bhi.n	8007bc8 <osThreadNew+0x90>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d001      	beq.n	8007bcc <osThreadNew+0x94>
        return (NULL);
 8007bc8:	2300      	movs	r3, #0
 8007bca:	e054      	b.n	8007c76 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d003      	beq.n	8007bdc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	695b      	ldr	r3, [r3, #20]
 8007bd8:	089b      	lsrs	r3, r3, #2
 8007bda:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00e      	beq.n	8007c02 <osThreadNew+0xca>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	2b5b      	cmp	r3, #91	@ 0x5b
 8007bea:	d90a      	bls.n	8007c02 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d006      	beq.n	8007c02 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <osThreadNew+0xca>
        mem = 1;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	623b      	str	r3, [r7, #32]
 8007c00:	e010      	b.n	8007c24 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10c      	bne.n	8007c24 <osThreadNew+0xec>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d108      	bne.n	8007c24 <osThreadNew+0xec>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d104      	bne.n	8007c24 <osThreadNew+0xec>
          mem = 0;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	623b      	str	r3, [r7, #32]
 8007c1e:	e001      	b.n	8007c24 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007c20:	2300      	movs	r3, #0
 8007c22:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007c24:	6a3b      	ldr	r3, [r7, #32]
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d110      	bne.n	8007c4c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c32:	9202      	str	r2, [sp, #8]
 8007c34:	9301      	str	r3, [sp, #4]
 8007c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f001 fa5b 	bl	80090fc <xTaskCreateStatic>
 8007c46:	4603      	mov	r3, r0
 8007c48:	613b      	str	r3, [r7, #16]
 8007c4a:	e013      	b.n	8007c74 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007c4c:	6a3b      	ldr	r3, [r7, #32]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d110      	bne.n	8007c74 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	f107 0310 	add.w	r3, r7, #16
 8007c5a:	9301      	str	r3, [sp, #4]
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f001 faaf 	bl	80091c8 <xTaskCreate>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d001      	beq.n	8007c74 <osThreadNew+0x13c>
          hTask = NULL;
 8007c70:	2300      	movs	r3, #0
 8007c72:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007c74:	693b      	ldr	r3, [r7, #16]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3730      	adds	r7, #48	@ 0x30
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	2000593c 	.word	0x2000593c

08007c84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4a07      	ldr	r2, [pc, #28]	@ (8007cb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007c94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	4a06      	ldr	r2, [pc, #24]	@ (8007cb4 <vApplicationGetIdleTaskMemory+0x30>)
 8007c9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2280      	movs	r2, #128	@ 0x80
 8007ca0:	601a      	str	r2, [r3, #0]
}
 8007ca2:	bf00      	nop
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	20005940 	.word	0x20005940
 8007cb4:	2000599c 	.word	0x2000599c

08007cb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4a07      	ldr	r2, [pc, #28]	@ (8007ce4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007cc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	4a06      	ldr	r2, [pc, #24]	@ (8007ce8 <vApplicationGetTimerTaskMemory+0x30>)
 8007cce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007cd6:	601a      	str	r2, [r3, #0]
}
 8007cd8:	bf00      	nop
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	20005b9c 	.word	0x20005b9c
 8007ce8:	20005bf8 	.word	0x20005bf8

08007cec <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8007cf2:	2020      	movs	r0, #32
 8007cf4:	f003 fa58 	bl	800b1a8 <pvPortMalloc>
 8007cf8:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00a      	beq.n	8007d16 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	3304      	adds	r3, #4
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 fa09 	bl	8008122 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8007d16:	687b      	ldr	r3, [r7, #4]
	}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b090      	sub	sp, #64	@ 0x40
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8007d32:	2300      	movs	r3, #0
 8007d34:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8007d36:	2300      	movs	r3, #0
 8007d38:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10d      	bne.n	8007d5c <xEventGroupWaitBits+0x3c>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d44:	b672      	cpsid	i
 8007d46:	f383 8811 	msr	BASEPRI, r3
 8007d4a:	f3bf 8f6f 	isb	sy
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	b662      	cpsie	i
 8007d54:	623b      	str	r3, [r7, #32]
}
 8007d56:	bf00      	nop
 8007d58:	bf00      	nop
 8007d5a:	e7fd      	b.n	8007d58 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d62:	d30d      	bcc.n	8007d80 <xEventGroupWaitBits+0x60>
	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d68:	b672      	cpsid	i
 8007d6a:	f383 8811 	msr	BASEPRI, r3
 8007d6e:	f3bf 8f6f 	isb	sy
 8007d72:	f3bf 8f4f 	dsb	sy
 8007d76:	b662      	cpsie	i
 8007d78:	61fb      	str	r3, [r7, #28]
}
 8007d7a:	bf00      	nop
 8007d7c:	bf00      	nop
 8007d7e:	e7fd      	b.n	8007d7c <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10d      	bne.n	8007da2 <xEventGroupWaitBits+0x82>
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8a:	b672      	cpsid	i
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	b662      	cpsie	i
 8007d9a:	61bb      	str	r3, [r7, #24]
}
 8007d9c:	bf00      	nop
 8007d9e:	bf00      	nop
 8007da0:	e7fd      	b.n	8007d9e <xEventGroupWaitBits+0x7e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007da2:	f002 f94f 	bl	800a044 <xTaskGetSchedulerState>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d102      	bne.n	8007db2 <xEventGroupWaitBits+0x92>
 8007dac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <xEventGroupWaitBits+0x96>
 8007db2:	2301      	movs	r3, #1
 8007db4:	e000      	b.n	8007db8 <xEventGroupWaitBits+0x98>
 8007db6:	2300      	movs	r3, #0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10d      	bne.n	8007dd8 <xEventGroupWaitBits+0xb8>
	__asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc0:	b672      	cpsid	i
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	b662      	cpsie	i
 8007dd0:	617b      	str	r3, [r7, #20]
}
 8007dd2:	bf00      	nop
 8007dd4:	bf00      	nop
 8007dd6:	e7fd      	b.n	8007dd4 <xEventGroupWaitBits+0xb4>
	}
	#endif

	vTaskSuspendAll();
 8007dd8:	f001 fc58 	bl	800968c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8007ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	68b9      	ldr	r1, [r7, #8]
 8007de6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007de8:	f000 f979 	bl	80080de <prvTestWaitCondition>
 8007dec:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8007dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00e      	beq.n	8007e12 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8007df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d028      	beq.n	8007e54 <xEventGroupWaitBits+0x134>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	43db      	mvns	r3, r3
 8007e0a:	401a      	ands	r2, r3
 8007e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e0e:	601a      	str	r2, [r3, #0]
 8007e10:	e020      	b.n	8007e54 <xEventGroupWaitBits+0x134>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8007e12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d104      	bne.n	8007e22 <xEventGroupWaitBits+0x102>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8007e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e20:	e018      	b.n	8007e54 <xEventGroupWaitBits+0x134>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d003      	beq.n	8007e30 <xEventGroupWaitBits+0x110>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8007e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <xEventGroupWaitBits+0x11e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8007e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e38:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8007e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e40:	1d18      	adds	r0, r3, #4
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e46:	4313      	orrs	r3, r2
 8007e48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	f001 fe20 	bl	8009a90 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8007e50:	2300      	movs	r3, #0
 8007e52:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8007e54:	f001 fc28 	bl	80096a8 <xTaskResumeAll>
 8007e58:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8007e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d031      	beq.n	8007ec4 <xEventGroupWaitBits+0x1a4>
	{
		if( xAlreadyYielded == pdFALSE )
 8007e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d107      	bne.n	8007e76 <xEventGroupWaitBits+0x156>
		{
			portYIELD_WITHIN_API();
 8007e66:	4b1a      	ldr	r3, [pc, #104]	@ (8007ed0 <xEventGroupWaitBits+0x1b0>)
 8007e68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8007e76:	f002 fa67 	bl	800a348 <uxTaskResetEventItemValue>
 8007e7a:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8007e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d11a      	bne.n	8007ebc <xEventGroupWaitBits+0x19c>
		{
			taskENTER_CRITICAL();
 8007e86:	f003 f861 	bl	800af4c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8007e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	68b9      	ldr	r1, [r7, #8]
 8007e94:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007e96:	f000 f922 	bl	80080de <prvTestWaitCondition>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d009      	beq.n	8007eb4 <xEventGroupWaitBits+0x194>
				{
					if( xClearOnExit != pdFALSE )
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d006      	beq.n	8007eb4 <xEventGroupWaitBits+0x194>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	43db      	mvns	r3, r3
 8007eae:	401a      	ands	r2, r3
 8007eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eb2:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8007eb8:	f003 f87e 	bl	800afb8 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ebe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8007ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3740      	adds	r7, #64	@ 0x40
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	e000ed04 	.word	0xe000ed04

08007ed4 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10d      	bne.n	8007f04 <xEventGroupClearBits+0x30>
	__asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eec:	b672      	cpsid	i
 8007eee:	f383 8811 	msr	BASEPRI, r3
 8007ef2:	f3bf 8f6f 	isb	sy
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	b662      	cpsie	i
 8007efc:	60fb      	str	r3, [r7, #12]
}
 8007efe:	bf00      	nop
 8007f00:	bf00      	nop
 8007f02:	e7fd      	b.n	8007f00 <xEventGroupClearBits+0x2c>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f0a:	d30d      	bcc.n	8007f28 <xEventGroupClearBits+0x54>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f10:	b672      	cpsid	i
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	b662      	cpsie	i
 8007f20:	60bb      	str	r3, [r7, #8]
}
 8007f22:	bf00      	nop
 8007f24:	bf00      	nop
 8007f26:	e7fd      	b.n	8007f24 <xEventGroupClearBits+0x50>

	taskENTER_CRITICAL();
 8007f28:	f003 f810 	bl	800af4c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	43db      	mvns	r3, r3
 8007f3a:	401a      	ands	r2, r3
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8007f40:	f003 f83a 	bl	800afb8 <vPortExitCritical>

	return uxReturn;
 8007f44:	693b      	ldr	r3, [r7, #16]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3718      	adds	r7, #24
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b08e      	sub	sp, #56	@ 0x38
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8007f60:	2300      	movs	r3, #0
 8007f62:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d10d      	bne.n	8007f86 <xEventGroupSetBits+0x38>
	__asm volatile
 8007f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6e:	b672      	cpsid	i
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	b662      	cpsie	i
 8007f7e:	613b      	str	r3, [r7, #16]
}
 8007f80:	bf00      	nop
 8007f82:	bf00      	nop
 8007f84:	e7fd      	b.n	8007f82 <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f8c:	d30d      	bcc.n	8007faa <xEventGroupSetBits+0x5c>
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f92:	b672      	cpsid	i
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	b662      	cpsie	i
 8007fa2:	60fb      	str	r3, [r7, #12]
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop
 8007fa8:	e7fd      	b.n	8007fa6 <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8007faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fac:	3304      	adds	r3, #4
 8007fae:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8007fb6:	f001 fb69 	bl	800968c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8007fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8007fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	431a      	orrs	r2, r3
 8007fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fca:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8007fcc:	e03c      	b.n	8008048 <xEventGroupSetBits+0xfa>
		{
			pxNext = listGET_NEXT( pxListItem );
 8007fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007fe4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007fec:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d108      	bne.n	800800a <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	4013      	ands	r3, r2
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00b      	beq.n	800801c <xEventGroupSetBits+0xce>
				{
					xMatchFound = pdTRUE;
 8008004:	2301      	movs	r3, #1
 8008006:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008008:	e008      	b.n	800801c <xEventGroupSetBits+0xce>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800800a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	4013      	ands	r3, r2
 8008012:	69ba      	ldr	r2, [r7, #24]
 8008014:	429a      	cmp	r2, r3
 8008016:	d101      	bne.n	800801c <xEventGroupSetBits+0xce>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8008018:	2301      	movs	r3, #1
 800801a:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800801c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800801e:	2b00      	cmp	r3, #0
 8008020:	d010      	beq.n	8008044 <xEventGroupSetBits+0xf6>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <xEventGroupSetBits+0xe6>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800802c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	4313      	orrs	r3, r2
 8008032:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800803c:	4619      	mov	r1, r3
 800803e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008040:	f001 fdfc 	bl	8009c3c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8008048:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	429a      	cmp	r2, r3
 800804e:	d1be      	bne.n	8007fce <xEventGroupSetBits+0x80>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008056:	43db      	mvns	r3, r3
 8008058:	401a      	ands	r2, r3
 800805a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800805c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800805e:	f001 fb23 	bl	80096a8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8008062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008064:	681b      	ldr	r3, [r3, #0]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3738      	adds	r7, #56	@ 0x38
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b086      	sub	sp, #24
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = xEventGroup;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	617b      	str	r3, [r7, #20]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	3304      	adds	r3, #4
 800807e:	613b      	str	r3, [r7, #16]

	vTaskSuspendAll();
 8008080:	f001 fb04 	bl	800968c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8008084:	e01a      	b.n	80080bc <vEventGroupDelete+0x4e>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	68da      	ldr	r2, [r3, #12]
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	3308      	adds	r3, #8
 800808e:	429a      	cmp	r2, r3
 8008090:	d10d      	bne.n	80080ae <vEventGroupDelete+0x40>
	__asm volatile
 8008092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008096:	b672      	cpsid	i
 8008098:	f383 8811 	msr	BASEPRI, r3
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	b662      	cpsie	i
 80080a6:	60fb      	str	r3, [r7, #12]
}
 80080a8:	bf00      	nop
 80080aa:	bf00      	nop
 80080ac:	e7fd      	b.n	80080aa <vEventGroupDelete+0x3c>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80080b6:	4618      	mov	r0, r3
 80080b8:	f001 fdc0 	bl	8009c3c <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1e0      	bne.n	8008086 <vEventGroupDelete+0x18>
		}
		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
		{
			/* The event group could have been allocated statically or
			dynamically, so check before attempting to free the memory. */
			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	7f1b      	ldrb	r3, [r3, #28]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d102      	bne.n	80080d2 <vEventGroupDelete+0x64>
			{
				vPortFree( pxEventBits );
 80080cc:	6978      	ldr	r0, [r7, #20]
 80080ce:	f003 f939 	bl	800b344 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 80080d2:	f001 fae9 	bl	80096a8 <xTaskResumeAll>
}
 80080d6:	bf00      	nop
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80080de:	b480      	push	{r7}
 80080e0:	b087      	sub	sp, #28
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	60f8      	str	r0, [r7, #12]
 80080e6:	60b9      	str	r1, [r7, #8]
 80080e8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80080ea:	2300      	movs	r3, #0
 80080ec:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d107      	bne.n	8008104 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	4013      	ands	r3, r2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00a      	beq.n	8008114 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80080fe:	2301      	movs	r3, #1
 8008100:	617b      	str	r3, [r7, #20]
 8008102:	e007      	b.n	8008114 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	4013      	ands	r3, r2
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	429a      	cmp	r2, r3
 800810e:	d101      	bne.n	8008114 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8008110:	2301      	movs	r3, #1
 8008112:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8008114:	697b      	ldr	r3, [r7, #20]
}
 8008116:	4618      	mov	r0, r3
 8008118:	371c      	adds	r7, #28
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008122:	b480      	push	{r7}
 8008124:	b083      	sub	sp, #12
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f103 0208 	add.w	r2, r3, #8
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f04f 32ff 	mov.w	r2, #4294967295
 800813a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f103 0208 	add.w	r2, r3, #8
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f103 0208 	add.w	r2, r3, #8
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008156:	bf00      	nop
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008162:	b480      	push	{r7}
 8008164:	b083      	sub	sp, #12
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	689a      	ldr	r2, [r3, #8]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	601a      	str	r2, [r3, #0]
}
 80081b8:	bf00      	nop
 80081ba:	3714      	adds	r7, #20
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081da:	d103      	bne.n	80081e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	60fb      	str	r3, [r7, #12]
 80081e2:	e00c      	b.n	80081fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	3308      	adds	r3, #8
 80081e8:	60fb      	str	r3, [r7, #12]
 80081ea:	e002      	b.n	80081f2 <vListInsert+0x2e>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d2f6      	bcs.n	80081ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	685a      	ldr	r2, [r3, #4]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	1c5a      	adds	r2, r3, #1
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	601a      	str	r2, [r3, #0]
}
 800822a:	bf00      	nop
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008236:	b480      	push	{r7}
 8008238:	b085      	sub	sp, #20
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	6892      	ldr	r2, [r2, #8]
 800824c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	6852      	ldr	r2, [r2, #4]
 8008256:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	429a      	cmp	r2, r3
 8008260:	d103      	bne.n	800826a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	689a      	ldr	r2, [r3, #8]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	1e5a      	subs	r2, r3, #1
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
	...

0800828c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10d      	bne.n	80082bc <xQueueGenericReset+0x30>
	__asm volatile
 80082a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a4:	b672      	cpsid	i
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	b662      	cpsie	i
 80082b4:	60bb      	str	r3, [r7, #8]
}
 80082b6:	bf00      	nop
 80082b8:	bf00      	nop
 80082ba:	e7fd      	b.n	80082b8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80082bc:	f002 fe46 	bl	800af4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082c8:	68f9      	ldr	r1, [r7, #12]
 80082ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80082cc:	fb01 f303 	mul.w	r3, r1, r3
 80082d0:	441a      	add	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082ec:	3b01      	subs	r3, #1
 80082ee:	68f9      	ldr	r1, [r7, #12]
 80082f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80082f2:	fb01 f303 	mul.w	r3, r1, r3
 80082f6:	441a      	add	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	22ff      	movs	r2, #255	@ 0xff
 8008300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	22ff      	movs	r2, #255	@ 0xff
 8008308:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d114      	bne.n	800833c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d01a      	beq.n	8008350 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3310      	adds	r3, #16
 800831e:	4618      	mov	r0, r3
 8008320:	f001 fc26 	bl	8009b70 <xTaskRemoveFromEventList>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d012      	beq.n	8008350 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800832a:	4b0d      	ldr	r3, [pc, #52]	@ (8008360 <xQueueGenericReset+0xd4>)
 800832c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008330:	601a      	str	r2, [r3, #0]
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	e009      	b.n	8008350 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3310      	adds	r3, #16
 8008340:	4618      	mov	r0, r3
 8008342:	f7ff feee 	bl	8008122 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	3324      	adds	r3, #36	@ 0x24
 800834a:	4618      	mov	r0, r3
 800834c:	f7ff fee9 	bl	8008122 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008350:	f002 fe32 	bl	800afb8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008354:	2301      	movs	r3, #1
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	e000ed04 	.word	0xe000ed04

08008364 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008364:	b580      	push	{r7, lr}
 8008366:	b08e      	sub	sp, #56	@ 0x38
 8008368:	af02      	add	r7, sp, #8
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10d      	bne.n	8008394 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8008378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800837c:	b672      	cpsid	i
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	b662      	cpsie	i
 800838c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800838e:	bf00      	nop
 8008390:	bf00      	nop
 8008392:	e7fd      	b.n	8008390 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10d      	bne.n	80083b6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800839a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839e:	b672      	cpsid	i
 80083a0:	f383 8811 	msr	BASEPRI, r3
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	b662      	cpsie	i
 80083ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80083b0:	bf00      	nop
 80083b2:	bf00      	nop
 80083b4:	e7fd      	b.n	80083b2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d002      	beq.n	80083c2 <xQueueGenericCreateStatic+0x5e>
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <xQueueGenericCreateStatic+0x62>
 80083c2:	2301      	movs	r3, #1
 80083c4:	e000      	b.n	80083c8 <xQueueGenericCreateStatic+0x64>
 80083c6:	2300      	movs	r3, #0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10d      	bne.n	80083e8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80083cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d0:	b672      	cpsid	i
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	b662      	cpsie	i
 80083e0:	623b      	str	r3, [r7, #32]
}
 80083e2:	bf00      	nop
 80083e4:	bf00      	nop
 80083e6:	e7fd      	b.n	80083e4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d102      	bne.n	80083f4 <xQueueGenericCreateStatic+0x90>
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d101      	bne.n	80083f8 <xQueueGenericCreateStatic+0x94>
 80083f4:	2301      	movs	r3, #1
 80083f6:	e000      	b.n	80083fa <xQueueGenericCreateStatic+0x96>
 80083f8:	2300      	movs	r3, #0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10d      	bne.n	800841a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80083fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008402:	b672      	cpsid	i
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	b662      	cpsie	i
 8008412:	61fb      	str	r3, [r7, #28]
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop
 8008418:	e7fd      	b.n	8008416 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800841a:	2350      	movs	r3, #80	@ 0x50
 800841c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2b50      	cmp	r3, #80	@ 0x50
 8008422:	d00d      	beq.n	8008440 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008428:	b672      	cpsid	i
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	b662      	cpsie	i
 8008438:	61bb      	str	r3, [r7, #24]
}
 800843a:	bf00      	nop
 800843c:	bf00      	nop
 800843e:	e7fd      	b.n	800843c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008440:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00d      	beq.n	8008468 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800844c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008454:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	4613      	mov	r3, r2
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	68b9      	ldr	r1, [r7, #8]
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f000 f848 	bl	80084f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800846a:	4618      	mov	r0, r3
 800846c:	3730      	adds	r7, #48	@ 0x30
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008472:	b580      	push	{r7, lr}
 8008474:	b08a      	sub	sp, #40	@ 0x28
 8008476:	af02      	add	r7, sp, #8
 8008478:	60f8      	str	r0, [r7, #12]
 800847a:	60b9      	str	r1, [r7, #8]
 800847c:	4613      	mov	r3, r2
 800847e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10d      	bne.n	80084a2 <xQueueGenericCreate+0x30>
	__asm volatile
 8008486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800848a:	b672      	cpsid	i
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	b662      	cpsie	i
 800849a:	613b      	str	r3, [r7, #16]
}
 800849c:	bf00      	nop
 800849e:	bf00      	nop
 80084a0:	e7fd      	b.n	800849e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d102      	bne.n	80084ae <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	61fb      	str	r3, [r7, #28]
 80084ac:	e004      	b.n	80084b8 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	fb02 f303 	mul.w	r3, r2, r3
 80084b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	3350      	adds	r3, #80	@ 0x50
 80084bc:	4618      	mov	r0, r3
 80084be:	f002 fe73 	bl	800b1a8 <pvPortMalloc>
 80084c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d011      	beq.n	80084ee <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	3350      	adds	r3, #80	@ 0x50
 80084d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80084dc:	79fa      	ldrb	r2, [r7, #7]
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	4613      	mov	r3, r2
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	68b9      	ldr	r1, [r7, #8]
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f000 f805 	bl	80084f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80084ee:	69bb      	ldr	r3, [r7, #24]
	}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3720      	adds	r7, #32
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
 8008504:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d103      	bne.n	8008514 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	69ba      	ldr	r2, [r7, #24]
 8008510:	601a      	str	r2, [r3, #0]
 8008512:	e002      	b.n	800851a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008526:	2101      	movs	r1, #1
 8008528:	69b8      	ldr	r0, [r7, #24]
 800852a:	f7ff feaf 	bl	800828c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	78fa      	ldrb	r2, [r7, #3]
 8008532:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008536:	bf00      	nop
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800853e:	b580      	push	{r7, lr}
 8008540:	b086      	sub	sp, #24
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10d      	bne.n	800856a <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008552:	b672      	cpsid	i
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	b662      	cpsie	i
 8008562:	613b      	str	r3, [r7, #16]
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop
 8008568:	e7fd      	b.n	8008566 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	429a      	cmp	r2, r3
 8008570:	d90d      	bls.n	800858e <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8008572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008576:	b672      	cpsid	i
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	b662      	cpsie	i
 8008586:	60fb      	str	r3, [r7, #12]
}
 8008588:	bf00      	nop
 800858a:	bf00      	nop
 800858c:	e7fd      	b.n	800858a <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800858e:	2202      	movs	r2, #2
 8008590:	2100      	movs	r1, #0
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7ff ff6d 	bl	8008472 <xQueueGenericCreate>
 8008598:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d002      	beq.n	80085a6 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80085a6:	697b      	ldr	r3, [r7, #20]
	}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3718      	adds	r7, #24
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b08e      	sub	sp, #56	@ 0x38
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80085be:	2300      	movs	r3, #0
 80085c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80085c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10d      	bne.n	80085e8 <xQueueGenericSend+0x38>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d0:	b672      	cpsid	i
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	b662      	cpsie	i
 80085e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80085e2:	bf00      	nop
 80085e4:	bf00      	nop
 80085e6:	e7fd      	b.n	80085e4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d103      	bne.n	80085f6 <xQueueGenericSend+0x46>
 80085ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <xQueueGenericSend+0x4a>
 80085f6:	2301      	movs	r3, #1
 80085f8:	e000      	b.n	80085fc <xQueueGenericSend+0x4c>
 80085fa:	2300      	movs	r3, #0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10d      	bne.n	800861c <xQueueGenericSend+0x6c>
	__asm volatile
 8008600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008604:	b672      	cpsid	i
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	b662      	cpsie	i
 8008614:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008616:	bf00      	nop
 8008618:	bf00      	nop
 800861a:	e7fd      	b.n	8008618 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	2b02      	cmp	r3, #2
 8008620:	d103      	bne.n	800862a <xQueueGenericSend+0x7a>
 8008622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008626:	2b01      	cmp	r3, #1
 8008628:	d101      	bne.n	800862e <xQueueGenericSend+0x7e>
 800862a:	2301      	movs	r3, #1
 800862c:	e000      	b.n	8008630 <xQueueGenericSend+0x80>
 800862e:	2300      	movs	r3, #0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10d      	bne.n	8008650 <xQueueGenericSend+0xa0>
	__asm volatile
 8008634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008638:	b672      	cpsid	i
 800863a:	f383 8811 	msr	BASEPRI, r3
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	b662      	cpsie	i
 8008648:	623b      	str	r3, [r7, #32]
}
 800864a:	bf00      	nop
 800864c:	bf00      	nop
 800864e:	e7fd      	b.n	800864c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008650:	f001 fcf8 	bl	800a044 <xTaskGetSchedulerState>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d102      	bne.n	8008660 <xQueueGenericSend+0xb0>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d101      	bne.n	8008664 <xQueueGenericSend+0xb4>
 8008660:	2301      	movs	r3, #1
 8008662:	e000      	b.n	8008666 <xQueueGenericSend+0xb6>
 8008664:	2300      	movs	r3, #0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10d      	bne.n	8008686 <xQueueGenericSend+0xd6>
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866e:	b672      	cpsid	i
 8008670:	f383 8811 	msr	BASEPRI, r3
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	b662      	cpsie	i
 800867e:	61fb      	str	r3, [r7, #28]
}
 8008680:	bf00      	nop
 8008682:	bf00      	nop
 8008684:	e7fd      	b.n	8008682 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008686:	f002 fc61 	bl	800af4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800868a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800868e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008692:	429a      	cmp	r2, r3
 8008694:	d302      	bcc.n	800869c <xQueueGenericSend+0xec>
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b02      	cmp	r3, #2
 800869a:	d129      	bne.n	80086f0 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800869c:	683a      	ldr	r2, [r7, #0]
 800869e:	68b9      	ldr	r1, [r7, #8]
 80086a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086a2:	f000 fb92 	bl	8008dca <prvCopyDataToQueue>
 80086a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d010      	beq.n	80086d2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b2:	3324      	adds	r3, #36	@ 0x24
 80086b4:	4618      	mov	r0, r3
 80086b6:	f001 fa5b 	bl	8009b70 <xTaskRemoveFromEventList>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d013      	beq.n	80086e8 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80086c0:	4b3f      	ldr	r3, [pc, #252]	@ (80087c0 <xQueueGenericSend+0x210>)
 80086c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086c6:	601a      	str	r2, [r3, #0]
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	e00a      	b.n	80086e8 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80086d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d007      	beq.n	80086e8 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80086d8:	4b39      	ldr	r3, [pc, #228]	@ (80087c0 <xQueueGenericSend+0x210>)
 80086da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80086e8:	f002 fc66 	bl	800afb8 <vPortExitCritical>
				return pdPASS;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e063      	b.n	80087b8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d103      	bne.n	80086fe <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086f6:	f002 fc5f 	bl	800afb8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80086fa:	2300      	movs	r3, #0
 80086fc:	e05c      	b.n	80087b8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008700:	2b00      	cmp	r3, #0
 8008702:	d106      	bne.n	8008712 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008704:	f107 0314 	add.w	r3, r7, #20
 8008708:	4618      	mov	r0, r3
 800870a:	f001 fb29 	bl	8009d60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800870e:	2301      	movs	r3, #1
 8008710:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008712:	f002 fc51 	bl	800afb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008716:	f000 ffb9 	bl	800968c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800871a:	f002 fc17 	bl	800af4c <vPortEnterCritical>
 800871e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008720:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008724:	b25b      	sxtb	r3, r3
 8008726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872a:	d103      	bne.n	8008734 <xQueueGenericSend+0x184>
 800872c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872e:	2200      	movs	r2, #0
 8008730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008736:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800873a:	b25b      	sxtb	r3, r3
 800873c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008740:	d103      	bne.n	800874a <xQueueGenericSend+0x19a>
 8008742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800874a:	f002 fc35 	bl	800afb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800874e:	1d3a      	adds	r2, r7, #4
 8008750:	f107 0314 	add.w	r3, r7, #20
 8008754:	4611      	mov	r1, r2
 8008756:	4618      	mov	r0, r3
 8008758:	f001 fb18 	bl	8009d8c <xTaskCheckForTimeOut>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d124      	bne.n	80087ac <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008762:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008764:	f000 fc29 	bl	8008fba <prvIsQueueFull>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d018      	beq.n	80087a0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800876e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008770:	3310      	adds	r3, #16
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	4611      	mov	r1, r2
 8008776:	4618      	mov	r0, r3
 8008778:	f001 f962 	bl	8009a40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800877c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800877e:	f000 fbb4 	bl	8008eea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008782:	f000 ff91 	bl	80096a8 <xTaskResumeAll>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	f47f af7c 	bne.w	8008686 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800878e:	4b0c      	ldr	r3, [pc, #48]	@ (80087c0 <xQueueGenericSend+0x210>)
 8008790:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008794:	601a      	str	r2, [r3, #0]
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	e772      	b.n	8008686 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80087a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087a2:	f000 fba2 	bl	8008eea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087a6:	f000 ff7f 	bl	80096a8 <xTaskResumeAll>
 80087aa:	e76c      	b.n	8008686 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80087ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087ae:	f000 fb9c 	bl	8008eea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087b2:	f000 ff79 	bl	80096a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80087b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3738      	adds	r7, #56	@ 0x38
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	e000ed04 	.word	0xe000ed04

080087c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b08e      	sub	sp, #56	@ 0x38
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
 80087d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80087d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10d      	bne.n	80087f8 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e0:	b672      	cpsid	i
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	b662      	cpsie	i
 80087f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80087f2:	bf00      	nop
 80087f4:	bf00      	nop
 80087f6:	e7fd      	b.n	80087f4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d103      	bne.n	8008806 <xQueueGenericSendFromISR+0x42>
 80087fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008802:	2b00      	cmp	r3, #0
 8008804:	d101      	bne.n	800880a <xQueueGenericSendFromISR+0x46>
 8008806:	2301      	movs	r3, #1
 8008808:	e000      	b.n	800880c <xQueueGenericSendFromISR+0x48>
 800880a:	2300      	movs	r3, #0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10d      	bne.n	800882c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8008810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008814:	b672      	cpsid	i
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	b662      	cpsie	i
 8008824:	623b      	str	r3, [r7, #32]
}
 8008826:	bf00      	nop
 8008828:	bf00      	nop
 800882a:	e7fd      	b.n	8008828 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	2b02      	cmp	r3, #2
 8008830:	d103      	bne.n	800883a <xQueueGenericSendFromISR+0x76>
 8008832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008836:	2b01      	cmp	r3, #1
 8008838:	d101      	bne.n	800883e <xQueueGenericSendFromISR+0x7a>
 800883a:	2301      	movs	r3, #1
 800883c:	e000      	b.n	8008840 <xQueueGenericSendFromISR+0x7c>
 800883e:	2300      	movs	r3, #0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10d      	bne.n	8008860 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008848:	b672      	cpsid	i
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	b662      	cpsie	i
 8008858:	61fb      	str	r3, [r7, #28]
}
 800885a:	bf00      	nop
 800885c:	bf00      	nop
 800885e:	e7fd      	b.n	800885c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008860:	f002 fc5c 	bl	800b11c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008864:	f3ef 8211 	mrs	r2, BASEPRI
 8008868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800886c:	b672      	cpsid	i
 800886e:	f383 8811 	msr	BASEPRI, r3
 8008872:	f3bf 8f6f 	isb	sy
 8008876:	f3bf 8f4f 	dsb	sy
 800887a:	b662      	cpsie	i
 800887c:	61ba      	str	r2, [r7, #24]
 800887e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008880:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008882:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008886:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800888c:	429a      	cmp	r2, r3
 800888e:	d302      	bcc.n	8008896 <xQueueGenericSendFromISR+0xd2>
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	2b02      	cmp	r3, #2
 8008894:	d12c      	bne.n	80088f0 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008898:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800889c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	68b9      	ldr	r1, [r7, #8]
 80088a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088a6:	f000 fa90 	bl	8008dca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80088aa:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80088ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b2:	d112      	bne.n	80088da <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d016      	beq.n	80088ea <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088be:	3324      	adds	r3, #36	@ 0x24
 80088c0:	4618      	mov	r0, r3
 80088c2:	f001 f955 	bl	8009b70 <xTaskRemoveFromEventList>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00e      	beq.n	80088ea <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00b      	beq.n	80088ea <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	601a      	str	r2, [r3, #0]
 80088d8:	e007      	b.n	80088ea <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80088da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80088de:	3301      	adds	r3, #1
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	b25a      	sxtb	r2, r3
 80088e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80088ea:	2301      	movs	r3, #1
 80088ec:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80088ee:	e001      	b.n	80088f4 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80088f0:	2300      	movs	r3, #0
 80088f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80088f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80088fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008902:	4618      	mov	r0, r3
 8008904:	3738      	adds	r7, #56	@ 0x38
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
	...

0800890c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b08c      	sub	sp, #48	@ 0x30
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008918:	2300      	movs	r3, #0
 800891a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008922:	2b00      	cmp	r3, #0
 8008924:	d10d      	bne.n	8008942 <xQueueReceive+0x36>
	__asm volatile
 8008926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892a:	b672      	cpsid	i
 800892c:	f383 8811 	msr	BASEPRI, r3
 8008930:	f3bf 8f6f 	isb	sy
 8008934:	f3bf 8f4f 	dsb	sy
 8008938:	b662      	cpsie	i
 800893a:	623b      	str	r3, [r7, #32]
}
 800893c:	bf00      	nop
 800893e:	bf00      	nop
 8008940:	e7fd      	b.n	800893e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d103      	bne.n	8008950 <xQueueReceive+0x44>
 8008948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <xQueueReceive+0x48>
 8008950:	2301      	movs	r3, #1
 8008952:	e000      	b.n	8008956 <xQueueReceive+0x4a>
 8008954:	2300      	movs	r3, #0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10d      	bne.n	8008976 <xQueueReceive+0x6a>
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895e:	b672      	cpsid	i
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	b662      	cpsie	i
 800896e:	61fb      	str	r3, [r7, #28]
}
 8008970:	bf00      	nop
 8008972:	bf00      	nop
 8008974:	e7fd      	b.n	8008972 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008976:	f001 fb65 	bl	800a044 <xTaskGetSchedulerState>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d102      	bne.n	8008986 <xQueueReceive+0x7a>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d101      	bne.n	800898a <xQueueReceive+0x7e>
 8008986:	2301      	movs	r3, #1
 8008988:	e000      	b.n	800898c <xQueueReceive+0x80>
 800898a:	2300      	movs	r3, #0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10d      	bne.n	80089ac <xQueueReceive+0xa0>
	__asm volatile
 8008990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008994:	b672      	cpsid	i
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	b662      	cpsie	i
 80089a4:	61bb      	str	r3, [r7, #24]
}
 80089a6:	bf00      	nop
 80089a8:	bf00      	nop
 80089aa:	e7fd      	b.n	80089a8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089ac:	f002 face 	bl	800af4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d01f      	beq.n	80089fc <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80089bc:	68b9      	ldr	r1, [r7, #8]
 80089be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089c0:	f000 fa6d 	bl	8008e9e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80089c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c6:	1e5a      	subs	r2, r3, #1
 80089c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00f      	beq.n	80089f4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d6:	3310      	adds	r3, #16
 80089d8:	4618      	mov	r0, r3
 80089da:	f001 f8c9 	bl	8009b70 <xTaskRemoveFromEventList>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d007      	beq.n	80089f4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80089e4:	4b3c      	ldr	r3, [pc, #240]	@ (8008ad8 <xQueueReceive+0x1cc>)
 80089e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80089f4:	f002 fae0 	bl	800afb8 <vPortExitCritical>
				return pdPASS;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e069      	b.n	8008ad0 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d103      	bne.n	8008a0a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a02:	f002 fad9 	bl	800afb8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a06:	2300      	movs	r3, #0
 8008a08:	e062      	b.n	8008ad0 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d106      	bne.n	8008a1e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a10:	f107 0310 	add.w	r3, r7, #16
 8008a14:	4618      	mov	r0, r3
 8008a16:	f001 f9a3 	bl	8009d60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a1e:	f002 facb 	bl	800afb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a22:	f000 fe33 	bl	800968c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a26:	f002 fa91 	bl	800af4c <vPortEnterCritical>
 8008a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a30:	b25b      	sxtb	r3, r3
 8008a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a36:	d103      	bne.n	8008a40 <xQueueReceive+0x134>
 8008a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a46:	b25b      	sxtb	r3, r3
 8008a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4c:	d103      	bne.n	8008a56 <xQueueReceive+0x14a>
 8008a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a56:	f002 faaf 	bl	800afb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a5a:	1d3a      	adds	r2, r7, #4
 8008a5c:	f107 0310 	add.w	r3, r7, #16
 8008a60:	4611      	mov	r1, r2
 8008a62:	4618      	mov	r0, r3
 8008a64:	f001 f992 	bl	8009d8c <xTaskCheckForTimeOut>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d123      	bne.n	8008ab6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a70:	f000 fa8d 	bl	8008f8e <prvIsQueueEmpty>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d017      	beq.n	8008aaa <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7c:	3324      	adds	r3, #36	@ 0x24
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	4611      	mov	r1, r2
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 ffdc 	bl	8009a40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a8a:	f000 fa2e 	bl	8008eea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a8e:	f000 fe0b 	bl	80096a8 <xTaskResumeAll>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d189      	bne.n	80089ac <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8008a98:	4b0f      	ldr	r3, [pc, #60]	@ (8008ad8 <xQueueReceive+0x1cc>)
 8008a9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a9e:	601a      	str	r2, [r3, #0]
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	e780      	b.n	80089ac <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008aaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008aac:	f000 fa1d 	bl	8008eea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ab0:	f000 fdfa 	bl	80096a8 <xTaskResumeAll>
 8008ab4:	e77a      	b.n	80089ac <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008ab6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ab8:	f000 fa17 	bl	8008eea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008abc:	f000 fdf4 	bl	80096a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ac0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ac2:	f000 fa64 	bl	8008f8e <prvIsQueueEmpty>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f43f af6f 	beq.w	80089ac <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ace:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3730      	adds	r7, #48	@ 0x30
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	e000ed04 	.word	0xe000ed04

08008adc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b08e      	sub	sp, #56	@ 0x38
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008aee:	2300      	movs	r3, #0
 8008af0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10d      	bne.n	8008b14 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8008af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afc:	b672      	cpsid	i
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	b662      	cpsie	i
 8008b0c:	623b      	str	r3, [r7, #32]
}
 8008b0e:	bf00      	nop
 8008b10:	bf00      	nop
 8008b12:	e7fd      	b.n	8008b10 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00d      	beq.n	8008b38 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8008b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b20:	b672      	cpsid	i
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	b662      	cpsie	i
 8008b30:	61fb      	str	r3, [r7, #28]
}
 8008b32:	bf00      	nop
 8008b34:	bf00      	nop
 8008b36:	e7fd      	b.n	8008b34 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b38:	f001 fa84 	bl	800a044 <xTaskGetSchedulerState>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d102      	bne.n	8008b48 <xQueueSemaphoreTake+0x6c>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d101      	bne.n	8008b4c <xQueueSemaphoreTake+0x70>
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e000      	b.n	8008b4e <xQueueSemaphoreTake+0x72>
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10d      	bne.n	8008b6e <xQueueSemaphoreTake+0x92>
	__asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b56:	b672      	cpsid	i
 8008b58:	f383 8811 	msr	BASEPRI, r3
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	f3bf 8f4f 	dsb	sy
 8008b64:	b662      	cpsie	i
 8008b66:	61bb      	str	r3, [r7, #24]
}
 8008b68:	bf00      	nop
 8008b6a:	bf00      	nop
 8008b6c:	e7fd      	b.n	8008b6a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b6e:	f002 f9ed 	bl	800af4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b76:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d024      	beq.n	8008bc8 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b80:	1e5a      	subs	r2, r3, #1
 8008b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b84:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d104      	bne.n	8008b98 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008b8e:	f001 fbf3 	bl	800a378 <pvTaskIncrementMutexHeldCount>
 8008b92:	4602      	mov	r2, r0
 8008b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b96:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00f      	beq.n	8008bc0 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba2:	3310      	adds	r3, #16
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 ffe3 	bl	8009b70 <xTaskRemoveFromEventList>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d007      	beq.n	8008bc0 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008bb0:	4b55      	ldr	r3, [pc, #340]	@ (8008d08 <xQueueSemaphoreTake+0x22c>)
 8008bb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bb6:	601a      	str	r2, [r3, #0]
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008bc0:	f002 f9fa 	bl	800afb8 <vPortExitCritical>
				return pdPASS;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e09a      	b.n	8008cfe <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d114      	bne.n	8008bf8 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00d      	beq.n	8008bf0 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd8:	b672      	cpsid	i
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	b662      	cpsie	i
 8008be8:	617b      	str	r3, [r7, #20]
}
 8008bea:	bf00      	nop
 8008bec:	bf00      	nop
 8008bee:	e7fd      	b.n	8008bec <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008bf0:	f002 f9e2 	bl	800afb8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	e082      	b.n	8008cfe <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d106      	bne.n	8008c0c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bfe:	f107 030c 	add.w	r3, r7, #12
 8008c02:	4618      	mov	r0, r3
 8008c04:	f001 f8ac 	bl	8009d60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c0c:	f002 f9d4 	bl	800afb8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c10:	f000 fd3c 	bl	800968c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c14:	f002 f99a 	bl	800af4c <vPortEnterCritical>
 8008c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c1e:	b25b      	sxtb	r3, r3
 8008c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c24:	d103      	bne.n	8008c2e <xQueueSemaphoreTake+0x152>
 8008c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c34:	b25b      	sxtb	r3, r3
 8008c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3a:	d103      	bne.n	8008c44 <xQueueSemaphoreTake+0x168>
 8008c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c44:	f002 f9b8 	bl	800afb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c48:	463a      	mov	r2, r7
 8008c4a:	f107 030c 	add.w	r3, r7, #12
 8008c4e:	4611      	mov	r1, r2
 8008c50:	4618      	mov	r0, r3
 8008c52:	f001 f89b 	bl	8009d8c <xTaskCheckForTimeOut>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d132      	bne.n	8008cc2 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c5e:	f000 f996 	bl	8008f8e <prvIsQueueEmpty>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d026      	beq.n	8008cb6 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d109      	bne.n	8008c84 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8008c70:	f002 f96c 	bl	800af4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f001 fa01 	bl	800a080 <xTaskPriorityInherit>
 8008c7e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008c80:	f002 f99a 	bl	800afb8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c86:	3324      	adds	r3, #36	@ 0x24
 8008c88:	683a      	ldr	r2, [r7, #0]
 8008c8a:	4611      	mov	r1, r2
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 fed7 	bl	8009a40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c94:	f000 f929 	bl	8008eea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c98:	f000 fd06 	bl	80096a8 <xTaskResumeAll>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f47f af65 	bne.w	8008b6e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8008ca4:	4b18      	ldr	r3, [pc, #96]	@ (8008d08 <xQueueSemaphoreTake+0x22c>)
 8008ca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008caa:	601a      	str	r2, [r3, #0]
 8008cac:	f3bf 8f4f 	dsb	sy
 8008cb0:	f3bf 8f6f 	isb	sy
 8008cb4:	e75b      	b.n	8008b6e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008cb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008cb8:	f000 f917 	bl	8008eea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cbc:	f000 fcf4 	bl	80096a8 <xTaskResumeAll>
 8008cc0:	e755      	b.n	8008b6e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008cc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008cc4:	f000 f911 	bl	8008eea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cc8:	f000 fcee 	bl	80096a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ccc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008cce:	f000 f95e 	bl	8008f8e <prvIsQueueEmpty>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f43f af4a 	beq.w	8008b6e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00d      	beq.n	8008cfc <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8008ce0:	f002 f934 	bl	800af4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008ce4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ce6:	f000 f858 	bl	8008d9a <prvGetDisinheritPriorityAfterTimeout>
 8008cea:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f001 faa0 	bl	800a238 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008cf8:	f002 f95e 	bl	800afb8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008cfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3738      	adds	r7, #56	@ 0x38
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	e000ed04 	.word	0xe000ed04

08008d0c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d10d      	bne.n	8008d36 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8008d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1e:	b672      	cpsid	i
 8008d20:	f383 8811 	msr	BASEPRI, r3
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	b662      	cpsie	i
 8008d2e:	60bb      	str	r3, [r7, #8]
}
 8008d30:	bf00      	nop
 8008d32:	bf00      	nop
 8008d34:	e7fd      	b.n	8008d32 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8008d36:	f002 f909 	bl	800af4c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d3e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008d40:	f002 f93a 	bl	800afb8 <vPortExitCritical>

	return uxReturn;
 8008d44:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b084      	sub	sp, #16
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10d      	bne.n	8008d7c <vQueueDelete+0x2e>
	__asm volatile
 8008d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d64:	b672      	cpsid	i
 8008d66:	f383 8811 	msr	BASEPRI, r3
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	b662      	cpsie	i
 8008d74:	60bb      	str	r3, [r7, #8]
}
 8008d76:	bf00      	nop
 8008d78:	bf00      	nop
 8008d7a:	e7fd      	b.n	8008d78 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f000 f95f 	bl	8009040 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d102      	bne.n	8008d92 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f002 fad9 	bl	800b344 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008d92:	bf00      	nop
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b085      	sub	sp, #20
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d006      	beq.n	8008db8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008db4:	60fb      	str	r3, [r7, #12]
 8008db6:	e001      	b.n	8008dbc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008db8:	2300      	movs	r3, #0
 8008dba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
	}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3714      	adds	r7, #20
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b086      	sub	sp, #24
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	60f8      	str	r0, [r7, #12]
 8008dd2:	60b9      	str	r1, [r7, #8]
 8008dd4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dde:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10d      	bne.n	8008e04 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d14d      	bne.n	8008e8c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f001 f9ab 	bl	800a150 <xTaskPriorityDisinherit>
 8008dfa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	609a      	str	r2, [r3, #8]
 8008e02:	e043      	b.n	8008e8c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d119      	bne.n	8008e3e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6858      	ldr	r0, [r3, #4]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e12:	461a      	mov	r2, r3
 8008e14:	68b9      	ldr	r1, [r7, #8]
 8008e16:	f00c ff94 	bl	8015d42 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e22:	441a      	add	r2, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d32b      	bcc.n	8008e8c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	605a      	str	r2, [r3, #4]
 8008e3c:	e026      	b.n	8008e8c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	68d8      	ldr	r0, [r3, #12]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e46:	461a      	mov	r2, r3
 8008e48:	68b9      	ldr	r1, [r7, #8]
 8008e4a:	f00c ff7a 	bl	8015d42 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	68da      	ldr	r2, [r3, #12]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e56:	425b      	negs	r3, r3
 8008e58:	441a      	add	r2, r3
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	68da      	ldr	r2, [r3, #12]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d207      	bcs.n	8008e7a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	689a      	ldr	r2, [r3, #8]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e72:	425b      	negs	r3, r3
 8008e74:	441a      	add	r2, r3
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	d105      	bne.n	8008e8c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d002      	beq.n	8008e8c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	1c5a      	adds	r2, r3, #1
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008e94:	697b      	ldr	r3, [r7, #20]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3718      	adds	r7, #24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b082      	sub	sp, #8
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d018      	beq.n	8008ee2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	68da      	ldr	r2, [r3, #12]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eb8:	441a      	add	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68da      	ldr	r2, [r3, #12]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d303      	bcc.n	8008ed2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68d9      	ldr	r1, [r3, #12]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eda:	461a      	mov	r2, r3
 8008edc:	6838      	ldr	r0, [r7, #0]
 8008ede:	f00c ff30 	bl	8015d42 <memcpy>
	}
}
 8008ee2:	bf00      	nop
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b084      	sub	sp, #16
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ef2:	f002 f82b 	bl	800af4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008efc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008efe:	e011      	b.n	8008f24 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d012      	beq.n	8008f2e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	3324      	adds	r3, #36	@ 0x24
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f000 fe2f 	bl	8009b70 <xTaskRemoveFromEventList>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d001      	beq.n	8008f1c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008f18:	f000 ffa0 	bl	8009e5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008f1c:	7bfb      	ldrb	r3, [r7, #15]
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	dce9      	bgt.n	8008f00 <prvUnlockQueue+0x16>
 8008f2c:	e000      	b.n	8008f30 <prvUnlockQueue+0x46>
					break;
 8008f2e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	22ff      	movs	r2, #255	@ 0xff
 8008f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008f38:	f002 f83e 	bl	800afb8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008f3c:	f002 f806 	bl	800af4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f46:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f48:	e011      	b.n	8008f6e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d012      	beq.n	8008f78 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	3310      	adds	r3, #16
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 fe0a 	bl	8009b70 <xTaskRemoveFromEventList>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008f62:	f000 ff7b 	bl	8009e5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008f66:	7bbb      	ldrb	r3, [r7, #14]
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	dce9      	bgt.n	8008f4a <prvUnlockQueue+0x60>
 8008f76:	e000      	b.n	8008f7a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008f78:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	22ff      	movs	r2, #255	@ 0xff
 8008f7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008f82:	f002 f819 	bl	800afb8 <vPortExitCritical>
}
 8008f86:	bf00      	nop
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b084      	sub	sp, #16
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f96:	f001 ffd9 	bl	800af4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d102      	bne.n	8008fa8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	60fb      	str	r3, [r7, #12]
 8008fa6:	e001      	b.n	8008fac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008fac:	f002 f804 	bl	800afb8 <vPortExitCritical>

	return xReturn;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b084      	sub	sp, #16
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008fc2:	f001 ffc3 	bl	800af4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d102      	bne.n	8008fd8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	60fb      	str	r3, [r7, #12]
 8008fd6:	e001      	b.n	8008fdc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008fdc:	f001 ffec 	bl	800afb8 <vPortExitCritical>

	return xReturn;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
	...

08008fec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	60fb      	str	r3, [r7, #12]
 8008ffa:	e014      	b.n	8009026 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ffc:	4a0f      	ldr	r2, [pc, #60]	@ (800903c <vQueueAddToRegistry+0x50>)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10b      	bne.n	8009020 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009008:	490c      	ldr	r1, [pc, #48]	@ (800903c <vQueueAddToRegistry+0x50>)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009012:	4a0a      	ldr	r2, [pc, #40]	@ (800903c <vQueueAddToRegistry+0x50>)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	4413      	add	r3, r2
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800901e:	e006      	b.n	800902e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	3301      	adds	r3, #1
 8009024:	60fb      	str	r3, [r7, #12]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2b07      	cmp	r3, #7
 800902a:	d9e7      	bls.n	8008ffc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800902c:	bf00      	nop
 800902e:	bf00      	nop
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	20005ff8 	.word	0x20005ff8

08009040 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009048:	2300      	movs	r3, #0
 800904a:	60fb      	str	r3, [r7, #12]
 800904c:	e016      	b.n	800907c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800904e:	4a10      	ldr	r2, [pc, #64]	@ (8009090 <vQueueUnregisterQueue+0x50>)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	00db      	lsls	r3, r3, #3
 8009054:	4413      	add	r3, r2
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	429a      	cmp	r2, r3
 800905c:	d10b      	bne.n	8009076 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800905e:	4a0c      	ldr	r2, [pc, #48]	@ (8009090 <vQueueUnregisterQueue+0x50>)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2100      	movs	r1, #0
 8009064:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009068:	4a09      	ldr	r2, [pc, #36]	@ (8009090 <vQueueUnregisterQueue+0x50>)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	00db      	lsls	r3, r3, #3
 800906e:	4413      	add	r3, r2
 8009070:	2200      	movs	r2, #0
 8009072:	605a      	str	r2, [r3, #4]
				break;
 8009074:	e006      	b.n	8009084 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	3301      	adds	r3, #1
 800907a:	60fb      	str	r3, [r7, #12]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2b07      	cmp	r3, #7
 8009080:	d9e5      	bls.n	800904e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009082:	bf00      	nop
 8009084:	bf00      	nop
 8009086:	3714      	adds	r7, #20
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr
 8009090:	20005ff8 	.word	0x20005ff8

08009094 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80090a4:	f001 ff52 	bl	800af4c <vPortEnterCritical>
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80090ae:	b25b      	sxtb	r3, r3
 80090b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b4:	d103      	bne.n	80090be <vQueueWaitForMessageRestricted+0x2a>
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090c4:	b25b      	sxtb	r3, r3
 80090c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ca:	d103      	bne.n	80090d4 <vQueueWaitForMessageRestricted+0x40>
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80090d4:	f001 ff70 	bl	800afb8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d106      	bne.n	80090ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	3324      	adds	r3, #36	@ 0x24
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	68b9      	ldr	r1, [r7, #8]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 fd13 	bl	8009b14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80090ee:	6978      	ldr	r0, [r7, #20]
 80090f0:	f7ff fefb 	bl	8008eea <prvUnlockQueue>
	}
 80090f4:	bf00      	nop
 80090f6:	3718      	adds	r7, #24
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b08e      	sub	sp, #56	@ 0x38
 8009100:	af04      	add	r7, sp, #16
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
 8009108:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800910a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10d      	bne.n	800912c <xTaskCreateStatic+0x30>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009114:	b672      	cpsid	i
 8009116:	f383 8811 	msr	BASEPRI, r3
 800911a:	f3bf 8f6f 	isb	sy
 800911e:	f3bf 8f4f 	dsb	sy
 8009122:	b662      	cpsie	i
 8009124:	623b      	str	r3, [r7, #32]
}
 8009126:	bf00      	nop
 8009128:	bf00      	nop
 800912a:	e7fd      	b.n	8009128 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800912c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10d      	bne.n	800914e <xTaskCreateStatic+0x52>
	__asm volatile
 8009132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009136:	b672      	cpsid	i
 8009138:	f383 8811 	msr	BASEPRI, r3
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	b662      	cpsie	i
 8009146:	61fb      	str	r3, [r7, #28]
}
 8009148:	bf00      	nop
 800914a:	bf00      	nop
 800914c:	e7fd      	b.n	800914a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800914e:	235c      	movs	r3, #92	@ 0x5c
 8009150:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	2b5c      	cmp	r3, #92	@ 0x5c
 8009156:	d00d      	beq.n	8009174 <xTaskCreateStatic+0x78>
	__asm volatile
 8009158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800915c:	b672      	cpsid	i
 800915e:	f383 8811 	msr	BASEPRI, r3
 8009162:	f3bf 8f6f 	isb	sy
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	b662      	cpsie	i
 800916c:	61bb      	str	r3, [r7, #24]
}
 800916e:	bf00      	nop
 8009170:	bf00      	nop
 8009172:	e7fd      	b.n	8009170 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009174:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009178:	2b00      	cmp	r3, #0
 800917a:	d01e      	beq.n	80091ba <xTaskCreateStatic+0xbe>
 800917c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800917e:	2b00      	cmp	r3, #0
 8009180:	d01b      	beq.n	80091ba <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009184:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009188:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800918a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800918c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918e:	2202      	movs	r2, #2
 8009190:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009194:	2300      	movs	r3, #0
 8009196:	9303      	str	r3, [sp, #12]
 8009198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919a:	9302      	str	r3, [sp, #8]
 800919c:	f107 0314 	add.w	r3, r7, #20
 80091a0:	9301      	str	r3, [sp, #4]
 80091a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	68b9      	ldr	r1, [r7, #8]
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f000 f850 	bl	8009252 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80091b4:	f000 f8e0 	bl	8009378 <prvAddNewTaskToReadyList>
 80091b8:	e001      	b.n	80091be <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80091ba:	2300      	movs	r3, #0
 80091bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80091be:	697b      	ldr	r3, [r7, #20]
	}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3728      	adds	r7, #40	@ 0x28
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b08c      	sub	sp, #48	@ 0x30
 80091cc:	af04      	add	r7, sp, #16
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	603b      	str	r3, [r7, #0]
 80091d4:	4613      	mov	r3, r2
 80091d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80091d8:	88fb      	ldrh	r3, [r7, #6]
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	4618      	mov	r0, r3
 80091de:	f001 ffe3 	bl	800b1a8 <pvPortMalloc>
 80091e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00e      	beq.n	8009208 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80091ea:	205c      	movs	r0, #92	@ 0x5c
 80091ec:	f001 ffdc 	bl	800b1a8 <pvPortMalloc>
 80091f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d003      	beq.n	8009200 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	697a      	ldr	r2, [r7, #20]
 80091fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80091fe:	e005      	b.n	800920c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009200:	6978      	ldr	r0, [r7, #20]
 8009202:	f002 f89f 	bl	800b344 <vPortFree>
 8009206:	e001      	b.n	800920c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009208:	2300      	movs	r3, #0
 800920a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d017      	beq.n	8009242 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800921a:	88fa      	ldrh	r2, [r7, #6]
 800921c:	2300      	movs	r3, #0
 800921e:	9303      	str	r3, [sp, #12]
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	9302      	str	r3, [sp, #8]
 8009224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009226:	9301      	str	r3, [sp, #4]
 8009228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	68b9      	ldr	r1, [r7, #8]
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 f80e 	bl	8009252 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009236:	69f8      	ldr	r0, [r7, #28]
 8009238:	f000 f89e 	bl	8009378 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800923c:	2301      	movs	r3, #1
 800923e:	61bb      	str	r3, [r7, #24]
 8009240:	e002      	b.n	8009248 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009242:	f04f 33ff 	mov.w	r3, #4294967295
 8009246:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009248:	69bb      	ldr	r3, [r7, #24]
	}
 800924a:	4618      	mov	r0, r3
 800924c:	3720      	adds	r7, #32
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b088      	sub	sp, #32
 8009256:	af00      	add	r7, sp, #0
 8009258:	60f8      	str	r0, [r7, #12]
 800925a:	60b9      	str	r1, [r7, #8]
 800925c:	607a      	str	r2, [r7, #4]
 800925e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009262:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	461a      	mov	r2, r3
 800926a:	21a5      	movs	r1, #165	@ 0xa5
 800926c:	f00c fced 	bl	8015c4a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009272:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009274:	6879      	ldr	r1, [r7, #4]
 8009276:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800927a:	440b      	add	r3, r1
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	f023 0307 	bic.w	r3, r3, #7
 8009288:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	f003 0307 	and.w	r3, r3, #7
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00d      	beq.n	80092b0 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009298:	b672      	cpsid	i
 800929a:	f383 8811 	msr	BASEPRI, r3
 800929e:	f3bf 8f6f 	isb	sy
 80092a2:	f3bf 8f4f 	dsb	sy
 80092a6:	b662      	cpsie	i
 80092a8:	617b      	str	r3, [r7, #20]
}
 80092aa:	bf00      	nop
 80092ac:	bf00      	nop
 80092ae:	e7fd      	b.n	80092ac <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d01f      	beq.n	80092f6 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092b6:	2300      	movs	r3, #0
 80092b8:	61fb      	str	r3, [r7, #28]
 80092ba:	e012      	b.n	80092e2 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	4413      	add	r3, r2
 80092c2:	7819      	ldrb	r1, [r3, #0]
 80092c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	4413      	add	r3, r2
 80092ca:	3334      	adds	r3, #52	@ 0x34
 80092cc:	460a      	mov	r2, r1
 80092ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	4413      	add	r3, r2
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d006      	beq.n	80092ea <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	3301      	adds	r3, #1
 80092e0:	61fb      	str	r3, [r7, #28]
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	2b0f      	cmp	r3, #15
 80092e6:	d9e9      	bls.n	80092bc <prvInitialiseNewTask+0x6a>
 80092e8:	e000      	b.n	80092ec <prvInitialiseNewTask+0x9a>
			{
				break;
 80092ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80092ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80092f4:	e003      	b.n	80092fe <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80092f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80092fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009300:	2b37      	cmp	r3, #55	@ 0x37
 8009302:	d901      	bls.n	8009308 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009304:	2337      	movs	r3, #55	@ 0x37
 8009306:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800930c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800930e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009310:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009312:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009316:	2200      	movs	r2, #0
 8009318:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800931a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931c:	3304      	adds	r3, #4
 800931e:	4618      	mov	r0, r3
 8009320:	f7fe ff1f 	bl	8008162 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009326:	3318      	adds	r3, #24
 8009328:	4618      	mov	r0, r3
 800932a:	f7fe ff1a 	bl	8008162 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800932e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009332:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009336:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800933a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800933e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009342:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009346:	2200      	movs	r2, #0
 8009348:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800934a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934c:	2200      	movs	r2, #0
 800934e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	68f9      	ldr	r1, [r7, #12]
 8009356:	69b8      	ldr	r0, [r7, #24]
 8009358:	f001 fce6 	bl	800ad28 <pxPortInitialiseStack>
 800935c:	4602      	mov	r2, r0
 800935e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009360:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009364:	2b00      	cmp	r3, #0
 8009366:	d002      	beq.n	800936e <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800936a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800936c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800936e:	bf00      	nop
 8009370:	3720      	adds	r7, #32
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
	...

08009378 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009380:	f001 fde4 	bl	800af4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009384:	4b2d      	ldr	r3, [pc, #180]	@ (800943c <prvAddNewTaskToReadyList+0xc4>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3301      	adds	r3, #1
 800938a:	4a2c      	ldr	r2, [pc, #176]	@ (800943c <prvAddNewTaskToReadyList+0xc4>)
 800938c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800938e:	4b2c      	ldr	r3, [pc, #176]	@ (8009440 <prvAddNewTaskToReadyList+0xc8>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d109      	bne.n	80093aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009396:	4a2a      	ldr	r2, [pc, #168]	@ (8009440 <prvAddNewTaskToReadyList+0xc8>)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800939c:	4b27      	ldr	r3, [pc, #156]	@ (800943c <prvAddNewTaskToReadyList+0xc4>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d110      	bne.n	80093c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093a4:	f000 fd7e 	bl	8009ea4 <prvInitialiseTaskLists>
 80093a8:	e00d      	b.n	80093c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093aa:	4b26      	ldr	r3, [pc, #152]	@ (8009444 <prvAddNewTaskToReadyList+0xcc>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d109      	bne.n	80093c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093b2:	4b23      	ldr	r3, [pc, #140]	@ (8009440 <prvAddNewTaskToReadyList+0xc8>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093bc:	429a      	cmp	r2, r3
 80093be:	d802      	bhi.n	80093c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80093c0:	4a1f      	ldr	r2, [pc, #124]	@ (8009440 <prvAddNewTaskToReadyList+0xc8>)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80093c6:	4b20      	ldr	r3, [pc, #128]	@ (8009448 <prvAddNewTaskToReadyList+0xd0>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3301      	adds	r3, #1
 80093cc:	4a1e      	ldr	r2, [pc, #120]	@ (8009448 <prvAddNewTaskToReadyList+0xd0>)
 80093ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80093d0:	4b1d      	ldr	r3, [pc, #116]	@ (8009448 <prvAddNewTaskToReadyList+0xd0>)
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093dc:	4b1b      	ldr	r3, [pc, #108]	@ (800944c <prvAddNewTaskToReadyList+0xd4>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d903      	bls.n	80093ec <prvAddNewTaskToReadyList+0x74>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e8:	4a18      	ldr	r2, [pc, #96]	@ (800944c <prvAddNewTaskToReadyList+0xd4>)
 80093ea:	6013      	str	r3, [r2, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093f0:	4613      	mov	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	4a15      	ldr	r2, [pc, #84]	@ (8009450 <prvAddNewTaskToReadyList+0xd8>)
 80093fa:	441a      	add	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	3304      	adds	r3, #4
 8009400:	4619      	mov	r1, r3
 8009402:	4610      	mov	r0, r2
 8009404:	f7fe feba 	bl	800817c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009408:	f001 fdd6 	bl	800afb8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800940c:	4b0d      	ldr	r3, [pc, #52]	@ (8009444 <prvAddNewTaskToReadyList+0xcc>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00e      	beq.n	8009432 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009414:	4b0a      	ldr	r3, [pc, #40]	@ (8009440 <prvAddNewTaskToReadyList+0xc8>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800941e:	429a      	cmp	r2, r3
 8009420:	d207      	bcs.n	8009432 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009422:	4b0c      	ldr	r3, [pc, #48]	@ (8009454 <prvAddNewTaskToReadyList+0xdc>)
 8009424:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009428:	601a      	str	r2, [r3, #0]
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009432:	bf00      	nop
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	2000650c 	.word	0x2000650c
 8009440:	20006038 	.word	0x20006038
 8009444:	20006518 	.word	0x20006518
 8009448:	20006528 	.word	0x20006528
 800944c:	20006514 	.word	0x20006514
 8009450:	2000603c 	.word	0x2000603c
 8009454:	e000ed04 	.word	0xe000ed04

08009458 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009460:	f001 fd74 	bl	800af4c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d102      	bne.n	8009470 <vTaskDelete+0x18>
 800946a:	4b2e      	ldr	r3, [pc, #184]	@ (8009524 <vTaskDelete+0xcc>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	e000      	b.n	8009472 <vTaskDelete+0x1a>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	3304      	adds	r3, #4
 8009478:	4618      	mov	r0, r3
 800947a:	f7fe fedc 	bl	8008236 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009482:	2b00      	cmp	r3, #0
 8009484:	d004      	beq.n	8009490 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	3318      	adds	r3, #24
 800948a:	4618      	mov	r0, r3
 800948c:	f7fe fed3 	bl	8008236 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8009490:	4b25      	ldr	r3, [pc, #148]	@ (8009528 <vTaskDelete+0xd0>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	3301      	adds	r3, #1
 8009496:	4a24      	ldr	r2, [pc, #144]	@ (8009528 <vTaskDelete+0xd0>)
 8009498:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800949a:	4b22      	ldr	r3, [pc, #136]	@ (8009524 <vTaskDelete+0xcc>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d10b      	bne.n	80094bc <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	3304      	adds	r3, #4
 80094a8:	4619      	mov	r1, r3
 80094aa:	4820      	ldr	r0, [pc, #128]	@ (800952c <vTaskDelete+0xd4>)
 80094ac:	f7fe fe66 	bl	800817c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80094b0:	4b1f      	ldr	r3, [pc, #124]	@ (8009530 <vTaskDelete+0xd8>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	3301      	adds	r3, #1
 80094b6:	4a1e      	ldr	r2, [pc, #120]	@ (8009530 <vTaskDelete+0xd8>)
 80094b8:	6013      	str	r3, [r2, #0]
 80094ba:	e009      	b.n	80094d0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80094bc:	4b1d      	ldr	r3, [pc, #116]	@ (8009534 <vTaskDelete+0xdc>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	3b01      	subs	r3, #1
 80094c2:	4a1c      	ldr	r2, [pc, #112]	@ (8009534 <vTaskDelete+0xdc>)
 80094c4:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f000 fd5a 	bl	8009f80 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80094cc:	f000 fd8a 	bl	8009fe4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80094d0:	f001 fd72 	bl	800afb8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80094d4:	4b18      	ldr	r3, [pc, #96]	@ (8009538 <vTaskDelete+0xe0>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d01e      	beq.n	800951a <vTaskDelete+0xc2>
		{
			if( pxTCB == pxCurrentTCB )
 80094dc:	4b11      	ldr	r3, [pc, #68]	@ (8009524 <vTaskDelete+0xcc>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d119      	bne.n	800951a <vTaskDelete+0xc2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80094e6:	4b15      	ldr	r3, [pc, #84]	@ (800953c <vTaskDelete+0xe4>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00d      	beq.n	800950a <vTaskDelete+0xb2>
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f2:	b672      	cpsid	i
 80094f4:	f383 8811 	msr	BASEPRI, r3
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	b662      	cpsie	i
 8009502:	60bb      	str	r3, [r7, #8]
}
 8009504:	bf00      	nop
 8009506:	bf00      	nop
 8009508:	e7fd      	b.n	8009506 <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 800950a:	4b0d      	ldr	r3, [pc, #52]	@ (8009540 <vTaskDelete+0xe8>)
 800950c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009510:	601a      	str	r2, [r3, #0]
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800951a:	bf00      	nop
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	20006038 	.word	0x20006038
 8009528:	20006528 	.word	0x20006528
 800952c:	200064e0 	.word	0x200064e0
 8009530:	200064f4 	.word	0x200064f4
 8009534:	2000650c 	.word	0x2000650c
 8009538:	20006518 	.word	0x20006518
 800953c:	20006534 	.word	0x20006534
 8009540:	e000ed04 	.word	0xe000ed04

08009544 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800954c:	2300      	movs	r3, #0
 800954e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d01a      	beq.n	800958c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009556:	4b15      	ldr	r3, [pc, #84]	@ (80095ac <vTaskDelay+0x68>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00d      	beq.n	800957a <vTaskDelay+0x36>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009562:	b672      	cpsid	i
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	b662      	cpsie	i
 8009572:	60bb      	str	r3, [r7, #8]
}
 8009574:	bf00      	nop
 8009576:	bf00      	nop
 8009578:	e7fd      	b.n	8009576 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800957a:	f000 f887 	bl	800968c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800957e:	2100      	movs	r1, #0
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f001 f815 	bl	800a5b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009586:	f000 f88f 	bl	80096a8 <xTaskResumeAll>
 800958a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d107      	bne.n	80095a2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8009592:	4b07      	ldr	r3, [pc, #28]	@ (80095b0 <vTaskDelay+0x6c>)
 8009594:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009598:	601a      	str	r2, [r3, #0]
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095a2:	bf00      	nop
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	20006534 	.word	0x20006534
 80095b0:	e000ed04 	.word	0xe000ed04

080095b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b08a      	sub	sp, #40	@ 0x28
 80095b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80095ba:	2300      	movs	r3, #0
 80095bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80095be:	2300      	movs	r3, #0
 80095c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80095c2:	463a      	mov	r2, r7
 80095c4:	1d39      	adds	r1, r7, #4
 80095c6:	f107 0308 	add.w	r3, r7, #8
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fe fb5a 	bl	8007c84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80095d0:	6839      	ldr	r1, [r7, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	9202      	str	r2, [sp, #8]
 80095d8:	9301      	str	r3, [sp, #4]
 80095da:	2300      	movs	r3, #0
 80095dc:	9300      	str	r3, [sp, #0]
 80095de:	2300      	movs	r3, #0
 80095e0:	460a      	mov	r2, r1
 80095e2:	4924      	ldr	r1, [pc, #144]	@ (8009674 <vTaskStartScheduler+0xc0>)
 80095e4:	4824      	ldr	r0, [pc, #144]	@ (8009678 <vTaskStartScheduler+0xc4>)
 80095e6:	f7ff fd89 	bl	80090fc <xTaskCreateStatic>
 80095ea:	4603      	mov	r3, r0
 80095ec:	4a23      	ldr	r2, [pc, #140]	@ (800967c <vTaskStartScheduler+0xc8>)
 80095ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80095f0:	4b22      	ldr	r3, [pc, #136]	@ (800967c <vTaskStartScheduler+0xc8>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d002      	beq.n	80095fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80095f8:	2301      	movs	r3, #1
 80095fa:	617b      	str	r3, [r7, #20]
 80095fc:	e001      	b.n	8009602 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80095fe:	2300      	movs	r3, #0
 8009600:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d102      	bne.n	800960e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009608:	f001 f826 	bl	800a658 <xTimerCreateTimerTask>
 800960c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	2b01      	cmp	r3, #1
 8009612:	d118      	bne.n	8009646 <vTaskStartScheduler+0x92>
	__asm volatile
 8009614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009618:	b672      	cpsid	i
 800961a:	f383 8811 	msr	BASEPRI, r3
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	f3bf 8f4f 	dsb	sy
 8009626:	b662      	cpsie	i
 8009628:	613b      	str	r3, [r7, #16]
}
 800962a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800962c:	4b14      	ldr	r3, [pc, #80]	@ (8009680 <vTaskStartScheduler+0xcc>)
 800962e:	f04f 32ff 	mov.w	r2, #4294967295
 8009632:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009634:	4b13      	ldr	r3, [pc, #76]	@ (8009684 <vTaskStartScheduler+0xd0>)
 8009636:	2201      	movs	r2, #1
 8009638:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800963a:	4b13      	ldr	r3, [pc, #76]	@ (8009688 <vTaskStartScheduler+0xd4>)
 800963c:	2200      	movs	r2, #0
 800963e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009640:	f001 fc06 	bl	800ae50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009644:	e011      	b.n	800966a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964c:	d10d      	bne.n	800966a <vTaskStartScheduler+0xb6>
	__asm volatile
 800964e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009652:	b672      	cpsid	i
 8009654:	f383 8811 	msr	BASEPRI, r3
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	b662      	cpsie	i
 8009662:	60fb      	str	r3, [r7, #12]
}
 8009664:	bf00      	nop
 8009666:	bf00      	nop
 8009668:	e7fd      	b.n	8009666 <vTaskStartScheduler+0xb2>
}
 800966a:	bf00      	nop
 800966c:	3718      	adds	r7, #24
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	08016d14 	.word	0x08016d14
 8009678:	08009e75 	.word	0x08009e75
 800967c:	20006530 	.word	0x20006530
 8009680:	2000652c 	.word	0x2000652c
 8009684:	20006518 	.word	0x20006518
 8009688:	20006510 	.word	0x20006510

0800968c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800968c:	b480      	push	{r7}
 800968e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009690:	4b04      	ldr	r3, [pc, #16]	@ (80096a4 <vTaskSuspendAll+0x18>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	3301      	adds	r3, #1
 8009696:	4a03      	ldr	r2, [pc, #12]	@ (80096a4 <vTaskSuspendAll+0x18>)
 8009698:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800969a:	bf00      	nop
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr
 80096a4:	20006534 	.word	0x20006534

080096a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80096ae:	2300      	movs	r3, #0
 80096b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80096b2:	2300      	movs	r3, #0
 80096b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80096b6:	4b43      	ldr	r3, [pc, #268]	@ (80097c4 <xTaskResumeAll+0x11c>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d10d      	bne.n	80096da <xTaskResumeAll+0x32>
	__asm volatile
 80096be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c2:	b672      	cpsid	i
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	b662      	cpsie	i
 80096d2:	603b      	str	r3, [r7, #0]
}
 80096d4:	bf00      	nop
 80096d6:	bf00      	nop
 80096d8:	e7fd      	b.n	80096d6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80096da:	f001 fc37 	bl	800af4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80096de:	4b39      	ldr	r3, [pc, #228]	@ (80097c4 <xTaskResumeAll+0x11c>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3b01      	subs	r3, #1
 80096e4:	4a37      	ldr	r2, [pc, #220]	@ (80097c4 <xTaskResumeAll+0x11c>)
 80096e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096e8:	4b36      	ldr	r3, [pc, #216]	@ (80097c4 <xTaskResumeAll+0x11c>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d162      	bne.n	80097b6 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80096f0:	4b35      	ldr	r3, [pc, #212]	@ (80097c8 <xTaskResumeAll+0x120>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d05e      	beq.n	80097b6 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096f8:	e02f      	b.n	800975a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096fa:	4b34      	ldr	r3, [pc, #208]	@ (80097cc <xTaskResumeAll+0x124>)
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	3318      	adds	r3, #24
 8009706:	4618      	mov	r0, r3
 8009708:	f7fe fd95 	bl	8008236 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	3304      	adds	r3, #4
 8009710:	4618      	mov	r0, r3
 8009712:	f7fe fd90 	bl	8008236 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800971a:	4b2d      	ldr	r3, [pc, #180]	@ (80097d0 <xTaskResumeAll+0x128>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	429a      	cmp	r2, r3
 8009720:	d903      	bls.n	800972a <xTaskResumeAll+0x82>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009726:	4a2a      	ldr	r2, [pc, #168]	@ (80097d0 <xTaskResumeAll+0x128>)
 8009728:	6013      	str	r3, [r2, #0]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800972e:	4613      	mov	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4a27      	ldr	r2, [pc, #156]	@ (80097d4 <xTaskResumeAll+0x12c>)
 8009738:	441a      	add	r2, r3
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	3304      	adds	r3, #4
 800973e:	4619      	mov	r1, r3
 8009740:	4610      	mov	r0, r2
 8009742:	f7fe fd1b 	bl	800817c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800974a:	4b23      	ldr	r3, [pc, #140]	@ (80097d8 <xTaskResumeAll+0x130>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009750:	429a      	cmp	r2, r3
 8009752:	d302      	bcc.n	800975a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8009754:	4b21      	ldr	r3, [pc, #132]	@ (80097dc <xTaskResumeAll+0x134>)
 8009756:	2201      	movs	r2, #1
 8009758:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800975a:	4b1c      	ldr	r3, [pc, #112]	@ (80097cc <xTaskResumeAll+0x124>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1cb      	bne.n	80096fa <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009768:	f000 fc3c 	bl	8009fe4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800976c:	4b1c      	ldr	r3, [pc, #112]	@ (80097e0 <xTaskResumeAll+0x138>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d010      	beq.n	800979a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009778:	f000 f846 	bl	8009808 <xTaskIncrementTick>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d002      	beq.n	8009788 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8009782:	4b16      	ldr	r3, [pc, #88]	@ (80097dc <xTaskResumeAll+0x134>)
 8009784:	2201      	movs	r2, #1
 8009786:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	3b01      	subs	r3, #1
 800978c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1f1      	bne.n	8009778 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8009794:	4b12      	ldr	r3, [pc, #72]	@ (80097e0 <xTaskResumeAll+0x138>)
 8009796:	2200      	movs	r2, #0
 8009798:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800979a:	4b10      	ldr	r3, [pc, #64]	@ (80097dc <xTaskResumeAll+0x134>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d009      	beq.n	80097b6 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80097a2:	2301      	movs	r3, #1
 80097a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80097a6:	4b0f      	ldr	r3, [pc, #60]	@ (80097e4 <xTaskResumeAll+0x13c>)
 80097a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097ac:	601a      	str	r2, [r3, #0]
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097b6:	f001 fbff 	bl	800afb8 <vPortExitCritical>

	return xAlreadyYielded;
 80097ba:	68bb      	ldr	r3, [r7, #8]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	20006534 	.word	0x20006534
 80097c8:	2000650c 	.word	0x2000650c
 80097cc:	200064cc 	.word	0x200064cc
 80097d0:	20006514 	.word	0x20006514
 80097d4:	2000603c 	.word	0x2000603c
 80097d8:	20006038 	.word	0x20006038
 80097dc:	20006520 	.word	0x20006520
 80097e0:	2000651c 	.word	0x2000651c
 80097e4:	e000ed04 	.word	0xe000ed04

080097e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80097ee:	4b05      	ldr	r3, [pc, #20]	@ (8009804 <xTaskGetTickCount+0x1c>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80097f4:	687b      	ldr	r3, [r7, #4]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	20006510 	.word	0x20006510

08009808 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800980e:	2300      	movs	r3, #0
 8009810:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009812:	4b50      	ldr	r3, [pc, #320]	@ (8009954 <xTaskIncrementTick+0x14c>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	f040 808c 	bne.w	8009934 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800981c:	4b4e      	ldr	r3, [pc, #312]	@ (8009958 <xTaskIncrementTick+0x150>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3301      	adds	r3, #1
 8009822:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009824:	4a4c      	ldr	r2, [pc, #304]	@ (8009958 <xTaskIncrementTick+0x150>)
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d123      	bne.n	8009878 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009830:	4b4a      	ldr	r3, [pc, #296]	@ (800995c <xTaskIncrementTick+0x154>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00d      	beq.n	8009856 <xTaskIncrementTick+0x4e>
	__asm volatile
 800983a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800983e:	b672      	cpsid	i
 8009840:	f383 8811 	msr	BASEPRI, r3
 8009844:	f3bf 8f6f 	isb	sy
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	b662      	cpsie	i
 800984e:	603b      	str	r3, [r7, #0]
}
 8009850:	bf00      	nop
 8009852:	bf00      	nop
 8009854:	e7fd      	b.n	8009852 <xTaskIncrementTick+0x4a>
 8009856:	4b41      	ldr	r3, [pc, #260]	@ (800995c <xTaskIncrementTick+0x154>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	60fb      	str	r3, [r7, #12]
 800985c:	4b40      	ldr	r3, [pc, #256]	@ (8009960 <xTaskIncrementTick+0x158>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a3e      	ldr	r2, [pc, #248]	@ (800995c <xTaskIncrementTick+0x154>)
 8009862:	6013      	str	r3, [r2, #0]
 8009864:	4a3e      	ldr	r2, [pc, #248]	@ (8009960 <xTaskIncrementTick+0x158>)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	4b3e      	ldr	r3, [pc, #248]	@ (8009964 <xTaskIncrementTick+0x15c>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	3301      	adds	r3, #1
 8009870:	4a3c      	ldr	r2, [pc, #240]	@ (8009964 <xTaskIncrementTick+0x15c>)
 8009872:	6013      	str	r3, [r2, #0]
 8009874:	f000 fbb6 	bl	8009fe4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009878:	4b3b      	ldr	r3, [pc, #236]	@ (8009968 <xTaskIncrementTick+0x160>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	429a      	cmp	r2, r3
 8009880:	d349      	bcc.n	8009916 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009882:	4b36      	ldr	r3, [pc, #216]	@ (800995c <xTaskIncrementTick+0x154>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d104      	bne.n	8009896 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800988c:	4b36      	ldr	r3, [pc, #216]	@ (8009968 <xTaskIncrementTick+0x160>)
 800988e:	f04f 32ff 	mov.w	r2, #4294967295
 8009892:	601a      	str	r2, [r3, #0]
					break;
 8009894:	e03f      	b.n	8009916 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009896:	4b31      	ldr	r3, [pc, #196]	@ (800995c <xTaskIncrementTick+0x154>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80098a6:	693a      	ldr	r2, [r7, #16]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d203      	bcs.n	80098b6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80098ae:	4a2e      	ldr	r2, [pc, #184]	@ (8009968 <xTaskIncrementTick+0x160>)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80098b4:	e02f      	b.n	8009916 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	3304      	adds	r3, #4
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7fe fcbb 	bl	8008236 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d004      	beq.n	80098d2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	3318      	adds	r3, #24
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fe fcb2 	bl	8008236 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098d6:	4b25      	ldr	r3, [pc, #148]	@ (800996c <xTaskIncrementTick+0x164>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d903      	bls.n	80098e6 <xTaskIncrementTick+0xde>
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e2:	4a22      	ldr	r2, [pc, #136]	@ (800996c <xTaskIncrementTick+0x164>)
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ea:	4613      	mov	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	4413      	add	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	4a1f      	ldr	r2, [pc, #124]	@ (8009970 <xTaskIncrementTick+0x168>)
 80098f4:	441a      	add	r2, r3
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	3304      	adds	r3, #4
 80098fa:	4619      	mov	r1, r3
 80098fc:	4610      	mov	r0, r2
 80098fe:	f7fe fc3d 	bl	800817c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009906:	4b1b      	ldr	r3, [pc, #108]	@ (8009974 <xTaskIncrementTick+0x16c>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990c:	429a      	cmp	r2, r3
 800990e:	d3b8      	bcc.n	8009882 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009910:	2301      	movs	r3, #1
 8009912:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009914:	e7b5      	b.n	8009882 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009916:	4b17      	ldr	r3, [pc, #92]	@ (8009974 <xTaskIncrementTick+0x16c>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800991c:	4914      	ldr	r1, [pc, #80]	@ (8009970 <xTaskIncrementTick+0x168>)
 800991e:	4613      	mov	r3, r2
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	4413      	add	r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	440b      	add	r3, r1
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d907      	bls.n	800993e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800992e:	2301      	movs	r3, #1
 8009930:	617b      	str	r3, [r7, #20]
 8009932:	e004      	b.n	800993e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009934:	4b10      	ldr	r3, [pc, #64]	@ (8009978 <xTaskIncrementTick+0x170>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	3301      	adds	r3, #1
 800993a:	4a0f      	ldr	r2, [pc, #60]	@ (8009978 <xTaskIncrementTick+0x170>)
 800993c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800993e:	4b0f      	ldr	r3, [pc, #60]	@ (800997c <xTaskIncrementTick+0x174>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009946:	2301      	movs	r3, #1
 8009948:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800994a:	697b      	ldr	r3, [r7, #20]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3718      	adds	r7, #24
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	20006534 	.word	0x20006534
 8009958:	20006510 	.word	0x20006510
 800995c:	200064c4 	.word	0x200064c4
 8009960:	200064c8 	.word	0x200064c8
 8009964:	20006524 	.word	0x20006524
 8009968:	2000652c 	.word	0x2000652c
 800996c:	20006514 	.word	0x20006514
 8009970:	2000603c 	.word	0x2000603c
 8009974:	20006038 	.word	0x20006038
 8009978:	2000651c 	.word	0x2000651c
 800997c:	20006520 	.word	0x20006520

08009980 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009986:	4b29      	ldr	r3, [pc, #164]	@ (8009a2c <vTaskSwitchContext+0xac>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d003      	beq.n	8009996 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800998e:	4b28      	ldr	r3, [pc, #160]	@ (8009a30 <vTaskSwitchContext+0xb0>)
 8009990:	2201      	movs	r2, #1
 8009992:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009994:	e044      	b.n	8009a20 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009996:	4b26      	ldr	r3, [pc, #152]	@ (8009a30 <vTaskSwitchContext+0xb0>)
 8009998:	2200      	movs	r2, #0
 800999a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800999c:	4b25      	ldr	r3, [pc, #148]	@ (8009a34 <vTaskSwitchContext+0xb4>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	60fb      	str	r3, [r7, #12]
 80099a2:	e013      	b.n	80099cc <vTaskSwitchContext+0x4c>
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d10d      	bne.n	80099c6 <vTaskSwitchContext+0x46>
	__asm volatile
 80099aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ae:	b672      	cpsid	i
 80099b0:	f383 8811 	msr	BASEPRI, r3
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	b662      	cpsie	i
 80099be:	607b      	str	r3, [r7, #4]
}
 80099c0:	bf00      	nop
 80099c2:	bf00      	nop
 80099c4:	e7fd      	b.n	80099c2 <vTaskSwitchContext+0x42>
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	3b01      	subs	r3, #1
 80099ca:	60fb      	str	r3, [r7, #12]
 80099cc:	491a      	ldr	r1, [pc, #104]	@ (8009a38 <vTaskSwitchContext+0xb8>)
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	4613      	mov	r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	440b      	add	r3, r1
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d0e1      	beq.n	80099a4 <vTaskSwitchContext+0x24>
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	4613      	mov	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4a13      	ldr	r2, [pc, #76]	@ (8009a38 <vTaskSwitchContext+0xb8>)
 80099ec:	4413      	add	r3, r2
 80099ee:	60bb      	str	r3, [r7, #8]
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	605a      	str	r2, [r3, #4]
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	685a      	ldr	r2, [r3, #4]
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	3308      	adds	r3, #8
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d104      	bne.n	8009a10 <vTaskSwitchContext+0x90>
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	605a      	str	r2, [r3, #4]
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	4a09      	ldr	r2, [pc, #36]	@ (8009a3c <vTaskSwitchContext+0xbc>)
 8009a18:	6013      	str	r3, [r2, #0]
 8009a1a:	4a06      	ldr	r2, [pc, #24]	@ (8009a34 <vTaskSwitchContext+0xb4>)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6013      	str	r3, [r2, #0]
}
 8009a20:	bf00      	nop
 8009a22:	3714      	adds	r7, #20
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr
 8009a2c:	20006534 	.word	0x20006534
 8009a30:	20006520 	.word	0x20006520
 8009a34:	20006514 	.word	0x20006514
 8009a38:	2000603c 	.word	0x2000603c
 8009a3c:	20006038 	.word	0x20006038

08009a40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d10d      	bne.n	8009a6c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a54:	b672      	cpsid	i
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	b662      	cpsie	i
 8009a64:	60fb      	str	r3, [r7, #12]
}
 8009a66:	bf00      	nop
 8009a68:	bf00      	nop
 8009a6a:	e7fd      	b.n	8009a68 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a6c:	4b07      	ldr	r3, [pc, #28]	@ (8009a8c <vTaskPlaceOnEventList+0x4c>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	3318      	adds	r3, #24
 8009a72:	4619      	mov	r1, r3
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7fe fba5 	bl	80081c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a7a:	2101      	movs	r1, #1
 8009a7c:	6838      	ldr	r0, [r7, #0]
 8009a7e:	f000 fd97 	bl	800a5b0 <prvAddCurrentTaskToDelayedList>
}
 8009a82:	bf00      	nop
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	20006038 	.word	0x20006038

08009a90 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10d      	bne.n	8009abe <vTaskPlaceOnUnorderedEventList+0x2e>
	__asm volatile
 8009aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa6:	b672      	cpsid	i
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	b662      	cpsie	i
 8009ab6:	617b      	str	r3, [r7, #20]
}
 8009ab8:	bf00      	nop
 8009aba:	bf00      	nop
 8009abc:	e7fd      	b.n	8009aba <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8009abe:	4b13      	ldr	r3, [pc, #76]	@ (8009b0c <vTaskPlaceOnUnorderedEventList+0x7c>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d10d      	bne.n	8009ae2 <vTaskPlaceOnUnorderedEventList+0x52>
	__asm volatile
 8009ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aca:	b672      	cpsid	i
 8009acc:	f383 8811 	msr	BASEPRI, r3
 8009ad0:	f3bf 8f6f 	isb	sy
 8009ad4:	f3bf 8f4f 	dsb	sy
 8009ad8:	b662      	cpsie	i
 8009ada:	613b      	str	r3, [r7, #16]
}
 8009adc:	bf00      	nop
 8009ade:	bf00      	nop
 8009ae0:	e7fd      	b.n	8009ade <vTaskPlaceOnUnorderedEventList+0x4e>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8009b10 <vTaskPlaceOnUnorderedEventList+0x80>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8009aec:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009aee:	4b08      	ldr	r3, [pc, #32]	@ (8009b10 <vTaskPlaceOnUnorderedEventList+0x80>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3318      	adds	r3, #24
 8009af4:	4619      	mov	r1, r3
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	f7fe fb40 	bl	800817c <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009afc:	2101      	movs	r1, #1
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fd56 	bl	800a5b0 <prvAddCurrentTaskToDelayedList>
}
 8009b04:	bf00      	nop
 8009b06:	3718      	adds	r7, #24
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	20006534 	.word	0x20006534
 8009b10:	20006038 	.word	0x20006038

08009b14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b086      	sub	sp, #24
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d10d      	bne.n	8009b42 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8009b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b2a:	b672      	cpsid	i
 8009b2c:	f383 8811 	msr	BASEPRI, r3
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	f3bf 8f4f 	dsb	sy
 8009b38:	b662      	cpsie	i
 8009b3a:	617b      	str	r3, [r7, #20]
}
 8009b3c:	bf00      	nop
 8009b3e:	bf00      	nop
 8009b40:	e7fd      	b.n	8009b3e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b42:	4b0a      	ldr	r3, [pc, #40]	@ (8009b6c <vTaskPlaceOnEventListRestricted+0x58>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	3318      	adds	r3, #24
 8009b48:	4619      	mov	r1, r3
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f7fe fb16 	bl	800817c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d002      	beq.n	8009b5c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8009b56:	f04f 33ff 	mov.w	r3, #4294967295
 8009b5a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b5c:	6879      	ldr	r1, [r7, #4]
 8009b5e:	68b8      	ldr	r0, [r7, #8]
 8009b60:	f000 fd26 	bl	800a5b0 <prvAddCurrentTaskToDelayedList>
	}
 8009b64:	bf00      	nop
 8009b66:	3718      	adds	r7, #24
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	20006038 	.word	0x20006038

08009b70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d10d      	bne.n	8009ba2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8009b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8a:	b672      	cpsid	i
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	b662      	cpsie	i
 8009b9a:	60fb      	str	r3, [r7, #12]
}
 8009b9c:	bf00      	nop
 8009b9e:	bf00      	nop
 8009ba0:	e7fd      	b.n	8009b9e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	3318      	adds	r3, #24
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7fe fb45 	bl	8008236 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bac:	4b1d      	ldr	r3, [pc, #116]	@ (8009c24 <xTaskRemoveFromEventList+0xb4>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d11d      	bne.n	8009bf0 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	3304      	adds	r3, #4
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7fe fb3c 	bl	8008236 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bc2:	4b19      	ldr	r3, [pc, #100]	@ (8009c28 <xTaskRemoveFromEventList+0xb8>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d903      	bls.n	8009bd2 <xTaskRemoveFromEventList+0x62>
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bce:	4a16      	ldr	r2, [pc, #88]	@ (8009c28 <xTaskRemoveFromEventList+0xb8>)
 8009bd0:	6013      	str	r3, [r2, #0]
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	4413      	add	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4a13      	ldr	r2, [pc, #76]	@ (8009c2c <xTaskRemoveFromEventList+0xbc>)
 8009be0:	441a      	add	r2, r3
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	3304      	adds	r3, #4
 8009be6:	4619      	mov	r1, r3
 8009be8:	4610      	mov	r0, r2
 8009bea:	f7fe fac7 	bl	800817c <vListInsertEnd>
 8009bee:	e005      	b.n	8009bfc <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	3318      	adds	r3, #24
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	480e      	ldr	r0, [pc, #56]	@ (8009c30 <xTaskRemoveFromEventList+0xc0>)
 8009bf8:	f7fe fac0 	bl	800817c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c00:	4b0c      	ldr	r3, [pc, #48]	@ (8009c34 <xTaskRemoveFromEventList+0xc4>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d905      	bls.n	8009c16 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8009c38 <xTaskRemoveFromEventList+0xc8>)
 8009c10:	2201      	movs	r2, #1
 8009c12:	601a      	str	r2, [r3, #0]
 8009c14:	e001      	b.n	8009c1a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8009c16:	2300      	movs	r3, #0
 8009c18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c1a:	697b      	ldr	r3, [r7, #20]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3718      	adds	r7, #24
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	20006534 	.word	0x20006534
 8009c28:	20006514 	.word	0x20006514
 8009c2c:	2000603c 	.word	0x2000603c
 8009c30:	200064cc 	.word	0x200064cc
 8009c34:	20006038 	.word	0x20006038
 8009c38:	20006520 	.word	0x20006520

08009c3c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009c46:	4b2c      	ldr	r3, [pc, #176]	@ (8009cf8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10d      	bne.n	8009c6a <vTaskRemoveFromUnorderedEventList+0x2e>
	__asm volatile
 8009c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c52:	b672      	cpsid	i
 8009c54:	f383 8811 	msr	BASEPRI, r3
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	b662      	cpsie	i
 8009c62:	613b      	str	r3, [r7, #16]
}
 8009c64:	bf00      	nop
 8009c66:	bf00      	nop
 8009c68:	e7fd      	b.n	8009c66 <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10d      	bne.n	8009c9c <vTaskRemoveFromUnorderedEventList+0x60>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c84:	b672      	cpsid	i
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	b662      	cpsie	i
 8009c94:	60fb      	str	r3, [r7, #12]
}
 8009c96:	bf00      	nop
 8009c98:	bf00      	nop
 8009c9a:	e7fd      	b.n	8009c98 <vTaskRemoveFromUnorderedEventList+0x5c>
	( void ) uxListRemove( pxEventListItem );
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f7fe faca 	bl	8008236 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7fe fac5 	bl	8008236 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cb0:	4b12      	ldr	r3, [pc, #72]	@ (8009cfc <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d903      	bls.n	8009cc0 <vTaskRemoveFromUnorderedEventList+0x84>
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cbc:	4a0f      	ldr	r2, [pc, #60]	@ (8009cfc <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009cbe:	6013      	str	r3, [r2, #0]
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	4413      	add	r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8009d00 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8009cce:	441a      	add	r2, r3
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	3304      	adds	r3, #4
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	4610      	mov	r0, r2
 8009cd8:	f7fe fa50 	bl	800817c <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ce0:	4b08      	ldr	r3, [pc, #32]	@ (8009d04 <vTaskRemoveFromUnorderedEventList+0xc8>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d902      	bls.n	8009cf0 <vTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009cea:	4b07      	ldr	r3, [pc, #28]	@ (8009d08 <vTaskRemoveFromUnorderedEventList+0xcc>)
 8009cec:	2201      	movs	r2, #1
 8009cee:	601a      	str	r2, [r3, #0]
	}
}
 8009cf0:	bf00      	nop
 8009cf2:	3718      	adds	r7, #24
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	20006534 	.word	0x20006534
 8009cfc:	20006514 	.word	0x20006514
 8009d00:	2000603c 	.word	0x2000603c
 8009d04:	20006038 	.word	0x20006038
 8009d08:	20006520 	.word	0x20006520

08009d0c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10d      	bne.n	8009d36 <vTaskSetTimeOutState+0x2a>
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1e:	b672      	cpsid	i
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	b662      	cpsie	i
 8009d2e:	60fb      	str	r3, [r7, #12]
}
 8009d30:	bf00      	nop
 8009d32:	bf00      	nop
 8009d34:	e7fd      	b.n	8009d32 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 8009d36:	f001 f909 	bl	800af4c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009d3a:	4b07      	ldr	r3, [pc, #28]	@ (8009d58 <vTaskSetTimeOutState+0x4c>)
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009d42:	4b06      	ldr	r3, [pc, #24]	@ (8009d5c <vTaskSetTimeOutState+0x50>)
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009d4a:	f001 f935 	bl	800afb8 <vPortExitCritical>
}
 8009d4e:	bf00      	nop
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	20006524 	.word	0x20006524
 8009d5c:	20006510 	.word	0x20006510

08009d60 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009d68:	4b06      	ldr	r3, [pc, #24]	@ (8009d84 <vTaskInternalSetTimeOutState+0x24>)
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009d70:	4b05      	ldr	r3, [pc, #20]	@ (8009d88 <vTaskInternalSetTimeOutState+0x28>)
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	605a      	str	r2, [r3, #4]
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr
 8009d84:	20006524 	.word	0x20006524
 8009d88:	20006510 	.word	0x20006510

08009d8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b088      	sub	sp, #32
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d10d      	bne.n	8009db8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da0:	b672      	cpsid	i
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	b662      	cpsie	i
 8009db0:	613b      	str	r3, [r7, #16]
}
 8009db2:	bf00      	nop
 8009db4:	bf00      	nop
 8009db6:	e7fd      	b.n	8009db4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d10d      	bne.n	8009dda <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8009dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc2:	b672      	cpsid	i
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	b662      	cpsie	i
 8009dd2:	60fb      	str	r3, [r7, #12]
}
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop
 8009dd8:	e7fd      	b.n	8009dd6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8009dda:	f001 f8b7 	bl	800af4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009dde:	4b1d      	ldr	r3, [pc, #116]	@ (8009e54 <xTaskCheckForTimeOut+0xc8>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	69ba      	ldr	r2, [r7, #24]
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df6:	d102      	bne.n	8009dfe <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	61fb      	str	r3, [r7, #28]
 8009dfc:	e023      	b.n	8009e46 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	4b15      	ldr	r3, [pc, #84]	@ (8009e58 <xTaskCheckForTimeOut+0xcc>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d007      	beq.n	8009e1a <xTaskCheckForTimeOut+0x8e>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	69ba      	ldr	r2, [r7, #24]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d302      	bcc.n	8009e1a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009e14:	2301      	movs	r3, #1
 8009e16:	61fb      	str	r3, [r7, #28]
 8009e18:	e015      	b.n	8009e46 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d20b      	bcs.n	8009e3c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	1ad2      	subs	r2, r2, r3
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f7ff ff95 	bl	8009d60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009e36:	2300      	movs	r3, #0
 8009e38:	61fb      	str	r3, [r7, #28]
 8009e3a:	e004      	b.n	8009e46 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009e42:	2301      	movs	r3, #1
 8009e44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009e46:	f001 f8b7 	bl	800afb8 <vPortExitCritical>

	return xReturn;
 8009e4a:	69fb      	ldr	r3, [r7, #28]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3720      	adds	r7, #32
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	20006510 	.word	0x20006510
 8009e58:	20006524 	.word	0x20006524

08009e5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009e60:	4b03      	ldr	r3, [pc, #12]	@ (8009e70 <vTaskMissedYield+0x14>)
 8009e62:	2201      	movs	r2, #1
 8009e64:	601a      	str	r2, [r3, #0]
}
 8009e66:	bf00      	nop
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr
 8009e70:	20006520 	.word	0x20006520

08009e74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009e7c:	f000 f852 	bl	8009f24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009e80:	4b06      	ldr	r3, [pc, #24]	@ (8009e9c <prvIdleTask+0x28>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d9f9      	bls.n	8009e7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009e88:	4b05      	ldr	r3, [pc, #20]	@ (8009ea0 <prvIdleTask+0x2c>)
 8009e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e8e:	601a      	str	r2, [r3, #0]
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009e98:	e7f0      	b.n	8009e7c <prvIdleTask+0x8>
 8009e9a:	bf00      	nop
 8009e9c:	2000603c 	.word	0x2000603c
 8009ea0:	e000ed04 	.word	0xe000ed04

08009ea4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009eaa:	2300      	movs	r3, #0
 8009eac:	607b      	str	r3, [r7, #4]
 8009eae:	e00c      	b.n	8009eca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	4413      	add	r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	4a12      	ldr	r2, [pc, #72]	@ (8009f04 <prvInitialiseTaskLists+0x60>)
 8009ebc:	4413      	add	r3, r2
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7fe f92f 	bl	8008122 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	607b      	str	r3, [r7, #4]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2b37      	cmp	r3, #55	@ 0x37
 8009ece:	d9ef      	bls.n	8009eb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ed0:	480d      	ldr	r0, [pc, #52]	@ (8009f08 <prvInitialiseTaskLists+0x64>)
 8009ed2:	f7fe f926 	bl	8008122 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ed6:	480d      	ldr	r0, [pc, #52]	@ (8009f0c <prvInitialiseTaskLists+0x68>)
 8009ed8:	f7fe f923 	bl	8008122 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009edc:	480c      	ldr	r0, [pc, #48]	@ (8009f10 <prvInitialiseTaskLists+0x6c>)
 8009ede:	f7fe f920 	bl	8008122 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009ee2:	480c      	ldr	r0, [pc, #48]	@ (8009f14 <prvInitialiseTaskLists+0x70>)
 8009ee4:	f7fe f91d 	bl	8008122 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ee8:	480b      	ldr	r0, [pc, #44]	@ (8009f18 <prvInitialiseTaskLists+0x74>)
 8009eea:	f7fe f91a 	bl	8008122 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009eee:	4b0b      	ldr	r3, [pc, #44]	@ (8009f1c <prvInitialiseTaskLists+0x78>)
 8009ef0:	4a05      	ldr	r2, [pc, #20]	@ (8009f08 <prvInitialiseTaskLists+0x64>)
 8009ef2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8009f20 <prvInitialiseTaskLists+0x7c>)
 8009ef6:	4a05      	ldr	r2, [pc, #20]	@ (8009f0c <prvInitialiseTaskLists+0x68>)
 8009ef8:	601a      	str	r2, [r3, #0]
}
 8009efa:	bf00      	nop
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	2000603c 	.word	0x2000603c
 8009f08:	2000649c 	.word	0x2000649c
 8009f0c:	200064b0 	.word	0x200064b0
 8009f10:	200064cc 	.word	0x200064cc
 8009f14:	200064e0 	.word	0x200064e0
 8009f18:	200064f8 	.word	0x200064f8
 8009f1c:	200064c4 	.word	0x200064c4
 8009f20:	200064c8 	.word	0x200064c8

08009f24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f2a:	e019      	b.n	8009f60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009f2c:	f001 f80e 	bl	800af4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f30:	4b10      	ldr	r3, [pc, #64]	@ (8009f74 <prvCheckTasksWaitingTermination+0x50>)
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	3304      	adds	r3, #4
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7fe f97a 	bl	8008236 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009f42:	4b0d      	ldr	r3, [pc, #52]	@ (8009f78 <prvCheckTasksWaitingTermination+0x54>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	3b01      	subs	r3, #1
 8009f48:	4a0b      	ldr	r2, [pc, #44]	@ (8009f78 <prvCheckTasksWaitingTermination+0x54>)
 8009f4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8009f7c <prvCheckTasksWaitingTermination+0x58>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	3b01      	subs	r3, #1
 8009f52:	4a0a      	ldr	r2, [pc, #40]	@ (8009f7c <prvCheckTasksWaitingTermination+0x58>)
 8009f54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009f56:	f001 f82f 	bl	800afb8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f810 	bl	8009f80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f60:	4b06      	ldr	r3, [pc, #24]	@ (8009f7c <prvCheckTasksWaitingTermination+0x58>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1e1      	bne.n	8009f2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009f68:	bf00      	nop
 8009f6a:	bf00      	nop
 8009f6c:	3708      	adds	r7, #8
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	200064e0 	.word	0x200064e0
 8009f78:	2000650c 	.word	0x2000650c
 8009f7c:	200064f4 	.word	0x200064f4

08009f80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d108      	bne.n	8009fa4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f96:	4618      	mov	r0, r3
 8009f98:	f001 f9d4 	bl	800b344 <vPortFree>
				vPortFree( pxTCB );
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f001 f9d1 	bl	800b344 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009fa2:	e01b      	b.n	8009fdc <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d103      	bne.n	8009fb6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f001 f9c8 	bl	800b344 <vPortFree>
	}
 8009fb4:	e012      	b.n	8009fdc <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d00d      	beq.n	8009fdc <prvDeleteTCB+0x5c>
	__asm volatile
 8009fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc4:	b672      	cpsid	i
 8009fc6:	f383 8811 	msr	BASEPRI, r3
 8009fca:	f3bf 8f6f 	isb	sy
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	b662      	cpsie	i
 8009fd4:	60fb      	str	r3, [r7, #12]
}
 8009fd6:	bf00      	nop
 8009fd8:	bf00      	nop
 8009fda:	e7fd      	b.n	8009fd8 <prvDeleteTCB+0x58>
	}
 8009fdc:	bf00      	nop
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fea:	4b0c      	ldr	r3, [pc, #48]	@ (800a01c <prvResetNextTaskUnblockTime+0x38>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d104      	bne.n	8009ffe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ff4:	4b0a      	ldr	r3, [pc, #40]	@ (800a020 <prvResetNextTaskUnblockTime+0x3c>)
 8009ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8009ffa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ffc:	e008      	b.n	800a010 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ffe:	4b07      	ldr	r3, [pc, #28]	@ (800a01c <prvResetNextTaskUnblockTime+0x38>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	4a04      	ldr	r2, [pc, #16]	@ (800a020 <prvResetNextTaskUnblockTime+0x3c>)
 800a00e:	6013      	str	r3, [r2, #0]
}
 800a010:	bf00      	nop
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr
 800a01c:	200064c4 	.word	0x200064c4
 800a020:	2000652c 	.word	0x2000652c

0800a024 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a02a:	4b05      	ldr	r3, [pc, #20]	@ (800a040 <xTaskGetCurrentTaskHandle+0x1c>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a030:	687b      	ldr	r3, [r7, #4]
	}
 800a032:	4618      	mov	r0, r3
 800a034:	370c      	adds	r7, #12
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop
 800a040:	20006038 	.word	0x20006038

0800a044 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a04a:	4b0b      	ldr	r3, [pc, #44]	@ (800a078 <xTaskGetSchedulerState+0x34>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d102      	bne.n	800a058 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a052:	2301      	movs	r3, #1
 800a054:	607b      	str	r3, [r7, #4]
 800a056:	e008      	b.n	800a06a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a058:	4b08      	ldr	r3, [pc, #32]	@ (800a07c <xTaskGetSchedulerState+0x38>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d102      	bne.n	800a066 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a060:	2302      	movs	r3, #2
 800a062:	607b      	str	r3, [r7, #4]
 800a064:	e001      	b.n	800a06a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a066:	2300      	movs	r3, #0
 800a068:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a06a:	687b      	ldr	r3, [r7, #4]
	}
 800a06c:	4618      	mov	r0, r3
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr
 800a078:	20006518 	.word	0x20006518
 800a07c:	20006534 	.word	0x20006534

0800a080 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a08c:	2300      	movs	r3, #0
 800a08e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d051      	beq.n	800a13a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a09a:	4b2a      	ldr	r3, [pc, #168]	@ (800a144 <xTaskPriorityInherit+0xc4>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d241      	bcs.n	800a128 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	db06      	blt.n	800a0ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0ac:	4b25      	ldr	r3, [pc, #148]	@ (800a144 <xTaskPriorityInherit+0xc4>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0b2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	6959      	ldr	r1, [r3, #20]
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4a1f      	ldr	r2, [pc, #124]	@ (800a148 <xTaskPriorityInherit+0xc8>)
 800a0cc:	4413      	add	r3, r2
 800a0ce:	4299      	cmp	r1, r3
 800a0d0:	d122      	bne.n	800a118 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	3304      	adds	r3, #4
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7fe f8ad 	bl	8008236 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a0dc:	4b19      	ldr	r3, [pc, #100]	@ (800a144 <xTaskPriorityInherit+0xc4>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ea:	4b18      	ldr	r3, [pc, #96]	@ (800a14c <xTaskPriorityInherit+0xcc>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d903      	bls.n	800a0fa <xTaskPriorityInherit+0x7a>
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0f6:	4a15      	ldr	r2, [pc, #84]	@ (800a14c <xTaskPriorityInherit+0xcc>)
 800a0f8:	6013      	str	r3, [r2, #0]
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0fe:	4613      	mov	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	4a10      	ldr	r2, [pc, #64]	@ (800a148 <xTaskPriorityInherit+0xc8>)
 800a108:	441a      	add	r2, r3
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	3304      	adds	r3, #4
 800a10e:	4619      	mov	r1, r3
 800a110:	4610      	mov	r0, r2
 800a112:	f7fe f833 	bl	800817c <vListInsertEnd>
 800a116:	e004      	b.n	800a122 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a118:	4b0a      	ldr	r3, [pc, #40]	@ (800a144 <xTaskPriorityInherit+0xc4>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a122:	2301      	movs	r3, #1
 800a124:	60fb      	str	r3, [r7, #12]
 800a126:	e008      	b.n	800a13a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a12c:	4b05      	ldr	r3, [pc, #20]	@ (800a144 <xTaskPriorityInherit+0xc4>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a132:	429a      	cmp	r2, r3
 800a134:	d201      	bcs.n	800a13a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a136:	2301      	movs	r3, #1
 800a138:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a13a:	68fb      	ldr	r3, [r7, #12]
	}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3710      	adds	r7, #16
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	20006038 	.word	0x20006038
 800a148:	2000603c 	.word	0x2000603c
 800a14c:	20006514 	.word	0x20006514

0800a150 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a15c:	2300      	movs	r3, #0
 800a15e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d05c      	beq.n	800a220 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a166:	4b31      	ldr	r3, [pc, #196]	@ (800a22c <xTaskPriorityDisinherit+0xdc>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	693a      	ldr	r2, [r7, #16]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d00d      	beq.n	800a18c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800a170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a174:	b672      	cpsid	i
 800a176:	f383 8811 	msr	BASEPRI, r3
 800a17a:	f3bf 8f6f 	isb	sy
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	b662      	cpsie	i
 800a184:	60fb      	str	r3, [r7, #12]
}
 800a186:	bf00      	nop
 800a188:	bf00      	nop
 800a18a:	e7fd      	b.n	800a188 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10d      	bne.n	800a1b0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800a194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a198:	b672      	cpsid	i
 800a19a:	f383 8811 	msr	BASEPRI, r3
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	b662      	cpsie	i
 800a1a8:	60bb      	str	r3, [r7, #8]
}
 800a1aa:	bf00      	nop
 800a1ac:	bf00      	nop
 800a1ae:	e7fd      	b.n	800a1ac <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1b4:	1e5a      	subs	r2, r3, #1
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d02c      	beq.n	800a220 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d128      	bne.n	800a220 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	3304      	adds	r3, #4
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fe f82f 	bl	8008236 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1f0:	4b0f      	ldr	r3, [pc, #60]	@ (800a230 <xTaskPriorityDisinherit+0xe0>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d903      	bls.n	800a200 <xTaskPriorityDisinherit+0xb0>
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1fc:	4a0c      	ldr	r2, [pc, #48]	@ (800a230 <xTaskPriorityDisinherit+0xe0>)
 800a1fe:	6013      	str	r3, [r2, #0]
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a204:	4613      	mov	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	4413      	add	r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	4a09      	ldr	r2, [pc, #36]	@ (800a234 <xTaskPriorityDisinherit+0xe4>)
 800a20e:	441a      	add	r2, r3
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	3304      	adds	r3, #4
 800a214:	4619      	mov	r1, r3
 800a216:	4610      	mov	r0, r2
 800a218:	f7fd ffb0 	bl	800817c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a21c:	2301      	movs	r3, #1
 800a21e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a220:	697b      	ldr	r3, [r7, #20]
	}
 800a222:	4618      	mov	r0, r3
 800a224:	3718      	adds	r7, #24
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	20006038 	.word	0x20006038
 800a230:	20006514 	.word	0x20006514
 800a234:	2000603c 	.word	0x2000603c

0800a238 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b088      	sub	sp, #32
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a246:	2301      	movs	r3, #1
 800a248:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d070      	beq.n	800a332 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a254:	2b00      	cmp	r3, #0
 800a256:	d10d      	bne.n	800a274 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800a258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a25c:	b672      	cpsid	i
 800a25e:	f383 8811 	msr	BASEPRI, r3
 800a262:	f3bf 8f6f 	isb	sy
 800a266:	f3bf 8f4f 	dsb	sy
 800a26a:	b662      	cpsie	i
 800a26c:	60fb      	str	r3, [r7, #12]
}
 800a26e:	bf00      	nop
 800a270:	bf00      	nop
 800a272:	e7fd      	b.n	800a270 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a278:	683a      	ldr	r2, [r7, #0]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d902      	bls.n	800a284 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	61fb      	str	r3, [r7, #28]
 800a282:	e002      	b.n	800a28a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a288:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a28e:	69fa      	ldr	r2, [r7, #28]
 800a290:	429a      	cmp	r2, r3
 800a292:	d04e      	beq.n	800a332 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a298:	697a      	ldr	r2, [r7, #20]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d149      	bne.n	800a332 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a29e:	4b27      	ldr	r3, [pc, #156]	@ (800a33c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	69ba      	ldr	r2, [r7, #24]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d10d      	bne.n	800a2c4 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800a2a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ac:	b672      	cpsid	i
 800a2ae:	f383 8811 	msr	BASEPRI, r3
 800a2b2:	f3bf 8f6f 	isb	sy
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	b662      	cpsie	i
 800a2bc:	60bb      	str	r3, [r7, #8]
}
 800a2be:	bf00      	nop
 800a2c0:	bf00      	nop
 800a2c2:	e7fd      	b.n	800a2c0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	69fa      	ldr	r2, [r7, #28]
 800a2ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	db04      	blt.n	800a2e2 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	6959      	ldr	r1, [r3, #20]
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4413      	add	r3, r2
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	4a13      	ldr	r2, [pc, #76]	@ (800a340 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a2f2:	4413      	add	r3, r2
 800a2f4:	4299      	cmp	r1, r3
 800a2f6:	d11c      	bne.n	800a332 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fd ff9a 	bl	8008236 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a306:	4b0f      	ldr	r3, [pc, #60]	@ (800a344 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d903      	bls.n	800a316 <vTaskPriorityDisinheritAfterTimeout+0xde>
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a312:	4a0c      	ldr	r2, [pc, #48]	@ (800a344 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800a314:	6013      	str	r3, [r2, #0]
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a31a:	4613      	mov	r3, r2
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	4413      	add	r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	4a07      	ldr	r2, [pc, #28]	@ (800a340 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a324:	441a      	add	r2, r3
 800a326:	69bb      	ldr	r3, [r7, #24]
 800a328:	3304      	adds	r3, #4
 800a32a:	4619      	mov	r1, r3
 800a32c:	4610      	mov	r0, r2
 800a32e:	f7fd ff25 	bl	800817c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a332:	bf00      	nop
 800a334:	3720      	adds	r7, #32
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20006038 	.word	0x20006038
 800a340:	2000603c 	.word	0x2000603c
 800a344:	20006514 	.word	0x20006514

0800a348 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a34e:	4b09      	ldr	r3, [pc, #36]	@ (800a374 <uxTaskResetEventItemValue+0x2c>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a356:	4b07      	ldr	r3, [pc, #28]	@ (800a374 <uxTaskResetEventItemValue+0x2c>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a35c:	4b05      	ldr	r3, [pc, #20]	@ (800a374 <uxTaskResetEventItemValue+0x2c>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800a364:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a366:	687b      	ldr	r3, [r7, #4]
}
 800a368:	4618      	mov	r0, r3
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	20006038 	.word	0x20006038

0800a378 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a378:	b480      	push	{r7}
 800a37a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a37c:	4b07      	ldr	r3, [pc, #28]	@ (800a39c <pvTaskIncrementMutexHeldCount+0x24>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d004      	beq.n	800a38e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a384:	4b05      	ldr	r3, [pc, #20]	@ (800a39c <pvTaskIncrementMutexHeldCount+0x24>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a38a:	3201      	adds	r2, #1
 800a38c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a38e:	4b03      	ldr	r3, [pc, #12]	@ (800a39c <pvTaskIncrementMutexHeldCount+0x24>)
 800a390:	681b      	ldr	r3, [r3, #0]
	}
 800a392:	4618      	mov	r0, r3
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr
 800a39c:	20006038 	.word	0x20006038

0800a3a0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800a3aa:	f000 fdcf 	bl	800af4c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800a3ae:	4b1e      	ldr	r3, [pc, #120]	@ (800a428 <ulTaskNotifyTake+0x88>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d113      	bne.n	800a3e0 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a3b8:	4b1b      	ldr	r3, [pc, #108]	@ (800a428 <ulTaskNotifyTake+0x88>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00b      	beq.n	800a3e0 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a3c8:	2101      	movs	r1, #1
 800a3ca:	6838      	ldr	r0, [r7, #0]
 800a3cc:	f000 f8f0 	bl	800a5b0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a3d0:	4b16      	ldr	r3, [pc, #88]	@ (800a42c <ulTaskNotifyTake+0x8c>)
 800a3d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3d6:	601a      	str	r2, [r3, #0]
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a3e0:	f000 fdea 	bl	800afb8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800a3e4:	f000 fdb2 	bl	800af4c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800a3e8:	4b0f      	ldr	r3, [pc, #60]	@ (800a428 <ulTaskNotifyTake+0x88>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3ee:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d00c      	beq.n	800a410 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d004      	beq.n	800a406 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800a3fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a428 <ulTaskNotifyTake+0x88>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2200      	movs	r2, #0
 800a402:	655a      	str	r2, [r3, #84]	@ 0x54
 800a404:	e004      	b.n	800a410 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800a406:	4b08      	ldr	r3, [pc, #32]	@ (800a428 <ulTaskNotifyTake+0x88>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	3a01      	subs	r2, #1
 800a40e:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a410:	4b05      	ldr	r3, [pc, #20]	@ (800a428 <ulTaskNotifyTake+0x88>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2200      	movs	r2, #0
 800a416:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 800a41a:	f000 fdcd 	bl	800afb8 <vPortExitCritical>

		return ulReturn;
 800a41e:	68fb      	ldr	r3, [r7, #12]
	}
 800a420:	4618      	mov	r0, r3
 800a422:	3710      	adds	r7, #16
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	20006038 	.word	0x20006038
 800a42c:	e000ed04 	.word	0xe000ed04

0800a430 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a430:	b580      	push	{r7, lr}
 800a432:	b08a      	sub	sp, #40	@ 0x28
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	603b      	str	r3, [r7, #0]
 800a43c:	4613      	mov	r3, r2
 800a43e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a440:	2301      	movs	r3, #1
 800a442:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d10d      	bne.n	800a466 <xTaskGenericNotify+0x36>
	__asm volatile
 800a44a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a44e:	b672      	cpsid	i
 800a450:	f383 8811 	msr	BASEPRI, r3
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	f3bf 8f4f 	dsb	sy
 800a45c:	b662      	cpsie	i
 800a45e:	61bb      	str	r3, [r7, #24]
}
 800a460:	bf00      	nop
 800a462:	bf00      	nop
 800a464:	e7fd      	b.n	800a462 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a46a:	f000 fd6f 	bl	800af4c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d003      	beq.n	800a47c <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a474:	6a3b      	ldr	r3, [r7, #32]
 800a476:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a47c:	6a3b      	ldr	r3, [r7, #32]
 800a47e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a482:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a484:	6a3b      	ldr	r3, [r7, #32]
 800a486:	2202      	movs	r2, #2
 800a488:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 800a48c:	79fb      	ldrb	r3, [r7, #7]
 800a48e:	2b04      	cmp	r3, #4
 800a490:	d827      	bhi.n	800a4e2 <xTaskGenericNotify+0xb2>
 800a492:	a201      	add	r2, pc, #4	@ (adr r2, 800a498 <xTaskGenericNotify+0x68>)
 800a494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a498:	0800a509 	.word	0x0800a509
 800a49c:	0800a4ad 	.word	0x0800a4ad
 800a4a0:	0800a4bb 	.word	0x0800a4bb
 800a4a4:	0800a4c7 	.word	0x0800a4c7
 800a4a8:	0800a4cf 	.word	0x0800a4cf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a4ac:	6a3b      	ldr	r3, [r7, #32]
 800a4ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	431a      	orrs	r2, r3
 800a4b4:	6a3b      	ldr	r3, [r7, #32]
 800a4b6:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800a4b8:	e029      	b.n	800a50e <xTaskGenericNotify+0xde>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a4ba:	6a3b      	ldr	r3, [r7, #32]
 800a4bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4be:	1c5a      	adds	r2, r3, #1
 800a4c0:	6a3b      	ldr	r3, [r7, #32]
 800a4c2:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800a4c4:	e023      	b.n	800a50e <xTaskGenericNotify+0xde>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a4c6:	6a3b      	ldr	r3, [r7, #32]
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800a4cc:	e01f      	b.n	800a50e <xTaskGenericNotify+0xde>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a4ce:	7ffb      	ldrb	r3, [r7, #31]
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	d003      	beq.n	800a4dc <xTaskGenericNotify+0xac>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a4d4:	6a3b      	ldr	r3, [r7, #32]
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a4da:	e018      	b.n	800a50e <xTaskGenericNotify+0xde>
						xReturn = pdFAIL;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800a4e0:	e015      	b.n	800a50e <xTaskGenericNotify+0xde>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a4e2:	6a3b      	ldr	r3, [r7, #32]
 800a4e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ea:	d00f      	beq.n	800a50c <xTaskGenericNotify+0xdc>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f0:	b672      	cpsid	i
 800a4f2:	f383 8811 	msr	BASEPRI, r3
 800a4f6:	f3bf 8f6f 	isb	sy
 800a4fa:	f3bf 8f4f 	dsb	sy
 800a4fe:	b662      	cpsie	i
 800a500:	617b      	str	r3, [r7, #20]
}
 800a502:	bf00      	nop
 800a504:	bf00      	nop
 800a506:	e7fd      	b.n	800a504 <xTaskGenericNotify+0xd4>
					break;
 800a508:	bf00      	nop
 800a50a:	e000      	b.n	800a50e <xTaskGenericNotify+0xde>

					break;
 800a50c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a50e:	7ffb      	ldrb	r3, [r7, #31]
 800a510:	2b01      	cmp	r3, #1
 800a512:	d13d      	bne.n	800a590 <xTaskGenericNotify+0x160>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a514:	6a3b      	ldr	r3, [r7, #32]
 800a516:	3304      	adds	r3, #4
 800a518:	4618      	mov	r0, r3
 800a51a:	f7fd fe8c 	bl	8008236 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a51e:	6a3b      	ldr	r3, [r7, #32]
 800a520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a522:	4b1f      	ldr	r3, [pc, #124]	@ (800a5a0 <xTaskGenericNotify+0x170>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	429a      	cmp	r2, r3
 800a528:	d903      	bls.n	800a532 <xTaskGenericNotify+0x102>
 800a52a:	6a3b      	ldr	r3, [r7, #32]
 800a52c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a52e:	4a1c      	ldr	r2, [pc, #112]	@ (800a5a0 <xTaskGenericNotify+0x170>)
 800a530:	6013      	str	r3, [r2, #0]
 800a532:	6a3b      	ldr	r3, [r7, #32]
 800a534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a536:	4613      	mov	r3, r2
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	4413      	add	r3, r2
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	4a19      	ldr	r2, [pc, #100]	@ (800a5a4 <xTaskGenericNotify+0x174>)
 800a540:	441a      	add	r2, r3
 800a542:	6a3b      	ldr	r3, [r7, #32]
 800a544:	3304      	adds	r3, #4
 800a546:	4619      	mov	r1, r3
 800a548:	4610      	mov	r0, r2
 800a54a:	f7fd fe17 	bl	800817c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a54e:	6a3b      	ldr	r3, [r7, #32]
 800a550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00d      	beq.n	800a572 <xTaskGenericNotify+0x142>
	__asm volatile
 800a556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55a:	b672      	cpsid	i
 800a55c:	f383 8811 	msr	BASEPRI, r3
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	b662      	cpsie	i
 800a56a:	613b      	str	r3, [r7, #16]
}
 800a56c:	bf00      	nop
 800a56e:	bf00      	nop
 800a570:	e7fd      	b.n	800a56e <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a572:	6a3b      	ldr	r3, [r7, #32]
 800a574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a576:	4b0c      	ldr	r3, [pc, #48]	@ (800a5a8 <xTaskGenericNotify+0x178>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d907      	bls.n	800a590 <xTaskGenericNotify+0x160>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a580:	4b0a      	ldr	r3, [pc, #40]	@ (800a5ac <xTaskGenericNotify+0x17c>)
 800a582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a586:	601a      	str	r2, [r3, #0]
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a590:	f000 fd12 	bl	800afb8 <vPortExitCritical>

		return xReturn;
 800a594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800a596:	4618      	mov	r0, r3
 800a598:	3728      	adds	r7, #40	@ 0x28
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	20006514 	.word	0x20006514
 800a5a4:	2000603c 	.word	0x2000603c
 800a5a8:	20006038 	.word	0x20006038
 800a5ac:	e000ed04 	.word	0xe000ed04

0800a5b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a5ba:	4b21      	ldr	r3, [pc, #132]	@ (800a640 <prvAddCurrentTaskToDelayedList+0x90>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5c0:	4b20      	ldr	r3, [pc, #128]	@ (800a644 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	3304      	adds	r3, #4
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7fd fe35 	bl	8008236 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5d2:	d10a      	bne.n	800a5ea <prvAddCurrentTaskToDelayedList+0x3a>
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d007      	beq.n	800a5ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5da:	4b1a      	ldr	r3, [pc, #104]	@ (800a644 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	3304      	adds	r3, #4
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	4819      	ldr	r0, [pc, #100]	@ (800a648 <prvAddCurrentTaskToDelayedList+0x98>)
 800a5e4:	f7fd fdca 	bl	800817c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a5e8:	e026      	b.n	800a638 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a5f2:	4b14      	ldr	r3, [pc, #80]	@ (800a644 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a5fa:	68ba      	ldr	r2, [r7, #8]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d209      	bcs.n	800a616 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a602:	4b12      	ldr	r3, [pc, #72]	@ (800a64c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	4b0f      	ldr	r3, [pc, #60]	@ (800a644 <prvAddCurrentTaskToDelayedList+0x94>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	3304      	adds	r3, #4
 800a60c:	4619      	mov	r1, r3
 800a60e:	4610      	mov	r0, r2
 800a610:	f7fd fdd8 	bl	80081c4 <vListInsert>
}
 800a614:	e010      	b.n	800a638 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a616:	4b0e      	ldr	r3, [pc, #56]	@ (800a650 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	4b0a      	ldr	r3, [pc, #40]	@ (800a644 <prvAddCurrentTaskToDelayedList+0x94>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	3304      	adds	r3, #4
 800a620:	4619      	mov	r1, r3
 800a622:	4610      	mov	r0, r2
 800a624:	f7fd fdce 	bl	80081c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a628:	4b0a      	ldr	r3, [pc, #40]	@ (800a654 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d202      	bcs.n	800a638 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a632:	4a08      	ldr	r2, [pc, #32]	@ (800a654 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	6013      	str	r3, [r2, #0]
}
 800a638:	bf00      	nop
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	20006510 	.word	0x20006510
 800a644:	20006038 	.word	0x20006038
 800a648:	200064f8 	.word	0x200064f8
 800a64c:	200064c8 	.word	0x200064c8
 800a650:	200064c4 	.word	0x200064c4
 800a654:	2000652c 	.word	0x2000652c

0800a658 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b08a      	sub	sp, #40	@ 0x28
 800a65c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a65e:	2300      	movs	r3, #0
 800a660:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a662:	f000 fb21 	bl	800aca8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a666:	4b1e      	ldr	r3, [pc, #120]	@ (800a6e0 <xTimerCreateTimerTask+0x88>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d021      	beq.n	800a6b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a66e:	2300      	movs	r3, #0
 800a670:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a672:	2300      	movs	r3, #0
 800a674:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a676:	1d3a      	adds	r2, r7, #4
 800a678:	f107 0108 	add.w	r1, r7, #8
 800a67c:	f107 030c 	add.w	r3, r7, #12
 800a680:	4618      	mov	r0, r3
 800a682:	f7fd fb19 	bl	8007cb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a686:	6879      	ldr	r1, [r7, #4]
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	9202      	str	r2, [sp, #8]
 800a68e:	9301      	str	r3, [sp, #4]
 800a690:	2302      	movs	r3, #2
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	2300      	movs	r3, #0
 800a696:	460a      	mov	r2, r1
 800a698:	4912      	ldr	r1, [pc, #72]	@ (800a6e4 <xTimerCreateTimerTask+0x8c>)
 800a69a:	4813      	ldr	r0, [pc, #76]	@ (800a6e8 <xTimerCreateTimerTask+0x90>)
 800a69c:	f7fe fd2e 	bl	80090fc <xTaskCreateStatic>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	4a12      	ldr	r2, [pc, #72]	@ (800a6ec <xTimerCreateTimerTask+0x94>)
 800a6a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a6a6:	4b11      	ldr	r3, [pc, #68]	@ (800a6ec <xTimerCreateTimerTask+0x94>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d001      	beq.n	800a6b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d10d      	bne.n	800a6d4 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800a6b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6bc:	b672      	cpsid	i
 800a6be:	f383 8811 	msr	BASEPRI, r3
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	b662      	cpsie	i
 800a6cc:	613b      	str	r3, [r7, #16]
}
 800a6ce:	bf00      	nop
 800a6d0:	bf00      	nop
 800a6d2:	e7fd      	b.n	800a6d0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a6d4:	697b      	ldr	r3, [r7, #20]
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3718      	adds	r7, #24
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	20006568 	.word	0x20006568
 800a6e4:	08016d1c 	.word	0x08016d1c
 800a6e8:	0800a831 	.word	0x0800a831
 800a6ec:	2000656c 	.word	0x2000656c

0800a6f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b08a      	sub	sp, #40	@ 0x28
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
 800a6fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a6fe:	2300      	movs	r3, #0
 800a700:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10d      	bne.n	800a724 <xTimerGenericCommand+0x34>
	__asm volatile
 800a708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70c:	b672      	cpsid	i
 800a70e:	f383 8811 	msr	BASEPRI, r3
 800a712:	f3bf 8f6f 	isb	sy
 800a716:	f3bf 8f4f 	dsb	sy
 800a71a:	b662      	cpsie	i
 800a71c:	623b      	str	r3, [r7, #32]
}
 800a71e:	bf00      	nop
 800a720:	bf00      	nop
 800a722:	e7fd      	b.n	800a720 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a724:	4b19      	ldr	r3, [pc, #100]	@ (800a78c <xTimerGenericCommand+0x9c>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d02a      	beq.n	800a782 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	2b05      	cmp	r3, #5
 800a73c:	dc18      	bgt.n	800a770 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a73e:	f7ff fc81 	bl	800a044 <xTaskGetSchedulerState>
 800a742:	4603      	mov	r3, r0
 800a744:	2b02      	cmp	r3, #2
 800a746:	d109      	bne.n	800a75c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a748:	4b10      	ldr	r3, [pc, #64]	@ (800a78c <xTimerGenericCommand+0x9c>)
 800a74a:	6818      	ldr	r0, [r3, #0]
 800a74c:	f107 0110 	add.w	r1, r7, #16
 800a750:	2300      	movs	r3, #0
 800a752:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a754:	f7fd ff2c 	bl	80085b0 <xQueueGenericSend>
 800a758:	6278      	str	r0, [r7, #36]	@ 0x24
 800a75a:	e012      	b.n	800a782 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a75c:	4b0b      	ldr	r3, [pc, #44]	@ (800a78c <xTimerGenericCommand+0x9c>)
 800a75e:	6818      	ldr	r0, [r3, #0]
 800a760:	f107 0110 	add.w	r1, r7, #16
 800a764:	2300      	movs	r3, #0
 800a766:	2200      	movs	r2, #0
 800a768:	f7fd ff22 	bl	80085b0 <xQueueGenericSend>
 800a76c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a76e:	e008      	b.n	800a782 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a770:	4b06      	ldr	r3, [pc, #24]	@ (800a78c <xTimerGenericCommand+0x9c>)
 800a772:	6818      	ldr	r0, [r3, #0]
 800a774:	f107 0110 	add.w	r1, r7, #16
 800a778:	2300      	movs	r3, #0
 800a77a:	683a      	ldr	r2, [r7, #0]
 800a77c:	f7fe f822 	bl	80087c4 <xQueueGenericSendFromISR>
 800a780:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a784:	4618      	mov	r0, r3
 800a786:	3728      	adds	r7, #40	@ 0x28
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	20006568 	.word	0x20006568

0800a790 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b088      	sub	sp, #32
 800a794:	af02      	add	r7, sp, #8
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a79a:	4b24      	ldr	r3, [pc, #144]	@ (800a82c <prvProcessExpiredTimer+0x9c>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7fd fd44 	bl	8008236 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7b4:	f003 0304 	and.w	r3, r3, #4
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d025      	beq.n	800a808 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	699a      	ldr	r2, [r3, #24]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	18d1      	adds	r1, r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	6978      	ldr	r0, [r7, #20]
 800a7ca:	f000 f8d7 	bl	800a97c <prvInsertTimerInActiveList>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d022      	beq.n	800a81a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	2300      	movs	r3, #0
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	2100      	movs	r1, #0
 800a7de:	6978      	ldr	r0, [r7, #20]
 800a7e0:	f7ff ff86 	bl	800a6f0 <xTimerGenericCommand>
 800a7e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d116      	bne.n	800a81a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800a7ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f0:	b672      	cpsid	i
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	b662      	cpsie	i
 800a800:	60fb      	str	r3, [r7, #12]
}
 800a802:	bf00      	nop
 800a804:	bf00      	nop
 800a806:	e7fd      	b.n	800a804 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a80e:	f023 0301 	bic.w	r3, r3, #1
 800a812:	b2da      	uxtb	r2, r3
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	6a1b      	ldr	r3, [r3, #32]
 800a81e:	6978      	ldr	r0, [r7, #20]
 800a820:	4798      	blx	r3
}
 800a822:	bf00      	nop
 800a824:	3718      	adds	r7, #24
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	20006560 	.word	0x20006560

0800a830 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a838:	f107 0308 	add.w	r3, r7, #8
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 f859 	bl	800a8f4 <prvGetNextExpireTime>
 800a842:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	4619      	mov	r1, r3
 800a848:	68f8      	ldr	r0, [r7, #12]
 800a84a:	f000 f805 	bl	800a858 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a84e:	f000 f8d7 	bl	800aa00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a852:	bf00      	nop
 800a854:	e7f0      	b.n	800a838 <prvTimerTask+0x8>
	...

0800a858 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a862:	f7fe ff13 	bl	800968c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a866:	f107 0308 	add.w	r3, r7, #8
 800a86a:	4618      	mov	r0, r3
 800a86c:	f000 f866 	bl	800a93c <prvSampleTimeNow>
 800a870:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d130      	bne.n	800a8da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10a      	bne.n	800a894 <prvProcessTimerOrBlockTask+0x3c>
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	429a      	cmp	r2, r3
 800a884:	d806      	bhi.n	800a894 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a886:	f7fe ff0f 	bl	80096a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a88a:	68f9      	ldr	r1, [r7, #12]
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f7ff ff7f 	bl	800a790 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a892:	e024      	b.n	800a8de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d008      	beq.n	800a8ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a89a:	4b13      	ldr	r3, [pc, #76]	@ (800a8e8 <prvProcessTimerOrBlockTask+0x90>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d101      	bne.n	800a8a8 <prvProcessTimerOrBlockTask+0x50>
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e000      	b.n	800a8aa <prvProcessTimerOrBlockTask+0x52>
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a8ac:	4b0f      	ldr	r3, [pc, #60]	@ (800a8ec <prvProcessTimerOrBlockTask+0x94>)
 800a8ae:	6818      	ldr	r0, [r3, #0]
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	683a      	ldr	r2, [r7, #0]
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	f7fe fbeb 	bl	8009094 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a8be:	f7fe fef3 	bl	80096a8 <xTaskResumeAll>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d10a      	bne.n	800a8de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a8c8:	4b09      	ldr	r3, [pc, #36]	@ (800a8f0 <prvProcessTimerOrBlockTask+0x98>)
 800a8ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8ce:	601a      	str	r2, [r3, #0]
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	f3bf 8f6f 	isb	sy
}
 800a8d8:	e001      	b.n	800a8de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a8da:	f7fe fee5 	bl	80096a8 <xTaskResumeAll>
}
 800a8de:	bf00      	nop
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	20006564 	.word	0x20006564
 800a8ec:	20006568 	.word	0x20006568
 800a8f0:	e000ed04 	.word	0xe000ed04

0800a8f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a8fc:	4b0e      	ldr	r3, [pc, #56]	@ (800a938 <prvGetNextExpireTime+0x44>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d101      	bne.n	800a90a <prvGetNextExpireTime+0x16>
 800a906:	2201      	movs	r2, #1
 800a908:	e000      	b.n	800a90c <prvGetNextExpireTime+0x18>
 800a90a:	2200      	movs	r2, #0
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d105      	bne.n	800a924 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a918:	4b07      	ldr	r3, [pc, #28]	@ (800a938 <prvGetNextExpireTime+0x44>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	60fb      	str	r3, [r7, #12]
 800a922:	e001      	b.n	800a928 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a924:	2300      	movs	r3, #0
 800a926:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a928:	68fb      	ldr	r3, [r7, #12]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3714      	adds	r7, #20
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	20006560 	.word	0x20006560

0800a93c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a944:	f7fe ff50 	bl	80097e8 <xTaskGetTickCount>
 800a948:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a94a:	4b0b      	ldr	r3, [pc, #44]	@ (800a978 <prvSampleTimeNow+0x3c>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	429a      	cmp	r2, r3
 800a952:	d205      	bcs.n	800a960 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a954:	f000 f940 	bl	800abd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	601a      	str	r2, [r3, #0]
 800a95e:	e002      	b.n	800a966 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a966:	4a04      	ldr	r2, [pc, #16]	@ (800a978 <prvSampleTimeNow+0x3c>)
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a96c:	68fb      	ldr	r3, [r7, #12]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	20006570 	.word	0x20006570

0800a97c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b086      	sub	sp, #24
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
 800a988:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a98a:	2300      	movs	r3, #0
 800a98c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a99a:	68ba      	ldr	r2, [r7, #8]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d812      	bhi.n	800a9c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	1ad2      	subs	r2, r2, r3
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	699b      	ldr	r3, [r3, #24]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d302      	bcc.n	800a9b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	617b      	str	r3, [r7, #20]
 800a9b4:	e01b      	b.n	800a9ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a9b6:	4b10      	ldr	r3, [pc, #64]	@ (800a9f8 <prvInsertTimerInActiveList+0x7c>)
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	3304      	adds	r3, #4
 800a9be:	4619      	mov	r1, r3
 800a9c0:	4610      	mov	r0, r2
 800a9c2:	f7fd fbff 	bl	80081c4 <vListInsert>
 800a9c6:	e012      	b.n	800a9ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d206      	bcs.n	800a9de <prvInsertTimerInActiveList+0x62>
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d302      	bcc.n	800a9de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	617b      	str	r3, [r7, #20]
 800a9dc:	e007      	b.n	800a9ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9de:	4b07      	ldr	r3, [pc, #28]	@ (800a9fc <prvInsertTimerInActiveList+0x80>)
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	3304      	adds	r3, #4
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	4610      	mov	r0, r2
 800a9ea:	f7fd fbeb 	bl	80081c4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a9ee:	697b      	ldr	r3, [r7, #20]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3718      	adds	r7, #24
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	20006564 	.word	0x20006564
 800a9fc:	20006560 	.word	0x20006560

0800aa00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b08e      	sub	sp, #56	@ 0x38
 800aa04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa06:	e0d4      	b.n	800abb2 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	da1b      	bge.n	800aa46 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aa0e:	1d3b      	adds	r3, r7, #4
 800aa10:	3304      	adds	r3, #4
 800aa12:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aa14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d10d      	bne.n	800aa36 <prvProcessReceivedCommands+0x36>
	__asm volatile
 800aa1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa1e:	b672      	cpsid	i
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	b662      	cpsie	i
 800aa2e:	61fb      	str	r3, [r7, #28]
}
 800aa30:	bf00      	nop
 800aa32:	bf00      	nop
 800aa34:	e7fd      	b.n	800aa32 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aa36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa3c:	6850      	ldr	r0, [r2, #4]
 800aa3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa40:	6892      	ldr	r2, [r2, #8]
 800aa42:	4611      	mov	r1, r2
 800aa44:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f2c0 80b2 	blt.w	800abb2 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aa52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa54:	695b      	ldr	r3, [r3, #20]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d004      	beq.n	800aa64 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa5c:	3304      	adds	r3, #4
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7fd fbe9 	bl	8008236 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa64:	463b      	mov	r3, r7
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7ff ff68 	bl	800a93c <prvSampleTimeNow>
 800aa6c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2b09      	cmp	r3, #9
 800aa72:	f200 809b 	bhi.w	800abac <prvProcessReceivedCommands+0x1ac>
 800aa76:	a201      	add	r2, pc, #4	@ (adr r2, 800aa7c <prvProcessReceivedCommands+0x7c>)
 800aa78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa7c:	0800aaa5 	.word	0x0800aaa5
 800aa80:	0800aaa5 	.word	0x0800aaa5
 800aa84:	0800aaa5 	.word	0x0800aaa5
 800aa88:	0800ab1f 	.word	0x0800ab1f
 800aa8c:	0800ab33 	.word	0x0800ab33
 800aa90:	0800ab83 	.word	0x0800ab83
 800aa94:	0800aaa5 	.word	0x0800aaa5
 800aa98:	0800aaa5 	.word	0x0800aaa5
 800aa9c:	0800ab1f 	.word	0x0800ab1f
 800aaa0:	0800ab33 	.word	0x0800ab33
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aaa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aaaa:	f043 0301 	orr.w	r3, r3, #1
 800aaae:	b2da      	uxtb	r2, r3
 800aab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aab2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	18d1      	adds	r1, r2, r3
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aac2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aac4:	f7ff ff5a 	bl	800a97c <prvInsertTimerInActiveList>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d070      	beq.n	800abb0 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad0:	6a1b      	ldr	r3, [r3, #32]
 800aad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aad4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aadc:	f003 0304 	and.w	r3, r3, #4
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d065      	beq.n	800abb0 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aae4:	68ba      	ldr	r2, [r7, #8]
 800aae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae8:	699b      	ldr	r3, [r3, #24]
 800aaea:	441a      	add	r2, r3
 800aaec:	2300      	movs	r3, #0
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aaf6:	f7ff fdfb 	bl	800a6f0 <xTimerGenericCommand>
 800aafa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aafc:	6a3b      	ldr	r3, [r7, #32]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d156      	bne.n	800abb0 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800ab02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab06:	b672      	cpsid	i
 800ab08:	f383 8811 	msr	BASEPRI, r3
 800ab0c:	f3bf 8f6f 	isb	sy
 800ab10:	f3bf 8f4f 	dsb	sy
 800ab14:	b662      	cpsie	i
 800ab16:	61bb      	str	r3, [r7, #24]
}
 800ab18:	bf00      	nop
 800ab1a:	bf00      	nop
 800ab1c:	e7fd      	b.n	800ab1a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab24:	f023 0301 	bic.w	r3, r3, #1
 800ab28:	b2da      	uxtb	r2, r3
 800ab2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ab30:	e03f      	b.n	800abb2 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab38:	f043 0301 	orr.w	r3, r3, #1
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ab44:	68ba      	ldr	r2, [r7, #8]
 800ab46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab48:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab4c:	699b      	ldr	r3, [r3, #24]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d10d      	bne.n	800ab6e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800ab52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab56:	b672      	cpsid	i
 800ab58:	f383 8811 	msr	BASEPRI, r3
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	b662      	cpsie	i
 800ab66:	617b      	str	r3, [r7, #20]
}
 800ab68:	bf00      	nop
 800ab6a:	bf00      	nop
 800ab6c:	e7fd      	b.n	800ab6a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ab6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab70:	699a      	ldr	r2, [r3, #24]
 800ab72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab74:	18d1      	adds	r1, r2, r3
 800ab76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab7c:	f7ff fefe 	bl	800a97c <prvInsertTimerInActiveList>
					break;
 800ab80:	e017      	b.n	800abb2 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ab82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab88:	f003 0302 	and.w	r3, r3, #2
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d103      	bne.n	800ab98 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800ab90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab92:	f000 fbd7 	bl	800b344 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ab96:	e00c      	b.n	800abb2 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab9e:	f023 0301 	bic.w	r3, r3, #1
 800aba2:	b2da      	uxtb	r2, r3
 800aba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800abaa:	e002      	b.n	800abb2 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800abac:	bf00      	nop
 800abae:	e000      	b.n	800abb2 <prvProcessReceivedCommands+0x1b2>
					break;
 800abb0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800abb2:	4b08      	ldr	r3, [pc, #32]	@ (800abd4 <prvProcessReceivedCommands+0x1d4>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	1d39      	adds	r1, r7, #4
 800abb8:	2200      	movs	r2, #0
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fd fea6 	bl	800890c <xQueueReceive>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f47f af20 	bne.w	800aa08 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800abc8:	bf00      	nop
 800abca:	bf00      	nop
 800abcc:	3730      	adds	r7, #48	@ 0x30
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	20006568 	.word	0x20006568

0800abd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b088      	sub	sp, #32
 800abdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800abde:	e04b      	b.n	800ac78 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800abe0:	4b2f      	ldr	r3, [pc, #188]	@ (800aca0 <prvSwitchTimerLists+0xc8>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abea:	4b2d      	ldr	r3, [pc, #180]	@ (800aca0 <prvSwitchTimerLists+0xc8>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	3304      	adds	r3, #4
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7fd fb1c 	bl	8008236 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac0c:	f003 0304 	and.w	r3, r3, #4
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d031      	beq.n	800ac78 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	699b      	ldr	r3, [r3, #24]
 800ac18:	693a      	ldr	r2, [r7, #16]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ac1e:	68ba      	ldr	r2, [r7, #8]
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d90e      	bls.n	800ac44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	68ba      	ldr	r2, [r7, #8]
 800ac2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac32:	4b1b      	ldr	r3, [pc, #108]	@ (800aca0 <prvSwitchTimerLists+0xc8>)
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	3304      	adds	r3, #4
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	f7fd fac1 	bl	80081c4 <vListInsert>
 800ac42:	e019      	b.n	800ac78 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac44:	2300      	movs	r3, #0
 800ac46:	9300      	str	r3, [sp, #0]
 800ac48:	2300      	movs	r3, #0
 800ac4a:	693a      	ldr	r2, [r7, #16]
 800ac4c:	2100      	movs	r1, #0
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f7ff fd4e 	bl	800a6f0 <xTimerGenericCommand>
 800ac54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d10d      	bne.n	800ac78 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800ac5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac60:	b672      	cpsid	i
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	b662      	cpsie	i
 800ac70:	603b      	str	r3, [r7, #0]
}
 800ac72:	bf00      	nop
 800ac74:	bf00      	nop
 800ac76:	e7fd      	b.n	800ac74 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac78:	4b09      	ldr	r3, [pc, #36]	@ (800aca0 <prvSwitchTimerLists+0xc8>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1ae      	bne.n	800abe0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ac82:	4b07      	ldr	r3, [pc, #28]	@ (800aca0 <prvSwitchTimerLists+0xc8>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ac88:	4b06      	ldr	r3, [pc, #24]	@ (800aca4 <prvSwitchTimerLists+0xcc>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a04      	ldr	r2, [pc, #16]	@ (800aca0 <prvSwitchTimerLists+0xc8>)
 800ac8e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ac90:	4a04      	ldr	r2, [pc, #16]	@ (800aca4 <prvSwitchTimerLists+0xcc>)
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	6013      	str	r3, [r2, #0]
}
 800ac96:	bf00      	nop
 800ac98:	3718      	adds	r7, #24
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	20006560 	.word	0x20006560
 800aca4:	20006564 	.word	0x20006564

0800aca8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800acae:	f000 f94d 	bl	800af4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800acb2:	4b15      	ldr	r3, [pc, #84]	@ (800ad08 <prvCheckForValidListAndQueue+0x60>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d120      	bne.n	800acfc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800acba:	4814      	ldr	r0, [pc, #80]	@ (800ad0c <prvCheckForValidListAndQueue+0x64>)
 800acbc:	f7fd fa31 	bl	8008122 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800acc0:	4813      	ldr	r0, [pc, #76]	@ (800ad10 <prvCheckForValidListAndQueue+0x68>)
 800acc2:	f7fd fa2e 	bl	8008122 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800acc6:	4b13      	ldr	r3, [pc, #76]	@ (800ad14 <prvCheckForValidListAndQueue+0x6c>)
 800acc8:	4a10      	ldr	r2, [pc, #64]	@ (800ad0c <prvCheckForValidListAndQueue+0x64>)
 800acca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800accc:	4b12      	ldr	r3, [pc, #72]	@ (800ad18 <prvCheckForValidListAndQueue+0x70>)
 800acce:	4a10      	ldr	r2, [pc, #64]	@ (800ad10 <prvCheckForValidListAndQueue+0x68>)
 800acd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800acd2:	2300      	movs	r3, #0
 800acd4:	9300      	str	r3, [sp, #0]
 800acd6:	4b11      	ldr	r3, [pc, #68]	@ (800ad1c <prvCheckForValidListAndQueue+0x74>)
 800acd8:	4a11      	ldr	r2, [pc, #68]	@ (800ad20 <prvCheckForValidListAndQueue+0x78>)
 800acda:	2110      	movs	r1, #16
 800acdc:	200a      	movs	r0, #10
 800acde:	f7fd fb41 	bl	8008364 <xQueueGenericCreateStatic>
 800ace2:	4603      	mov	r3, r0
 800ace4:	4a08      	ldr	r2, [pc, #32]	@ (800ad08 <prvCheckForValidListAndQueue+0x60>)
 800ace6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ace8:	4b07      	ldr	r3, [pc, #28]	@ (800ad08 <prvCheckForValidListAndQueue+0x60>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d005      	beq.n	800acfc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800acf0:	4b05      	ldr	r3, [pc, #20]	@ (800ad08 <prvCheckForValidListAndQueue+0x60>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	490b      	ldr	r1, [pc, #44]	@ (800ad24 <prvCheckForValidListAndQueue+0x7c>)
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7fe f978 	bl	8008fec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800acfc:	f000 f95c 	bl	800afb8 <vPortExitCritical>
}
 800ad00:	bf00      	nop
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	20006568 	.word	0x20006568
 800ad0c:	20006538 	.word	0x20006538
 800ad10:	2000654c 	.word	0x2000654c
 800ad14:	20006560 	.word	0x20006560
 800ad18:	20006564 	.word	0x20006564
 800ad1c:	20006614 	.word	0x20006614
 800ad20:	20006574 	.word	0x20006574
 800ad24:	08016d24 	.word	0x08016d24

0800ad28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	3b04      	subs	r3, #4
 800ad38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ad40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	3b04      	subs	r3, #4
 800ad46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	f023 0201 	bic.w	r2, r3, #1
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	3b04      	subs	r3, #4
 800ad56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ad58:	4a0c      	ldr	r2, [pc, #48]	@ (800ad8c <pxPortInitialiseStack+0x64>)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	3b14      	subs	r3, #20
 800ad62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	3b04      	subs	r3, #4
 800ad6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f06f 0202 	mvn.w	r2, #2
 800ad76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	3b20      	subs	r3, #32
 800ad7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3714      	adds	r7, #20
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr
 800ad8c:	0800ad91 	.word	0x0800ad91

0800ad90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ad90:	b480      	push	{r7}
 800ad92:	b085      	sub	sp, #20
 800ad94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ad96:	2300      	movs	r3, #0
 800ad98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ad9a:	4b15      	ldr	r3, [pc, #84]	@ (800adf0 <prvTaskExitError+0x60>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ada2:	d00d      	beq.n	800adc0 <prvTaskExitError+0x30>
	__asm volatile
 800ada4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada8:	b672      	cpsid	i
 800adaa:	f383 8811 	msr	BASEPRI, r3
 800adae:	f3bf 8f6f 	isb	sy
 800adb2:	f3bf 8f4f 	dsb	sy
 800adb6:	b662      	cpsie	i
 800adb8:	60fb      	str	r3, [r7, #12]
}
 800adba:	bf00      	nop
 800adbc:	bf00      	nop
 800adbe:	e7fd      	b.n	800adbc <prvTaskExitError+0x2c>
	__asm volatile
 800adc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc4:	b672      	cpsid	i
 800adc6:	f383 8811 	msr	BASEPRI, r3
 800adca:	f3bf 8f6f 	isb	sy
 800adce:	f3bf 8f4f 	dsb	sy
 800add2:	b662      	cpsie	i
 800add4:	60bb      	str	r3, [r7, #8]
}
 800add6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800add8:	bf00      	nop
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d0fc      	beq.n	800adda <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ade0:	bf00      	nop
 800ade2:	bf00      	nop
 800ade4:	3714      	adds	r7, #20
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr
 800adee:	bf00      	nop
 800adf0:	20000080 	.word	0x20000080
	...

0800ae00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ae00:	4b07      	ldr	r3, [pc, #28]	@ (800ae20 <pxCurrentTCBConst2>)
 800ae02:	6819      	ldr	r1, [r3, #0]
 800ae04:	6808      	ldr	r0, [r1, #0]
 800ae06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae0a:	f380 8809 	msr	PSP, r0
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	f04f 0000 	mov.w	r0, #0
 800ae16:	f380 8811 	msr	BASEPRI, r0
 800ae1a:	4770      	bx	lr
 800ae1c:	f3af 8000 	nop.w

0800ae20 <pxCurrentTCBConst2>:
 800ae20:	20006038 	.word	0x20006038
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ae24:	bf00      	nop
 800ae26:	bf00      	nop

0800ae28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ae28:	4808      	ldr	r0, [pc, #32]	@ (800ae4c <prvPortStartFirstTask+0x24>)
 800ae2a:	6800      	ldr	r0, [r0, #0]
 800ae2c:	6800      	ldr	r0, [r0, #0]
 800ae2e:	f380 8808 	msr	MSP, r0
 800ae32:	f04f 0000 	mov.w	r0, #0
 800ae36:	f380 8814 	msr	CONTROL, r0
 800ae3a:	b662      	cpsie	i
 800ae3c:	b661      	cpsie	f
 800ae3e:	f3bf 8f4f 	dsb	sy
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	df00      	svc	0
 800ae48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ae4a:	bf00      	nop
 800ae4c:	e000ed08 	.word	0xe000ed08

0800ae50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ae56:	4b37      	ldr	r3, [pc, #220]	@ (800af34 <xPortStartScheduler+0xe4>)
 800ae58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	22ff      	movs	r2, #255	@ 0xff
 800ae66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ae70:	78fb      	ldrb	r3, [r7, #3]
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ae78:	b2da      	uxtb	r2, r3
 800ae7a:	4b2f      	ldr	r3, [pc, #188]	@ (800af38 <xPortStartScheduler+0xe8>)
 800ae7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ae7e:	4b2f      	ldr	r3, [pc, #188]	@ (800af3c <xPortStartScheduler+0xec>)
 800ae80:	2207      	movs	r2, #7
 800ae82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae84:	e009      	b.n	800ae9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ae86:	4b2d      	ldr	r3, [pc, #180]	@ (800af3c <xPortStartScheduler+0xec>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	4a2b      	ldr	r2, [pc, #172]	@ (800af3c <xPortStartScheduler+0xec>)
 800ae8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae90:	78fb      	ldrb	r3, [r7, #3]
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	005b      	lsls	r3, r3, #1
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae9a:	78fb      	ldrb	r3, [r7, #3]
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aea2:	2b80      	cmp	r3, #128	@ 0x80
 800aea4:	d0ef      	beq.n	800ae86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aea6:	4b25      	ldr	r3, [pc, #148]	@ (800af3c <xPortStartScheduler+0xec>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f1c3 0307 	rsb	r3, r3, #7
 800aeae:	2b04      	cmp	r3, #4
 800aeb0:	d00d      	beq.n	800aece <xPortStartScheduler+0x7e>
	__asm volatile
 800aeb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeb6:	b672      	cpsid	i
 800aeb8:	f383 8811 	msr	BASEPRI, r3
 800aebc:	f3bf 8f6f 	isb	sy
 800aec0:	f3bf 8f4f 	dsb	sy
 800aec4:	b662      	cpsie	i
 800aec6:	60bb      	str	r3, [r7, #8]
}
 800aec8:	bf00      	nop
 800aeca:	bf00      	nop
 800aecc:	e7fd      	b.n	800aeca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aece:	4b1b      	ldr	r3, [pc, #108]	@ (800af3c <xPortStartScheduler+0xec>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	021b      	lsls	r3, r3, #8
 800aed4:	4a19      	ldr	r2, [pc, #100]	@ (800af3c <xPortStartScheduler+0xec>)
 800aed6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aed8:	4b18      	ldr	r3, [pc, #96]	@ (800af3c <xPortStartScheduler+0xec>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aee0:	4a16      	ldr	r2, [pc, #88]	@ (800af3c <xPortStartScheduler+0xec>)
 800aee2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	b2da      	uxtb	r2, r3
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aeec:	4b14      	ldr	r3, [pc, #80]	@ (800af40 <xPortStartScheduler+0xf0>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a13      	ldr	r2, [pc, #76]	@ (800af40 <xPortStartScheduler+0xf0>)
 800aef2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800aef6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aef8:	4b11      	ldr	r3, [pc, #68]	@ (800af40 <xPortStartScheduler+0xf0>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a10      	ldr	r2, [pc, #64]	@ (800af40 <xPortStartScheduler+0xf0>)
 800aefe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800af02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800af04:	f000 f8dc 	bl	800b0c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800af08:	4b0e      	ldr	r3, [pc, #56]	@ (800af44 <xPortStartScheduler+0xf4>)
 800af0a:	2200      	movs	r2, #0
 800af0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800af0e:	f000 f8fb 	bl	800b108 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800af12:	4b0d      	ldr	r3, [pc, #52]	@ (800af48 <xPortStartScheduler+0xf8>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a0c      	ldr	r2, [pc, #48]	@ (800af48 <xPortStartScheduler+0xf8>)
 800af18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800af1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800af1e:	f7ff ff83 	bl	800ae28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800af22:	f7fe fd2d 	bl	8009980 <vTaskSwitchContext>
	prvTaskExitError();
 800af26:	f7ff ff33 	bl	800ad90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800af2a:	2300      	movs	r3, #0
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3710      	adds	r7, #16
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}
 800af34:	e000e400 	.word	0xe000e400
 800af38:	20006664 	.word	0x20006664
 800af3c:	20006668 	.word	0x20006668
 800af40:	e000ed20 	.word	0xe000ed20
 800af44:	20000080 	.word	0x20000080
 800af48:	e000ef34 	.word	0xe000ef34

0800af4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
	__asm volatile
 800af52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af56:	b672      	cpsid	i
 800af58:	f383 8811 	msr	BASEPRI, r3
 800af5c:	f3bf 8f6f 	isb	sy
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	b662      	cpsie	i
 800af66:	607b      	str	r3, [r7, #4]
}
 800af68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800af6a:	4b11      	ldr	r3, [pc, #68]	@ (800afb0 <vPortEnterCritical+0x64>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	3301      	adds	r3, #1
 800af70:	4a0f      	ldr	r2, [pc, #60]	@ (800afb0 <vPortEnterCritical+0x64>)
 800af72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800af74:	4b0e      	ldr	r3, [pc, #56]	@ (800afb0 <vPortEnterCritical+0x64>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d112      	bne.n	800afa2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800af7c:	4b0d      	ldr	r3, [pc, #52]	@ (800afb4 <vPortEnterCritical+0x68>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	b2db      	uxtb	r3, r3
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00d      	beq.n	800afa2 <vPortEnterCritical+0x56>
	__asm volatile
 800af86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af8a:	b672      	cpsid	i
 800af8c:	f383 8811 	msr	BASEPRI, r3
 800af90:	f3bf 8f6f 	isb	sy
 800af94:	f3bf 8f4f 	dsb	sy
 800af98:	b662      	cpsie	i
 800af9a:	603b      	str	r3, [r7, #0]
}
 800af9c:	bf00      	nop
 800af9e:	bf00      	nop
 800afa0:	e7fd      	b.n	800af9e <vPortEnterCritical+0x52>
	}
}
 800afa2:	bf00      	nop
 800afa4:	370c      	adds	r7, #12
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr
 800afae:	bf00      	nop
 800afb0:	20000080 	.word	0x20000080
 800afb4:	e000ed04 	.word	0xe000ed04

0800afb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800afbe:	4b13      	ldr	r3, [pc, #76]	@ (800b00c <vPortExitCritical+0x54>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d10d      	bne.n	800afe2 <vPortExitCritical+0x2a>
	__asm volatile
 800afc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afca:	b672      	cpsid	i
 800afcc:	f383 8811 	msr	BASEPRI, r3
 800afd0:	f3bf 8f6f 	isb	sy
 800afd4:	f3bf 8f4f 	dsb	sy
 800afd8:	b662      	cpsie	i
 800afda:	607b      	str	r3, [r7, #4]
}
 800afdc:	bf00      	nop
 800afde:	bf00      	nop
 800afe0:	e7fd      	b.n	800afde <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800afe2:	4b0a      	ldr	r3, [pc, #40]	@ (800b00c <vPortExitCritical+0x54>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	3b01      	subs	r3, #1
 800afe8:	4a08      	ldr	r2, [pc, #32]	@ (800b00c <vPortExitCritical+0x54>)
 800afea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800afec:	4b07      	ldr	r3, [pc, #28]	@ (800b00c <vPortExitCritical+0x54>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d105      	bne.n	800b000 <vPortExitCritical+0x48>
 800aff4:	2300      	movs	r3, #0
 800aff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	f383 8811 	msr	BASEPRI, r3
}
 800affe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b000:	bf00      	nop
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr
 800b00c:	20000080 	.word	0x20000080

0800b010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b010:	f3ef 8009 	mrs	r0, PSP
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	4b15      	ldr	r3, [pc, #84]	@ (800b070 <pxCurrentTCBConst>)
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	f01e 0f10 	tst.w	lr, #16
 800b020:	bf08      	it	eq
 800b022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b02a:	6010      	str	r0, [r2, #0]
 800b02c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b030:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b034:	b672      	cpsid	i
 800b036:	f380 8811 	msr	BASEPRI, r0
 800b03a:	f3bf 8f4f 	dsb	sy
 800b03e:	f3bf 8f6f 	isb	sy
 800b042:	b662      	cpsie	i
 800b044:	f7fe fc9c 	bl	8009980 <vTaskSwitchContext>
 800b048:	f04f 0000 	mov.w	r0, #0
 800b04c:	f380 8811 	msr	BASEPRI, r0
 800b050:	bc09      	pop	{r0, r3}
 800b052:	6819      	ldr	r1, [r3, #0]
 800b054:	6808      	ldr	r0, [r1, #0]
 800b056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b05a:	f01e 0f10 	tst.w	lr, #16
 800b05e:	bf08      	it	eq
 800b060:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b064:	f380 8809 	msr	PSP, r0
 800b068:	f3bf 8f6f 	isb	sy
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop

0800b070 <pxCurrentTCBConst>:
 800b070:	20006038 	.word	0x20006038
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b074:	bf00      	nop
 800b076:	bf00      	nop

0800b078 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
	__asm volatile
 800b07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b082:	b672      	cpsid	i
 800b084:	f383 8811 	msr	BASEPRI, r3
 800b088:	f3bf 8f6f 	isb	sy
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	b662      	cpsie	i
 800b092:	607b      	str	r3, [r7, #4]
}
 800b094:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b096:	f7fe fbb7 	bl	8009808 <xTaskIncrementTick>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d003      	beq.n	800b0a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b0a0:	4b06      	ldr	r3, [pc, #24]	@ (800b0bc <SysTick_Handler+0x44>)
 800b0a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0a6:	601a      	str	r2, [r3, #0]
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	f383 8811 	msr	BASEPRI, r3
}
 800b0b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b0b4:	bf00      	nop
 800b0b6:	3708      	adds	r7, #8
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}
 800b0bc:	e000ed04 	.word	0xe000ed04

0800b0c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b0c4:	4b0b      	ldr	r3, [pc, #44]	@ (800b0f4 <vPortSetupTimerInterrupt+0x34>)
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b0ca:	4b0b      	ldr	r3, [pc, #44]	@ (800b0f8 <vPortSetupTimerInterrupt+0x38>)
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b0d0:	4b0a      	ldr	r3, [pc, #40]	@ (800b0fc <vPortSetupTimerInterrupt+0x3c>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a0a      	ldr	r2, [pc, #40]	@ (800b100 <vPortSetupTimerInterrupt+0x40>)
 800b0d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b0da:	099b      	lsrs	r3, r3, #6
 800b0dc:	4a09      	ldr	r2, [pc, #36]	@ (800b104 <vPortSetupTimerInterrupt+0x44>)
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b0e2:	4b04      	ldr	r3, [pc, #16]	@ (800b0f4 <vPortSetupTimerInterrupt+0x34>)
 800b0e4:	2207      	movs	r2, #7
 800b0e6:	601a      	str	r2, [r3, #0]
}
 800b0e8:	bf00      	nop
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	e000e010 	.word	0xe000e010
 800b0f8:	e000e018 	.word	0xe000e018
 800b0fc:	20000004 	.word	0x20000004
 800b100:	10624dd3 	.word	0x10624dd3
 800b104:	e000e014 	.word	0xe000e014

0800b108 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b108:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b118 <vPortEnableVFP+0x10>
 800b10c:	6801      	ldr	r1, [r0, #0]
 800b10e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b112:	6001      	str	r1, [r0, #0]
 800b114:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b116:	bf00      	nop
 800b118:	e000ed88 	.word	0xe000ed88

0800b11c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b11c:	b480      	push	{r7}
 800b11e:	b085      	sub	sp, #20
 800b120:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b122:	f3ef 8305 	mrs	r3, IPSR
 800b126:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2b0f      	cmp	r3, #15
 800b12c:	d917      	bls.n	800b15e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b12e:	4a1a      	ldr	r2, [pc, #104]	@ (800b198 <vPortValidateInterruptPriority+0x7c>)
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	4413      	add	r3, r2
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b138:	4b18      	ldr	r3, [pc, #96]	@ (800b19c <vPortValidateInterruptPriority+0x80>)
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	7afa      	ldrb	r2, [r7, #11]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d20d      	bcs.n	800b15e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800b142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b146:	b672      	cpsid	i
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	b662      	cpsie	i
 800b156:	607b      	str	r3, [r7, #4]
}
 800b158:	bf00      	nop
 800b15a:	bf00      	nop
 800b15c:	e7fd      	b.n	800b15a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b15e:	4b10      	ldr	r3, [pc, #64]	@ (800b1a0 <vPortValidateInterruptPriority+0x84>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b166:	4b0f      	ldr	r3, [pc, #60]	@ (800b1a4 <vPortValidateInterruptPriority+0x88>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d90d      	bls.n	800b18a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800b16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b172:	b672      	cpsid	i
 800b174:	f383 8811 	msr	BASEPRI, r3
 800b178:	f3bf 8f6f 	isb	sy
 800b17c:	f3bf 8f4f 	dsb	sy
 800b180:	b662      	cpsie	i
 800b182:	603b      	str	r3, [r7, #0]
}
 800b184:	bf00      	nop
 800b186:	bf00      	nop
 800b188:	e7fd      	b.n	800b186 <vPortValidateInterruptPriority+0x6a>
	}
 800b18a:	bf00      	nop
 800b18c:	3714      	adds	r7, #20
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr
 800b196:	bf00      	nop
 800b198:	e000e3f0 	.word	0xe000e3f0
 800b19c:	20006664 	.word	0x20006664
 800b1a0:	e000ed0c 	.word	0xe000ed0c
 800b1a4:	20006668 	.word	0x20006668

0800b1a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b08a      	sub	sp, #40	@ 0x28
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b1b4:	f7fe fa6a 	bl	800968c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b1b8:	4b5d      	ldr	r3, [pc, #372]	@ (800b330 <pvPortMalloc+0x188>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d101      	bne.n	800b1c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b1c0:	f000 f92c 	bl	800b41c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b1c4:	4b5b      	ldr	r3, [pc, #364]	@ (800b334 <pvPortMalloc+0x18c>)
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4013      	ands	r3, r2
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f040 8094 	bne.w	800b2fa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d020      	beq.n	800b21a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800b1d8:	2208      	movs	r2, #8
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4413      	add	r3, r2
 800b1de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f003 0307 	and.w	r3, r3, #7
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d017      	beq.n	800b21a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f023 0307 	bic.w	r3, r3, #7
 800b1f0:	3308      	adds	r3, #8
 800b1f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f003 0307 	and.w	r3, r3, #7
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d00d      	beq.n	800b21a <pvPortMalloc+0x72>
	__asm volatile
 800b1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b202:	b672      	cpsid	i
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	b662      	cpsie	i
 800b212:	617b      	str	r3, [r7, #20]
}
 800b214:	bf00      	nop
 800b216:	bf00      	nop
 800b218:	e7fd      	b.n	800b216 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d06c      	beq.n	800b2fa <pvPortMalloc+0x152>
 800b220:	4b45      	ldr	r3, [pc, #276]	@ (800b338 <pvPortMalloc+0x190>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	429a      	cmp	r2, r3
 800b228:	d867      	bhi.n	800b2fa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b22a:	4b44      	ldr	r3, [pc, #272]	@ (800b33c <pvPortMalloc+0x194>)
 800b22c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b22e:	4b43      	ldr	r3, [pc, #268]	@ (800b33c <pvPortMalloc+0x194>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b234:	e004      	b.n	800b240 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800b236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b238:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	429a      	cmp	r2, r3
 800b248:	d903      	bls.n	800b252 <pvPortMalloc+0xaa>
 800b24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1f1      	bne.n	800b236 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b252:	4b37      	ldr	r3, [pc, #220]	@ (800b330 <pvPortMalloc+0x188>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b258:	429a      	cmp	r2, r3
 800b25a:	d04e      	beq.n	800b2fa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b25c:	6a3b      	ldr	r3, [r7, #32]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2208      	movs	r2, #8
 800b262:	4413      	add	r3, r2
 800b264:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	6a3b      	ldr	r3, [r7, #32]
 800b26c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b270:	685a      	ldr	r2, [r3, #4]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	1ad2      	subs	r2, r2, r3
 800b276:	2308      	movs	r3, #8
 800b278:	005b      	lsls	r3, r3, #1
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d922      	bls.n	800b2c4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b27e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4413      	add	r3, r2
 800b284:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	f003 0307 	and.w	r3, r3, #7
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00d      	beq.n	800b2ac <pvPortMalloc+0x104>
	__asm volatile
 800b290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b294:	b672      	cpsid	i
 800b296:	f383 8811 	msr	BASEPRI, r3
 800b29a:	f3bf 8f6f 	isb	sy
 800b29e:	f3bf 8f4f 	dsb	sy
 800b2a2:	b662      	cpsie	i
 800b2a4:	613b      	str	r3, [r7, #16]
}
 800b2a6:	bf00      	nop
 800b2a8:	bf00      	nop
 800b2aa:	e7fd      	b.n	800b2a8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ae:	685a      	ldr	r2, [r3, #4]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	1ad2      	subs	r2, r2, r3
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b2be:	69b8      	ldr	r0, [r7, #24]
 800b2c0:	f000 f90e 	bl	800b4e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b2c4:	4b1c      	ldr	r3, [pc, #112]	@ (800b338 <pvPortMalloc+0x190>)
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	1ad3      	subs	r3, r2, r3
 800b2ce:	4a1a      	ldr	r2, [pc, #104]	@ (800b338 <pvPortMalloc+0x190>)
 800b2d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b2d2:	4b19      	ldr	r3, [pc, #100]	@ (800b338 <pvPortMalloc+0x190>)
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	4b1a      	ldr	r3, [pc, #104]	@ (800b340 <pvPortMalloc+0x198>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d203      	bcs.n	800b2e6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b2de:	4b16      	ldr	r3, [pc, #88]	@ (800b338 <pvPortMalloc+0x190>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a17      	ldr	r2, [pc, #92]	@ (800b340 <pvPortMalloc+0x198>)
 800b2e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e8:	685a      	ldr	r2, [r3, #4]
 800b2ea:	4b12      	ldr	r3, [pc, #72]	@ (800b334 <pvPortMalloc+0x18c>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	431a      	orrs	r2, r3
 800b2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b2fa:	f7fe f9d5 	bl	80096a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	f003 0307 	and.w	r3, r3, #7
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00d      	beq.n	800b324 <pvPortMalloc+0x17c>
	__asm volatile
 800b308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b30c:	b672      	cpsid	i
 800b30e:	f383 8811 	msr	BASEPRI, r3
 800b312:	f3bf 8f6f 	isb	sy
 800b316:	f3bf 8f4f 	dsb	sy
 800b31a:	b662      	cpsie	i
 800b31c:	60fb      	str	r3, [r7, #12]
}
 800b31e:	bf00      	nop
 800b320:	bf00      	nop
 800b322:	e7fd      	b.n	800b320 <pvPortMalloc+0x178>
	return pvReturn;
 800b324:	69fb      	ldr	r3, [r7, #28]
}
 800b326:	4618      	mov	r0, r3
 800b328:	3728      	adds	r7, #40	@ 0x28
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	2000a274 	.word	0x2000a274
 800b334:	2000a280 	.word	0x2000a280
 800b338:	2000a278 	.word	0x2000a278
 800b33c:	2000a26c 	.word	0x2000a26c
 800b340:	2000a27c 	.word	0x2000a27c

0800b344 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b086      	sub	sp, #24
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d04e      	beq.n	800b3f4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b356:	2308      	movs	r3, #8
 800b358:	425b      	negs	r3, r3
 800b35a:	697a      	ldr	r2, [r7, #20]
 800b35c:	4413      	add	r3, r2
 800b35e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	685a      	ldr	r2, [r3, #4]
 800b368:	4b24      	ldr	r3, [pc, #144]	@ (800b3fc <vPortFree+0xb8>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4013      	ands	r3, r2
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d10d      	bne.n	800b38e <vPortFree+0x4a>
	__asm volatile
 800b372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b376:	b672      	cpsid	i
 800b378:	f383 8811 	msr	BASEPRI, r3
 800b37c:	f3bf 8f6f 	isb	sy
 800b380:	f3bf 8f4f 	dsb	sy
 800b384:	b662      	cpsie	i
 800b386:	60fb      	str	r3, [r7, #12]
}
 800b388:	bf00      	nop
 800b38a:	bf00      	nop
 800b38c:	e7fd      	b.n	800b38a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00d      	beq.n	800b3b2 <vPortFree+0x6e>
	__asm volatile
 800b396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b39a:	b672      	cpsid	i
 800b39c:	f383 8811 	msr	BASEPRI, r3
 800b3a0:	f3bf 8f6f 	isb	sy
 800b3a4:	f3bf 8f4f 	dsb	sy
 800b3a8:	b662      	cpsie	i
 800b3aa:	60bb      	str	r3, [r7, #8]
}
 800b3ac:	bf00      	nop
 800b3ae:	bf00      	nop
 800b3b0:	e7fd      	b.n	800b3ae <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	685a      	ldr	r2, [r3, #4]
 800b3b6:	4b11      	ldr	r3, [pc, #68]	@ (800b3fc <vPortFree+0xb8>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4013      	ands	r3, r2
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d019      	beq.n	800b3f4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d115      	bne.n	800b3f4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	685a      	ldr	r2, [r3, #4]
 800b3cc:	4b0b      	ldr	r3, [pc, #44]	@ (800b3fc <vPortFree+0xb8>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	43db      	mvns	r3, r3
 800b3d2:	401a      	ands	r2, r3
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b3d8:	f7fe f958 	bl	800968c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	685a      	ldr	r2, [r3, #4]
 800b3e0:	4b07      	ldr	r3, [pc, #28]	@ (800b400 <vPortFree+0xbc>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	4a06      	ldr	r2, [pc, #24]	@ (800b400 <vPortFree+0xbc>)
 800b3e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b3ea:	6938      	ldr	r0, [r7, #16]
 800b3ec:	f000 f878 	bl	800b4e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b3f0:	f7fe f95a 	bl	80096a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b3f4:	bf00      	nop
 800b3f6:	3718      	adds	r7, #24
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	2000a280 	.word	0x2000a280
 800b400:	2000a278 	.word	0x2000a278

0800b404 <xPortGetMinimumEverFreeHeapSize>:
	return xFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 800b404:	b480      	push	{r7}
 800b406:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 800b408:	4b03      	ldr	r3, [pc, #12]	@ (800b418 <xPortGetMinimumEverFreeHeapSize+0x14>)
 800b40a:	681b      	ldr	r3, [r3, #0]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr
 800b416:	bf00      	nop
 800b418:	2000a27c 	.word	0x2000a27c

0800b41c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b41c:	b480      	push	{r7}
 800b41e:	b085      	sub	sp, #20
 800b420:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b422:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b426:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b428:	4b27      	ldr	r3, [pc, #156]	@ (800b4c8 <prvHeapInit+0xac>)
 800b42a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f003 0307 	and.w	r3, r3, #7
 800b432:	2b00      	cmp	r3, #0
 800b434:	d00c      	beq.n	800b450 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	3307      	adds	r3, #7
 800b43a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f023 0307 	bic.w	r3, r3, #7
 800b442:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	4a1f      	ldr	r2, [pc, #124]	@ (800b4c8 <prvHeapInit+0xac>)
 800b44c:	4413      	add	r3, r2
 800b44e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b454:	4a1d      	ldr	r2, [pc, #116]	@ (800b4cc <prvHeapInit+0xb0>)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b45a:	4b1c      	ldr	r3, [pc, #112]	@ (800b4cc <prvHeapInit+0xb0>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	68ba      	ldr	r2, [r7, #8]
 800b464:	4413      	add	r3, r2
 800b466:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b468:	2208      	movs	r2, #8
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	1a9b      	subs	r3, r3, r2
 800b46e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f023 0307 	bic.w	r3, r3, #7
 800b476:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	4a15      	ldr	r2, [pc, #84]	@ (800b4d0 <prvHeapInit+0xb4>)
 800b47c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b47e:	4b14      	ldr	r3, [pc, #80]	@ (800b4d0 <prvHeapInit+0xb4>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	2200      	movs	r2, #0
 800b484:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b486:	4b12      	ldr	r3, [pc, #72]	@ (800b4d0 <prvHeapInit+0xb4>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2200      	movs	r2, #0
 800b48c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	1ad2      	subs	r2, r2, r3
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b49c:	4b0c      	ldr	r3, [pc, #48]	@ (800b4d0 <prvHeapInit+0xb4>)
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	4a0a      	ldr	r2, [pc, #40]	@ (800b4d4 <prvHeapInit+0xb8>)
 800b4aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	4a09      	ldr	r2, [pc, #36]	@ (800b4d8 <prvHeapInit+0xbc>)
 800b4b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b4b4:	4b09      	ldr	r3, [pc, #36]	@ (800b4dc <prvHeapInit+0xc0>)
 800b4b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b4ba:	601a      	str	r2, [r3, #0]
}
 800b4bc:	bf00      	nop
 800b4be:	3714      	adds	r7, #20
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr
 800b4c8:	2000666c 	.word	0x2000666c
 800b4cc:	2000a26c 	.word	0x2000a26c
 800b4d0:	2000a274 	.word	0x2000a274
 800b4d4:	2000a27c 	.word	0x2000a27c
 800b4d8:	2000a278 	.word	0x2000a278
 800b4dc:	2000a280 	.word	0x2000a280

0800b4e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b4e8:	4b28      	ldr	r3, [pc, #160]	@ (800b58c <prvInsertBlockIntoFreeList+0xac>)
 800b4ea:	60fb      	str	r3, [r7, #12]
 800b4ec:	e002      	b.n	800b4f4 <prvInsertBlockIntoFreeList+0x14>
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	60fb      	str	r3, [r7, #12]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d8f7      	bhi.n	800b4ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	68ba      	ldr	r2, [r7, #8]
 800b508:	4413      	add	r3, r2
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d108      	bne.n	800b522 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	685a      	ldr	r2, [r3, #4]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	441a      	add	r2, r3
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	68ba      	ldr	r2, [r7, #8]
 800b52c:	441a      	add	r2, r3
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	429a      	cmp	r2, r3
 800b534:	d118      	bne.n	800b568 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	4b15      	ldr	r3, [pc, #84]	@ (800b590 <prvInsertBlockIntoFreeList+0xb0>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d00d      	beq.n	800b55e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	685a      	ldr	r2, [r3, #4]
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	441a      	add	r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	601a      	str	r2, [r3, #0]
 800b55c:	e008      	b.n	800b570 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b55e:	4b0c      	ldr	r3, [pc, #48]	@ (800b590 <prvInsertBlockIntoFreeList+0xb0>)
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	601a      	str	r2, [r3, #0]
 800b566:	e003      	b.n	800b570 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	429a      	cmp	r2, r3
 800b576:	d002      	beq.n	800b57e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b57e:	bf00      	nop
 800b580:	3714      	adds	r7, #20
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	2000a26c 	.word	0x2000a26c
 800b590:	2000a274 	.word	0x2000a274

0800b594 <vCastPointerTo_ARPPacket_t>:
    };
    #include "pack_struct_end.h"
    typedef struct xARP_PACKET ARPPacket_t;

    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( ARPPacket_t )
    {
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
        return ( ARPPacket_t * ) pvArgument;
 800b59c:	687b      	ldr	r3, [r7, #4]
    }
 800b59e:	4618      	mov	r0, r3
 800b5a0:	370c      	adds	r7, #12
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
	...

0800b5ac <eARPProcessPacket>:
 * @param[in] pxARPFrame: The ARP Frame (the ARP packet).
 *
 * @return An enum which says whether to return the frame or to release it.
 */
eFrameProcessingResult_t eARPProcessPacket( ARPPacket_t * const pxARPFrame )
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b088      	sub	sp, #32
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	77fb      	strb	r3, [r7, #31]
    uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;
/* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    const void * pvCopySource;
    void * pvCopyDest;

    pxARPHeader = &( pxARPFrame->xARPHeader );
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	3310      	adds	r3, #16
 800b5bc:	61bb      	str	r3, [r7, #24]
    /*
     * Use helper variables for memcpy() to remain
     * compliant with MISRA Rule 21.15.  These should be
     * optimized away.
     */
    pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	330e      	adds	r3, #14
 800b5c2:	617b      	str	r3, [r7, #20]
    pvCopyDest = &ulSenderProtocolAddress;
 800b5c4:	f107 0308 	add.w	r3, r7, #8
 800b5c8:	613b      	str	r3, [r7, #16]
    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	601a      	str	r2, [r3, #0]
    /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
    ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	699b      	ldr	r3, [r3, #24]
 800b5d8:	60fb      	str	r3, [r7, #12]

    traceARP_PACKET_RECEIVED();

    /* Don't do anything if the local IP address is zero because
     * that means a DHCP request has not completed. */
    if( *ipLOCAL_IP_ADDRESS_POINTER != 0UL )
 800b5da:	4b34      	ldr	r3, [pc, #208]	@ (800b6ac <eARPProcessPacket+0x100>)
 800b5dc:	695b      	ldr	r3, [r3, #20]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d05f      	beq.n	800b6a2 <eARPProcessPacket+0xf6>
    {
        switch( pxARPHeader->usOperation )
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	88db      	ldrh	r3, [r3, #6]
 800b5e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5ea:	d003      	beq.n	800b5f4 <eARPProcessPacket+0x48>
 800b5ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5f0:	d04e      	beq.n	800b690 <eARPProcessPacket+0xe4>
                #endif /* ipconfigARP_USE_CLASH_DETECTION */
                break;

            default:
                /* Invalid. */
                break;
 800b5f2:	e056      	b.n	800b6a2 <eARPProcessPacket+0xf6>
                if( ulTargetProtocolAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 800b5f4:	4b2d      	ldr	r3, [pc, #180]	@ (800b6ac <eARPProcessPacket+0x100>)
 800b5f6:	695b      	ldr	r3, [r3, #20]
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d150      	bne.n	800b6a0 <eARPProcessPacket+0xf4>
                    vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	3308      	adds	r3, #8
 800b602:	68ba      	ldr	r2, [r7, #8]
 800b604:	4611      	mov	r1, r2
 800b606:	4618      	mov	r0, r3
 800b608:	f000 f856 	bl	800b6b8 <vARPRefreshCacheEntry>
                    pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b612:	80da      	strh	r2, [r3, #6]
                    if( ulTargetProtocolAddress == ulSenderProtocolAddress )
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	68fa      	ldr	r2, [r7, #12]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d114      	bne.n	800b646 <eARPProcessPacket+0x9a>
                        pvCopySource = xBroadcastMACAddress.ucBytes;
 800b61c:	4b24      	ldr	r3, [pc, #144]	@ (800b6b0 <eARPProcessPacket+0x104>)
 800b61e:	617b      	str	r3, [r7, #20]
                        pvCopyDest = pxARPFrame->xEthernetHeader.xSourceAddress.ucBytes;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	3306      	adds	r3, #6
 800b624:	613b      	str	r3, [r7, #16]
                        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xBroadcastMACAddress ) );
 800b626:	2206      	movs	r2, #6
 800b628:	6979      	ldr	r1, [r7, #20]
 800b62a:	6938      	ldr	r0, [r7, #16]
 800b62c:	f00a fb89 	bl	8015d42 <memcpy>
                        ( void ) memset( pxARPHeader->xTargetHardwareAddress.ucBytes, 0, sizeof( MACAddress_t ) );
 800b630:	69bb      	ldr	r3, [r7, #24]
 800b632:	3312      	adds	r3, #18
 800b634:	2206      	movs	r2, #6
 800b636:	2100      	movs	r1, #0
 800b638:	4618      	mov	r0, r3
 800b63a:	f00a fb06 	bl	8015c4a <memset>
                        pxARPHeader->ulTargetProtocolAddress = 0UL;
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	2200      	movs	r2, #0
 800b642:	619a      	str	r2, [r3, #24]
 800b644:	e00d      	b.n	800b662 <eARPProcessPacket+0xb6>
                        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 800b646:	69bb      	ldr	r3, [r7, #24]
 800b648:	3308      	adds	r3, #8
 800b64a:	617b      	str	r3, [r7, #20]
                        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 800b64c:	69bb      	ldr	r3, [r7, #24]
 800b64e:	3312      	adds	r3, #18
 800b650:	613b      	str	r3, [r7, #16]
                        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 800b652:	2206      	movs	r2, #6
 800b654:	6979      	ldr	r1, [r7, #20]
 800b656:	6938      	ldr	r0, [r7, #16]
 800b658:	f00a fb73 	bl	8015d42 <memcpy>
                        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 800b65c:	68ba      	ldr	r2, [r7, #8]
 800b65e:	69bb      	ldr	r3, [r7, #24]
 800b660:	619a      	str	r2, [r3, #24]
                    pvCopySource = ipLOCAL_MAC_ADDRESS;
 800b662:	4b12      	ldr	r3, [pc, #72]	@ (800b6ac <eARPProcessPacket+0x100>)
 800b664:	617b      	str	r3, [r7, #20]
                    pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	3308      	adds	r3, #8
 800b66a:	613b      	str	r3, [r7, #16]
                    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 800b66c:	2206      	movs	r2, #6
 800b66e:	6979      	ldr	r1, [r7, #20]
 800b670:	6938      	ldr	r0, [r7, #16]
 800b672:	f00a fb66 	bl	8015d42 <memcpy>
                    pvCopySource = ipLOCAL_IP_ADDRESS_POINTER;
 800b676:	4b0f      	ldr	r3, [pc, #60]	@ (800b6b4 <eARPProcessPacket+0x108>)
 800b678:	617b      	str	r3, [r7, #20]
                    pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	330e      	adds	r3, #14
 800b67e:	613b      	str	r3, [r7, #16]
                    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	461a      	mov	r2, r3
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	601a      	str	r2, [r3, #0]
                    eReturn = eReturnEthernetFrame;
 800b68a:	2302      	movs	r3, #2
 800b68c:	77fb      	strb	r3, [r7, #31]
                break;
 800b68e:	e007      	b.n	800b6a0 <eARPProcessPacket+0xf4>
                vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress );
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	3308      	adds	r3, #8
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	4611      	mov	r1, r2
 800b698:	4618      	mov	r0, r3
 800b69a:	f000 f80d 	bl	800b6b8 <vARPRefreshCacheEntry>
                break;
 800b69e:	e000      	b.n	800b6a2 <eARPProcessPacket+0xf6>
                break;
 800b6a0:	bf00      	nop
        }
    }

    return eReturn;
 800b6a2:	7ffb      	ldrb	r3, [r7, #31]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3720      	adds	r7, #32
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	20000088 	.word	0x20000088
 800b6b0:	08016f4c 	.word	0x08016f4c
 800b6b4:	2000009c 	.word	0x2000009c

0800b6b8 <vARPRefreshCacheEntry>:
 * @param[in] ulIPAddress: 32-bit representation of the IP-address whose mapping
 *                         is being updated.
 */
void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                            const uint32_t ulIPAddress )
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b088      	sub	sp, #32
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
    BaseType_t x = 0;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	61fb      	str	r3, [r7, #28]
    BaseType_t xIpEntry = -1;
 800b6c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ca:	61bb      	str	r3, [r7, #24]
    BaseType_t xMacEntry = -1;
 800b6cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b6d0:	617b      	str	r3, [r7, #20]
    BaseType_t xUseEntry = 0;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	613b      	str	r3, [r7, #16]
    uint8_t ucMinAgeFound = 0U;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	73fb      	strb	r3, [r7, #15]
    #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 0 )

        /* Only process the IP address if it is on the local network.
         * Unless: when '*ipLOCAL_IP_ADDRESS_POINTER' equals zero, the IP-address
         * and netmask are still unknown. */
        if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 800b6da:	4b70      	ldr	r3, [pc, #448]	@ (800b89c <vARPRefreshCacheEntry+0x1e4>)
 800b6dc:	695a      	ldr	r2, [r3, #20]
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	405a      	eors	r2, r3
 800b6e2:	4b6f      	ldr	r3, [pc, #444]	@ (800b8a0 <vARPRefreshCacheEntry+0x1e8>)
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	4013      	ands	r3, r2
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d004      	beq.n	800b6f6 <vARPRefreshCacheEntry+0x3e>
            ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 800b6ec:	4b6b      	ldr	r3, [pc, #428]	@ (800b89c <vARPRefreshCacheEntry+0x1e4>)
 800b6ee:	695b      	ldr	r3, [r3, #20]
        if( ( ( ulIPAddress & xNetworkAddressing.ulNetMask ) == ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) ) ||
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	f040 80d0 	bne.w	800b896 <vARPRefreshCacheEntry+0x1de>

        if( pdTRUE )
    #endif
    {
        /* Start with the maximum possible number. */
        ucMinAgeFound--;
 800b6f6:	7bfb      	ldrb	r3, [r7, #15]
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	73fb      	strb	r3, [r7, #15]

        /* For each entry in the ARP cache table. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	61fb      	str	r3, [r7, #28]
 800b700:	e067      	b.n	800b7d2 <vARPRefreshCacheEntry+0x11a>
        {
            BaseType_t xMatchingMAC;

            if( pxMACAddress != NULL )
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d015      	beq.n	800b734 <vARPRefreshCacheEntry+0x7c>
            {
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 800b708:	69fa      	ldr	r2, [r7, #28]
 800b70a:	4613      	mov	r3, r2
 800b70c:	005b      	lsls	r3, r3, #1
 800b70e:	4413      	add	r3, r2
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	4a64      	ldr	r2, [pc, #400]	@ (800b8a4 <vARPRefreshCacheEntry+0x1ec>)
 800b714:	4413      	add	r3, r2
 800b716:	3304      	adds	r3, #4
 800b718:	6879      	ldr	r1, [r7, #4]
 800b71a:	2206      	movs	r2, #6
 800b71c:	4618      	mov	r0, r3
 800b71e:	f00a fa6a 	bl	8015bf6 <memcmp>
 800b722:	4603      	mov	r3, r0
 800b724:	2b00      	cmp	r3, #0
 800b726:	d102      	bne.n	800b72e <vARPRefreshCacheEntry+0x76>
                {
                    xMatchingMAC = pdTRUE;
 800b728:	2301      	movs	r3, #1
 800b72a:	60bb      	str	r3, [r7, #8]
 800b72c:	e004      	b.n	800b738 <vARPRefreshCacheEntry+0x80>
                }
                else
                {
                    xMatchingMAC = pdFALSE;
 800b72e:	2300      	movs	r3, #0
 800b730:	60bb      	str	r3, [r7, #8]
 800b732:	e001      	b.n	800b738 <vARPRefreshCacheEntry+0x80>
                }
            }
            else
            {
                xMatchingMAC = pdFALSE;
 800b734:	2300      	movs	r3, #0
 800b736:	60bb      	str	r3, [r7, #8]
            }

            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 800b738:	495a      	ldr	r1, [pc, #360]	@ (800b8a4 <vARPRefreshCacheEntry+0x1ec>)
 800b73a:	69fa      	ldr	r2, [r7, #28]
 800b73c:	4613      	mov	r3, r2
 800b73e:	005b      	lsls	r3, r3, #1
 800b740:	4413      	add	r3, r2
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	440b      	add	r3, r1
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	683a      	ldr	r2, [r7, #0]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d120      	bne.n	800b790 <vARPRefreshCacheEntry+0xd8>
            {
                if( pxMACAddress == NULL )
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d102      	bne.n	800b75a <vARPRefreshCacheEntry+0xa2>
                {
                    /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                     * indicate that there is an outstanding ARP request, This entry will have
                     * "ucValid == pdFALSE". */
                    xIpEntry = x;
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	61bb      	str	r3, [r7, #24]
                    break;
 800b758:	e03e      	b.n	800b7d8 <vARPRefreshCacheEntry+0x120>
                }

                /* See if the MAC-address also matches. */
                if( xMatchingMAC != pdFALSE )
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d014      	beq.n	800b78a <vARPRefreshCacheEntry+0xd2>
                {
                    /* This function will be called for each received packet
                     * As this is by far the most common path the coding standard
                     * is relaxed in this case and a return is permitted as an
                     * optimisation. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800b760:	4950      	ldr	r1, [pc, #320]	@ (800b8a4 <vARPRefreshCacheEntry+0x1ec>)
 800b762:	69fa      	ldr	r2, [r7, #28]
 800b764:	4613      	mov	r3, r2
 800b766:	005b      	lsls	r3, r3, #1
 800b768:	4413      	add	r3, r2
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	440b      	add	r3, r1
 800b76e:	330a      	adds	r3, #10
 800b770:	2296      	movs	r2, #150	@ 0x96
 800b772:	701a      	strb	r2, [r3, #0]
                    xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 800b774:	494b      	ldr	r1, [pc, #300]	@ (800b8a4 <vARPRefreshCacheEntry+0x1ec>)
 800b776:	69fa      	ldr	r2, [r7, #28]
 800b778:	4613      	mov	r3, r2
 800b77a:	005b      	lsls	r3, r3, #1
 800b77c:	4413      	add	r3, r2
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	440b      	add	r3, r1
 800b782:	330b      	adds	r3, #11
 800b784:	2201      	movs	r2, #1
 800b786:	701a      	strb	r2, [r3, #0]
                    return;
 800b788:	e085      	b.n	800b896 <vARPRefreshCacheEntry+0x1de>
                /* Found an entry containing ulIPAddress, but the MAC address
                 * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
                 * for an ARP reply.  Still want to see if there is match with the
                 * given MAC address.ucBytes.  If found, either of the two entries
                 * must be cleared. */
                xIpEntry = x;
 800b78a:	69fb      	ldr	r3, [r7, #28]
 800b78c:	61bb      	str	r3, [r7, #24]
 800b78e:	e01d      	b.n	800b7cc <vARPRefreshCacheEntry+0x114>
            }
            else if( xMatchingMAC != pdFALSE )
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d002      	beq.n	800b79c <vARPRefreshCacheEntry+0xe4>
                    if( bIsLocal[ 0 ] == bIsLocal[ 1 ] )
                    {
                        xMacEntry = x;
                    }
                #else /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
                    xMacEntry = x;
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	617b      	str	r3, [r7, #20]
 800b79a:	e017      	b.n	800b7cc <vARPRefreshCacheEntry+0x114>
                #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
            }

            /* _HT_
             * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
            else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 800b79c:	4941      	ldr	r1, [pc, #260]	@ (800b8a4 <vARPRefreshCacheEntry+0x1ec>)
 800b79e:	69fa      	ldr	r2, [r7, #28]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	005b      	lsls	r3, r3, #1
 800b7a4:	4413      	add	r3, r2
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	440b      	add	r3, r1
 800b7aa:	330a      	adds	r3, #10
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	7bfa      	ldrb	r2, [r7, #15]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d90b      	bls.n	800b7cc <vARPRefreshCacheEntry+0x114>
            {
                /* As the table is traversed, remember the table row that
                 * contains the oldest entry (the lowest age count, as ages are
                 * decremented to zero) so the row can be re-used if this function
                 * needs to add an entry that does not already exist. */
                ucMinAgeFound = xARPCache[ x ].ucAge;
 800b7b4:	493b      	ldr	r1, [pc, #236]	@ (800b8a4 <vARPRefreshCacheEntry+0x1ec>)
 800b7b6:	69fa      	ldr	r2, [r7, #28]
 800b7b8:	4613      	mov	r3, r2
 800b7ba:	005b      	lsls	r3, r3, #1
 800b7bc:	4413      	add	r3, r2
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	440b      	add	r3, r1
 800b7c2:	330a      	adds	r3, #10
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	73fb      	strb	r3, [r7, #15]
                xUseEntry = x;
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	613b      	str	r3, [r7, #16]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	61fb      	str	r3, [r7, #28]
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	2b05      	cmp	r3, #5
 800b7d6:	dd94      	ble.n	800b702 <vARPRefreshCacheEntry+0x4a>
            {
                /* Nothing happens to this cache entry for now. */
            }
        }

        if( xMacEntry >= 0 )
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	db11      	blt.n	800b802 <vARPRefreshCacheEntry+0x14a>
        {
            xUseEntry = xMacEntry;
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	613b      	str	r3, [r7, #16]

            if( xIpEntry >= 0 )
 800b7e2:	69bb      	ldr	r3, [r7, #24]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	db11      	blt.n	800b80c <vARPRefreshCacheEntry+0x154>
            {
                /* Both the MAC address as well as the IP address were found in
                 * different locations: clear the entry which matches the
                 * IP-address */
                ( void ) memset( &( xARPCache[ xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 800b7e8:	69ba      	ldr	r2, [r7, #24]
 800b7ea:	4613      	mov	r3, r2
 800b7ec:	005b      	lsls	r3, r3, #1
 800b7ee:	4413      	add	r3, r2
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	4a2c      	ldr	r2, [pc, #176]	@ (800b8a4 <vARPRefreshCacheEntry+0x1ec>)
 800b7f4:	4413      	add	r3, r2
 800b7f6:	220c      	movs	r2, #12
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f00a fa25 	bl	8015c4a <memset>
 800b800:	e004      	b.n	800b80c <vARPRefreshCacheEntry+0x154>
            }
        }
        else if( xIpEntry >= 0 )
 800b802:	69bb      	ldr	r3, [r7, #24]
 800b804:	2b00      	cmp	r3, #0
 800b806:	db01      	blt.n	800b80c <vARPRefreshCacheEntry+0x154>
        {
            /* An entry containing the IP-address was found, but it had a different MAC address */
            xUseEntry = xIpEntry;
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	613b      	str	r3, [r7, #16]
        {
            /* No matching entry found. */
        }

        /* If the entry was not found, we use the oldest entry and set the IPaddress */
        xARPCache[ xUseEntry ].ulIPAddress = ulIPAddress;
 800b80c:	4925      	ldr	r1, [pc, #148]	@ (800b8a4 <vARPRefreshCacheEntry+0x1ec>)
 800b80e:	693a      	ldr	r2, [r7, #16]
 800b810:	4613      	mov	r3, r2
 800b812:	005b      	lsls	r3, r3, #1
 800b814:	4413      	add	r3, r2
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	440b      	add	r3, r1
 800b81a:	683a      	ldr	r2, [r7, #0]
 800b81c:	601a      	str	r2, [r3, #0]

        if( pxMACAddress != NULL )
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d021      	beq.n	800b868 <vARPRefreshCacheEntry+0x1b0>
        {
            ( void ) memcpy( xARPCache[ xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 800b824:	693a      	ldr	r2, [r7, #16]
 800b826:	4613      	mov	r3, r2
 800b828:	005b      	lsls	r3, r3, #1
 800b82a:	4413      	add	r3, r2
 800b82c:	009b      	lsls	r3, r3, #2
 800b82e:	4a1d      	ldr	r2, [pc, #116]	@ (800b8a4 <vARPRefreshCacheEntry+0x1ec>)
 800b830:	4413      	add	r3, r2
 800b832:	3304      	adds	r3, #4
 800b834:	6879      	ldr	r1, [r7, #4]
 800b836:	2206      	movs	r2, #6
 800b838:	4618      	mov	r0, r3
 800b83a:	f00a fa82 	bl	8015d42 <memcpy>

            iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
            /* And this entry does not need immediate attention */
            xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800b83e:	4919      	ldr	r1, [pc, #100]	@ (800b8a4 <vARPRefreshCacheEntry+0x1ec>)
 800b840:	693a      	ldr	r2, [r7, #16]
 800b842:	4613      	mov	r3, r2
 800b844:	005b      	lsls	r3, r3, #1
 800b846:	4413      	add	r3, r2
 800b848:	009b      	lsls	r3, r3, #2
 800b84a:	440b      	add	r3, r1
 800b84c:	330a      	adds	r3, #10
 800b84e:	2296      	movs	r2, #150	@ 0x96
 800b850:	701a      	strb	r2, [r3, #0]
            xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 800b852:	4914      	ldr	r1, [pc, #80]	@ (800b8a4 <vARPRefreshCacheEntry+0x1ec>)
 800b854:	693a      	ldr	r2, [r7, #16]
 800b856:	4613      	mov	r3, r2
 800b858:	005b      	lsls	r3, r3, #1
 800b85a:	4413      	add	r3, r2
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	440b      	add	r3, r1
 800b860:	330b      	adds	r3, #11
 800b862:	2201      	movs	r2, #1
 800b864:	701a      	strb	r2, [r3, #0]
 800b866:	e016      	b.n	800b896 <vARPRefreshCacheEntry+0x1de>
        }
        else if( xIpEntry < 0 )
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	da13      	bge.n	800b896 <vARPRefreshCacheEntry+0x1de>
        {
            xARPCache[ xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 800b86e:	490d      	ldr	r1, [pc, #52]	@ (800b8a4 <vARPRefreshCacheEntry+0x1ec>)
 800b870:	693a      	ldr	r2, [r7, #16]
 800b872:	4613      	mov	r3, r2
 800b874:	005b      	lsls	r3, r3, #1
 800b876:	4413      	add	r3, r2
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	440b      	add	r3, r1
 800b87c:	330a      	adds	r3, #10
 800b87e:	2205      	movs	r2, #5
 800b880:	701a      	strb	r2, [r3, #0]
            xARPCache[ xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 800b882:	4908      	ldr	r1, [pc, #32]	@ (800b8a4 <vARPRefreshCacheEntry+0x1ec>)
 800b884:	693a      	ldr	r2, [r7, #16]
 800b886:	4613      	mov	r3, r2
 800b888:	005b      	lsls	r3, r3, #1
 800b88a:	4413      	add	r3, r2
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	440b      	add	r3, r1
 800b890:	330b      	adds	r3, #11
 800b892:	2200      	movs	r2, #0
 800b894:	701a      	strb	r2, [r3, #0]
        else
        {
            /* Nothing will be stored. */
        }
    }
}
 800b896:	3720      	adds	r7, #32
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	20000088 	.word	0x20000088
 800b8a0:	2000a2fc 	.word	0x2000a2fc
 800b8a4:	2000a284 	.word	0x2000a284

0800b8a8 <eARPGetCacheEntry>:
 *         addressing needs a gateway but there isn't a gateway defined) then return
 *         eCantSendPacket.
 */
eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                      MACAddress_t * const pxMACAddress )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
    eARPLookupResult_t eReturn;
    uint32_t ulAddressToLookup;

    ulAddressToLookup = *pulIPAddress;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	60bb      	str	r3, [r7, #8]
            eReturn = eARPCacheHit;
        }
        else
    #endif

    if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 800b8b8:	68b8      	ldr	r0, [r7, #8]
 800b8ba:	f001 fbd3 	bl	800d064 <xIsIPv4Multicast>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d006      	beq.n	800b8d2 <eARPGetCacheEntry+0x2a>
    {
        /* Get the lowest 23 bits of the IP-address. */
        vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 800b8c4:	6839      	ldr	r1, [r7, #0]
 800b8c6:	68b8      	ldr	r0, [r7, #8]
 800b8c8:	f001 fbf4 	bl	800d0b4 <vSetMultiCastIPv4MacAddress>

        eReturn = eARPCacheHit;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	73fb      	strb	r3, [r7, #15]
 800b8d0:	e047      	b.n	800b962 <eARPGetCacheEntry+0xba>
    }
    else if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||               /* Is it the general broadcast address 255.255.255.255? */
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8da:	d005      	beq.n	800b8e8 <eARPGetCacheEntry+0x40>
             ( *pulIPAddress == xNetworkAddressing.ulBroadcastAddress ) ) /* Or a local broadcast address, eg 192.168.1.255? */
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	4b22      	ldr	r3, [pc, #136]	@ (800b96c <eARPGetCacheEntry+0xc4>)
 800b8e2:	691b      	ldr	r3, [r3, #16]
    else if( ( *pulIPAddress == ipBROADCAST_IP_ADDRESS ) ||               /* Is it the general broadcast address 255.255.255.255? */
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d108      	bne.n	800b8fa <eARPGetCacheEntry+0x52>
    {
        /* This is a broadcast so it uses the broadcast MAC address. */
        ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	4a21      	ldr	r2, [pc, #132]	@ (800b970 <eARPGetCacheEntry+0xc8>)
 800b8ec:	6811      	ldr	r1, [r2, #0]
 800b8ee:	6019      	str	r1, [r3, #0]
 800b8f0:	8892      	ldrh	r2, [r2, #4]
 800b8f2:	809a      	strh	r2, [r3, #4]
        eReturn = eARPCacheHit;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	73fb      	strb	r3, [r7, #15]
 800b8f8:	e033      	b.n	800b962 <eARPGetCacheEntry+0xba>
    }
    else if( *ipLOCAL_IP_ADDRESS_POINTER == 0UL )
 800b8fa:	4b1e      	ldr	r3, [pc, #120]	@ (800b974 <eARPGetCacheEntry+0xcc>)
 800b8fc:	695b      	ldr	r3, [r3, #20]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d102      	bne.n	800b908 <eARPGetCacheEntry+0x60>
    {
        /* The IP address has not yet been assigned, so there is nothing that
         * can be done. */
        eReturn = eCantSendPacket;
 800b902:	2302      	movs	r3, #2
 800b904:	73fb      	strb	r3, [r7, #15]
 800b906:	e02c      	b.n	800b962 <eARPGetCacheEntry+0xba>
    }
    else
    {
        eReturn = eARPCacheMiss;
 800b908:	2300      	movs	r3, #0
 800b90a:	73fb      	strb	r3, [r7, #15]

        if( ( *pulIPAddress & xNetworkAddressing.ulNetMask ) != ( ( *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) )
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	4b18      	ldr	r3, [pc, #96]	@ (800b974 <eARPGetCacheEntry+0xcc>)
 800b912:	695b      	ldr	r3, [r3, #20]
 800b914:	405a      	eors	r2, r3
 800b916:	4b15      	ldr	r3, [pc, #84]	@ (800b96c <eARPGetCacheEntry+0xc4>)
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	4013      	ands	r3, r2
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00b      	beq.n	800b938 <eARPGetCacheEntry+0x90>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                if( xNetworkAddressing.ulGatewayAddress != ( uint32_t ) 0U )
 800b920:	4b12      	ldr	r3, [pc, #72]	@ (800b96c <eARPGetCacheEntry+0xc4>)
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d003      	beq.n	800b930 <eARPGetCacheEntry+0x88>
                {
                    ulAddressToLookup = xNetworkAddressing.ulGatewayAddress;
 800b928:	4b10      	ldr	r3, [pc, #64]	@ (800b96c <eARPGetCacheEntry+0xc4>)
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	60bb      	str	r3, [r7, #8]
 800b92e:	e006      	b.n	800b93e <eARPGetCacheEntry+0x96>
                }
                else
                {
                    ulAddressToLookup = *pulIPAddress;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	60bb      	str	r3, [r7, #8]
 800b936:	e002      	b.n	800b93e <eARPGetCacheEntry+0x96>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	60bb      	str	r3, [r7, #8]
            if( eReturn == eARPCacheMiss ) /*lint !e774: (Info -- Boolean within 'if' always evaluates to True, depending on configuration. */
        #else
            /* No cache look-up was done, so the result is still 'eARPCacheMiss'. */
        #endif
        {
            if( ulAddressToLookup == 0UL )
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d102      	bne.n	800b94a <eARPGetCacheEntry+0xa2>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eCantSendPacket;
 800b944:	2302      	movs	r3, #2
 800b946:	73fb      	strb	r3, [r7, #15]
 800b948:	e00b      	b.n	800b962 <eARPGetCacheEntry+0xba>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress );
 800b94a:	6839      	ldr	r1, [r7, #0]
 800b94c:	68b8      	ldr	r0, [r7, #8]
 800b94e:	f000 f813 	bl	800b978 <prvCacheLookup>
 800b952:	4603      	mov	r3, r0
 800b954:	73fb      	strb	r3, [r7, #15]

                if( eReturn == eARPCacheMiss )
 800b956:	7bfb      	ldrb	r3, [r7, #15]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d102      	bne.n	800b962 <eARPGetCacheEntry+0xba>
                {
                    /* It might be that the ARP has to go to the gateway. */
                    *pulIPAddress = ulAddressToLookup;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	68ba      	ldr	r2, [r7, #8]
 800b960:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }

    return eReturn;
 800b962:	7bfb      	ldrb	r3, [r7, #15]
}
 800b964:	4618      	mov	r0, r3
 800b966:	3710      	adds	r7, #16
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	2000a2fc 	.word	0x2000a2fc
 800b970:	08016f4c 	.word	0x08016f4c
 800b974:	20000088 	.word	0x20000088

0800b978 <prvCacheLookup>:
 * @return When the IP-address is found: eARPCacheHit, when not found: eARPCacheMiss,
 *         and when waiting for a ARP reply: eCantSendPacket.
 */
static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                          MACAddress_t * const pxMACAddress )
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
    BaseType_t x;
    eARPLookupResult_t eReturn = eARPCacheMiss;
 800b982:	2300      	movs	r3, #0
 800b984:	72fb      	strb	r3, [r7, #11]

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800b986:	2300      	movs	r3, #0
 800b988:	60fb      	str	r3, [r7, #12]
 800b98a:	e02b      	b.n	800b9e4 <prvCacheLookup+0x6c>
    {
        /* Does this row in the ARP cache table hold an entry for the IP address
         * being queried? */
        if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 800b98c:	4919      	ldr	r1, [pc, #100]	@ (800b9f4 <prvCacheLookup+0x7c>)
 800b98e:	68fa      	ldr	r2, [r7, #12]
 800b990:	4613      	mov	r3, r2
 800b992:	005b      	lsls	r3, r3, #1
 800b994:	4413      	add	r3, r2
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	440b      	add	r3, r1
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d11d      	bne.n	800b9de <prvCacheLookup+0x66>
        {
            /* A matching valid entry was found. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800b9a2:	4914      	ldr	r1, [pc, #80]	@ (800b9f4 <prvCacheLookup+0x7c>)
 800b9a4:	68fa      	ldr	r2, [r7, #12]
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	005b      	lsls	r3, r3, #1
 800b9aa:	4413      	add	r3, r2
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	440b      	add	r3, r1
 800b9b0:	330b      	adds	r3, #11
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d102      	bne.n	800b9be <prvCacheLookup+0x46>
            {
                /* This entry is waiting an ARP reply, so is not valid. */
                eReturn = eCantSendPacket;
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	72fb      	strb	r3, [r7, #11]
                /* A valid entry was found. */
                ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
                eReturn = eARPCacheHit;
            }

            break;
 800b9bc:	e015      	b.n	800b9ea <prvCacheLookup+0x72>
                ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800b9be:	6838      	ldr	r0, [r7, #0]
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	005b      	lsls	r3, r3, #1
 800b9c6:	4413      	add	r3, r2
 800b9c8:	009b      	lsls	r3, r3, #2
 800b9ca:	4a0a      	ldr	r2, [pc, #40]	@ (800b9f4 <prvCacheLookup+0x7c>)
 800b9cc:	4413      	add	r3, r2
 800b9ce:	3304      	adds	r3, #4
 800b9d0:	2206      	movs	r2, #6
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	f00a f9b5 	bl	8015d42 <memcpy>
                eReturn = eARPCacheHit;
 800b9d8:	2301      	movs	r3, #1
 800b9da:	72fb      	strb	r3, [r7, #11]
            break;
 800b9dc:	e005      	b.n	800b9ea <prvCacheLookup+0x72>
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	60fb      	str	r3, [r7, #12]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2b05      	cmp	r3, #5
 800b9e8:	ddd0      	ble.n	800b98c <prvCacheLookup+0x14>
        }
    }

    return eReturn;
 800b9ea:	7afb      	ldrb	r3, [r7, #11]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	2000a284 	.word	0x2000a284

0800b9f8 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
void vARPAgeCache( void )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
    BaseType_t x;
    TickType_t xTimeNow;

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800b9fe:	2300      	movs	r3, #0
 800ba00:	607b      	str	r3, [r7, #4]
 800ba02:	e063      	b.n	800bacc <vARPAgeCache+0xd4>
    {
        /* If the entry is valid (its age is greater than zero). */
        if( xARPCache[ x ].ucAge > 0U )
 800ba04:	4940      	ldr	r1, [pc, #256]	@ (800bb08 <vARPAgeCache+0x110>)
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	4613      	mov	r3, r2
 800ba0a:	005b      	lsls	r3, r3, #1
 800ba0c:	4413      	add	r3, r2
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	440b      	add	r3, r1
 800ba12:	330a      	adds	r3, #10
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d055      	beq.n	800bac6 <vARPAgeCache+0xce>
        {
            /* Decrement the age value of the entry in this ARP cache table row.
             * When the age reaches zero it is no longer considered valid. */
            ( xARPCache[ x ].ucAge )--;
 800ba1a:	493b      	ldr	r1, [pc, #236]	@ (800bb08 <vARPAgeCache+0x110>)
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	4613      	mov	r3, r2
 800ba20:	005b      	lsls	r3, r3, #1
 800ba22:	4413      	add	r3, r2
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	440b      	add	r3, r1
 800ba28:	330a      	adds	r3, #10
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	b2d8      	uxtb	r0, r3
 800ba30:	4935      	ldr	r1, [pc, #212]	@ (800bb08 <vARPAgeCache+0x110>)
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	4613      	mov	r3, r2
 800ba36:	005b      	lsls	r3, r3, #1
 800ba38:	4413      	add	r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	440b      	add	r3, r1
 800ba3e:	330a      	adds	r3, #10
 800ba40:	4602      	mov	r2, r0
 800ba42:	701a      	strb	r2, [r3, #0]

            /* If the entry is not yet valid, then it is waiting an ARP
             * reply, and the ARP request should be retransmitted. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800ba44:	4930      	ldr	r1, [pc, #192]	@ (800bb08 <vARPAgeCache+0x110>)
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	4613      	mov	r3, r2
 800ba4a:	005b      	lsls	r3, r3, #1
 800ba4c:	4413      	add	r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	440b      	add	r3, r1
 800ba52:	330b      	adds	r3, #11
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10b      	bne.n	800ba72 <vARPAgeCache+0x7a>
            {
                FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 800ba5a:	492b      	ldr	r1, [pc, #172]	@ (800bb08 <vARPAgeCache+0x110>)
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	4613      	mov	r3, r2
 800ba60:	005b      	lsls	r3, r3, #1
 800ba62:	4413      	add	r3, r2
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	440b      	add	r3, r1
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f000 f85e 	bl	800bb2c <FreeRTOS_OutputARPRequest>
 800ba70:	e015      	b.n	800ba9e <vARPAgeCache+0xa6>
            }
            else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 800ba72:	4925      	ldr	r1, [pc, #148]	@ (800bb08 <vARPAgeCache+0x110>)
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	4613      	mov	r3, r2
 800ba78:	005b      	lsls	r3, r3, #1
 800ba7a:	4413      	add	r3, r2
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	440b      	add	r3, r1
 800ba80:	330a      	adds	r3, #10
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	2b03      	cmp	r3, #3
 800ba86:	d80a      	bhi.n	800ba9e <vARPAgeCache+0xa6>
            {
                /* This entry will get removed soon.  See if the MAC address is
                 * still valid to prevent this happening. */
                iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 800ba88:	491f      	ldr	r1, [pc, #124]	@ (800bb08 <vARPAgeCache+0x110>)
 800ba8a:	687a      	ldr	r2, [r7, #4]
 800ba8c:	4613      	mov	r3, r2
 800ba8e:	005b      	lsls	r3, r3, #1
 800ba90:	4413      	add	r3, r2
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	440b      	add	r3, r1
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f000 f847 	bl	800bb2c <FreeRTOS_OutputARPRequest>
            else
            {
                /* The age has just ticked down, with nothing to do. */
            }

            if( xARPCache[ x ].ucAge == 0U )
 800ba9e:	491a      	ldr	r1, [pc, #104]	@ (800bb08 <vARPAgeCache+0x110>)
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	4613      	mov	r3, r2
 800baa4:	005b      	lsls	r3, r3, #1
 800baa6:	4413      	add	r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	440b      	add	r3, r1
 800baac:	330a      	adds	r3, #10
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d108      	bne.n	800bac6 <vARPAgeCache+0xce>
            {
                /* The entry is no longer valid.  Wipe it out. */
                iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                xARPCache[ x ].ulIPAddress = 0UL;
 800bab4:	4914      	ldr	r1, [pc, #80]	@ (800bb08 <vARPAgeCache+0x110>)
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	4613      	mov	r3, r2
 800baba:	005b      	lsls	r3, r3, #1
 800babc:	4413      	add	r3, r2
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	440b      	add	r3, r1
 800bac2:	2200      	movs	r2, #0
 800bac4:	601a      	str	r2, [r3, #0]
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	3301      	adds	r3, #1
 800baca:	607b      	str	r3, [r7, #4]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2b05      	cmp	r3, #5
 800bad0:	dd98      	ble.n	800ba04 <vARPAgeCache+0xc>
            }
        }
    }

    xTimeNow = xTaskGetTickCount();
 800bad2:	f7fd fe89 	bl	80097e8 <xTaskGetTickCount>
 800bad6:	6038      	str	r0, [r7, #0]

    if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 800bad8:	4b0c      	ldr	r3, [pc, #48]	@ (800bb0c <vARPAgeCache+0x114>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d007      	beq.n	800baf0 <vARPAgeCache+0xf8>
 800bae0:	4b0a      	ldr	r3, [pc, #40]	@ (800bb0c <vARPAgeCache+0x114>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	683a      	ldr	r2, [r7, #0]
 800bae6:	1ad3      	subs	r3, r2, r3
 800bae8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800baec:	4293      	cmp	r3, r2
 800baee:	d907      	bls.n	800bb00 <vARPAgeCache+0x108>
    {
        FreeRTOS_OutputARPRequest( *ipLOCAL_IP_ADDRESS_POINTER );
 800baf0:	4b07      	ldr	r3, [pc, #28]	@ (800bb10 <vARPAgeCache+0x118>)
 800baf2:	695b      	ldr	r3, [r3, #20]
 800baf4:	4618      	mov	r0, r3
 800baf6:	f000 f819 	bl	800bb2c <FreeRTOS_OutputARPRequest>
        xLastGratuitousARPTime = xTimeNow;
 800bafa:	4a04      	ldr	r2, [pc, #16]	@ (800bb0c <vARPAgeCache+0x114>)
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	6013      	str	r3, [r2, #0]
    }
}
 800bb00:	bf00      	nop
 800bb02:	3708      	adds	r7, #8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	2000a284 	.word	0x2000a284
 800bb0c:	2000a2cc 	.word	0x2000a2cc
 800bb10:	20000088 	.word	0x20000088

0800bb14 <vARPSendGratuitous>:
/**
 * @brief Send a Gratuitous ARP packet to allow this node to announce the IP-MAC
 *        mapping to the entire network.
 */
void vARPSendGratuitous( void )
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	af00      	add	r7, sp, #0
    /* Setting xLastGratuitousARPTime to 0 will force a gratuitous ARP the next
     * time vARPAgeCache() is called. */
    xLastGratuitousARPTime = ( TickType_t ) 0;
 800bb18:	4b03      	ldr	r3, [pc, #12]	@ (800bb28 <vARPSendGratuitous+0x14>)
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	601a      	str	r2, [r3, #0]

    /* Let the IP-task call vARPAgeCache(). */
    ( void ) xSendEventToIPTask( eARPTimerEvent );
 800bb1e:	2003      	movs	r0, #3
 800bb20:	f001 f93e 	bl	800cda0 <xSendEventToIPTask>
}
 800bb24:	bf00      	nop
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	2000a2cc 	.word	0x2000a2cc

0800bb2c <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress: A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b086      	sub	sp, #24
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    /* This is called from the context of the IP event task, so a block time
     * must not be used. */
    pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 800bb34:	2100      	movs	r1, #0
 800bb36:	202c      	movs	r0, #44	@ 0x2c
 800bb38:	f008 fc2a 	bl	8014390 <pxGetNetworkBufferWithDescriptor>
 800bb3c:	6178      	str	r0, [r7, #20]

    if( pxNetworkBuffer != NULL )
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d020      	beq.n	800bb86 <FreeRTOS_OutputARPRequest+0x5a>
    {
        pxNetworkBuffer->ulIPAddress = ulIPAddress;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	615a      	str	r2, [r3, #20]
        vARPGenerateRequestPacket( pxNetworkBuffer );
 800bb4a:	6978      	ldr	r0, [r7, #20]
 800bb4c:	f000 f820 	bl	800bb90 <vARPGenerateRequestPacket>
                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
                }
            }
        #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */

        if( xIsCallingFromIPTask() != 0 )
 800bb50:	f000 feba 	bl	800c8c8 <xIsCallingFromIPTask>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d004      	beq.n	800bb64 <FreeRTOS_OutputARPRequest+0x38>
        {
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            /* Only the IP-task is allowed to call this function directly. */
            ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 800bb5a:	2101      	movs	r1, #1
 800bb5c:	6978      	ldr	r0, [r7, #20]
 800bb5e:	f007 fc73 	bl	8013448 <xNetworkInterfaceOutput>
                /* Failed to send the message, so release the network buffer. */
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
            }
        }
    }
}
 800bb62:	e010      	b.n	800bb86 <FreeRTOS_OutputARPRequest+0x5a>
            xSendEvent.eEventType = eNetworkTxEvent;
 800bb64:	2302      	movs	r3, #2
 800bb66:	733b      	strb	r3, [r7, #12]
            xSendEvent.pvData = pxNetworkBuffer;
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	613b      	str	r3, [r7, #16]
            if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800bb6c:	f107 030c 	add.w	r3, r7, #12
 800bb70:	f04f 31ff 	mov.w	r1, #4294967295
 800bb74:	4618      	mov	r0, r3
 800bb76:	f001 f929 	bl	800cdcc <xSendEventStructToIPTask>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d102      	bne.n	800bb86 <FreeRTOS_OutputARPRequest+0x5a>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800bb80:	6978      	ldr	r0, [r7, #20]
 800bb82:	f008 fc55 	bl	8014430 <vReleaseNetworkBufferAndDescriptor>
}
 800bb86:	bf00      	nop
 800bb88:	3718      	adds	r7, #24
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
	...

0800bb90 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer: Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b088      	sub	sp, #32
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
    void * pvCopyDest;

    /* Buffer allocation ensures that buffers always have space
     * for an ARP packet. See buffer allocation implementations 1
     * and 2 under portable/BufferManagement. */
    configASSERT( pxNetworkBuffer != NULL );
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10d      	bne.n	800bbba <vARPGenerateRequestPacket+0x2a>
	__asm volatile
 800bb9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba2:	b672      	cpsid	i
 800bba4:	f383 8811 	msr	BASEPRI, r3
 800bba8:	f3bf 8f6f 	isb	sy
 800bbac:	f3bf 8f4f 	dsb	sy
 800bbb0:	b662      	cpsie	i
 800bbb2:	613b      	str	r3, [r7, #16]
}
 800bbb4:	bf00      	nop
 800bbb6:	bf00      	nop
 800bbb8:	e7fd      	b.n	800bbb6 <vARPGenerateRequestPacket+0x26>
    configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	69db      	ldr	r3, [r3, #28]
 800bbbe:	2b2b      	cmp	r3, #43	@ 0x2b
 800bbc0:	d80d      	bhi.n	800bbde <vARPGenerateRequestPacket+0x4e>
	__asm volatile
 800bbc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc6:	b672      	cpsid	i
 800bbc8:	f383 8811 	msr	BASEPRI, r3
 800bbcc:	f3bf 8f6f 	isb	sy
 800bbd0:	f3bf 8f4f 	dsb	sy
 800bbd4:	b662      	cpsie	i
 800bbd6:	60fb      	str	r3, [r7, #12]
}
 800bbd8:	bf00      	nop
 800bbda:	bf00      	nop
 800bbdc:	e7fd      	b.n	800bbda <vARPGenerateRequestPacket+0x4a>

    pxARPPacket = ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	699b      	ldr	r3, [r3, #24]
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7ff fcd6 	bl	800b594 <vCastPointerTo_ARPPacket_t>
 800bbe8:	61f8      	str	r0, [r7, #28]
    /*
     * Use helper variables for memcpy() to remain
     * compliant with MISRA Rule 21.15.  These should be
     * optimized away.
     */
    pvCopySource = xDefaultPartARPPacketHeader;
 800bbea:	4b19      	ldr	r3, [pc, #100]	@ (800bc50 <vARPGenerateRequestPacket+0xc0>)
 800bbec:	61bb      	str	r3, [r7, #24]
    pvCopyDest = pxARPPacket;
 800bbee:	69fb      	ldr	r3, [r7, #28]
 800bbf0:	617b      	str	r3, [r7, #20]
    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 800bbf2:	2226      	movs	r2, #38	@ 0x26
 800bbf4:	69b9      	ldr	r1, [r7, #24]
 800bbf6:	6978      	ldr	r0, [r7, #20]
 800bbf8:	f00a f8a3 	bl	8015d42 <memcpy>

    pvCopySource = ipLOCAL_MAC_ADDRESS;
 800bbfc:	4b15      	ldr	r3, [pc, #84]	@ (800bc54 <vARPGenerateRequestPacket+0xc4>)
 800bbfe:	61bb      	str	r3, [r7, #24]
    pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	3306      	adds	r3, #6
 800bc04:	617b      	str	r3, [r7, #20]
    ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 800bc06:	2206      	movs	r2, #6
 800bc08:	69b9      	ldr	r1, [r7, #24]
 800bc0a:	6978      	ldr	r0, [r7, #20]
 800bc0c:	f00a f899 	bl	8015d42 <memcpy>

    pvCopySource = ipLOCAL_MAC_ADDRESS;
 800bc10:	4b10      	ldr	r3, [pc, #64]	@ (800bc54 <vARPGenerateRequestPacket+0xc4>)
 800bc12:	61bb      	str	r3, [r7, #24]
    pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	3318      	adds	r3, #24
 800bc18:	617b      	str	r3, [r7, #20]
    ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 800bc1a:	2206      	movs	r2, #6
 800bc1c:	69b9      	ldr	r1, [r7, #24]
 800bc1e:	6978      	ldr	r0, [r7, #20]
 800bc20:	f00a f88f 	bl	8015d42 <memcpy>

    pvCopySource = ipLOCAL_IP_ADDRESS_POINTER;
 800bc24:	4b0c      	ldr	r3, [pc, #48]	@ (800bc58 <vARPGenerateRequestPacket+0xc8>)
 800bc26:	61bb      	str	r3, [r7, #24]
    pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 800bc28:	69fb      	ldr	r3, [r7, #28]
 800bc2a:	331e      	adds	r3, #30
 800bc2c:	617b      	str	r3, [r7, #20]
    ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	461a      	mov	r2, r3
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	601a      	str	r2, [r3, #0]
    pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->ulIPAddress;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	695a      	ldr	r2, [r3, #20]
 800bc3c:	69fb      	ldr	r3, [r7, #28]
 800bc3e:	629a      	str	r2, [r3, #40]	@ 0x28

    pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	222c      	movs	r2, #44	@ 0x2c
 800bc44:	61da      	str	r2, [r3, #28]

    iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->ulIPAddress );
}
 800bc46:	bf00      	nop
 800bc48:	3720      	adds	r7, #32
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	08016ef4 	.word	0x08016ef4
 800bc54:	20000088 	.word	0x20000088
 800bc58:	2000009c 	.word	0x2000009c

0800bc5c <FreeRTOS_ClearARP>:

/**
 * @brief A call to this function will clear the ARP cache.
 */
void FreeRTOS_ClearARP( void )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	af00      	add	r7, sp, #0
    ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 800bc60:	2248      	movs	r2, #72	@ 0x48
 800bc62:	2100      	movs	r1, #0
 800bc64:	4802      	ldr	r0, [pc, #8]	@ (800bc70 <FreeRTOS_ClearARP+0x14>)
 800bc66:	f009 fff0 	bl	8015c4a <memset>
}
 800bc6a:	bf00      	nop
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	2000a284 	.word	0x2000a284

0800bc74 <vCastPointerTo_DHCPMessage_IPv4_t>:

/**
 * @brief Function to cast pointers to DHCPMessage_IPv4_t.
 */
    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( DHCPMessage_IPv4_t )
    {
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
        return ( DHCPMessage_IPv4_t * ) pvArgument;
 800bc7c:	687b      	ldr	r3, [r7, #4]
    }
 800bc7e:	4618      	mov	r0, r3
 800bc80:	370c      	adds	r7, #12
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr

0800bc8a <vCastConstPointerTo_DHCPMessage_IPv4_t>:

/**
 * @brief Function to cast const pointers to DHCPMessage_IPv4_t.
 */
    static portINLINE ipDECL_CAST_CONST_PTR_FUNC_FOR_TYPE( DHCPMessage_IPv4_t )
    {
 800bc8a:	b480      	push	{r7}
 800bc8c:	b083      	sub	sp, #12
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
        return ( const DHCPMessage_IPv4_t * ) pvArgument;
 800bc92:	687b      	ldr	r3, [r7, #4]
    }
 800bc94:	4618      	mov	r0, r3
 800bc96:	370c      	adds	r7, #12
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <xIsDHCPSocket>:
 *
 * @return If the socket given as parameter is the DHCP socket - return
 *         pdTRUE, else pdFALSE.
 */
    BaseType_t xIsDHCPSocket( Socket_t xSocket )
    {
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;

        if( xDHCPSocket == xSocket )
 800bca8:	4b08      	ldr	r3, [pc, #32]	@ (800bccc <xIsDHCPSocket+0x2c>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d102      	bne.n	800bcb8 <xIsDHCPSocket+0x18>
        {
            xReturn = pdTRUE;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	60fb      	str	r3, [r7, #12]
 800bcb6:	e001      	b.n	800bcbc <xIsDHCPSocket+0x1c>
        }
        else
        {
            xReturn = pdFALSE;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
    }
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3714      	adds	r7, #20
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	2000a2d0 	.word	0x2000a2d0

0800bcd0 <eGetDHCPState>:
 * @brief Returns the current state of a DHCP process.
 *
 * @return The current state ( eDHCPState_t ) of the DHCP process.
 */
    eDHCPState_t eGetDHCPState( void )
    {
 800bcd0:	b480      	push	{r7}
 800bcd2:	af00      	add	r7, sp, #0
        return EP_DHCPData.eDHCPState;
 800bcd4:	4b03      	ldr	r3, [pc, #12]	@ (800bce4 <eGetDHCPState+0x14>)
 800bcd6:	7f1b      	ldrb	r3, [r3, #28]
    }
 800bcd8:	4618      	mov	r0, r3
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	2000a2d4 	.word	0x2000a2d4

0800bce8 <vDHCPProcess>:
 * @param[in] xReset: Is the DHCP state machine starting over? pdTRUE/pdFALSE.
 * @param[in] eExpectedState: The function will only run if the state is expected.
 */
    void vDHCPProcess( BaseType_t xReset,
                       eDHCPState_t eExpectedState )
    {
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	70fb      	strb	r3, [r7, #3]
        BaseType_t xGivingUp = pdFALSE;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	60fb      	str	r3, [r7, #12]
        #if ( ipconfigUSE_DHCP_HOOK != 0 )
            eDHCPCallbackAnswer_t eAnswer;
        #endif /* ipconfigUSE_DHCP_HOOK */

        /* Is DHCP starting over? */
        if( xReset != pdFALSE )
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d002      	beq.n	800bd04 <vDHCPProcess+0x1c>
        {
            EP_DHCPData.eDHCPState = eInitialWait;
 800bcfe:	4ba3      	ldr	r3, [pc, #652]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bd00:	2200      	movs	r2, #0
 800bd02:	771a      	strb	r2, [r3, #28]
        }

        if( ( EP_DHCPData.eDHCPState != eExpectedState ) && ( xReset == pdFALSE ) )
 800bd04:	4ba1      	ldr	r3, [pc, #644]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bd06:	7f1b      	ldrb	r3, [r3, #28]
 800bd08:	78fa      	ldrb	r2, [r7, #3]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d003      	beq.n	800bd16 <vDHCPProcess+0x2e>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	f000 815e 	beq.w	800bfd2 <vDHCPProcess+0x2ea>
            FreeRTOS_debug_printf( ( "DHCP wrong state: expect: %d got: %d : ignore\n",
                                     eExpectedState, EP_DHCPData.eDHCPState ) );
        }
        else
        {
            switch( EP_DHCPData.eDHCPState )
 800bd16:	4b9d      	ldr	r3, [pc, #628]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bd18:	7f1b      	ldrb	r3, [r3, #28]
 800bd1a:	2b06      	cmp	r3, #6
 800bd1c:	f200 812c 	bhi.w	800bf78 <vDHCPProcess+0x290>
 800bd20:	a201      	add	r2, pc, #4	@ (adr r2, 800bd28 <vDHCPProcess+0x40>)
 800bd22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd26:	bf00      	nop
 800bd28:	0800bd45 	.word	0x0800bd45
 800bd2c:	0800bd51 	.word	0x0800bd51
 800bd30:	0800bda9 	.word	0x0800bda9
 800bd34:	0800be57 	.word	0x0800be57
 800bd38:	0800bd83 	.word	0x0800bd83
 800bd3c:	0800bf09 	.word	0x0800bf09
 800bd40:	0800bf71 	.word	0x0800bf71
            {
                case eInitialWait:

                    /* Initial state.  Create the DHCP socket, timer, etc. if they
                     * have not already been created. */
                    prvInitialiseDHCP();
 800bd44:	f000 f9a4 	bl	800c090 <prvInitialiseDHCP>
                    EP_DHCPData.eDHCPState = eWaitingSendFirstDiscover;
 800bd48:	4b90      	ldr	r3, [pc, #576]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	771a      	strb	r2, [r3, #28]
                    break;
 800bd4e:	e12a      	b.n	800bfa6 <vDHCPProcess+0x2be>

                        if( eAnswer == eDHCPContinue )
                    #endif /* ipconfigUSE_DHCP_HOOK */
                    {
                        /* See if prvInitialiseDHCP() has creates a socket. */
                        if( xDHCPSocket == NULL )
 800bd50:	4b8f      	ldr	r3, [pc, #572]	@ (800bf90 <vDHCPProcess+0x2a8>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d102      	bne.n	800bd5e <vDHCPProcess+0x76>
                        {
                            xGivingUp = pdTRUE;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	60fb      	str	r3, [r7, #12]

                            /* The user indicates that the DHCP process does not continue. */
                            xGivingUp = pdTRUE;
                        }
                    #endif /* ipconfigUSE_DHCP_HOOK */
                    break;
 800bd5c:	e10e      	b.n	800bf7c <vDHCPProcess+0x294>
                            *ipLOCAL_IP_ADDRESS_POINTER = 0UL;
 800bd5e:	4b8d      	ldr	r3, [pc, #564]	@ (800bf94 <vDHCPProcess+0x2ac>)
 800bd60:	2200      	movs	r2, #0
 800bd62:	615a      	str	r2, [r3, #20]
                            EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 800bd64:	f7fd fd40 	bl	80097e8 <xTaskGetTickCount>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	4a88      	ldr	r2, [pc, #544]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bd6c:	6113      	str	r3, [r2, #16]
                            if( prvSendDHCPDiscover() == pdPASS )
 800bd6e:	f000 fc11 	bl	800c594 <prvSendDHCPDiscover>
 800bd72:	4603      	mov	r3, r0
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	f040 8101 	bne.w	800bf7c <vDHCPProcess+0x294>
                                EP_DHCPData.eDHCPState = eWaitingOffer;
 800bd7a:	4b84      	ldr	r3, [pc, #528]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bd7c:	2202      	movs	r2, #2
 800bd7e:	771a      	strb	r2, [r3, #28]
                    break;
 800bd80:	e0fc      	b.n	800bf7c <vDHCPProcess+0x294>

                case eSendDHCPRequest:

                    if( prvSendDHCPRequest() == pdPASS )
 800bd82:	f000 fbbb 	bl	800c4fc <prvSendDHCPRequest>
 800bd86:	4603      	mov	r3, r0
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	f040 80f9 	bne.w	800bf80 <vDHCPProcess+0x298>
                    {
                        /* Send succeeded, go to state 'eWaitingAcknowledge'. */
                        EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 800bd8e:	f7fd fd2b 	bl	80097e8 <xTaskGetTickCount>
 800bd92:	4603      	mov	r3, r0
 800bd94:	4a7d      	ldr	r2, [pc, #500]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bd96:	6113      	str	r3, [r2, #16]
                        EP_DHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 800bd98:	4b7c      	ldr	r3, [pc, #496]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bd9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd9e:	615a      	str	r2, [r3, #20]
                        EP_DHCPData.eDHCPState = eWaitingAcknowledge;
 800bda0:	4b7a      	ldr	r3, [pc, #488]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bda2:	2203      	movs	r2, #3
 800bda4:	771a      	strb	r2, [r3, #28]
                        /* Either the creation of a message buffer failed, or sendto().
                         * Try again in the next cycle. */
                        FreeRTOS_debug_printf( ( "Send failed during eSendDHCPRequest.\n" ) );
                    }

                    break;
 800bda6:	e0eb      	b.n	800bf80 <vDHCPProcess+0x298>

                case eWaitingOffer:

                    xGivingUp = pdFALSE;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	60fb      	str	r3, [r7, #12]

                    /* Look for offers coming in. */
                    if( prvProcessDHCPReplies( dhcpMESSAGE_TYPE_OFFER ) == pdPASS )
 800bdac:	2002      	movs	r0, #2
 800bdae:	f000 f98d 	bl	800c0cc <prvProcessDHCPReplies>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d115      	bne.n	800bde4 <vDHCPProcess+0xfc>
                            if( eAnswer == eDHCPContinue )
                        #endif /* ipconfigUSE_DHCP_HOOK */
                        {
                            /* An offer has been made, the user wants to continue,
                             * generate the request. */
                            if( prvSendDHCPRequest() == pdPASS )
 800bdb8:	f000 fba0 	bl	800c4fc <prvSendDHCPRequest>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d10c      	bne.n	800bddc <vDHCPProcess+0xf4>
                            {
                                EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 800bdc2:	f7fd fd11 	bl	80097e8 <xTaskGetTickCount>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	4a70      	ldr	r2, [pc, #448]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bdca:	6113      	str	r3, [r2, #16]
                                EP_DHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 800bdcc:	4b6f      	ldr	r3, [pc, #444]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bdce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bdd2:	615a      	str	r2, [r3, #20]
                                EP_DHCPData.eDHCPState = eWaitingAcknowledge;
 800bdd4:	4b6d      	ldr	r3, [pc, #436]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bdd6:	2203      	movs	r2, #3
 800bdd8:	771a      	strb	r2, [r3, #28]
                                 * Try again in the next cycle. */
                                FreeRTOS_debug_printf( ( "Send failed during eWaitingOffer/1.\n" ) );
                                EP_DHCPData.eDHCPState = eSendDHCPRequest;
                            }

                            break;
 800bdda:	e0e4      	b.n	800bfa6 <vDHCPProcess+0x2be>
                                EP_DHCPData.eDHCPState = eSendDHCPRequest;
 800bddc:	4b6b      	ldr	r3, [pc, #428]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bdde:	2204      	movs	r2, #4
 800bde0:	771a      	strb	r2, [r3, #28]
                            break;
 800bde2:	e0e0      	b.n	800bfa6 <vDHCPProcess+0x2be>
                            xGivingUp = pdTRUE;
                        #endif /* ipconfigUSE_DHCP_HOOK */
                    }

                    /* Is it time to send another Discover? */
                    else if( ( xTaskGetTickCount() - EP_DHCPData.xDHCPTxTime ) > EP_DHCPData.xDHCPTxPeriod )
 800bde4:	f7fd fd00 	bl	80097e8 <xTaskGetTickCount>
 800bde8:	4602      	mov	r2, r0
 800bdea:	4b68      	ldr	r3, [pc, #416]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bdec:	691b      	ldr	r3, [r3, #16]
 800bdee:	1ad2      	subs	r2, r2, r3
 800bdf0:	4b66      	ldr	r3, [pc, #408]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bdf2:	695b      	ldr	r3, [r3, #20]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	f240 80c5 	bls.w	800bf84 <vDHCPProcess+0x29c>
                    {
                        /* It is time to send another Discover.  Increase the time
                         * period, and if it has not got to the point of giving up - send
                         * another discovery. */
                        EP_DHCPData.xDHCPTxPeriod <<= 1;
 800bdfa:	4b64      	ldr	r3, [pc, #400]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bdfc:	695b      	ldr	r3, [r3, #20]
 800bdfe:	005b      	lsls	r3, r3, #1
 800be00:	4a62      	ldr	r2, [pc, #392]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800be02:	6153      	str	r3, [r2, #20]

                        if( EP_DHCPData.xDHCPTxPeriod <= ( TickType_t ) ipconfigMAXIMUM_DISCOVER_TX_PERIOD )
 800be04:	4b61      	ldr	r3, [pc, #388]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800be06:	695b      	ldr	r3, [r3, #20]
 800be08:	4a63      	ldr	r2, [pc, #396]	@ (800bf98 <vDHCPProcess+0x2b0>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d820      	bhi.n	800be50 <vDHCPProcess+0x168>
                        {
                            if( xApplicationGetRandomNumber( &( EP_DHCPData.ulTransactionId ) ) != pdFALSE )
 800be0e:	485f      	ldr	r0, [pc, #380]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800be10:	f7f6 fb8f 	bl	8002532 <xApplicationGetRandomNumber>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	f000 80b4 	beq.w	800bf84 <vDHCPProcess+0x29c>
                            {
                                EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 800be1c:	f7fd fce4 	bl	80097e8 <xTaskGetTickCount>
 800be20:	4603      	mov	r3, r0
 800be22:	4a5a      	ldr	r2, [pc, #360]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800be24:	6113      	str	r3, [r2, #16]

                                if( EP_DHCPData.xUseBroadcast != pdFALSE )
 800be26:	4b59      	ldr	r3, [pc, #356]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800be28:	699b      	ldr	r3, [r3, #24]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d003      	beq.n	800be36 <vDHCPProcess+0x14e>
                                {
                                    EP_DHCPData.xUseBroadcast = pdFALSE;
 800be2e:	4b57      	ldr	r3, [pc, #348]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800be30:	2200      	movs	r2, #0
 800be32:	619a      	str	r2, [r3, #24]
 800be34:	e002      	b.n	800be3c <vDHCPProcess+0x154>
                                }
                                else
                                {
                                    EP_DHCPData.xUseBroadcast = pdTRUE;
 800be36:	4b55      	ldr	r3, [pc, #340]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800be38:	2201      	movs	r2, #1
 800be3a:	619a      	str	r2, [r3, #24]
                                }

                                if( prvSendDHCPDiscover() == pdPASS )
 800be3c:	f000 fbaa 	bl	800c594 <prvSendDHCPDiscover>
 800be40:	4603      	mov	r3, r0
 800be42:	2b01      	cmp	r3, #1
 800be44:	f000 809e 	beq.w	800bf84 <vDHCPProcess+0x29c>
                                else
                                {
                                    /* Either the creation of a message buffer failed, or sendto().
                                     * Try again in the next cycle. */
                                    FreeRTOS_debug_printf( ( "Send failed during eWaitingOffer/2.\n" ) );
                                    EP_DHCPData.eDHCPState = eInitialWait;
 800be48:	4b50      	ldr	r3, [pc, #320]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800be4a:	2200      	movs	r2, #0
 800be4c:	771a      	strb	r2, [r3, #28]
                    else
                    {
                        /* There was no DHCP reply, there was no time-out, just keep on waiting. */
                    }

                    break;
 800be4e:	e099      	b.n	800bf84 <vDHCPProcess+0x29c>
                                    xGivingUp = pdTRUE;
 800be50:	2301      	movs	r3, #1
 800be52:	60fb      	str	r3, [r7, #12]
                    break;
 800be54:	e096      	b.n	800bf84 <vDHCPProcess+0x29c>

                case eWaitingAcknowledge:

                    /* Look for acks coming in. */
                    if( prvProcessDHCPReplies( dhcpMESSAGE_TYPE_ACK ) == pdPASS )
 800be56:	2005      	movs	r0, #5
 800be58:	f000 f938 	bl	800c0cc <prvProcessDHCPReplies>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d12c      	bne.n	800bebc <vDHCPProcess+0x1d4>
                    {
                        FreeRTOS_debug_printf( ( "vDHCPProcess: acked %lxip\n", FreeRTOS_ntohl( EP_DHCPData.ulOfferedIPAddress ) ) );

                        /* DHCP completed.  The IP address can now be used, and the
                         * timer set to the lease timeout time. */
                        *ipLOCAL_IP_ADDRESS_POINTER = EP_DHCPData.ulOfferedIPAddress;
 800be62:	4b4a      	ldr	r3, [pc, #296]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	4a4b      	ldr	r2, [pc, #300]	@ (800bf94 <vDHCPProcess+0x2ac>)
 800be68:	6153      	str	r3, [r2, #20]

                        /* Setting the 'local' broadcast address, something like
                         * '192.168.1.255'. */
                        EP_IPv4_SETTINGS.ulBroadcastAddress = ( EP_DHCPData.ulOfferedIPAddress & xNetworkAddressing.ulNetMask ) | ~xNetworkAddressing.ulNetMask;
 800be6a:	4b48      	ldr	r3, [pc, #288]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800be6c:	685a      	ldr	r2, [r3, #4]
 800be6e:	4b4b      	ldr	r3, [pc, #300]	@ (800bf9c <vDHCPProcess+0x2b4>)
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	43db      	mvns	r3, r3
 800be74:	4313      	orrs	r3, r2
 800be76:	4a49      	ldr	r2, [pc, #292]	@ (800bf9c <vDHCPProcess+0x2b4>)
 800be78:	6113      	str	r3, [r2, #16]
                        EP_DHCPData.eDHCPState = eLeasedAddress;
 800be7a:	4b44      	ldr	r3, [pc, #272]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800be7c:	2205      	movs	r2, #5
 800be7e:	771a      	strb	r2, [r3, #28]
                        iptraceDHCP_SUCCEDEED( EP_DHCPData.ulOfferedIPAddress );

                        /* DHCP failed, the default configured IP-address will be used
                         * Now call vIPNetworkUpCalls() to send the network-up event and
                         * start the ARP timer. */
                        vIPNetworkUpCalls();
 800be80:	f001 f874 	bl	800cf6c <vIPNetworkUpCalls>

                        /* Close socket to ensure packets don't queue on it. */
                        prvCloseDHCPSocket();
 800be84:	f000 f8b0 	bl	800bfe8 <prvCloseDHCPSocket>

                        if( EP_DHCPData.ulLeaseTime == 0UL )
 800be88:	4b40      	ldr	r3, [pc, #256]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d103      	bne.n	800be98 <vDHCPProcess+0x1b0>
                        {
                            EP_DHCPData.ulLeaseTime = ( uint32_t ) dhcpDEFAULT_LEASE_TIME;
 800be90:	4b3e      	ldr	r3, [pc, #248]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800be92:	4a43      	ldr	r2, [pc, #268]	@ (800bfa0 <vDHCPProcess+0x2b8>)
 800be94:	60da      	str	r2, [r3, #12]
 800be96:	e009      	b.n	800beac <vDHCPProcess+0x1c4>
                        }
                        else if( EP_DHCPData.ulLeaseTime < dhcpMINIMUM_LEASE_TIME )
 800be98:	4b3c      	ldr	r3, [pc, #240]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d803      	bhi.n	800beac <vDHCPProcess+0x1c4>
                        {
                            EP_DHCPData.ulLeaseTime = dhcpMINIMUM_LEASE_TIME;
 800bea4:	4b39      	ldr	r3, [pc, #228]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bea6:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800beaa:	60da      	str	r2, [r3, #12]
                        {
                            /* The lease time is already valid. */
                        }

                        /* Check for clashes. */
                        vARPSendGratuitous();
 800beac:	f7ff fe32 	bl	800bb14 <vARPSendGratuitous>
                        vIPReloadDHCPTimer( EP_DHCPData.ulLeaseTime );
 800beb0:	4b36      	ldr	r3, [pc, #216]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	4618      	mov	r0, r3
 800beb6:	f001 fe1d 	bl	800daf4 <vIPReloadDHCPTimer>
                                EP_DHCPData.eDHCPState = eInitialWait;
                            }
                        }
                    }

                    break;
 800beba:	e065      	b.n	800bf88 <vDHCPProcess+0x2a0>
                        if( ( xTaskGetTickCount() - EP_DHCPData.xDHCPTxTime ) > EP_DHCPData.xDHCPTxPeriod )
 800bebc:	f7fd fc94 	bl	80097e8 <xTaskGetTickCount>
 800bec0:	4602      	mov	r2, r0
 800bec2:	4b32      	ldr	r3, [pc, #200]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	1ad2      	subs	r2, r2, r3
 800bec8:	4b30      	ldr	r3, [pc, #192]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800beca:	695b      	ldr	r3, [r3, #20]
 800becc:	429a      	cmp	r2, r3
 800bece:	d95b      	bls.n	800bf88 <vDHCPProcess+0x2a0>
                            EP_DHCPData.xDHCPTxPeriod <<= 1;
 800bed0:	4b2e      	ldr	r3, [pc, #184]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bed2:	695b      	ldr	r3, [r3, #20]
 800bed4:	005b      	lsls	r3, r3, #1
 800bed6:	4a2d      	ldr	r2, [pc, #180]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bed8:	6153      	str	r3, [r2, #20]
                            if( EP_DHCPData.xDHCPTxPeriod <= ( TickType_t ) ipconfigMAXIMUM_DISCOVER_TX_PERIOD )
 800beda:	4b2c      	ldr	r3, [pc, #176]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bedc:	695b      	ldr	r3, [r3, #20]
 800bede:	4a2e      	ldr	r2, [pc, #184]	@ (800bf98 <vDHCPProcess+0x2b0>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d80d      	bhi.n	800bf00 <vDHCPProcess+0x218>
                                EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 800bee4:	f7fd fc80 	bl	80097e8 <xTaskGetTickCount>
 800bee8:	4603      	mov	r3, r0
 800beea:	4a28      	ldr	r2, [pc, #160]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800beec:	6113      	str	r3, [r2, #16]
                                if( prvSendDHCPRequest() == pdPASS )
 800beee:	f000 fb05 	bl	800c4fc <prvSendDHCPRequest>
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d047      	beq.n	800bf88 <vDHCPProcess+0x2a0>
                                    EP_DHCPData.eDHCPState = eSendDHCPRequest;
 800bef8:	4b24      	ldr	r3, [pc, #144]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800befa:	2204      	movs	r2, #4
 800befc:	771a      	strb	r2, [r3, #28]
                    break;
 800befe:	e043      	b.n	800bf88 <vDHCPProcess+0x2a0>
                                EP_DHCPData.eDHCPState = eInitialWait;
 800bf00:	4b22      	ldr	r3, [pc, #136]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bf02:	2200      	movs	r2, #0
 800bf04:	771a      	strb	r2, [r3, #28]
                    break;
 800bf06:	e03f      	b.n	800bf88 <vDHCPProcess+0x2a0>
                            break;
                    #endif /* ipconfigDHCP_FALL_BACK_AUTO_IP */

                case eLeasedAddress:

                    if( FreeRTOS_IsNetworkUp() != 0 )
 800bf08:	f001 fe0e 	bl	800db28 <FreeRTOS_IsNetworkUp>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d029      	beq.n	800bf66 <vDHCPProcess+0x27e>
                    {
                        /* Resend the request at the appropriate time to renew the lease. */
                        prvCreateDHCPSocket();
 800bf12:	f000 f87b 	bl	800c00c <prvCreateDHCPSocket>

                        if( xDHCPSocket != NULL )
 800bf16:	4b1e      	ldr	r3, [pc, #120]	@ (800bf90 <vDHCPProcess+0x2a8>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d042      	beq.n	800bfa4 <vDHCPProcess+0x2bc>
                        {
                            uint32_t ulID;

                            if( xApplicationGetRandomNumber( &( ulID ) ) != pdFALSE )
 800bf1e:	f107 0308 	add.w	r3, r7, #8
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7f6 fb05 	bl	8002532 <xApplicationGetRandomNumber>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d002      	beq.n	800bf34 <vDHCPProcess+0x24c>
                            {
                                EP_DHCPData.ulTransactionId = ulID;
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	4a16      	ldr	r2, [pc, #88]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bf32:	6013      	str	r3, [r2, #0]
                            }

                            EP_DHCPData.xDHCPTxTime = xTaskGetTickCount();
 800bf34:	f7fd fc58 	bl	80097e8 <xTaskGetTickCount>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	4a14      	ldr	r2, [pc, #80]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bf3c:	6113      	str	r3, [r2, #16]
                            EP_DHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 800bf3e:	4b13      	ldr	r3, [pc, #76]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bf40:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf44:	615a      	str	r2, [r3, #20]

                            if( prvSendDHCPRequest() == pdPASS )
 800bf46:	f000 fad9 	bl	800c4fc <prvSendDHCPRequest>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d103      	bne.n	800bf58 <vDHCPProcess+0x270>
                            {
                                /* The packet was sent successfully, wait for an acknowledgement. */
                                EP_DHCPData.eDHCPState = eWaitingAcknowledge;
 800bf50:	4b0e      	ldr	r3, [pc, #56]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bf52:	2203      	movs	r2, #3
 800bf54:	771a      	strb	r2, [r3, #28]
 800bf56:	e002      	b.n	800bf5e <vDHCPProcess+0x276>
                            }
                            else
                            {
                                /* The packet was not sent, try sending it later. */
                                EP_DHCPData.eDHCPState = eSendDHCPRequest;
 800bf58:	4b0c      	ldr	r3, [pc, #48]	@ (800bf8c <vDHCPProcess+0x2a4>)
 800bf5a:	2204      	movs	r2, #4
 800bf5c:	771a      	strb	r2, [r3, #28]
                                FreeRTOS_debug_printf( ( "Send failed eLeasedAddress.\n" ) );
                            }

                            /* From now on, we should be called more often */
                            vIPReloadDHCPTimer( dhcpINITIAL_TIMER_PERIOD );
 800bf5e:	20fa      	movs	r0, #250	@ 0xfa
 800bf60:	f001 fdc8 	bl	800daf4 <vIPReloadDHCPTimer>
                        /* See PR #53 on github/freertos/freertos */
                        FreeRTOS_printf( ( "DHCP: lease time finished but network is down\n" ) );
                        vIPReloadDHCPTimer( pdMS_TO_TICKS( 5000U ) );
                    }

                    break;
 800bf64:	e01e      	b.n	800bfa4 <vDHCPProcess+0x2bc>
                        vIPReloadDHCPTimer( pdMS_TO_TICKS( 5000U ) );
 800bf66:	f241 3088 	movw	r0, #5000	@ 0x1388
 800bf6a:	f001 fdc3 	bl	800daf4 <vIPReloadDHCPTimer>
                    break;
 800bf6e:	e019      	b.n	800bfa4 <vDHCPProcess+0x2bc>

                case eNotUsingLeasedAddress:

                    vIPSetDHCPTimerEnableState( pdFALSE );
 800bf70:	2000      	movs	r0, #0
 800bf72:	f001 fda5 	bl	800dac0 <vIPSetDHCPTimerEnableState>
                    break;
 800bf76:	e016      	b.n	800bfa6 <vDHCPProcess+0x2be>

                default:
                    /* Lint: all options are included. */
                    break;
 800bf78:	bf00      	nop
 800bf7a:	e014      	b.n	800bfa6 <vDHCPProcess+0x2be>
                    break;
 800bf7c:	bf00      	nop
 800bf7e:	e012      	b.n	800bfa6 <vDHCPProcess+0x2be>
                    break;
 800bf80:	bf00      	nop
 800bf82:	e010      	b.n	800bfa6 <vDHCPProcess+0x2be>
                    break;
 800bf84:	bf00      	nop
 800bf86:	e00e      	b.n	800bfa6 <vDHCPProcess+0x2be>
                    break;
 800bf88:	bf00      	nop
 800bf8a:	e00c      	b.n	800bfa6 <vDHCPProcess+0x2be>
 800bf8c:	2000a2d4 	.word	0x2000a2d4
 800bf90:	2000a2d0 	.word	0x2000a2d0
 800bf94:	20000088 	.word	0x20000088
 800bf98:	0001d4c0 	.word	0x0001d4c0
 800bf9c:	2000a2fc 	.word	0x2000a2fc
 800bfa0:	0a4cb800 	.word	0x0a4cb800
                    break;
 800bfa4:	bf00      	nop
            }

            if( xGivingUp != pdFALSE )
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d012      	beq.n	800bfd2 <vDHCPProcess+0x2ea>
                /* xGivingUp became true either because of a time-out, or because
                 * xApplicationDHCPHook() returned another value than 'eDHCPContinue',
                 * meaning that the conversion is cancelled from here. */

                /* Revert to static IP address. */
                taskENTER_CRITICAL();
 800bfac:	f7fe ffce 	bl	800af4c <vPortEnterCritical>
                {
                    *ipLOCAL_IP_ADDRESS_POINTER = xNetworkAddressing.ulDefaultIPAddress;
 800bfb0:	4b0a      	ldr	r3, [pc, #40]	@ (800bfdc <vDHCPProcess+0x2f4>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a0a      	ldr	r2, [pc, #40]	@ (800bfe0 <vDHCPProcess+0x2f8>)
 800bfb6:	6153      	str	r3, [r2, #20]
                    iptraceDHCP_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( xNetworkAddressing.ulDefaultIPAddress );
                }
                taskEXIT_CRITICAL();
 800bfb8:	f7fe fffe 	bl	800afb8 <vPortExitCritical>

                EP_DHCPData.eDHCPState = eNotUsingLeasedAddress;
 800bfbc:	4b09      	ldr	r3, [pc, #36]	@ (800bfe4 <vDHCPProcess+0x2fc>)
 800bfbe:	2206      	movs	r2, #6
 800bfc0:	771a      	strb	r2, [r3, #28]
                vIPSetDHCPTimerEnableState( pdFALSE );
 800bfc2:	2000      	movs	r0, #0
 800bfc4:	f001 fd7c 	bl	800dac0 <vIPSetDHCPTimerEnableState>

                /* DHCP failed, the default configured IP-address will be used.  Now
                 * call vIPNetworkUpCalls() to send the network-up event and start the ARP
                 * timer. */
                vIPNetworkUpCalls();
 800bfc8:	f000 ffd0 	bl	800cf6c <vIPNetworkUpCalls>

                /* Close socket to ensure packets don't queue on it. */
                prvCloseDHCPSocket();
 800bfcc:	f000 f80c 	bl	800bfe8 <prvCloseDHCPSocket>
            }
        }
    }
 800bfd0:	e7ff      	b.n	800bfd2 <vDHCPProcess+0x2ea>
 800bfd2:	bf00      	nop
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	2000a2fc 	.word	0x2000a2fc
 800bfe0:	20000088 	.word	0x20000088
 800bfe4:	2000a2d4 	.word	0x2000a2d4

0800bfe8 <prvCloseDHCPSocket>:

/**
 * @brief Close the DHCP socket.
 */
    static void prvCloseDHCPSocket( void )
    {
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	af00      	add	r7, sp, #0
        if( xDHCPSocket != NULL )
 800bfec:	4b06      	ldr	r3, [pc, #24]	@ (800c008 <prvCloseDHCPSocket+0x20>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d007      	beq.n	800c004 <prvCloseDHCPSocket+0x1c>
        {
            /* This modules runs from the IP-task. Use the internal
             * function 'vSocketClose()` to close the socket. */
            ( void ) vSocketClose( xDHCPSocket );
 800bff4:	4b04      	ldr	r3, [pc, #16]	@ (800c008 <prvCloseDHCPSocket+0x20>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	4618      	mov	r0, r3
 800bffa:	f002 fa71 	bl	800e4e0 <vSocketClose>
            xDHCPSocket = NULL;
 800bffe:	4b02      	ldr	r3, [pc, #8]	@ (800c008 <prvCloseDHCPSocket+0x20>)
 800c000:	2200      	movs	r2, #0
 800c002:	601a      	str	r2, [r3, #0]
        }
    }
 800c004:	bf00      	nop
 800c006:	bd80      	pop	{r7, pc}
 800c008:	2000a2d0 	.word	0x2000a2d0

0800c00c <prvCreateDHCPSocket>:

/**
 * @brief Create a DHCP socket with the defined timeouts.
 */
    _static void prvCreateDHCPSocket( void )
    {
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b086      	sub	sp, #24
 800c010:	af02      	add	r7, sp, #8
        struct freertos_sockaddr xAddress;
        BaseType_t xReturn;
        TickType_t xTimeoutTime = ( TickType_t ) 0;
 800c012:	2300      	movs	r3, #0
 800c014:	603b      	str	r3, [r7, #0]

        /* Create the socket, if it has not already been created. */
        if( xDHCPSocket == NULL )
 800c016:	4b1d      	ldr	r3, [pc, #116]	@ (800c08c <prvCreateDHCPSocket+0x80>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d132      	bne.n	800c084 <prvCreateDHCPSocket+0x78>
        {
            xDHCPSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 800c01e:	2211      	movs	r2, #17
 800c020:	2102      	movs	r1, #2
 800c022:	2002      	movs	r0, #2
 800c024:	f001 ff34 	bl	800de90 <FreeRTOS_socket>
 800c028:	4603      	mov	r3, r0
 800c02a:	4a18      	ldr	r2, [pc, #96]	@ (800c08c <prvCreateDHCPSocket+0x80>)
 800c02c:	6013      	str	r3, [r2, #0]

            if( xDHCPSocket != FREERTOS_INVALID_SOCKET )
 800c02e:	4b17      	ldr	r3, [pc, #92]	@ (800c08c <prvCreateDHCPSocket+0x80>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c036:	d022      	beq.n	800c07e <prvCreateDHCPSocket+0x72>
            {
                /* Ensure the Rx and Tx timeouts are zero as the DHCP executes in the
                 * context of the IP task. */
                ( void ) FreeRTOS_setsockopt( xDHCPSocket, 0, FREERTOS_SO_RCVTIMEO, &( xTimeoutTime ), sizeof( TickType_t ) );
 800c038:	4b14      	ldr	r3, [pc, #80]	@ (800c08c <prvCreateDHCPSocket+0x80>)
 800c03a:	6818      	ldr	r0, [r3, #0]
 800c03c:	463b      	mov	r3, r7
 800c03e:	2204      	movs	r2, #4
 800c040:	9200      	str	r2, [sp, #0]
 800c042:	2200      	movs	r2, #0
 800c044:	2100      	movs	r1, #0
 800c046:	f002 fb21 	bl	800e68c <FreeRTOS_setsockopt>
                ( void ) FreeRTOS_setsockopt( xDHCPSocket, 0, FREERTOS_SO_SNDTIMEO, &( xTimeoutTime ), sizeof( TickType_t ) );
 800c04a:	4b10      	ldr	r3, [pc, #64]	@ (800c08c <prvCreateDHCPSocket+0x80>)
 800c04c:	6818      	ldr	r0, [r3, #0]
 800c04e:	463b      	mov	r3, r7
 800c050:	2204      	movs	r2, #4
 800c052:	9200      	str	r2, [sp, #0]
 800c054:	2201      	movs	r2, #1
 800c056:	2100      	movs	r1, #0
 800c058:	f002 fb18 	bl	800e68c <FreeRTOS_setsockopt>

                /* Bind to the standard DHCP client port. */
                xAddress.sin_port = ( uint16_t ) dhcpCLIENT_PORT_IPv4;
 800c05c:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 800c060:	80fb      	strh	r3, [r7, #6]
                xReturn = vSocketBind( xDHCPSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 800c062:	4b0a      	ldr	r3, [pc, #40]	@ (800c08c <prvCreateDHCPSocket+0x80>)
 800c064:	6818      	ldr	r0, [r3, #0]
 800c066:	1d39      	adds	r1, r7, #4
 800c068:	2300      	movs	r3, #0
 800c06a:	2208      	movs	r2, #8
 800c06c:	f002 f972 	bl	800e354 <vSocketBind>
 800c070:	60f8      	str	r0, [r7, #12]

                if( xReturn != 0 )
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d005      	beq.n	800c084 <prvCreateDHCPSocket+0x78>
                {
                    /* Binding failed, close the socket again. */
                    prvCloseDHCPSocket();
 800c078:	f7ff ffb6 	bl	800bfe8 <prvCloseDHCPSocket>
            {
                /* Change to NULL for easier testing. */
                xDHCPSocket = NULL;
            }
        }
    }
 800c07c:	e002      	b.n	800c084 <prvCreateDHCPSocket+0x78>
                xDHCPSocket = NULL;
 800c07e:	4b03      	ldr	r3, [pc, #12]	@ (800c08c <prvCreateDHCPSocket+0x80>)
 800c080:	2200      	movs	r2, #0
 800c082:	601a      	str	r2, [r3, #0]
    }
 800c084:	bf00      	nop
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	2000a2d0 	.word	0x2000a2d0

0800c090 <prvInitialiseDHCP>:
/**
 * @brief Initialise the DHCP state machine by creating DHCP socket and
 *        begin the transaction.
 */
    static void prvInitialiseDHCP( void )
    {
 800c090:	b580      	push	{r7, lr}
 800c092:	af00      	add	r7, sp, #0
        /* Initialise the parameters that will be set by the DHCP process. Per
         * https://www.ietf.org/rfc/rfc2131.txt, Transaction ID should be a random
         * value chosen by the client. */

        /* Check for random number generator API failure. */
        if( xApplicationGetRandomNumber( &( EP_DHCPData.ulTransactionId ) ) != pdFALSE )
 800c094:	480c      	ldr	r0, [pc, #48]	@ (800c0c8 <prvInitialiseDHCP+0x38>)
 800c096:	f7f6 fa4c 	bl	8002532 <xApplicationGetRandomNumber>
 800c09a:	4603      	mov	r3, r0
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d011      	beq.n	800c0c4 <prvInitialiseDHCP+0x34>
        {
            EP_DHCPData.xUseBroadcast = 0;
 800c0a0:	4b09      	ldr	r3, [pc, #36]	@ (800c0c8 <prvInitialiseDHCP+0x38>)
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	619a      	str	r2, [r3, #24]
            EP_DHCPData.ulOfferedIPAddress = 0UL;
 800c0a6:	4b08      	ldr	r3, [pc, #32]	@ (800c0c8 <prvInitialiseDHCP+0x38>)
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	605a      	str	r2, [r3, #4]
            EP_DHCPData.ulDHCPServerAddress = 0UL;
 800c0ac:	4b06      	ldr	r3, [pc, #24]	@ (800c0c8 <prvInitialiseDHCP+0x38>)
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	609a      	str	r2, [r3, #8]
            EP_DHCPData.xDHCPTxPeriod = dhcpINITIAL_DHCP_TX_PERIOD;
 800c0b2:	4b05      	ldr	r3, [pc, #20]	@ (800c0c8 <prvInitialiseDHCP+0x38>)
 800c0b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c0b8:	615a      	str	r2, [r3, #20]

            /* Create the DHCP socket if it has not already been created. */
            prvCreateDHCPSocket();
 800c0ba:	f7ff ffa7 	bl	800c00c <prvCreateDHCPSocket>
            FreeRTOS_debug_printf( ( "prvInitialiseDHCP: start after %lu ticks\n", dhcpINITIAL_TIMER_PERIOD ) );
            vIPReloadDHCPTimer( dhcpINITIAL_TIMER_PERIOD );
 800c0be:	20fa      	movs	r0, #250	@ 0xfa
 800c0c0:	f001 fd18 	bl	800daf4 <vIPReloadDHCPTimer>
        }
        else
        {
            /* There was a problem with the randomiser. */
        }
    }
 800c0c4:	bf00      	nop
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	2000a2d4 	.word	0x2000a2d4

0800c0cc <prvProcessDHCPReplies>:
 *                                  Messages of different type will be dropped.
 *
 * @return pdPASS: if DHCP options are received correctly; pdFAIL: Otherwise.
 */
    _static BaseType_t prvProcessDHCPReplies( BaseType_t xExpectedMessageType )
    {
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b092      	sub	sp, #72	@ 0x48
 800c0d0:	af02      	add	r7, sp, #8
 800c0d2:	6078      	str	r0, [r7, #4]
        int32_t lBytes;
        const DHCPMessage_IPv4_t * pxDHCPMessage;
        const uint8_t * pucByte;
        uint8_t ucOptionCode;
        uint32_t ulProcessed, ulParameter;
        BaseType_t xReturn = pdFALSE;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	63bb      	str	r3, [r7, #56]	@ 0x38
        const uint32_t ulMandatoryOptions = 2UL; /* DHCP server address, and the correct DHCP message type must be present in the options. */
 800c0d8:	2302      	movs	r3, #2
 800c0da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;

        /* Passing the address of a pointer (pucUDPPayload) because FREERTOS_ZERO_COPY is used. */
        lBytes = FreeRTOS_recvfrom( xDHCPSocket, &pucUDPPayload, 0UL, FREERTOS_ZERO_COPY, NULL, NULL );
 800c0dc:	4b95      	ldr	r3, [pc, #596]	@ (800c334 <prvProcessDHCPReplies+0x268>)
 800c0de:	6818      	ldr	r0, [r3, #0]
 800c0e0:	f107 010c 	add.w	r1, r7, #12
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	9301      	str	r3, [sp, #4]
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	9300      	str	r3, [sp, #0]
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	f001 ff6a 	bl	800dfc8 <FreeRTOS_recvfrom>
 800c0f4:	62b8      	str	r0, [r7, #40]	@ 0x28

        if( lBytes > 0 )
 800c0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f340 8134 	ble.w	800c366 <prvProcessDHCPReplies+0x29a>
        {
            /* Map a DHCP structure onto the received data. */
            pxDHCPMessage = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( DHCPMessage_IPv4_t, pucUDPPayload );
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	4618      	mov	r0, r3
 800c102:	f7ff fdc2 	bl	800bc8a <vCastConstPointerTo_DHCPMessage_IPv4_t>
 800c106:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Sanity check. */
            if( lBytes < ( int32_t ) sizeof( DHCPMessage_IPv4_t ) )
 800c108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c10a:	2bef      	cmp	r3, #239	@ 0xef
 800c10c:	f340 8127 	ble.w	800c35e <prvProcessDHCPReplies+0x292>
            {
                /* Not enough bytes. */
            }
            else if( ( pxDHCPMessage->ulDHCPCookie != ( uint32_t ) dhcpCOOKIE ) ||
 800c110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c112:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800c116:	4a88      	ldr	r2, [pc, #544]	@ (800c338 <prvProcessDHCPReplies+0x26c>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	f040 8120 	bne.w	800c35e <prvProcessDHCPReplies+0x292>
                     ( pxDHCPMessage->ucOpcode != ( uint8_t ) dhcpREPLY_OPCODE ) )
 800c11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c120:	781b      	ldrb	r3, [r3, #0]
            else if( ( pxDHCPMessage->ulDHCPCookie != ( uint32_t ) dhcpCOOKIE ) ||
 800c122:	2b02      	cmp	r3, #2
 800c124:	f040 811b 	bne.w	800c35e <prvProcessDHCPReplies+0x292>
            {
                /* Invalid cookie or unexpected opcode. */
            }
            else if( ( pxDHCPMessage->ulTransactionID != FreeRTOS_htonl( EP_DHCPData.ulTransactionId ) ) )
 800c128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c12a:	685a      	ldr	r2, [r3, #4]
 800c12c:	4b83      	ldr	r3, [pc, #524]	@ (800c33c <prvProcessDHCPReplies+0x270>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	0619      	lsls	r1, r3, #24
 800c132:	4b82      	ldr	r3, [pc, #520]	@ (800c33c <prvProcessDHCPReplies+0x270>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	021b      	lsls	r3, r3, #8
 800c138:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c13c:	4319      	orrs	r1, r3
 800c13e:	4b7f      	ldr	r3, [pc, #508]	@ (800c33c <prvProcessDHCPReplies+0x270>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	0a1b      	lsrs	r3, r3, #8
 800c144:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c148:	4319      	orrs	r1, r3
 800c14a:	4b7c      	ldr	r3, [pc, #496]	@ (800c33c <prvProcessDHCPReplies+0x270>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	0e1b      	lsrs	r3, r3, #24
 800c150:	430b      	orrs	r3, r1
 800c152:	429a      	cmp	r2, r3
 800c154:	f040 8103 	bne.w	800c35e <prvProcessDHCPReplies+0x292>
            {
                /* Transaction ID does not match. */
            }
            else /* Looks like a valid DHCP response, with the same transaction ID. */
            {
                if( memcmp( pxDHCPMessage->ucClientHardwareAddress,
 800c158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c15a:	331c      	adds	r3, #28
 800c15c:	2206      	movs	r2, #6
 800c15e:	4978      	ldr	r1, [pc, #480]	@ (800c340 <prvProcessDHCPReplies+0x274>)
 800c160:	4618      	mov	r0, r3
 800c162:	f009 fd48 	bl	8015bf6 <memcmp>
 800c166:	4603      	mov	r3, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	f040 80f8 	bne.w	800c35e <prvProcessDHCPReplies+0x292>
                else
                {
                    size_t uxIndex, uxPayloadDataLength, uxLength;

                    /* None of the essential options have been processed yet. */
                    ulProcessed = 0UL;
 800c16e:	2300      	movs	r3, #0
 800c170:	63fb      	str	r3, [r7, #60]	@ 0x3c

                    /* Walk through the options until the dhcpOPTION_END_BYTE byte
                     * is found, taking care not to walk off the end of the options. */
                    pucByte = &( pucUDPPayload[ sizeof( DHCPMessage_IPv4_t ) ] );
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	33f0      	adds	r3, #240	@ 0xf0
 800c176:	623b      	str	r3, [r7, #32]
                    uxIndex = 0;
 800c178:	2300      	movs	r3, #0
 800c17a:	637b      	str	r3, [r7, #52]	@ 0x34
                    uxPayloadDataLength = ( ( size_t ) lBytes ) - sizeof( DHCPMessage_IPv4_t );
 800c17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c17e:	3bf0      	subs	r3, #240	@ 0xf0
 800c180:	61fb      	str	r3, [r7, #28]

                    while( uxIndex < uxPayloadDataLength )
 800c182:	e0c8      	b.n	800c316 <prvProcessDHCPReplies+0x24a>
                    {
                        ucOptionCode = pucByte[ uxIndex ];
 800c184:	6a3a      	ldr	r2, [r7, #32]
 800c186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c188:	4413      	add	r3, r2
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	76fb      	strb	r3, [r7, #27]

                        if( ucOptionCode == ( uint8_t ) dhcpOPTION_END_BYTE )
 800c18e:	7efb      	ldrb	r3, [r7, #27]
 800c190:	2bff      	cmp	r3, #255	@ 0xff
 800c192:	f000 80c6 	beq.w	800c322 <prvProcessDHCPReplies+0x256>
                            /* Ready, the last byte has been seen. */
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        if( ucOptionCode == ( uint8_t ) dhcpIPv4_ZERO_PAD_OPTION_CODE )
 800c196:	7efb      	ldrb	r3, [r7, #27]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d103      	bne.n	800c1a4 <prvProcessDHCPReplies+0xd8>
                        {
                            /* The value zero is used as a pad byte,
                             * it is not followed by a length byte. */
                            uxIndex = uxIndex + 1U;
 800c19c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c19e:	3301      	adds	r3, #1
 800c1a0:	637b      	str	r3, [r7, #52]	@ 0x34
                            continue;
 800c1a2:	e0b8      	b.n	800c316 <prvProcessDHCPReplies+0x24a>
                        }

                        /* Stop if the response is malformed. */
                        if( ( uxIndex + 1U ) < uxPayloadDataLength )
 800c1a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	69fa      	ldr	r2, [r7, #28]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	f240 80bb 	bls.w	800c326 <prvProcessDHCPReplies+0x25a>
                        {
                            /* Fetch the length byte. */
                            uxLength = ( size_t ) pucByte[ uxIndex + 1U ];
 800c1b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	6a3a      	ldr	r2, [r7, #32]
 800c1b6:	4413      	add	r3, r2
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	633b      	str	r3, [r7, #48]	@ 0x30
                            uxIndex = uxIndex + 2U;
 800c1bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1be:	3302      	adds	r3, #2
 800c1c0:	637b      	str	r3, [r7, #52]	@ 0x34

                            if( !( ( ( uxIndex + uxLength ) - 1U ) < uxPayloadDataLength ) )
 800c1c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1c6:	4413      	add	r3, r2
 800c1c8:	3b01      	subs	r3, #1
 800c1ca:	69fa      	ldr	r2, [r7, #28]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	f240 80ac 	bls.w	800c32a <prvProcessDHCPReplies+0x25e>
                            break;
                        }

                        /* In most cases, a 4-byte network-endian parameter follows,
                         * just get it once here and use later. */
                        if( uxLength >= sizeof( ulParameter ) )
 800c1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d4:	2b03      	cmp	r3, #3
 800c1d6:	d90c      	bls.n	800c1f2 <prvProcessDHCPReplies+0x126>
                            /*
                             * Use helper variables for memcpy() to remain
                             * compliant with MISRA Rule 21.15.  These should be
                             * optimized away.
                             */
                            pvCopySource = &pucByte[ uxIndex ];
 800c1d8:	6a3a      	ldr	r2, [r7, #32]
 800c1da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1dc:	4413      	add	r3, r2
 800c1de:	617b      	str	r3, [r7, #20]
                            pvCopyDest = &ulParameter;
 800c1e0:	f107 0308 	add.w	r3, r7, #8
 800c1e4:	613b      	str	r3, [r7, #16]
                            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulParameter ) );
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	601a      	str	r2, [r3, #0]
 800c1f0:	e001      	b.n	800c1f6 <prvProcessDHCPReplies+0x12a>
                            /* 'uxIndex' will be increased at the end of this loop. */
                        }
                        else
                        {
                            ulParameter = 0;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	60bb      	str	r3, [r7, #8]
                        }

                        /* Confirm uxIndex is still a valid index after adjustments to uxIndex above */
                        if( !( uxIndex < uxPayloadDataLength ) )
 800c1f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c1f8:	69fb      	ldr	r3, [r7, #28]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	f080 8097 	bcs.w	800c32e <prvProcessDHCPReplies+0x262>
                        {
                            break;
                        }

                        /* Option-specific handling. */
                        switch( ucOptionCode )
 800c200:	7efb      	ldrb	r3, [r7, #27]
 800c202:	2b36      	cmp	r3, #54	@ 0x36
 800c204:	d03f      	beq.n	800c286 <prvProcessDHCPReplies+0x1ba>
 800c206:	2b36      	cmp	r3, #54	@ 0x36
 800c208:	dc75      	bgt.n	800c2f6 <prvProcessDHCPReplies+0x22a>
 800c20a:	2b35      	cmp	r3, #53	@ 0x35
 800c20c:	d00e      	beq.n	800c22c <prvProcessDHCPReplies+0x160>
 800c20e:	2b35      	cmp	r3, #53	@ 0x35
 800c210:	dc71      	bgt.n	800c2f6 <prvProcessDHCPReplies+0x22a>
 800c212:	2b33      	cmp	r3, #51	@ 0x33
 800c214:	d04d      	beq.n	800c2b2 <prvProcessDHCPReplies+0x1e6>
 800c216:	2b33      	cmp	r3, #51	@ 0x33
 800c218:	dc6d      	bgt.n	800c2f6 <prvProcessDHCPReplies+0x22a>
 800c21a:	2b06      	cmp	r3, #6
 800c21c:	d02f      	beq.n	800c27e <prvProcessDHCPReplies+0x1b2>
 800c21e:	2b06      	cmp	r3, #6
 800c220:	dc69      	bgt.n	800c2f6 <prvProcessDHCPReplies+0x22a>
 800c222:	2b01      	cmp	r3, #1
 800c224:	d01d      	beq.n	800c262 <prvProcessDHCPReplies+0x196>
 800c226:	2b03      	cmp	r3, #3
 800c228:	d022      	beq.n	800c270 <prvProcessDHCPReplies+0x1a4>

                            default:

                                /* Not interested in this field. */

                                break;
 800c22a:	e064      	b.n	800c2f6 <prvProcessDHCPReplies+0x22a>
                                if( pucByte[ uxIndex ] == ( uint8_t ) xExpectedMessageType )
 800c22c:	6a3a      	ldr	r2, [r7, #32]
 800c22e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c230:	4413      	add	r3, r2
 800c232:	781a      	ldrb	r2, [r3, #0]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	b2db      	uxtb	r3, r3
 800c238:	429a      	cmp	r2, r3
 800c23a:	d103      	bne.n	800c244 <prvProcessDHCPReplies+0x178>
                                    ulProcessed++;
 800c23c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c23e:	3301      	adds	r3, #1
 800c240:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                break;
 800c242:	e061      	b.n	800c308 <prvProcessDHCPReplies+0x23c>
                                    if( pucByte[ uxIndex ] == ( uint8_t ) dhcpMESSAGE_TYPE_NACK )
 800c244:	6a3a      	ldr	r2, [r7, #32]
 800c246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c248:	4413      	add	r3, r2
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	2b06      	cmp	r3, #6
 800c24e:	d105      	bne.n	800c25c <prvProcessDHCPReplies+0x190>
                                        if( xExpectedMessageType == ( BaseType_t ) dhcpMESSAGE_TYPE_ACK )
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2b05      	cmp	r3, #5
 800c254:	d102      	bne.n	800c25c <prvProcessDHCPReplies+0x190>
                                            EP_DHCPData.eDHCPState = eInitialWait;
 800c256:	4b39      	ldr	r3, [pc, #228]	@ (800c33c <prvProcessDHCPReplies+0x270>)
 800c258:	2200      	movs	r2, #0
 800c25a:	771a      	strb	r2, [r3, #28]
                                    uxLength = 0;
 800c25c:	2300      	movs	r3, #0
 800c25e:	633b      	str	r3, [r7, #48]	@ 0x30
                                break;
 800c260:	e052      	b.n	800c308 <prvProcessDHCPReplies+0x23c>
                                if( uxLength == sizeof( uint32_t ) )
 800c262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c264:	2b04      	cmp	r3, #4
 800c266:	d148      	bne.n	800c2fa <prvProcessDHCPReplies+0x22e>
                                    EP_IPv4_SETTINGS.ulNetMask = ulParameter;
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	4a36      	ldr	r2, [pc, #216]	@ (800c344 <prvProcessDHCPReplies+0x278>)
 800c26c:	6053      	str	r3, [r2, #4]
                                break;
 800c26e:	e044      	b.n	800c2fa <prvProcessDHCPReplies+0x22e>
                                if( uxLength >= sizeof( uint32_t ) )
 800c270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c272:	2b03      	cmp	r3, #3
 800c274:	d943      	bls.n	800c2fe <prvProcessDHCPReplies+0x232>
                                    EP_IPv4_SETTINGS.ulGatewayAddress = ulParameter;
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	4a32      	ldr	r2, [pc, #200]	@ (800c344 <prvProcessDHCPReplies+0x278>)
 800c27a:	6093      	str	r3, [r2, #8]
                                break;
 800c27c:	e03f      	b.n	800c2fe <prvProcessDHCPReplies+0x232>
                                EP_IPv4_SETTINGS.ulDNSServerAddress = ulParameter;
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	4a30      	ldr	r2, [pc, #192]	@ (800c344 <prvProcessDHCPReplies+0x278>)
 800c282:	60d3      	str	r3, [r2, #12]
                                break;
 800c284:	e040      	b.n	800c308 <prvProcessDHCPReplies+0x23c>
                                if( uxLength == sizeof( uint32_t ) )
 800c286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c288:	2b04      	cmp	r3, #4
 800c28a:	d13a      	bne.n	800c302 <prvProcessDHCPReplies+0x236>
                                    if( xExpectedMessageType == ( BaseType_t ) dhcpMESSAGE_TYPE_OFFER )
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b02      	cmp	r3, #2
 800c290:	d106      	bne.n	800c2a0 <prvProcessDHCPReplies+0x1d4>
                                        ulProcessed++;
 800c292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c294:	3301      	adds	r3, #1
 800c296:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                        EP_DHCPData.ulDHCPServerAddress = ulParameter;
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	4a28      	ldr	r2, [pc, #160]	@ (800c33c <prvProcessDHCPReplies+0x270>)
 800c29c:	6093      	str	r3, [r2, #8]
                                break;
 800c29e:	e030      	b.n	800c302 <prvProcessDHCPReplies+0x236>
                                        if( EP_DHCPData.ulDHCPServerAddress == ulParameter )
 800c2a0:	4b26      	ldr	r3, [pc, #152]	@ (800c33c <prvProcessDHCPReplies+0x270>)
 800c2a2:	689a      	ldr	r2, [r3, #8]
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d12b      	bne.n	800c302 <prvProcessDHCPReplies+0x236>
                                            ulProcessed++;
 800c2aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                break;
 800c2b0:	e027      	b.n	800c302 <prvProcessDHCPReplies+0x236>
                                if( uxLength == sizeof( EP_DHCPData.ulLeaseTime ) )
 800c2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b4:	2b04      	cmp	r3, #4
 800c2b6:	d126      	bne.n	800c306 <prvProcessDHCPReplies+0x23a>
                                    EP_DHCPData.ulLeaseTime = FreeRTOS_ntohl( ulParameter );
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	061a      	lsls	r2, r3, #24
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	021b      	lsls	r3, r3, #8
 800c2c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c2c4:	431a      	orrs	r2, r3
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	0a1b      	lsrs	r3, r3, #8
 800c2ca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c2ce:	431a      	orrs	r2, r3
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	0e1b      	lsrs	r3, r3, #24
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	4a19      	ldr	r2, [pc, #100]	@ (800c33c <prvProcessDHCPReplies+0x270>)
 800c2d8:	60d3      	str	r3, [r2, #12]
                                    EP_DHCPData.ulLeaseTime >>= 1UL;
 800c2da:	4b18      	ldr	r3, [pc, #96]	@ (800c33c <prvProcessDHCPReplies+0x270>)
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	085b      	lsrs	r3, r3, #1
 800c2e0:	4a16      	ldr	r2, [pc, #88]	@ (800c33c <prvProcessDHCPReplies+0x270>)
 800c2e2:	60d3      	str	r3, [r2, #12]
                                    EP_DHCPData.ulLeaseTime = ( uint32_t ) configTICK_RATE_HZ * ( uint32_t ) EP_DHCPData.ulLeaseTime;
 800c2e4:	4b15      	ldr	r3, [pc, #84]	@ (800c33c <prvProcessDHCPReplies+0x270>)
 800c2e6:	68db      	ldr	r3, [r3, #12]
 800c2e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c2ec:	fb02 f303 	mul.w	r3, r2, r3
 800c2f0:	4a12      	ldr	r2, [pc, #72]	@ (800c33c <prvProcessDHCPReplies+0x270>)
 800c2f2:	60d3      	str	r3, [r2, #12]
                                break;
 800c2f4:	e007      	b.n	800c306 <prvProcessDHCPReplies+0x23a>
                                break;
 800c2f6:	bf00      	nop
 800c2f8:	e006      	b.n	800c308 <prvProcessDHCPReplies+0x23c>
                                break;
 800c2fa:	bf00      	nop
 800c2fc:	e004      	b.n	800c308 <prvProcessDHCPReplies+0x23c>
                                break;
 800c2fe:	bf00      	nop
 800c300:	e002      	b.n	800c308 <prvProcessDHCPReplies+0x23c>
                                break;
 800c302:	bf00      	nop
 800c304:	e000      	b.n	800c308 <prvProcessDHCPReplies+0x23c>
                                break;
 800c306:	bf00      	nop
                        }

                        /* Jump over the data to find the next option code. */
                        if( uxLength == 0U )
 800c308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d01c      	beq.n	800c348 <prvProcessDHCPReplies+0x27c>
                        {
                            break;
                        }

                        uxIndex = uxIndex + uxLength;
 800c30e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c312:	4413      	add	r3, r2
 800c314:	637b      	str	r3, [r7, #52]	@ 0x34
                    while( uxIndex < uxPayloadDataLength )
 800c316:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	f4ff af32 	bcc.w	800c184 <prvProcessDHCPReplies+0xb8>
 800c320:	e013      	b.n	800c34a <prvProcessDHCPReplies+0x27e>
                            break;
 800c322:	bf00      	nop
 800c324:	e011      	b.n	800c34a <prvProcessDHCPReplies+0x27e>
                            break;
 800c326:	bf00      	nop
 800c328:	e00f      	b.n	800c34a <prvProcessDHCPReplies+0x27e>
                                break;
 800c32a:	bf00      	nop
 800c32c:	e00d      	b.n	800c34a <prvProcessDHCPReplies+0x27e>
                            break;
 800c32e:	bf00      	nop
 800c330:	e00b      	b.n	800c34a <prvProcessDHCPReplies+0x27e>
 800c332:	bf00      	nop
 800c334:	2000a2d0 	.word	0x2000a2d0
 800c338:	63538263 	.word	0x63538263
 800c33c:	2000a2d4 	.word	0x2000a2d4
 800c340:	20000088 	.word	0x20000088
 800c344:	2000a2fc 	.word	0x2000a2fc
                            break;
 800c348:	bf00      	nop
                    }

                    /* Were all the mandatory options received? */
                    if( ulProcessed >= ulMandatoryOptions )
 800c34a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c34e:	429a      	cmp	r2, r3
 800c350:	d305      	bcc.n	800c35e <prvProcessDHCPReplies+0x292>
                    {
                        /* HT:endian: used to be network order */
                        EP_DHCPData.ulOfferedIPAddress = pxDHCPMessage->ulYourIPAddress_yiaddr;
 800c352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c354:	691b      	ldr	r3, [r3, #16]
 800c356:	4a06      	ldr	r2, [pc, #24]	@ (800c370 <prvProcessDHCPReplies+0x2a4>)
 800c358:	6053      	str	r3, [r2, #4]
                        FreeRTOS_printf( ( "vDHCPProcess: offer %lxip\n", FreeRTOS_ntohl( EP_DHCPData.ulOfferedIPAddress ) ) );
                        xReturn = pdPASS;
 800c35a:	2301      	movs	r3, #1
 800c35c:	63bb      	str	r3, [r7, #56]	@ 0x38
                    }
                }
            }

            FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayload );
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	4618      	mov	r0, r3
 800c362:	f000 fc14 	bl	800cb8e <FreeRTOS_ReleaseUDPPayloadBuffer>
        } /* if( lBytes > 0 ) */

        return xReturn;
 800c366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
 800c368:	4618      	mov	r0, r3
 800c36a:	3740      	adds	r7, #64	@ 0x40
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	2000a2d4 	.word	0x2000a2d4

0800c374 <prvCreatePartDHCPMessage>:
 */
    static uint8_t * prvCreatePartDHCPMessage( struct freertos_sockaddr * pxAddress,
                                               BaseType_t xOpcode,
                                               const uint8_t * const pucOptionsArray,
                                               size_t * pxOptionsArraySize )
    {
 800c374:	b580      	push	{r7, lr}
 800c376:	b08e      	sub	sp, #56	@ 0x38
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	607a      	str	r2, [r7, #4]
 800c380:	603b      	str	r3, [r7, #0]
        DHCPMessage_IPv4_t * pxDHCPMessage;
        size_t uxRequiredBufferSize = sizeof( DHCPMessage_IPv4_t ) + *pxOptionsArraySize;
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	33f0      	adds	r3, #240	@ 0xf0
 800c388:	633b      	str	r3, [r7, #48]	@ 0x30
        const NetworkBufferDescriptor_t * pxNetworkBuffer;
        uint8_t * pucUDPPayloadBuffer = NULL;
 800c38a:	2300      	movs	r3, #0
 800c38c:	637b      	str	r3, [r7, #52]	@ 0x34

        #if ( ipconfigDHCP_REGISTER_HOSTNAME == 1 )
            const char * pucHostName = pcApplicationHostnameHook();
 800c38e:	f7f6 f8ef 	bl	8002570 <pcApplicationHostnameHook>
 800c392:	62f8      	str	r0, [r7, #44]	@ 0x2c
            size_t uxNameLength = strlen( pucHostName );
 800c394:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c396:	f7f3 ff3b 	bl	8000210 <strlen>
 800c39a:	62b8      	str	r0, [r7, #40]	@ 0x28
/* memcpy() helper variables for MISRA Rule 21.15 compliance*/
            const void * pvCopySource;
            void * pvCopyDest;

            /* Two extra bytes for option code and length. */
            uxRequiredBufferSize += ( 2U + uxNameLength );
 800c39c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a0:	4413      	add	r3, r2
 800c3a2:	3302      	adds	r3, #2
 800c3a4:	633b      	str	r3, [r7, #48]	@ 0x30
        #endif /* if ( ipconfigDHCP_REGISTER_HOSTNAME == 1 ) */

        /* Obtain a network buffer with the required amount of storage.  It doesn't make much sense
         * to use a time-out here, because that would cause the IP-task to wait for itself. */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( UDPPacket_t ) + uxRequiredBufferSize, 0U );
 800c3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a8:	332c      	adds	r3, #44	@ 0x2c
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f007 ffef 	bl	8014390 <pxGetNetworkBufferWithDescriptor>
 800c3b2:	6278      	str	r0, [r7, #36]	@ 0x24

        if( pxNetworkBuffer != NULL )
 800c3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f000 8096 	beq.w	800c4e8 <prvCreatePartDHCPMessage+0x174>
        {
            /* Leave space for the UDP header. */
            pucUDPPayloadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 800c3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3be:	699b      	ldr	r3, [r3, #24]
 800c3c0:	332c      	adds	r3, #44	@ 0x2c
 800c3c2:	637b      	str	r3, [r7, #52]	@ 0x34
            pxDHCPMessage = ipCAST_PTR_TO_TYPE_PTR( DHCPMessage_IPv4_t, pucUDPPayloadBuffer );
 800c3c4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c3c6:	f7ff fc55 	bl	800bc74 <vCastPointerTo_DHCPMessage_IPv4_t>
 800c3ca:	6238      	str	r0, [r7, #32]

            /* Most fields need to be zero. */
            ( void ) memset( pxDHCPMessage, 0x00, sizeof( DHCPMessage_IPv4_t ) );
 800c3cc:	22f0      	movs	r2, #240	@ 0xf0
 800c3ce:	2100      	movs	r1, #0
 800c3d0:	6a38      	ldr	r0, [r7, #32]
 800c3d2:	f009 fc3a 	bl	8015c4a <memset>

            /* Create the message. */
            pxDHCPMessage->ucOpcode = ( uint8_t ) xOpcode;
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	b2da      	uxtb	r2, r3
 800c3da:	6a3b      	ldr	r3, [r7, #32]
 800c3dc:	701a      	strb	r2, [r3, #0]
            pxDHCPMessage->ucAddressType = ( uint8_t ) dhcpADDRESS_TYPE_ETHERNET;
 800c3de:	6a3b      	ldr	r3, [r7, #32]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	705a      	strb	r2, [r3, #1]
            pxDHCPMessage->ucAddressLength = ( uint8_t ) dhcpETHERNET_ADDRESS_LENGTH;
 800c3e4:	6a3b      	ldr	r3, [r7, #32]
 800c3e6:	2206      	movs	r2, #6
 800c3e8:	709a      	strb	r2, [r3, #2]
            pxDHCPMessage->ulTransactionID = FreeRTOS_htonl( EP_DHCPData.ulTransactionId );
 800c3ea:	4b42      	ldr	r3, [pc, #264]	@ (800c4f4 <prvCreatePartDHCPMessage+0x180>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	061a      	lsls	r2, r3, #24
 800c3f0:	4b40      	ldr	r3, [pc, #256]	@ (800c4f4 <prvCreatePartDHCPMessage+0x180>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	021b      	lsls	r3, r3, #8
 800c3f6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c3fa:	431a      	orrs	r2, r3
 800c3fc:	4b3d      	ldr	r3, [pc, #244]	@ (800c4f4 <prvCreatePartDHCPMessage+0x180>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	0a1b      	lsrs	r3, r3, #8
 800c402:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c406:	431a      	orrs	r2, r3
 800c408:	4b3a      	ldr	r3, [pc, #232]	@ (800c4f4 <prvCreatePartDHCPMessage+0x180>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	0e1b      	lsrs	r3, r3, #24
 800c40e:	431a      	orrs	r2, r3
 800c410:	6a3b      	ldr	r3, [r7, #32]
 800c412:	605a      	str	r2, [r3, #4]
            pxDHCPMessage->ulDHCPCookie = ( uint32_t ) dhcpCOOKIE;
 800c414:	6a3b      	ldr	r3, [r7, #32]
 800c416:	2200      	movs	r2, #0
 800c418:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 800c41c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 800c420:	2200      	movs	r2, #0
 800c422:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 800c426:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800c42a:	2200      	movs	r2, #0
 800c42c:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 800c430:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 800c434:	2200      	movs	r2, #0
 800c436:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 800c43a:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef

            if( EP_DHCPData.xUseBroadcast != pdFALSE )
 800c43e:	4b2d      	ldr	r3, [pc, #180]	@ (800c4f4 <prvCreatePartDHCPMessage+0x180>)
 800c440:	699b      	ldr	r3, [r3, #24]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d007      	beq.n	800c456 <prvCreatePartDHCPMessage+0xe2>
            {
                pxDHCPMessage->usFlags = ( uint16_t ) dhcpBROADCAST;
 800c446:	6a3b      	ldr	r3, [r7, #32]
 800c448:	2200      	movs	r2, #0
 800c44a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c44e:	729a      	strb	r2, [r3, #10]
 800c450:	2200      	movs	r2, #0
 800c452:	72da      	strb	r2, [r3, #11]
 800c454:	e004      	b.n	800c460 <prvCreatePartDHCPMessage+0xec>
            }
            else
            {
                pxDHCPMessage->usFlags = 0U;
 800c456:	6a3b      	ldr	r3, [r7, #32]
 800c458:	2200      	movs	r2, #0
 800c45a:	729a      	strb	r2, [r3, #10]
 800c45c:	2200      	movs	r2, #0
 800c45e:	72da      	strb	r2, [r3, #11]
            }

            ( void ) memcpy( &( pxDHCPMessage->ucClientHardwareAddress[ 0 ] ), ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );
 800c460:	6a3b      	ldr	r3, [r7, #32]
 800c462:	331c      	adds	r3, #28
 800c464:	2206      	movs	r2, #6
 800c466:	4924      	ldr	r1, [pc, #144]	@ (800c4f8 <prvCreatePartDHCPMessage+0x184>)
 800c468:	4618      	mov	r0, r3
 800c46a:	f009 fc6a 	bl	8015d42 <memcpy>

            /* Copy in the const part of the options options. */
            ( void ) memcpy( &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET ] ), pucOptionsArray, *pxOptionsArraySize );
 800c46e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c470:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	461a      	mov	r2, r3
 800c47a:	6879      	ldr	r1, [r7, #4]
 800c47c:	f009 fc61 	bl	8015d42 <memcpy>
                {
                    /* With this option, the hostname can be registered as well which makes
                     * it easier to lookup a device in a router's list of DHCP clients. */

                    /* Point to where the OPTION_END was stored to add data. */
                    pucPtr = &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + ( *pxOptionsArraySize - 1U ) ] );
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	33ef      	adds	r3, #239	@ 0xef
 800c486:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c488:	4413      	add	r3, r2
 800c48a:	61fb      	str	r3, [r7, #28]
                    pucPtr[ 0U ] = dhcpIPv4_DNS_HOSTNAME_OPTIONS_CODE;
 800c48c:	69fb      	ldr	r3, [r7, #28]
 800c48e:	220c      	movs	r2, #12
 800c490:	701a      	strb	r2, [r3, #0]
                    pucPtr[ 1U ] = ( uint8_t ) uxNameLength;
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	3301      	adds	r3, #1
 800c496:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c498:	b2d2      	uxtb	r2, r2
 800c49a:	701a      	strb	r2, [r3, #0]
                    /*
                     * Use helper variables for memcpy() to remain
                     * compliant with MISRA Rule 21.15.  These should be
                     * optimized away.
                     */
                    pvCopySource = pucHostName;
 800c49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c49e:	61bb      	str	r3, [r7, #24]
                    pvCopyDest = &pucPtr[ 2U ];
 800c4a0:	69fb      	ldr	r3, [r7, #28]
 800c4a2:	3302      	adds	r3, #2
 800c4a4:	617b      	str	r3, [r7, #20]

                    ( void ) memcpy( pvCopyDest, pvCopySource, uxNameLength );
 800c4a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c4a8:	69b9      	ldr	r1, [r7, #24]
 800c4aa:	6978      	ldr	r0, [r7, #20]
 800c4ac:	f009 fc49 	bl	8015d42 <memcpy>
                    pucPtr[ 2U + uxNameLength ] = ( uint8_t ) dhcpOPTION_END_BYTE;
 800c4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4b2:	3302      	adds	r3, #2
 800c4b4:	69fa      	ldr	r2, [r7, #28]
 800c4b6:	4413      	add	r3, r2
 800c4b8:	22ff      	movs	r2, #255	@ 0xff
 800c4ba:	701a      	strb	r2, [r3, #0]
                    *pxOptionsArraySize += ( size_t ) ( 2U + uxNameLength );
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	681a      	ldr	r2, [r3, #0]
 800c4c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c2:	4413      	add	r3, r2
 800c4c4:	1c9a      	adds	r2, r3, #2
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	601a      	str	r2, [r3, #0]
                }
            #endif /* if ( ipconfigDHCP_REGISTER_HOSTNAME == 1 ) */

            /* Map in the client identifier. */
            ( void ) memcpy( &( pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpCLIENT_IDENTIFIER_OFFSET ] ),
 800c4ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4cc:	33f6      	adds	r3, #246	@ 0xf6
 800c4ce:	2206      	movs	r2, #6
 800c4d0:	4909      	ldr	r1, [pc, #36]	@ (800c4f8 <prvCreatePartDHCPMessage+0x184>)
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f009 fc35 	bl	8015d42 <memcpy>
                             ipLOCAL_MAC_ADDRESS, sizeof( MACAddress_t ) );

            /* Set the addressing. */
            pxAddress->sin_addr = ipBROADCAST_IP_ADDRESS;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f04f 32ff 	mov.w	r2, #4294967295
 800c4de:	605a      	str	r2, [r3, #4]
            pxAddress->sin_port = ( uint16_t ) dhcpSERVER_PORT_IPv4;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f44f 4286 	mov.w	r2, #17152	@ 0x4300
 800c4e6:	805a      	strh	r2, [r3, #2]
        }

        return pucUDPPayloadBuffer;
 800c4e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3738      	adds	r7, #56	@ 0x38
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	2000a2d4 	.word	0x2000a2d4
 800c4f8:	20000088 	.word	0x20000088

0800c4fc <prvSendDHCPRequest>:
/**
 * @brief Create and send a DHCP request message through the DHCP socket.
 * @return Returns pdPASS when the message is successfully created and sent.
 */
    static BaseType_t prvSendDHCPRequest( void )
    {
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b08a      	sub	sp, #40	@ 0x28
 800c500:	af02      	add	r7, sp, #8
        BaseType_t xResult = pdFAIL;
 800c502:	2300      	movs	r3, #0
 800c504:	61fb      	str	r3, [r7, #28]
            dhcpIPv4_CLIENT_IDENTIFIER_OPTION_CODE,  7, 1, 0, 0, 0, 0, 0, 0,      /* Client identifier. */
            dhcpIPv4_REQUEST_IP_ADDRESS_OPTION_CODE, 4, 0, 0, 0, 0,               /* The IP address being requested. */
            dhcpIPv4_SERVER_IP_ADDRESS_OPTION_CODE,  4, 0, 0, 0, 0,               /* The IP address of the DHCP server. */
            dhcpOPTION_END_BYTE
        };
        size_t uxOptionsLength = sizeof( ucDHCPRequestOptions );
 800c506:	2319      	movs	r3, #25
 800c508:	607b      	str	r3, [r7, #4]
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;

        pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress,
 800c50a:	1d3b      	adds	r3, r7, #4
 800c50c:	f107 0008 	add.w	r0, r7, #8
 800c510:	4a1c      	ldr	r2, [pc, #112]	@ (800c584 <prvSendDHCPRequest+0x88>)
 800c512:	2101      	movs	r1, #1
 800c514:	f7ff ff2e 	bl	800c374 <prvCreatePartDHCPMessage>
 800c518:	61b8      	str	r0, [r7, #24]
                                                        ( BaseType_t ) dhcpREQUEST_OPCODE,
                                                        ucDHCPRequestOptions,
                                                        &( uxOptionsLength ) );

        if( pucUDPPayloadBuffer != NULL )
 800c51a:	69bb      	ldr	r3, [r7, #24]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d02b      	beq.n	800c578 <prvSendDHCPRequest+0x7c>
            /*
             * Use helper variables for memcpy() source & dest to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = &EP_DHCPData.ulOfferedIPAddress;
 800c520:	4b19      	ldr	r3, [pc, #100]	@ (800c588 <prvSendDHCPRequest+0x8c>)
 800c522:	617b      	str	r3, [r7, #20]
            pvCopyDest = &pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpREQUESTED_IP_ADDRESS_OFFSET ];
 800c524:	69bb      	ldr	r3, [r7, #24]
 800c526:	33fe      	adds	r3, #254	@ 0xfe
 800c528:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( EP_DHCPData.ulOfferedIPAddress ) );
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	461a      	mov	r2, r3
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	601a      	str	r2, [r3, #0]

            /* Copy in the address of the DHCP server being used. */
            pvCopySource = &EP_DHCPData.ulDHCPServerAddress;
 800c534:	4b15      	ldr	r3, [pc, #84]	@ (800c58c <prvSendDHCPRequest+0x90>)
 800c536:	617b      	str	r3, [r7, #20]
            pvCopyDest = &pucUDPPayloadBuffer[ dhcpFIRST_OPTION_BYTE_OFFSET + dhcpDHCP_SERVER_IP_ADDRESS_OFFSET ];
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800c53e:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( EP_DHCPData.ulDHCPServerAddress ) );
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	461a      	mov	r2, r3
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	601a      	str	r2, [r3, #0]

            FreeRTOS_debug_printf( ( "vDHCPProcess: reply %lxip\n", FreeRTOS_ntohl( EP_DHCPData.ulOfferedIPAddress ) ) );
            iptraceSENDING_DHCP_REQUEST();

            if( FreeRTOS_sendto( xDHCPSocket, pucUDPPayloadBuffer, sizeof( DHCPMessage_IPv4_t ) + uxOptionsLength, FREERTOS_ZERO_COPY, &xAddress, sizeof( xAddress ) ) == 0 )
 800c54a:	4b11      	ldr	r3, [pc, #68]	@ (800c590 <prvSendDHCPRequest+0x94>)
 800c54c:	6818      	ldr	r0, [r3, #0]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f103 02f0 	add.w	r2, r3, #240	@ 0xf0
 800c554:	2308      	movs	r3, #8
 800c556:	9301      	str	r3, [sp, #4]
 800c558:	f107 0308 	add.w	r3, r7, #8
 800c55c:	9300      	str	r3, [sp, #0]
 800c55e:	2301      	movs	r3, #1
 800c560:	69b9      	ldr	r1, [r7, #24]
 800c562:	f001 fde0 	bl	800e126 <FreeRTOS_sendto>
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d103      	bne.n	800c574 <prvSendDHCPRequest+0x78>
            {
                /* The packet was not successfully queued for sending and must be
                 * returned to the stack. */
                FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayloadBuffer );
 800c56c:	69b8      	ldr	r0, [r7, #24]
 800c56e:	f000 fb0e 	bl	800cb8e <FreeRTOS_ReleaseUDPPayloadBuffer>
 800c572:	e001      	b.n	800c578 <prvSendDHCPRequest+0x7c>
            }
            else
            {
                xResult = pdPASS;
 800c574:	2301      	movs	r3, #1
 800c576:	61fb      	str	r3, [r7, #28]
            }
        }

        return xResult;
 800c578:	69fb      	ldr	r3, [r7, #28]
    }
 800c57a:	4618      	mov	r0, r3
 800c57c:	3720      	adds	r7, #32
 800c57e:	46bd      	mov	sp, r7
 800c580:	bd80      	pop	{r7, pc}
 800c582:	bf00      	nop
 800c584:	08016f1c 	.word	0x08016f1c
 800c588:	2000a2d8 	.word	0x2000a2d8
 800c58c:	2000a2dc 	.word	0x2000a2dc
 800c590:	2000a2d0 	.word	0x2000a2d0

0800c594 <prvSendDHCPDiscover>:
/**
 * @brief Create and send a DHCP discover packet through the DHCP socket.
 * @return Returns pdPASS when the message is successfully created and sent.
 */
    static BaseType_t prvSendDHCPDiscover( void )
    {
 800c594:	b580      	push	{r7, lr}
 800c596:	b088      	sub	sp, #32
 800c598:	af02      	add	r7, sp, #8
        BaseType_t xResult = pdFAIL;
 800c59a:	2300      	movs	r3, #0
 800c59c:	617b      	str	r3, [r7, #20]
            dhcpIPv4_MESSAGE_TYPE_OPTION_CODE,      1, dhcpMESSAGE_TYPE_DISCOVER,                                                                        /* Message type option. */
            dhcpIPv4_CLIENT_IDENTIFIER_OPTION_CODE, 7, 1,                                0,                            0, 0, 0, 0, 0,                    /* Client identifier. */
            dhcpIPv4_PARAMETER_REQUEST_OPTION_CODE, 3, dhcpIPv4_SUBNET_MASK_OPTION_CODE, dhcpIPv4_GATEWAY_OPTION_CODE, dhcpIPv4_DNS_SERVER_OPTIONS_CODE, /* Parameter request option. */
            dhcpOPTION_END_BYTE
        };
        size_t uxOptionsLength = sizeof( ucDHCPDiscoverOptions );
 800c59e:	2312      	movs	r3, #18
 800c5a0:	607b      	str	r3, [r7, #4]

        pucUDPPayloadBuffer = prvCreatePartDHCPMessage( &xAddress,
 800c5a2:	1d3b      	adds	r3, r7, #4
 800c5a4:	f107 0008 	add.w	r0, r7, #8
 800c5a8:	4a11      	ldr	r2, [pc, #68]	@ (800c5f0 <prvSendDHCPDiscover+0x5c>)
 800c5aa:	2101      	movs	r1, #1
 800c5ac:	f7ff fee2 	bl	800c374 <prvCreatePartDHCPMessage>
 800c5b0:	6138      	str	r0, [r7, #16]
                                                        ( BaseType_t ) dhcpREQUEST_OPCODE,
                                                        ucDHCPDiscoverOptions,
                                                        &( uxOptionsLength ) );

        if( pucUDPPayloadBuffer != NULL )
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d015      	beq.n	800c5e4 <prvSendDHCPDiscover+0x50>
        {
            FreeRTOS_debug_printf( ( "vDHCPProcess: discover\n" ) );
            iptraceSENDING_DHCP_DISCOVER();

            if( FreeRTOS_sendto( xDHCPSocket,
 800c5b8:	4b0e      	ldr	r3, [pc, #56]	@ (800c5f4 <prvSendDHCPDiscover+0x60>)
 800c5ba:	6818      	ldr	r0, [r3, #0]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f103 02f0 	add.w	r2, r3, #240	@ 0xf0
 800c5c2:	2308      	movs	r3, #8
 800c5c4:	9301      	str	r3, [sp, #4]
 800c5c6:	f107 0308 	add.w	r3, r7, #8
 800c5ca:	9300      	str	r3, [sp, #0]
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	6939      	ldr	r1, [r7, #16]
 800c5d0:	f001 fda9 	bl	800e126 <FreeRTOS_sendto>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d102      	bne.n	800c5e0 <prvSendDHCPDiscover+0x4c>
                                 &( xAddress ),
                                 sizeof( xAddress ) ) == 0 )
            {
                /* The packet was not successfully queued for sending and must be
                 * returned to the stack. */
                FreeRTOS_ReleaseUDPPayloadBuffer( pucUDPPayloadBuffer );
 800c5da:	6938      	ldr	r0, [r7, #16]
 800c5dc:	f000 fad7 	bl	800cb8e <FreeRTOS_ReleaseUDPPayloadBuffer>
            }

            xResult = pdTRUE;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	617b      	str	r3, [r7, #20]
        }

        return xResult;
 800c5e4:	697b      	ldr	r3, [r7, #20]
    }
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3718      	adds	r7, #24
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	08016f38 	.word	0x08016f38
 800c5f4:	2000a2d0 	.word	0x2000a2d0

0800c5f8 <vCastPointerTo_EthernetHeader_t>:
    {
 800c5f8:	b480      	push	{r7}
 800c5fa:	b083      	sub	sp, #12
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
        return ( EthernetHeader_t * ) pvArgument;
 800c600:	687b      	ldr	r3, [r7, #4]
    }
 800c602:	4618      	mov	r0, r3
 800c604:	370c      	adds	r7, #12
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr

0800c60e <vCastConstPointerTo_EthernetHeader_t>:
    {
 800c60e:	b480      	push	{r7}
 800c610:	b083      	sub	sp, #12
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
        return ( const EthernetHeader_t * ) pvArgument;
 800c616:	687b      	ldr	r3, [r7, #4]
    }
 800c618:	4618      	mov	r0, r3
 800c61a:	370c      	adds	r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <vCastPointerTo_ARPPacket_t>:
    {
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
        return ( ARPPacket_t * ) pvArgument;
 800c62c:	687b      	ldr	r3, [r7, #4]
    }
 800c62e:	4618      	mov	r0, r3
 800c630:	370c      	adds	r7, #12
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr

0800c63a <vCastPointerTo_IPPacket_t>:
    };
    #include "pack_struct_end.h"
    typedef struct xIP_PACKET IPPacket_t;

    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( IPPacket_t )
    {
 800c63a:	b480      	push	{r7}
 800c63c:	b083      	sub	sp, #12
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
        return ( IPPacket_t * ) pvArgument;
 800c642:	687b      	ldr	r3, [r7, #4]
    }
 800c644:	4618      	mov	r0, r3
 800c646:	370c      	adds	r7, #12
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <vCastConstPointerTo_IPPacket_t>:
    static portINLINE ipDECL_CAST_CONST_PTR_FUNC_FOR_TYPE( IPPacket_t )
    {
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
        return ( const IPPacket_t * ) pvArgument;
 800c658:	687b      	ldr	r3, [r7, #4]
    }
 800c65a:	4618      	mov	r0, r3
 800c65c:	370c      	adds	r7, #12
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr

0800c666 <vCastPointerTo_ICMPPacket_t>:
    };
    #include "pack_struct_end.h"
    typedef struct xICMP_PACKET ICMPPacket_t;

    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( ICMPPacket_t )
    {
 800c666:	b480      	push	{r7}
 800c668:	b083      	sub	sp, #12
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
        return ( ICMPPacket_t * ) pvArgument;
 800c66e:	687b      	ldr	r3, [r7, #4]
    }
 800c670:	4618      	mov	r0, r3
 800c672:	370c      	adds	r7, #12
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr

0800c67c <vCastConstPointerTo_UDPPacket_t>:
    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( UDPPacket_t )
    {
        return ( UDPPacket_t * ) pvArgument;
    }
    static portINLINE ipDECL_CAST_CONST_PTR_FUNC_FOR_TYPE( UDPPacket_t )
    {
 800c67c:	b480      	push	{r7}
 800c67e:	b083      	sub	sp, #12
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
        return ( const UDPPacket_t * ) pvArgument;
 800c684:	687b      	ldr	r3, [r7, #4]
    }
 800c686:	4618      	mov	r0, r3
 800c688:	370c      	adds	r7, #12
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr

0800c692 <vCastPointerTo_ProtocolPacket_t>:
        UDPPacket_t xUDPPacket;   /**< Union member: UDP packet struct */
        ICMPPacket_t xICMPPacket; /**< Union member: ICMP packet struct */
    } ProtocolPacket_t;

    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( ProtocolPacket_t )
    {
 800c692:	b480      	push	{r7}
 800c694:	b083      	sub	sp, #12
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
        return ( ProtocolPacket_t * ) pvArgument;
 800c69a:	687b      	ldr	r3, [r7, #4]
    }
 800c69c:	4618      	mov	r0, r3
 800c69e:	370c      	adds	r7, #12
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <vCastConstPointerTo_ProtocolPacket_t>:
    static portINLINE ipDECL_CAST_CONST_PTR_FUNC_FOR_TYPE( ProtocolPacket_t )
    {
 800c6a8:	b480      	push	{r7}
 800c6aa:	b083      	sub	sp, #12
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
        return ( const ProtocolPacket_t * ) pvArgument;
 800c6b0:	687b      	ldr	r3, [r7, #4]
    }
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	370c      	adds	r7, #12
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr

0800c6be <vCastPointerTo_FreeRTOS_Socket_t>:
            #endif /* ipconfigUSE_TCP */
        } u;                              /**< Union of TCP/UDP socket */
    } FreeRTOS_Socket_t;

    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( FreeRTOS_Socket_t )
    {
 800c6be:	b480      	push	{r7}
 800c6c0:	b083      	sub	sp, #12
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
        return ( FreeRTOS_Socket_t * ) pvArgument;
 800c6c6:	687b      	ldr	r3, [r7, #4]
    }
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	370c      	adds	r7, #12
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr

0800c6d4 <vCastPointerTo_SocketSelect_t>:
             */
            EventGroupHandle_t xSelectGroup;
        } SocketSelect_t;

        static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( SocketSelect_t )
        {
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
            return ( SocketSelect_t * ) pvArgument;
 800c6dc:	687b      	ldr	r3, [r7, #4]
        }
 800c6de:	4618      	mov	r0, r3
 800c6e0:	370c      	adds	r7, #12
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr

0800c6ea <vCastPointerTo_NetworkBufferDescriptor_t>:
 * @brief Utility function to cast pointer of a type to pointer of type NetworkBufferDescriptor_t.
 *
 * @return The casted pointer.
 */
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( NetworkBufferDescriptor_t )
{
 800c6ea:	b480      	push	{r7}
 800c6ec:	b083      	sub	sp, #12
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
    return ( NetworkBufferDescriptor_t * ) pvArgument;
 800c6f2:	687b      	ldr	r3, [r7, #4]
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	370c      	adds	r7, #12
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <prvIPTask>:
 *        the data of the IP-stack, and so it has no need of using mutexes.
 *
 * @param[in] pvParameters: Not used.
 */
static void prvIPTask( void * pvParameters )
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b08c      	sub	sp, #48	@ 0x30
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]

    /* Generate a dummy message to say that the network connection has gone
     *  down.  This will cause this task to initialise the network interface.  After
     *  this it is the responsibility of the network interface hardware driver to
     *  send this message if a previously connected network is disconnected. */
    FreeRTOS_NetworkDown();
 800c708:	f000 f9f4 	bl	800caf4 <FreeRTOS_NetworkDown>

    #if ( ipconfigUSE_TCP == 1 )
        {
            /* Initialise the TCP timer. */
            prvIPTimerReload( &xTCPTimer, pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 800c70c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800c710:	4868      	ldr	r0, [pc, #416]	@ (800c8b4 <prvIPTask+0x1b4>)
 800c712:	f000 f9a3 	bl	800ca5c <prvIPTimerReload>
        }
    #endif

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 800c716:	4b68      	ldr	r3, [pc, #416]	@ (800c8b8 <prvIPTask+0x1b8>)
 800c718:	2201      	movs	r2, #1
 800c71a:	601a      	str	r2, [r3, #0]
    {
        ipconfigWATCHDOG_TIMER();

        /* Check the ARP, DHCP and TCP timers to see if there is any periodic
         * or timeout processing to perform. */
        prvCheckNetworkTimers();
 800c71c:	f000 f930 	bl	800c980 <prvCheckNetworkTimers>

        /* Calculate the acceptable maximum sleep time. */
        xNextIPSleep = prvCalculateSleepTime();
 800c720:	f000 f8f4 	bl	800c90c <prvCalculateSleepTime>
 800c724:	62f8      	str	r0, [r7, #44]	@ 0x2c

        /* Wait until there is something to do. If the following call exits
         * due to a time out rather than a message being received, set a
         * 'NoEvent' value. */
        if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 800c726:	4b65      	ldr	r3, [pc, #404]	@ (800c8bc <prvIPTask+0x1bc>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f107 0114 	add.w	r1, r7, #20
 800c72e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c730:	4618      	mov	r0, r3
 800c732:	f7fc f8eb 	bl	800890c <xQueueReceive>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d101      	bne.n	800c740 <prvIPTask+0x40>
        {
            xReceivedEvent.eEventType = eNoEvent;
 800c73c:	23ff      	movs	r3, #255	@ 0xff
 800c73e:	753b      	strb	r3, [r7, #20]
            }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

        iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

        switch( xReceivedEvent.eEventType )
 800c740:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800c744:	3301      	adds	r3, #1
 800c746:	2b0d      	cmp	r3, #13
 800c748:	f200 80a9 	bhi.w	800c89e <prvIPTask+0x19e>
 800c74c:	a201      	add	r2, pc, #4	@ (adr r2, 800c754 <prvIPTask+0x54>)
 800c74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c752:	bf00      	nop
 800c754:	0800c89f 	.word	0x0800c89f
 800c758:	0800c78d 	.word	0x0800c78d
 800c75c:	0800c799 	.word	0x0800c799
 800c760:	0800c7ab 	.word	0x0800c7ab
 800c764:	0800c7bf 	.word	0x0800c7bf
 800c768:	0800c827 	.word	0x0800c827
 800c76c:	0800c839 	.word	0x0800c839
 800c770:	0800c863 	.word	0x0800c863
 800c774:	0800c86f 	.word	0x0800c86f
 800c778:	0800c899 	.word	0x0800c899
 800c77c:	0800c7c5 	.word	0x0800c7c5
 800c780:	0800c815 	.word	0x0800c815
 800c784:	0800c851 	.word	0x0800c851
 800c788:	0800c89f 	.word	0x0800c89f
        {
            case eNetworkDownEvent:
                /* Attempt to establish a connection. */
                xNetworkUp = pdFALSE;
 800c78c:	4b4c      	ldr	r3, [pc, #304]	@ (800c8c0 <prvIPTask+0x1c0>)
 800c78e:	2200      	movs	r2, #0
 800c790:	601a      	str	r2, [r3, #0]
                prvProcessNetworkDownEvent();
 800c792:	f000 fbc1 	bl	800cf18 <prvProcessNetworkDownEvent>
                break;
 800c796:	e085      	b.n	800c8a4 <prvIPTask+0x1a4>
            case eNetworkRxEvent:

                /* The network hardware driver has received a new packet.  A
                 * pointer to the received buffer is located in the pvData member
                 * of the received event structure. */
                prvHandleEthernetPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData ) );
 800c798:	69bb      	ldr	r3, [r7, #24]
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7ff ffa5 	bl	800c6ea <vCastPointerTo_NetworkBufferDescriptor_t>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f000 f8a6 	bl	800c8f4 <prvHandleEthernetPacket>
                break;
 800c7a8:	e07c      	b.n	800c8a4 <prvIPTask+0x1a4>

            case eNetworkTxEvent:

               {
                   NetworkBufferDescriptor_t * pxDescriptor = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData );
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7ff ff9c 	bl	800c6ea <vCastPointerTo_NetworkBufferDescriptor_t>
 800c7b2:	61f8      	str	r0, [r7, #28]

                   /* Send a network packet. The ownership will  be transferred to
                    * the driver, which will release it after delivery. */
                   iptraceNETWORK_INTERFACE_OUTPUT( pxDescriptor->xDataLength, pxDescriptor->pucEthernetBuffer );
                   ( void ) xNetworkInterfaceOutput( pxDescriptor, pdTRUE );
 800c7b4:	2101      	movs	r1, #1
 800c7b6:	69f8      	ldr	r0, [r7, #28]
 800c7b8:	f006 fe46 	bl	8013448 <xNetworkInterfaceOutput>
               }

               break;
 800c7bc:	e072      	b.n	800c8a4 <prvIPTask+0x1a4>

            case eARPTimerEvent:
                /* The ARP timer has expired, process the ARP cache. */
                vARPAgeCache();
 800c7be:	f7ff f91b 	bl	800b9f8 <vARPAgeCache>
                break;
 800c7c2:	e06f      	b.n	800c8a4 <prvIPTask+0x1a4>
                /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
                 * to a port. The port number is communicated in the socket field
                 * usLocalPort. vSocketBind() will actually bind the socket and the
                 * API will unblock as soon as the eSOCKET_BOUND event is
                 * triggered. */
                pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 800c7c4:	69bb      	ldr	r3, [r7, #24]
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7ff ff79 	bl	800c6be <vCastPointerTo_FreeRTOS_Socket_t>
 800c7cc:	62b8      	str	r0, [r7, #40]	@ 0x28
                xAddress.sin_addr = 0U; /* For the moment. */
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	613b      	str	r3, [r7, #16]
                xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 800c7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7d4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c7d6:	021b      	lsls	r3, r3, #8
 800c7d8:	b21a      	sxth	r2, r3
 800c7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7dc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800c7de:	0a1b      	lsrs	r3, r3, #8
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	b21b      	sxth	r3, r3
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	b21b      	sxth	r3, r3
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	81fb      	strh	r3, [r7, #14]
                pxSocket->usLocalPort = 0U;
 800c7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	849a      	strh	r2, [r3, #36]	@ 0x24
                ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 800c7f2:	f107 010c 	add.w	r1, r7, #12
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	2208      	movs	r2, #8
 800c7fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7fc:	f001 fdaa 	bl	800e354 <vSocketBind>

                /* Before 'eSocketBindEvent' was sent it was tested that
                 * ( xEventGroup != NULL ) so it can be used now to wake up the
                 * user. */
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 800c800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f043 0210 	orr.w	r2, r3, #16
 800c808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c80a:	601a      	str	r2, [r3, #0]
                vSocketWakeUpUser( pxSocket );
 800c80c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c80e:	f002 f99d 	bl	800eb4c <vSocketWakeUpUser>
                break;
 800c812:	e047      	b.n	800c8a4 <prvIPTask+0x1a4>

                /* The user API FreeRTOS_closesocket() has sent a message to the
                 * IP-task to actually close a socket. This is handled in
                 * vSocketClose().  As the socket gets closed, there is no way to
                 * report back to the API, so the API won't wait for the result */
                ( void ) vSocketClose( ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData ) );
 800c814:	69bb      	ldr	r3, [r7, #24]
 800c816:	4618      	mov	r0, r3
 800c818:	f7ff ff51 	bl	800c6be <vCastPointerTo_FreeRTOS_Socket_t>
 800c81c:	4603      	mov	r3, r0
 800c81e:	4618      	mov	r0, r3
 800c820:	f001 fe5e 	bl	800e4e0 <vSocketClose>
                break;
 800c824:	e03e      	b.n	800c8a4 <prvIPTask+0x1a4>
            case eStackTxEvent:

                /* The network stack has generated a packet to send.  A
                 * pointer to the generated buffer is located in the pvData
                 * member of the received event structure. */
                vProcessGeneratedUDPPacket( ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, xReceivedEvent.pvData ) );
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	4618      	mov	r0, r3
 800c82a:	f7ff ff5e 	bl	800c6ea <vCastPointerTo_NetworkBufferDescriptor_t>
 800c82e:	4603      	mov	r3, r0
 800c830:	4618      	mov	r0, r3
 800c832:	f006 fb5b 	bl	8012eec <vProcessGeneratedUDPPacket>
                break;
 800c836:	e035      	b.n	800c8a4 <prvIPTask+0x1a4>
                    {
                        uintptr_t uxState;
                        eDHCPState_t eState;

                        /* Cast in two steps to please MISRA. */
                        uxState = ( uintptr_t ) xReceivedEvent.pvData;
 800c838:	69bb      	ldr	r3, [r7, #24]
 800c83a:	627b      	str	r3, [r7, #36]	@ 0x24
                        eState = ( eDHCPState_t ) uxState;
 800c83c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c83e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                        /* Process DHCP messages for a given end-point. */
                        vDHCPProcess( pdFALSE, eState );
 800c842:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c846:	4619      	mov	r1, r3
 800c848:	2000      	movs	r0, #0
 800c84a:	f7ff fa4d 	bl	800bce8 <vDHCPProcess>
                    }
                #endif /* ipconfigUSE_DHCP */
                break;
 800c84e:	e029      	b.n	800c8a4 <prvIPTask+0x1a4>
                            vSocketSelect( pxMessage->pxSocketSet );
                            ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
                        }
                    #else
                        {
                            vSocketSelect( ipCAST_PTR_TO_TYPE_PTR( SocketSelect_t, xReceivedEvent.pvData ) );
 800c850:	69bb      	ldr	r3, [r7, #24]
 800c852:	4618      	mov	r0, r3
 800c854:	f7ff ff3e 	bl	800c6d4 <vCastPointerTo_SocketSelect_t>
 800c858:	4603      	mov	r3, r0
 800c85a:	4618      	mov	r0, r3
 800c85c:	f002 fc3c 	bl	800f0d8 <vSocketSelect>
                        }
                    #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
                #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
                break;
 800c860:	e020      	b.n	800c8a4 <prvIPTask+0x1a4>
            case eTCPTimerEvent:
                #if ( ipconfigUSE_TCP == 1 )

                    /* Simply mark the TCP timer as expired so it gets processed
                     * the next time prvCheckNetworkTimers() is called. */
                    xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800c862:	4a14      	ldr	r2, [pc, #80]	@ (800c8b4 <prvIPTask+0x1b4>)
 800c864:	7813      	ldrb	r3, [r2, #0]
 800c866:	f043 0302 	orr.w	r3, r3, #2
 800c86a:	7013      	strb	r3, [r2, #0]
                #endif /* ipconfigUSE_TCP */
                break;
 800c86c:	e01a      	b.n	800c8a4 <prvIPTask+0x1a4>

                /* The API FreeRTOS_accept() was called, the IP-task will now
                 * check if the listening socket (communicated in pvData) actually
                 * received a new connection. */
                #if ( ipconfigUSE_TCP == 1 )
                    pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, xReceivedEvent.pvData );
 800c86e:	69bb      	ldr	r3, [r7, #24]
 800c870:	4618      	mov	r0, r3
 800c872:	f7ff ff24 	bl	800c6be <vCastPointerTo_FreeRTOS_Socket_t>
 800c876:	62b8      	str	r0, [r7, #40]	@ 0x28

                    if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 800c878:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c87a:	f005 fadf 	bl	8011e3c <xTCPCheckNewClient>
 800c87e:	4603      	mov	r3, r0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d00e      	beq.n	800c8a2 <prvIPTask+0x1a2>
                    {
                        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 800c884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f043 0204 	orr.w	r2, r3, #4
 800c88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c88e:	601a      	str	r2, [r3, #0]
                        vSocketWakeUpUser( pxSocket );
 800c890:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c892:	f002 f95b 	bl	800eb4c <vSocketWakeUpUser>
                    }
                #endif /* ipconfigUSE_TCP */
                break;
 800c896:	e004      	b.n	800c8a2 <prvIPTask+0x1a2>
            case eTCPNetStat:

                /* FreeRTOS_netstat() was called to have the IP-task print an
                 * overview of all sockets and their connections */
                #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                    vTCPNetStat();
 800c898:	f002 fb94 	bl	800efc4 <vTCPNetStat>
                #endif /* ipconfigUSE_TCP */
                break;
 800c89c:	e002      	b.n	800c8a4 <prvIPTask+0x1a4>
                /* xQueueReceive() returned because of a normal time-out. */
                break;

            default:
                /* Should not get here. */
                break;
 800c89e:	bf00      	nop
 800c8a0:	e000      	b.n	800c8a4 <prvIPTask+0x1a4>
                break;
 800c8a2:	bf00      	nop
        }

        if( xNetworkDownEventPending != pdFALSE )
 800c8a4:	4b07      	ldr	r3, [pc, #28]	@ (800c8c4 <prvIPTask+0x1c4>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	f43f af37 	beq.w	800c71c <prvIPTask+0x1c>
        {
            /* A network down event could not be posted to the network event
             * queue because the queue was full.
             * As this code runs in the IP-task, it can be done directly by
             * calling prvProcessNetworkDownEvent(). */
            prvProcessNetworkDownEvent();
 800c8ae:	f000 fb33 	bl	800cf18 <prvProcessNetworkDownEvent>
        prvCheckNetworkTimers();
 800c8b2:	e733      	b.n	800c71c <prvIPTask+0x1c>
 800c8b4:	2000a35c 	.word	0x2000a35c
 800c8b8:	2000a370 	.word	0x2000a370
 800c8bc:	2000a2f4 	.word	0x2000a2f4
 800c8c0:	2000a330 	.word	0x2000a330
 800c8c4:	2000a324 	.word	0x2000a324

0800c8c8 <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
    BaseType_t xReturn;

    if( xTaskGetCurrentTaskHandle() == xIPTaskHandle )
 800c8ce:	f7fd fba9 	bl	800a024 <xTaskGetCurrentTaskHandle>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	4b06      	ldr	r3, [pc, #24]	@ (800c8f0 <xIsCallingFromIPTask+0x28>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d102      	bne.n	800c8e2 <xIsCallingFromIPTask+0x1a>
    {
        xReturn = pdTRUE;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	607b      	str	r3, [r7, #4]
 800c8e0:	e001      	b.n	800c8e6 <xIsCallingFromIPTask+0x1e>
    }
    else
    {
        xReturn = pdFALSE;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 800c8e6:	687b      	ldr	r3, [r7, #4]
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3708      	adds	r7, #8
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	2000a328 	.word	0x2000a328

0800c8f4 <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer: Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b082      	sub	sp, #8
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
    #if ( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
        {
            /* When ipconfigUSE_LINKED_RX_MESSAGES is not set to 0 then only one
             * buffer will be sent at a time.  This is the default way for +TCP to pass
             * messages from the MAC to the TCP/IP stack. */
            prvProcessEthernetPacket( pxBuffer );
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 fb49 	bl	800cf94 <prvProcessEthernetPacket>

                /* While there is another packet in the chain. */
            } while( pxBuffer != NULL );
        }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 800c902:	bf00      	nop
 800c904:	3708      	adds	r7, #8
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
	...

0800c90c <prvCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
static TickType_t prvCalculateSleepTime( void )
{
 800c90c:	b480      	push	{r7}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
    TickType_t xMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    xMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 800c912:	f242 7310 	movw	r3, #10000	@ 0x2710
 800c916:	607b      	str	r3, [r7, #4]

    if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 800c918:	4b16      	ldr	r3, [pc, #88]	@ (800c974 <prvCalculateSleepTime+0x68>)
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	f003 0301 	and.w	r3, r3, #1
 800c920:	b2db      	uxtb	r3, r3
 800c922:	2b00      	cmp	r3, #0
 800c924:	d007      	beq.n	800c936 <prvCalculateSleepTime+0x2a>
    {
        if( xARPTimer.ulRemainingTime < xMaximumSleepTime )
 800c926:	4b13      	ldr	r3, [pc, #76]	@ (800c974 <prvCalculateSleepTime+0x68>)
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d902      	bls.n	800c936 <prvCalculateSleepTime+0x2a>
        {
            xMaximumSleepTime = xARPTimer.ulReloadTime;
 800c930:	4b10      	ldr	r3, [pc, #64]	@ (800c974 <prvCalculateSleepTime+0x68>)
 800c932:	691b      	ldr	r3, [r3, #16]
 800c934:	607b      	str	r3, [r7, #4]
        }
    }

    #if ( ipconfigUSE_DHCP == 1 )
        {
            if( xDHCPTimer.bActive != pdFALSE_UNSIGNED )
 800c936:	4b10      	ldr	r3, [pc, #64]	@ (800c978 <prvCalculateSleepTime+0x6c>)
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	f003 0301 	and.w	r3, r3, #1
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	2b00      	cmp	r3, #0
 800c942:	d007      	beq.n	800c954 <prvCalculateSleepTime+0x48>
            {
                if( xDHCPTimer.ulRemainingTime < xMaximumSleepTime )
 800c944:	4b0c      	ldr	r3, [pc, #48]	@ (800c978 <prvCalculateSleepTime+0x6c>)
 800c946:	68db      	ldr	r3, [r3, #12]
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d902      	bls.n	800c954 <prvCalculateSleepTime+0x48>
                {
                    xMaximumSleepTime = xDHCPTimer.ulRemainingTime;
 800c94e:	4b0a      	ldr	r3, [pc, #40]	@ (800c978 <prvCalculateSleepTime+0x6c>)
 800c950:	68db      	ldr	r3, [r3, #12]
 800c952:	607b      	str	r3, [r7, #4]
        }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
        {
            if( xTCPTimer.ulRemainingTime < xMaximumSleepTime )
 800c954:	4b09      	ldr	r3, [pc, #36]	@ (800c97c <prvCalculateSleepTime+0x70>)
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d902      	bls.n	800c964 <prvCalculateSleepTime+0x58>
            {
                xMaximumSleepTime = xTCPTimer.ulRemainingTime;
 800c95e:	4b07      	ldr	r3, [pc, #28]	@ (800c97c <prvCalculateSleepTime+0x70>)
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	607b      	str	r3, [r7, #4]
                }
            }
        }
    #endif

    return xMaximumSleepTime;
 800c964:	687b      	ldr	r3, [r7, #4]
}
 800c966:	4618      	mov	r0, r3
 800c968:	370c      	adds	r7, #12
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	2000a334 	.word	0x2000a334
 800c978:	2000a348 	.word	0x2000a348
 800c97c:	2000a35c 	.word	0x2000a35c

0800c980 <prvCheckNetworkTimers>:
/**
 * @brief Check the network timers (ARP/DHCP/DNS/TCP) and if they are
 *        expired, send an event to the IP-Task.
 */
static void prvCheckNetworkTimers( void )
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
    /* Is it time for ARP processing? */
    if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 800c986:	481e      	ldr	r0, [pc, #120]	@ (800ca00 <prvCheckNetworkTimers+0x80>)
 800c988:	f000 f878 	bl	800ca7c <prvIPTimerCheck>
 800c98c:	4603      	mov	r3, r0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d002      	beq.n	800c998 <prvCheckNetworkTimers+0x18>
    {
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 800c992:	2003      	movs	r0, #3
 800c994:	f000 fa04 	bl	800cda0 <xSendEventToIPTask>
    }

    #if ( ipconfigUSE_DHCP == 1 )
        {
            /* Is it time for DHCP processing? */
            if( prvIPTimerCheck( &xDHCPTimer ) != pdFALSE )
 800c998:	481a      	ldr	r0, [pc, #104]	@ (800ca04 <prvCheckNetworkTimers+0x84>)
 800c99a:	f000 f86f 	bl	800ca7c <prvIPTimerCheck>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d001      	beq.n	800c9a8 <prvCheckNetworkTimers+0x28>
            {
                ( void ) xSendDHCPEvent();
 800c9a4:	f000 fa5e 	bl	800ce64 <xSendDHCPEvent>
            TickType_t xNextTime;
            BaseType_t xCheckTCPSockets;

            /* If the IP task has messages waiting to be processed then
             * it will not sleep in any case. */
            if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 800c9a8:	4b17      	ldr	r3, [pc, #92]	@ (800ca08 <prvCheckNetworkTimers+0x88>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7fc f9ad 	bl	8008d0c <uxQueueMessagesWaiting>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d102      	bne.n	800c9be <prvCheckNetworkTimers+0x3e>
            {
                xWillSleep = pdTRUE;
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	60fb      	str	r3, [r7, #12]
 800c9bc:	e001      	b.n	800c9c2 <prvCheckNetworkTimers+0x42>
            }
            else
            {
                xWillSleep = pdFALSE;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	60fb      	str	r3, [r7, #12]
            }

            /* Sockets need to be checked if the TCP timer has expired. */
            xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800c9c2:	4812      	ldr	r0, [pc, #72]	@ (800ca0c <prvCheckNetworkTimers+0x8c>)
 800c9c4:	f000 f85a 	bl	800ca7c <prvIPTimerCheck>
 800c9c8:	60b8      	str	r0, [r7, #8]

            /* Sockets will also be checked if there are TCP messages but the
            * message queue is empty (indicated by xWillSleep being true). */
            if( ( xProcessedTCPMessage != pdFALSE ) && ( xWillSleep != pdFALSE ) )
 800c9ca:	4b11      	ldr	r3, [pc, #68]	@ (800ca10 <prvCheckNetworkTimers+0x90>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d004      	beq.n	800c9dc <prvCheckNetworkTimers+0x5c>
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d001      	beq.n	800c9dc <prvCheckNetworkTimers+0x5c>
            {
                xCheckTCPSockets = pdTRUE;
 800c9d8:	2301      	movs	r3, #1
 800c9da:	60bb      	str	r3, [r7, #8]
            }

            if( xCheckTCPSockets != pdFALSE )
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d00a      	beq.n	800c9f8 <prvCheckNetworkTimers+0x78>
            {
                /* Attend to the sockets, returning the period after which the
                 * check must be repeated. */
                xNextTime = xTCPTimerCheck( xWillSleep );
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	f002 f8f6 	bl	800ebd4 <xTCPTimerCheck>
 800c9e8:	6078      	str	r0, [r7, #4]
                prvIPTimerStart( &xTCPTimer, xNextTime );
 800c9ea:	6879      	ldr	r1, [r7, #4]
 800c9ec:	4807      	ldr	r0, [pc, #28]	@ (800ca0c <prvCheckNetworkTimers+0x8c>)
 800c9ee:	f000 f811 	bl	800ca14 <prvIPTimerStart>
                xProcessedTCPMessage = 0;
 800c9f2:	4b07      	ldr	r3, [pc, #28]	@ (800ca10 <prvCheckNetworkTimers+0x90>)
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	601a      	str	r2, [r3, #0]
            }
        }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800c9f8:	bf00      	nop
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	2000a334 	.word	0x2000a334
 800ca04:	2000a348 	.word	0x2000a348
 800ca08:	2000a2f4 	.word	0x2000a2f4
 800ca0c:	2000a35c 	.word	0x2000a35c
 800ca10:	2000a32c 	.word	0x2000a32c

0800ca14 <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime: Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b082      	sub	sp, #8
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	3304      	adds	r3, #4
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7fd f972 	bl	8009d0c <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	683a      	ldr	r2, [r7, #0]
 800ca2c:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d105      	bne.n	800ca40 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 800ca34:	687a      	ldr	r2, [r7, #4]
 800ca36:	7813      	ldrb	r3, [r2, #0]
 800ca38:	f043 0302 	orr.w	r3, r3, #2
 800ca3c:	7013      	strb	r3, [r2, #0]
 800ca3e:	e004      	b.n	800ca4a <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	7813      	ldrb	r3, [r2, #0]
 800ca44:	f36f 0341 	bfc	r3, #1, #1
 800ca48:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	7813      	ldrb	r3, [r2, #0]
 800ca4e:	f043 0301 	orr.w	r3, r3, #1
 800ca52:	7013      	strb	r3, [r2, #0]
}
 800ca54:	bf00      	nop
 800ca56:	3708      	adds	r7, #8
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <prvIPTimerReload>:
 * @param[in] pxTimer: Pointer to the IP timer.
 * @param[in] xTime: Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b082      	sub	sp, #8
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	683a      	ldr	r2, [r7, #0]
 800ca6a:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 800ca6c:	6839      	ldr	r1, [r7, #0]
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7ff ffd0 	bl	800ca14 <prvIPTimerStart>
}
 800ca74:	bf00      	nop
 800ca76:	3708      	adds	r7, #8
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <prvIPTimerCheck>:
 * @param[in] pxTimer: Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	781b      	ldrb	r3, [r3, #0]
 800ca88:	f003 0301 	and.w	r3, r3, #1
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d102      	bne.n	800ca98 <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 800ca92:	2300      	movs	r3, #0
 800ca94:	60fb      	str	r3, [r7, #12]
 800ca96:	e028      	b.n	800caea <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	f003 0302 	and.w	r3, r3, #2
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d10f      	bne.n	800cac6 <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	1d1a      	adds	r2, r3, #4
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	330c      	adds	r3, #12
 800caae:	4619      	mov	r1, r3
 800cab0:	4610      	mov	r0, r2
 800cab2:	f7fd f96b 	bl	8009d8c <xTaskCheckForTimeOut>
 800cab6:	4603      	mov	r3, r0
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d004      	beq.n	800cac6 <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	7813      	ldrb	r3, [r2, #0]
 800cac0:	f043 0302 	orr.w	r3, r3, #2
 800cac4:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	f003 0302 	and.w	r3, r3, #2
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d008      	beq.n	800cae6 <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	691b      	ldr	r3, [r3, #16]
 800cad8:	4619      	mov	r1, r3
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f7ff ff9a 	bl	800ca14 <prvIPTimerStart>
            xReturn = pdTRUE;
 800cae0:	2301      	movs	r3, #1
 800cae2:	60fb      	str	r3, [r7, #12]
 800cae4:	e001      	b.n	800caea <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 800cae6:	2300      	movs	r3, #0
 800cae8:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800caea:	68fb      	ldr	r3, [r7, #12]
}
 800caec:	4618      	mov	r0, r3
 800caee:	3710      	adds	r7, #16
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}

0800caf4 <FreeRTOS_NetworkDown>:
 * @brief Send a network down event to the IP-task. If it fails to post a message,
 *         the failure will be noted in the variable 'xNetworkDownEventPending'
 *         and later on a 'network-down' event, it will be executed.
 */
void FreeRTOS_NetworkDown( void )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
    static const IPStackEvent_t xNetworkDownEvent = { eNetworkDownEvent, NULL };
    const TickType_t xDontBlock = ( TickType_t ) 0;
 800cafa:	2300      	movs	r3, #0
 800cafc:	607b      	str	r3, [r7, #4]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 800cafe:	6879      	ldr	r1, [r7, #4]
 800cb00:	4808      	ldr	r0, [pc, #32]	@ (800cb24 <FreeRTOS_NetworkDown+0x30>)
 800cb02:	f000 f963 	bl	800cdcc <xSendEventStructToIPTask>
 800cb06:	4603      	mov	r3, r0
 800cb08:	2b01      	cmp	r3, #1
 800cb0a:	d003      	beq.n	800cb14 <FreeRTOS_NetworkDown+0x20>
    {
        /* Could not send the message, so it is still pending. */
        xNetworkDownEventPending = pdTRUE;
 800cb0c:	4b06      	ldr	r3, [pc, #24]	@ (800cb28 <FreeRTOS_NetworkDown+0x34>)
 800cb0e:	2201      	movs	r2, #1
 800cb10:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        xNetworkDownEventPending = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 800cb12:	e002      	b.n	800cb1a <FreeRTOS_NetworkDown+0x26>
        xNetworkDownEventPending = pdFALSE;
 800cb14:	4b04      	ldr	r3, [pc, #16]	@ (800cb28 <FreeRTOS_NetworkDown+0x34>)
 800cb16:	2200      	movs	r2, #0
 800cb18:	601a      	str	r2, [r3, #0]
}
 800cb1a:	bf00      	nop
 800cb1c:	3708      	adds	r7, #8
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	08016f54 	.word	0x08016f54
 800cb28:	2000a324 	.word	0x2000a324

0800cb2c <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b085      	sub	sp, #20
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d102      	bne.n	800cb42 <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	60fb      	str	r3, [r7, #12]
 800cb40:	e011      	b.n	800cb66 <prvPacketBuffer_to_NetworkBuffer+0x3a>
    }
    else
    {
        /* Obtain the network buffer from the zero copy pointer. */
        uxBuffer = ipPOINTER_CAST( uintptr_t, pvBuffer );
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	60bb      	str	r3, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 800cb46:	68ba      	ldr	r2, [r7, #8]
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	1ad3      	subs	r3, r2, r3
 800cb4c:	3b0a      	subs	r3, #10
 800cb4e:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	f003 0303 	and.w	r3, r3, #3
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d103      	bne.n	800cb62 <prvPacketBuffer_to_NetworkBuffer+0x36>
        {
            /* The following statement may trigger a:
             * warning: cast increases required alignment of target type [-Wcast-align].
             * It has been confirmed though that the alignment is suitable. */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	60fb      	str	r3, [r7, #12]
 800cb60:	e001      	b.n	800cb66 <prvPacketBuffer_to_NetworkBuffer+0x3a>
        }
        else
        {
            pxResult = NULL;
 800cb62:	2300      	movs	r3, #0
 800cb64:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 800cb66:	68fb      	ldr	r3, [r7, #12]
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3714      	adds	r7, #20
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr

0800cb74 <pxUDPPayloadBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer: Pointer to the UDP payload buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
NetworkBufferDescriptor_t * pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b082      	sub	sp, #8
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
    return prvPacketBuffer_to_NetworkBuffer( pvBuffer, sizeof( UDPPacket_t ) );
 800cb7c:	212c      	movs	r1, #44	@ 0x2c
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f7ff ffd4 	bl	800cb2c <prvPacketBuffer_to_NetworkBuffer>
 800cb84:	4603      	mov	r3, r0
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3708      	adds	r7, #8
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}

0800cb8e <FreeRTOS_ReleaseUDPPayloadBuffer>:
 * @brief Release the UDP payload buffer.
 *
 * @param[in] pvBuffer: Pointer to the UDP buffer that is to be released.
 */
void FreeRTOS_ReleaseUDPPayloadBuffer( void const * pvBuffer )
{
 800cb8e:	b580      	push	{r7, lr}
 800cb90:	b082      	sub	sp, #8
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	6078      	str	r0, [r7, #4]
    vReleaseNetworkBufferAndDescriptor( pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer ) );
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f7ff ffec 	bl	800cb74 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f007 fc46 	bl	8014430 <vReleaseNetworkBufferAndDescriptor>
}
 800cba4:	bf00      	nop
 800cba6:	3708      	adds	r7, #8
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <FreeRTOS_IPInit>:
BaseType_t FreeRTOS_IPInit( const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                            const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
{
 800cbac:	b5b0      	push	{r4, r5, r7, lr}
 800cbae:	b08c      	sub	sp, #48	@ 0x30
 800cbb0:	af02      	add	r7, sp, #8
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	60b9      	str	r1, [r7, #8]
 800cbb6:	607a      	str	r2, [r7, #4]
 800cbb8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdFALSE;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800cbbe:	f000 ffa7 	bl	800db10 <xIPIsNetworkTaskReady>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d00d      	beq.n	800cbe4 <FreeRTOS_IPInit+0x38>
	__asm volatile
 800cbc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbcc:	b672      	cpsid	i
 800cbce:	f383 8811 	msr	BASEPRI, r3
 800cbd2:	f3bf 8f6f 	isb	sy
 800cbd6:	f3bf 8f4f 	dsb	sy
 800cbda:	b662      	cpsie	i
 800cbdc:	623b      	str	r3, [r7, #32]
}
 800cbde:	bf00      	nop
 800cbe0:	bf00      	nop
 800cbe2:	e7fd      	b.n	800cbe0 <FreeRTOS_IPInit+0x34>
    configASSERT( xNetworkEventQueue == NULL );
 800cbe4:	4b66      	ldr	r3, [pc, #408]	@ (800cd80 <FreeRTOS_IPInit+0x1d4>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d00d      	beq.n	800cc08 <FreeRTOS_IPInit+0x5c>
	__asm volatile
 800cbec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbf0:	b672      	cpsid	i
 800cbf2:	f383 8811 	msr	BASEPRI, r3
 800cbf6:	f3bf 8f6f 	isb	sy
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	b662      	cpsie	i
 800cc00:	61fb      	str	r3, [r7, #28]
}
 800cc02:	bf00      	nop
 800cc04:	bf00      	nop
 800cc06:	e7fd      	b.n	800cc04 <FreeRTOS_IPInit+0x58>
    configASSERT( xIPTaskHandle == NULL );
 800cc08:	4b5e      	ldr	r3, [pc, #376]	@ (800cd84 <FreeRTOS_IPInit+0x1d8>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d00d      	beq.n	800cc2c <FreeRTOS_IPInit+0x80>
	__asm volatile
 800cc10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc14:	b672      	cpsid	i
 800cc16:	f383 8811 	msr	BASEPRI, r3
 800cc1a:	f3bf 8f6f 	isb	sy
 800cc1e:	f3bf 8f4f 	dsb	sy
 800cc22:	b662      	cpsie	i
 800cc24:	61bb      	str	r3, [r7, #24]
}
 800cc26:	bf00      	nop
 800cc28:	bf00      	nop
 800cc2a:	e7fd      	b.n	800cc28 <FreeRTOS_IPInit+0x7c>
            configASSERT( sizeof( ICMPHeader_t ) == ipEXPECTED_ICMPHeader_t_SIZE );
            configASSERT( sizeof( UDPHeader_t ) == ipEXPECTED_UDPHeader_t_SIZE );
        }
    #endif /* ifndef _lint */
    /* Attempt to create the queue used to communicate with the IP task. */
    xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	2108      	movs	r1, #8
 800cc30:	2041      	movs	r0, #65	@ 0x41
 800cc32:	f7fb fc1e 	bl	8008472 <xQueueGenericCreate>
 800cc36:	4603      	mov	r3, r0
 800cc38:	4a51      	ldr	r2, [pc, #324]	@ (800cd80 <FreeRTOS_IPInit+0x1d4>)
 800cc3a:	6013      	str	r3, [r2, #0]
    configASSERT( xNetworkEventQueue != NULL );
 800cc3c:	4b50      	ldr	r3, [pc, #320]	@ (800cd80 <FreeRTOS_IPInit+0x1d4>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d10d      	bne.n	800cc60 <FreeRTOS_IPInit+0xb4>
	__asm volatile
 800cc44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc48:	b672      	cpsid	i
 800cc4a:	f383 8811 	msr	BASEPRI, r3
 800cc4e:	f3bf 8f6f 	isb	sy
 800cc52:	f3bf 8f4f 	dsb	sy
 800cc56:	b662      	cpsie	i
 800cc58:	617b      	str	r3, [r7, #20]
}
 800cc5a:	bf00      	nop
 800cc5c:	bf00      	nop
 800cc5e:	e7fd      	b.n	800cc5c <FreeRTOS_IPInit+0xb0>

    if( xNetworkEventQueue != NULL )
 800cc60:	4b47      	ldr	r3, [pc, #284]	@ (800cd80 <FreeRTOS_IPInit+0x1d4>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	f000 8086 	beq.w	800cd76 <FreeRTOS_IPInit+0x1ca>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
            {
                /* A queue registry is normally used to assist a kernel aware
                 * debugger.  If one is in use then it will be helpful for the debugger
                 * to show information about the network event queue. */
                vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 800cc6a:	4b45      	ldr	r3, [pc, #276]	@ (800cd80 <FreeRTOS_IPInit+0x1d4>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4946      	ldr	r1, [pc, #280]	@ (800cd88 <FreeRTOS_IPInit+0x1dc>)
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7fc f9bb 	bl	8008fec <vQueueAddToRegistry>
            }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 800cc76:	f007 fb19 	bl	80142ac <xNetworkBuffersInitialise>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d172      	bne.n	800cd66 <FreeRTOS_IPInit+0x1ba>
        {
            /* Store the local IP and MAC address. */
            xNetworkAddressing.ulDefaultIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	3303      	adds	r3, #3
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	061a      	lsls	r2, r3, #24
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	3302      	adds	r3, #2
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	041b      	lsls	r3, r3, #16
 800cc90:	431a      	orrs	r2, r3
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	3301      	adds	r3, #1
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	021b      	lsls	r3, r3, #8
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	68fa      	ldr	r2, [r7, #12]
 800cc9e:	7812      	ldrb	r2, [r2, #0]
 800cca0:	4313      	orrs	r3, r2
 800cca2:	4a3a      	ldr	r2, [pc, #232]	@ (800cd8c <FreeRTOS_IPInit+0x1e0>)
 800cca4:	6013      	str	r3, [r2, #0]
            xNetworkAddressing.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	3303      	adds	r3, #3
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	061a      	lsls	r2, r3, #24
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	3302      	adds	r3, #2
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	041b      	lsls	r3, r3, #16
 800ccb6:	431a      	orrs	r2, r3
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	3301      	adds	r3, #1
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	021b      	lsls	r3, r3, #8
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	68ba      	ldr	r2, [r7, #8]
 800ccc4:	7812      	ldrb	r2, [r2, #0]
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	4a30      	ldr	r2, [pc, #192]	@ (800cd8c <FreeRTOS_IPInit+0x1e0>)
 800ccca:	6053      	str	r3, [r2, #4]
            xNetworkAddressing.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	3303      	adds	r3, #3
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	061a      	lsls	r2, r3, #24
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	3302      	adds	r3, #2
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	041b      	lsls	r3, r3, #16
 800ccdc:	431a      	orrs	r2, r3
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	3301      	adds	r3, #1
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	021b      	lsls	r3, r3, #8
 800cce6:	4313      	orrs	r3, r2
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	7812      	ldrb	r2, [r2, #0]
 800ccec:	4313      	orrs	r3, r2
 800ccee:	4a27      	ldr	r2, [pc, #156]	@ (800cd8c <FreeRTOS_IPInit+0x1e0>)
 800ccf0:	6093      	str	r3, [r2, #8]
            xNetworkAddressing.ulDNSServerAddress = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	3303      	adds	r3, #3
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	061a      	lsls	r2, r3, #24
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	3302      	adds	r3, #2
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	041b      	lsls	r3, r3, #16
 800cd02:	431a      	orrs	r2, r3
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	3301      	adds	r3, #1
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	021b      	lsls	r3, r3, #8
 800cd0c:	4313      	orrs	r3, r2
 800cd0e:	683a      	ldr	r2, [r7, #0]
 800cd10:	7812      	ldrb	r2, [r2, #0]
 800cd12:	4313      	orrs	r3, r2
 800cd14:	4a1d      	ldr	r2, [pc, #116]	@ (800cd8c <FreeRTOS_IPInit+0x1e0>)
 800cd16:	60d3      	str	r3, [r2, #12]
            xNetworkAddressing.ulBroadcastAddress = ( xNetworkAddressing.ulDefaultIPAddress & xNetworkAddressing.ulNetMask ) | ~xNetworkAddressing.ulNetMask;
 800cd18:	4b1c      	ldr	r3, [pc, #112]	@ (800cd8c <FreeRTOS_IPInit+0x1e0>)
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	4b1b      	ldr	r3, [pc, #108]	@ (800cd8c <FreeRTOS_IPInit+0x1e0>)
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	43db      	mvns	r3, r3
 800cd22:	4313      	orrs	r3, r2
 800cd24:	4a19      	ldr	r2, [pc, #100]	@ (800cd8c <FreeRTOS_IPInit+0x1e0>)
 800cd26:	6113      	str	r3, [r2, #16]

            ( void ) memcpy( &xDefaultAddressing, &xNetworkAddressing, sizeof( xDefaultAddressing ) );
 800cd28:	4a19      	ldr	r2, [pc, #100]	@ (800cd90 <FreeRTOS_IPInit+0x1e4>)
 800cd2a:	4b18      	ldr	r3, [pc, #96]	@ (800cd8c <FreeRTOS_IPInit+0x1e0>)
 800cd2c:	4614      	mov	r4, r2
 800cd2e:	461d      	mov	r5, r3
 800cd30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd34:	682b      	ldr	r3, [r5, #0]
 800cd36:	6023      	str	r3, [r4, #0]

            #if ipconfigUSE_DHCP == 1
                {
                    /* The IP address is not set until DHCP completes. */
                    *ipLOCAL_IP_ADDRESS_POINTER = 0x00UL;
 800cd38:	4b16      	ldr	r3, [pc, #88]	@ (800cd94 <FreeRTOS_IPInit+0x1e8>)
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	615a      	str	r2, [r3, #20]
                }
            #endif /* ipconfigUSE_DHCP == 1 */

            /* The MAC address is stored in the start of the default packet
             * header fragment, which is used when sending UDP packets. */
            ( void ) memcpy( ipLOCAL_MAC_ADDRESS, ucMACAddress, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800cd3e:	2206      	movs	r2, #6
 800cd40:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cd42:	4814      	ldr	r0, [pc, #80]	@ (800cd94 <FreeRTOS_IPInit+0x1e8>)
 800cd44:	f008 fffd 	bl	8015d42 <memcpy>

            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 800cd48:	f000 fff2 	bl	800dd30 <vNetworkSocketsInit>

            /* Create the task that processes Ethernet and stack events. */
            xReturn = xTaskCreate( prvIPTask,
 800cd4c:	4b0d      	ldr	r3, [pc, #52]	@ (800cd84 <FreeRTOS_IPInit+0x1d8>)
 800cd4e:	9301      	str	r3, [sp, #4]
 800cd50:	2336      	movs	r3, #54	@ 0x36
 800cd52:	9300      	str	r3, [sp, #0]
 800cd54:	2300      	movs	r3, #0
 800cd56:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cd5a:	490f      	ldr	r1, [pc, #60]	@ (800cd98 <FreeRTOS_IPInit+0x1ec>)
 800cd5c:	480f      	ldr	r0, [pc, #60]	@ (800cd9c <FreeRTOS_IPInit+0x1f0>)
 800cd5e:	f7fc fa33 	bl	80091c8 <xTaskCreate>
 800cd62:	6278      	str	r0, [r7, #36]	@ 0x24
 800cd64:	e007      	b.n	800cd76 <FreeRTOS_IPInit+0x1ca>
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: xNetworkBuffersInitialise() failed\n" ) );

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 800cd66:	4b06      	ldr	r3, [pc, #24]	@ (800cd80 <FreeRTOS_IPInit+0x1d4>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7fb ffef 	bl	8008d4e <vQueueDelete>
            xNetworkEventQueue = NULL;
 800cd70:	4b03      	ldr	r3, [pc, #12]	@ (800cd80 <FreeRTOS_IPInit+0x1d4>)
 800cd72:	2200      	movs	r2, #0
 800cd74:	601a      	str	r2, [r3, #0]
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit: Network event queue could not be created\n" ) );
    }

    return xReturn;
 800cd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3728      	adds	r7, #40	@ 0x28
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bdb0      	pop	{r4, r5, r7, pc}
 800cd80:	2000a2f4 	.word	0x2000a2f4
 800cd84:	2000a328 	.word	0x2000a328
 800cd88:	08016d2c 	.word	0x08016d2c
 800cd8c:	2000a2fc 	.word	0x2000a2fc
 800cd90:	2000a310 	.word	0x2000a310
 800cd94:	20000088 	.word	0x20000088
 800cd98:	08016d34 	.word	0x08016d34
 800cd9c:	0800c701 	.word	0x0800c701

0800cda0 <xSendEventToIPTask>:
 * @param[in] eEvent: The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b086      	sub	sp, #24
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	4603      	mov	r3, r0
 800cda8:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 800cdae:	79fb      	ldrb	r3, [r7, #7]
 800cdb0:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 800cdb6:	f107 030c 	add.w	r3, r7, #12
 800cdba:	6979      	ldr	r1, [r7, #20]
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f000 f805 	bl	800cdcc <xSendEventStructToIPTask>
 800cdc2:	4603      	mov	r3, r0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3718      	adds	r7, #24
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b086      	sub	sp, #24
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 800cdda:	f000 fe99 	bl	800db10 <xIPIsNetworkTaskReady>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d107      	bne.n	800cdf4 <xSendEventStructToIPTask+0x28>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f993 3000 	ldrsb.w	r3, [r3]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d002      	beq.n	800cdf4 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	617b      	str	r3, [r7, #20]
 800cdf2:	e02d      	b.n	800ce50 <xSendEventStructToIPTask+0x84>
    }
    else
    {
        xSendMessage = pdTRUE;
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
            {
                if( pxEvent->eEventType == eTCPTimerEvent )
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f993 3000 	ldrsb.w	r3, [r3]
 800cdfe:	2b06      	cmp	r3, #6
 800ce00:	d10e      	bne.n	800ce20 <xSendEventStructToIPTask+0x54>
                {
                    /* TCP timer events are sent to wake the timer task when
                     * xTCPTimer has expired, but there is no point sending them if the
                     * IP task is already awake processing other message. */
                    xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800ce02:	4a16      	ldr	r2, [pc, #88]	@ (800ce5c <xSendEventStructToIPTask+0x90>)
 800ce04:	7813      	ldrb	r3, [r2, #0]
 800ce06:	f043 0302 	orr.w	r3, r3, #2
 800ce0a:	7013      	strb	r3, [r2, #0]

                    if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 800ce0c:	4b14      	ldr	r3, [pc, #80]	@ (800ce60 <xSendEventStructToIPTask+0x94>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7fb ff7b 	bl	8008d0c <uxQueueMessagesWaiting>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d001      	beq.n	800ce20 <xSendEventStructToIPTask+0x54>
                    {
                        /* Not actually going to send the message but this is not a
                         * failure as the message didn't need to be sent. */
                        xSendMessage = pdFALSE;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	613b      	str	r3, [r7, #16]
                    }
                }
            }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d012      	beq.n	800ce4c <xSendEventStructToIPTask+0x80>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 800ce26:	f7ff fd4f 	bl	800c8c8 <xIsCallingFromIPTask>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	2b01      	cmp	r3, #1
 800ce2e:	d104      	bne.n	800ce3a <xSendEventStructToIPTask+0x6e>
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d001      	beq.n	800ce3a <xSendEventStructToIPTask+0x6e>
            {
                uxUseTimeout = ( TickType_t ) 0;
 800ce36:	2300      	movs	r3, #0
 800ce38:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 800ce3a:	4b09      	ldr	r3, [pc, #36]	@ (800ce60 <xSendEventStructToIPTask+0x94>)
 800ce3c:	6818      	ldr	r0, [r3, #0]
 800ce3e:	2300      	movs	r3, #0
 800ce40:	68fa      	ldr	r2, [r7, #12]
 800ce42:	6879      	ldr	r1, [r7, #4]
 800ce44:	f7fb fbb4 	bl	80085b0 <xQueueGenericSend>
 800ce48:	6178      	str	r0, [r7, #20]
 800ce4a:	e001      	b.n	800ce50 <xSendEventStructToIPTask+0x84>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 800ce50:	697b      	ldr	r3, [r7, #20]
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3718      	adds	r7, #24
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	2000a35c 	.word	0x2000a35c
 800ce60:	2000a2f4 	.word	0x2000a2f4

0800ce64 <xSendDHCPEvent>:
 *
 * @return pdPASS or pdFAIL, depending on whether xSendEventStructToIPTask()
 *         succeeded.
 */
    BaseType_t xSendDHCPEvent( void )
    {
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
        IPStackEvent_t xEventMessage;
        const TickType_t uxDontBlock = 0U;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	60fb      	str	r3, [r7, #12]
        uintptr_t uxOption = eGetDHCPState();
 800ce6e:	f7fe ff2f 	bl	800bcd0 <eGetDHCPState>
 800ce72:	4603      	mov	r3, r0
 800ce74:	60bb      	str	r3, [r7, #8]

        xEventMessage.eEventType = eDHCPEvent;
 800ce76:	2305      	movs	r3, #5
 800ce78:	703b      	strb	r3, [r7, #0]
        xEventMessage.pvData = ( void * ) uxOption;
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	607b      	str	r3, [r7, #4]

        return xSendEventStructToIPTask( &xEventMessage, uxDontBlock );
 800ce7e:	463b      	mov	r3, r7
 800ce80:	68f9      	ldr	r1, [r7, #12]
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7ff ffa2 	bl	800cdcc <xSendEventStructToIPTask>
 800ce88:	4603      	mov	r3, r0
    }
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3710      	adds	r7, #16
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
	...

0800ce94 <eConsiderFrameForProcessing>:
 * @param[in] pucEthernetBuffer: The ethernet packet under consideration.
 *
 * @return Enum saying whether to release or to process the packet.
 */
eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b086      	sub	sp, #24
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn;
    const EthernetHeader_t * pxEthernetHeader;

    /* Map the buffer onto Ethernet Header struct for easy access to fields. */
    pxEthernetHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( EthernetHeader_t, pucEthernetBuffer );
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f7ff fbb6 	bl	800c60e <vCastConstPointerTo_EthernetHeader_t>
 800cea2:	6138      	str	r0, [r7, #16]

    if( memcmp( ipLOCAL_MAC_ADDRESS, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	2206      	movs	r2, #6
 800cea8:	4619      	mov	r1, r3
 800ceaa:	4819      	ldr	r0, [pc, #100]	@ (800cf10 <eConsiderFrameForProcessing+0x7c>)
 800ceac:	f008 fea3 	bl	8015bf6 <memcmp>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d102      	bne.n	800cebc <eConsiderFrameForProcessing+0x28>
    {
        /* The packet was directed to this node - process it. */
        eReturn = eProcessBuffer;
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	75fb      	strb	r3, [r7, #23]
 800ceba:	e00d      	b.n	800ced8 <eConsiderFrameForProcessing+0x44>
    }
    else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	2206      	movs	r2, #6
 800cec0:	4619      	mov	r1, r3
 800cec2:	4814      	ldr	r0, [pc, #80]	@ (800cf14 <eConsiderFrameForProcessing+0x80>)
 800cec4:	f008 fe97 	bl	8015bf6 <memcmp>
 800cec8:	4603      	mov	r3, r0
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d102      	bne.n	800ced4 <eConsiderFrameForProcessing+0x40>
    {
        /* The packet was a broadcast - process it. */
        eReturn = eProcessBuffer;
 800cece:	2301      	movs	r3, #1
 800ced0:	75fb      	strb	r3, [r7, #23]
 800ced2:	e001      	b.n	800ced8 <eConsiderFrameForProcessing+0x44>
        else
    #endif /* ipconfigUSE_LLMNR */
    {
        /* The packet was not a broadcast, or for this node, just release
         * the buffer without taking any other action. */
        eReturn = eReleaseBuffer;
 800ced4:	2300      	movs	r3, #0
 800ced6:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
        {
            uint16_t usFrameType;

            if( eReturn == eProcessBuffer )
 800ced8:	7dfb      	ldrb	r3, [r7, #23]
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	d112      	bne.n	800cf04 <eConsiderFrameForProcessing+0x70>
            {
                usFrameType = pxEthernetHeader->usFrameType;
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	899b      	ldrh	r3, [r3, #12]
 800cee2:	81fb      	strh	r3, [r7, #14]
                usFrameType = FreeRTOS_ntohs( usFrameType );
 800cee4:	89fb      	ldrh	r3, [r7, #14]
 800cee6:	021b      	lsls	r3, r3, #8
 800cee8:	b21a      	sxth	r2, r3
 800ceea:	89fb      	ldrh	r3, [r7, #14]
 800ceec:	0a1b      	lsrs	r3, r3, #8
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	b21b      	sxth	r3, r3
 800cef2:	4313      	orrs	r3, r2
 800cef4:	b21b      	sxth	r3, r3
 800cef6:	81fb      	strh	r3, [r7, #14]

                if( usFrameType <= 0x600U )
 800cef8:	89fb      	ldrh	r3, [r7, #14]
 800cefa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800cefe:	d801      	bhi.n	800cf04 <eConsiderFrameForProcessing+0x70>
                {
                    /* Not an Ethernet II frame. */
                    eReturn = eReleaseBuffer;
 800cf00:	2300      	movs	r3, #0
 800cf02:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    #endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */

    return eReturn;
 800cf04:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3718      	adds	r7, #24
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	20000088 	.word	0x20000088
 800cf14:	08016f4c 	.word	0x08016f4c

0800cf18 <prvProcessNetworkDownEvent>:

/**
 * @brief Process a 'Network down' event and complete required processing.
 */
static void prvProcessNetworkDownEvent( void )
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	af00      	add	r7, sp, #0
    /* Stop the ARP timer while there is no network. */
    xARPTimer.bActive = pdFALSE_UNSIGNED;
 800cf1c:	4a11      	ldr	r2, [pc, #68]	@ (800cf64 <prvProcessNetworkDownEvent+0x4c>)
 800cf1e:	7813      	ldrb	r3, [r2, #0]
 800cf20:	f36f 0300 	bfc	r3, #0, #1
 800cf24:	7013      	strb	r3, [r2, #0]
            static BaseType_t xCallEventHook = pdFALSE;

            /* The first network down event is generated by the IP stack itself to
             * initialise the network hardware, so do not call the network down event
             * the first time through. */
            if( xCallEventHook == pdTRUE )
 800cf26:	4b10      	ldr	r3, [pc, #64]	@ (800cf68 <prvProcessNetworkDownEvent+0x50>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d102      	bne.n	800cf34 <prvProcessNetworkDownEvent+0x1c>
            {
                vApplicationIPNetworkEventHook( eNetworkDown );
 800cf2e:	2001      	movs	r0, #1
 800cf30:	f7f5 fadc 	bl	80024ec <vApplicationIPNetworkEventHook>
            }

            xCallEventHook = pdTRUE;
 800cf34:	4b0c      	ldr	r3, [pc, #48]	@ (800cf68 <prvProcessNetworkDownEvent+0x50>)
 800cf36:	2201      	movs	r2, #1
 800cf38:	601a      	str	r2, [r3, #0]
    #endif /* if ipconfigUSE_NETWORK_EVENT_HOOK == 1 */

    /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122,
     * treat network down as a "delivery problem" and flush the ARP cache for this
     * interface. */
    FreeRTOS_ClearARP();
 800cf3a:	f7fe fe8f 	bl	800bc5c <FreeRTOS_ClearARP>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */
    if( xNetworkInterfaceInitialise() != pdPASS )
 800cf3e:	f006 f951 	bl	80131e4 <xNetworkInterfaceInitialise>
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d006      	beq.n	800cf56 <prvProcessNetworkDownEvent+0x3e>
    {
        /* Ideally the network interface initialisation function will only
         * return when the network is available.  In case this is not the case,
         * wait a while before retrying the initialisation. */
        vTaskDelay( ipINITIALISATION_RETRY_DELAY );
 800cf48:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800cf4c:	f7fc fafa 	bl	8009544 <vTaskDelay>
        FreeRTOS_NetworkDown();
 800cf50:	f7ff fdd0 	bl	800caf4 <FreeRTOS_NetworkDown>
                /* Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls();
            }
        #endif
    }
}
 800cf54:	e003      	b.n	800cf5e <prvProcessNetworkDownEvent+0x46>
                vDHCPProcess( pdTRUE, eInitialWait );
 800cf56:	2100      	movs	r1, #0
 800cf58:	2001      	movs	r0, #1
 800cf5a:	f7fe fec5 	bl	800bce8 <vDHCPProcess>
}
 800cf5e:	bf00      	nop
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	2000a334 	.word	0x2000a334
 800cf68:	2000a374 	.word	0x2000a374

0800cf6c <vIPNetworkUpCalls>:

/**
 * @brief Perform all the required tasks when the network gets connected.
 */
void vIPNetworkUpCalls( void )
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	af00      	add	r7, sp, #0
    xNetworkUp = pdTRUE;
 800cf70:	4b06      	ldr	r3, [pc, #24]	@ (800cf8c <vIPNetworkUpCalls+0x20>)
 800cf72:	2201      	movs	r2, #1
 800cf74:	601a      	str	r2, [r3, #0]

    #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
 800cf76:	2000      	movs	r0, #0
 800cf78:	f7f5 fab8 	bl	80024ec <vApplicationIPNetworkEventHook>
            vDNSInitialise();
        }
    #endif /* ipconfigDNS_USE_CALLBACKS != 0 */

    /* Set remaining time to 0 so it will become active immediately. */
    prvIPTimerReload( &xARPTimer, pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 800cf7c:	f242 7110 	movw	r1, #10000	@ 0x2710
 800cf80:	4803      	ldr	r0, [pc, #12]	@ (800cf90 <vIPNetworkUpCalls+0x24>)
 800cf82:	f7ff fd6b 	bl	800ca5c <prvIPTimerReload>
}
 800cf86:	bf00      	nop
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	2000a330 	.word	0x2000a330
 800cf90:	2000a334 	.word	0x2000a334

0800cf94 <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer: the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b086      	sub	sp, #24
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	75fb      	strb	r3, [r7, #23]

    configASSERT( pxNetworkBuffer != NULL );
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d10d      	bne.n	800cfc2 <prvProcessEthernetPacket+0x2e>
	__asm volatile
 800cfa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfaa:	b672      	cpsid	i
 800cfac:	f383 8811 	msr	BASEPRI, r3
 800cfb0:	f3bf 8f6f 	isb	sy
 800cfb4:	f3bf 8f4f 	dsb	sy
 800cfb8:	b662      	cpsie	i
 800cfba:	60fb      	str	r3, [r7, #12]
}
 800cfbc:	bf00      	nop
 800cfbe:	bf00      	nop
 800cfc0:	e7fd      	b.n	800cfbe <prvProcessEthernetPacket+0x2a>

    iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    /* Interpret the Ethernet frame. */
    if( pxNetworkBuffer->xDataLength >= sizeof( EthernetHeader_t ) )
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	69db      	ldr	r3, [r3, #28]
 800cfc6:	2b0d      	cmp	r3, #13
 800cfc8:	d938      	bls.n	800d03c <prvProcessEthernetPacket+0xa8>
    {
        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 800cfca:	2301      	movs	r3, #1
 800cfcc:	75fb      	strb	r3, [r7, #23]

        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */
        pxEthernetHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer );
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	699b      	ldr	r3, [r3, #24]
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7ff fb1b 	bl	800c60e <vCastConstPointerTo_EthernetHeader_t>
 800cfd8:	6138      	str	r0, [r7, #16]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eReturned == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	899b      	ldrh	r3, [r3, #12]
 800cfde:	2b08      	cmp	r3, #8
 800cfe0:	d015      	beq.n	800d00e <prvProcessEthernetPacket+0x7a>
 800cfe2:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800cfe6:	d126      	bne.n	800d036 <prvProcessEthernetPacket+0xa2>
            {
                case ipARP_FRAME_TYPE:

                    /* The Ethernet frame contains an ARP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	69db      	ldr	r3, [r3, #28]
 800cfec:	2b2b      	cmp	r3, #43	@ 0x2b
 800cfee:	d90b      	bls.n	800d008 <prvProcessEthernetPacket+0x74>
                    {
                        eReturned = eARPProcessPacket( ipCAST_PTR_TO_TYPE_PTR( ARPPacket_t, pxNetworkBuffer->pucEthernetBuffer ) );
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	699b      	ldr	r3, [r3, #24]
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7ff fb15 	bl	800c624 <vCastPointerTo_ARPPacket_t>
 800cffa:	4603      	mov	r3, r0
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7fe fad5 	bl	800b5ac <eARPProcessPacket>
 800d002:	4603      	mov	r3, r0
 800d004:	75fb      	strb	r3, [r7, #23]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 800d006:	e019      	b.n	800d03c <prvProcessEthernetPacket+0xa8>
                        eReturned = eReleaseBuffer;
 800d008:	2300      	movs	r3, #0
 800d00a:	75fb      	strb	r3, [r7, #23]
                    break;
 800d00c:	e016      	b.n	800d03c <prvProcessEthernetPacket+0xa8>

                case ipIPv4_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	69db      	ldr	r3, [r3, #28]
 800d012:	2b23      	cmp	r3, #35	@ 0x23
 800d014:	d90c      	bls.n	800d030 <prvProcessEthernetPacket+0x9c>
                    {
                        eReturned = prvProcessIPPacket( ipCAST_PTR_TO_TYPE_PTR( IPPacket_t, pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	699b      	ldr	r3, [r3, #24]
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7ff fb0d 	bl	800c63a <vCastPointerTo_IPPacket_t>
 800d020:	4603      	mov	r3, r0
 800d022:	6879      	ldr	r1, [r7, #4]
 800d024:	4618      	mov	r0, r3
 800d026:	f000 f8f9 	bl	800d21c <prvProcessIPPacket>
 800d02a:	4603      	mov	r3, r0
 800d02c:	75fb      	strb	r3, [r7, #23]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 800d02e:	e005      	b.n	800d03c <prvProcessEthernetPacket+0xa8>
                        eReturned = eReleaseBuffer;
 800d030:	2300      	movs	r3, #0
 800d032:	75fb      	strb	r3, [r7, #23]
                    break;
 800d034:	e002      	b.n	800d03c <prvProcessEthernetPacket+0xa8>

                default:
                    /* No other packet types are handled.  Nothing to do. */
                    eReturned = eReleaseBuffer;
 800d036:	2300      	movs	r3, #0
 800d038:	75fb      	strb	r3, [r7, #23]
                    break;
 800d03a:	bf00      	nop
            }
        }
    }

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 800d03c:	7dfb      	ldrb	r3, [r7, #23]
 800d03e:	2b02      	cmp	r3, #2
 800d040:	d002      	beq.n	800d048 <prvProcessEthernetPacket+0xb4>
 800d042:	2b03      	cmp	r3, #3
 800d044:	d009      	beq.n	800d05a <prvProcessEthernetPacket+0xc6>
 800d046:	e004      	b.n	800d052 <prvProcessEthernetPacket+0xbe>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * an ARP request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 800d048:	2101      	movs	r1, #1
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f000 fcd0 	bl	800d9f0 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 800d050:	e004      	b.n	800d05c <prvProcessEthernetPacket+0xc8>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f007 f9ec 	bl	8014430 <vReleaseNetworkBufferAndDescriptor>
            break;
 800d058:	e000      	b.n	800d05c <prvProcessEthernetPacket+0xc8>
            break;
 800d05a:	bf00      	nop
    }
}
 800d05c:	bf00      	nop
 800d05e:	3718      	adds	r7, #24
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <xIsIPv4Multicast>:
 * @param[in] ulIPAddress: The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 800d064:	b480      	push	{r7}
 800d066:	b085      	sub	sp, #20
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	061a      	lsls	r2, r3, #24
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	021b      	lsls	r3, r3, #8
 800d074:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d078:	431a      	orrs	r2, r3
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	0a1b      	lsrs	r3, r3, #8
 800d07e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d082:	431a      	orrs	r2, r3
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	0e1b      	lsrs	r3, r3, #24
 800d088:	4313      	orrs	r3, r2
 800d08a:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800d092:	d306      	bcc.n	800d0a2 <xIsIPv4Multicast+0x3e>
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	f1b3 4f70 	cmp.w	r3, #4026531840	@ 0xf0000000
 800d09a:	d202      	bcs.n	800d0a2 <xIsIPv4Multicast+0x3e>
    {
        xReturn = pdTRUE;
 800d09c:	2301      	movs	r3, #1
 800d09e:	60fb      	str	r3, [r7, #12]
 800d0a0:	e001      	b.n	800d0a6 <xIsIPv4Multicast+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3714      	adds	r7, #20
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr

0800d0b4 <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress: IP address.
 * @param[out] pxMACAddress: Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b085      	sub	sp, #20
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	061a      	lsls	r2, r3, #24
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	021b      	lsls	r3, r3, #8
 800d0c6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d0ca:	431a      	orrs	r2, r3
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	0a1b      	lsrs	r3, r3, #8
 800d0d0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d0d4:	431a      	orrs	r2, r3
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	0e1b      	lsrs	r3, r3, #24
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	225e      	movs	r2, #94	@ 0x5e
 800d0ee:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	0c1b      	lsrs	r3, r3, #16
 800d0f4:	b2db      	uxtb	r3, r3
 800d0f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0fa:	b2da      	uxtb	r2, r3
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	0a1b      	lsrs	r3, r3, #8
 800d104:	b2da      	uxtb	r2, r3
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	b2da      	uxtb	r2, r3
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	715a      	strb	r2, [r3, #5]
}
 800d112:	bf00      	nop
 800d114:	3714      	adds	r7, #20
 800d116:	46bd      	mov	sp, r7
 800d118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11c:	4770      	bx	lr
	...

0800d120 <prvAllowIPPacket>:
 * @return Whether the packet should be processed or dropped.
 */
static eFrameProcessingResult_t prvAllowIPPacket( const IPPacket_t * const pxIPPacket,
                                                  const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b08a      	sub	sp, #40	@ 0x28
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800d12c:	2301      	movs	r3, #1
 800d12e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    #if ( ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) || ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	3310      	adds	r3, #16
 800d136:	623b      	str	r3, [r7, #32]
    #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 )
        {
            /* In systems with a very small amount of RAM, it might be advantageous
             * to have incoming messages checked earlier, by the network card driver.
             * This method may decrease the usage of sparse network buffers. */
            uint32_t ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 800d138:	6a3b      	ldr	r3, [r7, #32]
 800d13a:	691b      	ldr	r3, [r3, #16]
 800d13c:	61fb      	str	r3, [r7, #28]

            /* Ensure that the incoming packet is not fragmented (only outgoing
             * packets can be fragmented) as these are the only handled IP frames
             * currently. */
            if( ( pxIPHeader->usFragmentOffset & ipFRAGMENT_OFFSET_BIT_MASK ) != 0U )
 800d13e:	6a3b      	ldr	r3, [r7, #32]
 800d140:	88db      	ldrh	r3, [r3, #6]
 800d142:	461a      	mov	r2, r3
 800d144:	f64f 730f 	movw	r3, #65295	@ 0xff0f
 800d148:	4013      	ands	r3, r2
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d003      	beq.n	800d156 <prvAllowIPPacket+0x36>
            {
                /* Can not handle, fragmented packet. */
                eReturn = eReleaseBuffer;
 800d14e:	2300      	movs	r3, #0
 800d150:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d154:	e020      	b.n	800d198 <prvAllowIPPacket+0x78>
            }

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800d156:	6a3b      	ldr	r3, [r7, #32]
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	2b44      	cmp	r3, #68	@ 0x44
 800d15c:	d903      	bls.n	800d166 <prvAllowIPPacket+0x46>
                     ( pxIPHeader->ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
 800d15e:	6a3b      	ldr	r3, [r7, #32]
 800d160:	781b      	ldrb	r3, [r3, #0]
            else if( ( pxIPHeader->ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800d162:	2b4f      	cmp	r3, #79	@ 0x4f
 800d164:	d903      	bls.n	800d16e <prvAllowIPPacket+0x4e>
            {
                /* Can not handle, unknown or invalid header version. */
                eReturn = eReleaseBuffer;
 800d166:	2300      	movs	r3, #0
 800d168:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d16c:	e014      	b.n	800d198 <prvAllowIPPacket+0x78>
            }
            /* Is the packet for this IP address? */
            else if( ( ulDestinationIPAddress != *ipLOCAL_IP_ADDRESS_POINTER ) &&
 800d16e:	4b28      	ldr	r3, [pc, #160]	@ (800d210 <prvAllowIPPacket+0xf0>)
 800d170:	695b      	ldr	r3, [r3, #20]
 800d172:	69fa      	ldr	r2, [r7, #28]
 800d174:	429a      	cmp	r2, r3
 800d176:	d00f      	beq.n	800d198 <prvAllowIPPacket+0x78>
 800d178:	69fb      	ldr	r3, [r7, #28]
 800d17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d17e:	d00b      	beq.n	800d198 <prvAllowIPPacket+0x78>
                     /* Is it the global broadcast address 255.255.255.255 ? */
                     ( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
                     /* Is it a specific broadcast address 192.168.1.255 ? */
                     ( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 800d180:	4b24      	ldr	r3, [pc, #144]	@ (800d214 <prvAllowIPPacket+0xf4>)
 800d182:	691b      	ldr	r3, [r3, #16]
                     ( ulDestinationIPAddress != ipBROADCAST_IP_ADDRESS ) &&
 800d184:	69fa      	ldr	r2, [r7, #28]
 800d186:	429a      	cmp	r2, r3
 800d188:	d006      	beq.n	800d198 <prvAllowIPPacket+0x78>
                     #if ( ipconfigUSE_LLMNR == 1 )
                         /* Is it the LLMNR multicast address? */
                         ( ulDestinationIPAddress != ipLLMNR_IP_ADDR ) &&
                     #endif
                     /* Or (during DHCP negotiation) we have no IP-address yet? */
                     ( *ipLOCAL_IP_ADDRESS_POINTER != 0UL ) )
 800d18a:	4b21      	ldr	r3, [pc, #132]	@ (800d210 <prvAllowIPPacket+0xf0>)
 800d18c:	695b      	ldr	r3, [r3, #20]
                     ( ulDestinationIPAddress != xNetworkAddressing.ulBroadcastAddress ) &&
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d002      	beq.n	800d198 <prvAllowIPPacket+0x78>
            {
                /* Packet is not for this node, release it */
                eReturn = eReleaseBuffer;
 800d192:	2300      	movs	r3, #0
 800d194:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
        }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
        {
            if( eReturn == eProcessBuffer )
 800d198:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d10d      	bne.n	800d1bc <prvAllowIPPacket+0x9c>
            {
                if( xCheckSizeFields( ( uint8_t * ) ( pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer->xDataLength ) != pdPASS )
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	699a      	ldr	r2, [r3, #24]
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	69db      	ldr	r3, [r3, #28]
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	4610      	mov	r0, r2
 800d1ac:	f000 f995 	bl	800d4da <xCheckSizeFields>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	d002      	beq.n	800d1bc <prvAllowIPPacket+0x9c>
                {
                    /* Some of the length checks were not successful. */
                    eReturn = eReleaseBuffer;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }

            #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
                {
                    /* Check if this is a UDP packet without a checksum. */
                    if( eReturn == eProcessBuffer )
 800d1bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d11f      	bne.n	800d204 <prvAllowIPPacket+0xe4>
                        /* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
                         * and so UDP packets carrying a protocol checksum of 0, will
                         * be dropped. */

                        /* Identify the next protocol. */
                        if( pxIPPacket->xIPHeader.ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	7e5b      	ldrb	r3, [r3, #25]
 800d1c8:	2b11      	cmp	r3, #17
 800d1ca:	d11b      	bne.n	800d204 <prvAllowIPPacket+0xe4>
                        {
                            ProtocolPacket_t * pxProtPack;
                            const uint16_t * pusChecksum;

                            /* pxProtPack will point to the offset were the protocols begin. */
                            pxProtPack = ipCAST_PTR_TO_TYPE_PTR( ProtocolPacket_t, &( pxNetworkBuffer->pucEthernetBuffer[ uxHeaderLength - ipSIZE_OF_IPv4_HEADER ] ) );
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	699a      	ldr	r2, [r3, #24]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	3b14      	subs	r3, #20
 800d1d4:	4413      	add	r3, r2
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7ff fa5b 	bl	800c692 <vCastPointerTo_ProtocolPacket_t>
 800d1dc:	61b8      	str	r0, [r7, #24]
                            pusChecksum = ( const uint16_t * ) ( &( pxProtPack->xUDPPacket.xUDPHeader.usChecksum ) );
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	332a      	adds	r3, #42	@ 0x2a
 800d1e2:	617b      	str	r3, [r7, #20]

                            if( *pusChecksum == ( uint16_t ) 0U )
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	881b      	ldrh	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d10b      	bne.n	800d204 <prvAllowIPPacket+0xe4>
                            {
                                #if ( ipconfigHAS_PRINTF != 0 )
                                    {
                                        static BaseType_t xCount = 0;

                                        if( xCount < 5 )
 800d1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d218 <prvAllowIPPacket+0xf8>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	2b04      	cmp	r3, #4
 800d1f2:	dc04      	bgt.n	800d1fe <prvAllowIPPacket+0xde>
                                        {
                                            FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
                                                               FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                            xCount++;
 800d1f4:	4b08      	ldr	r3, [pc, #32]	@ (800d218 <prvAllowIPPacket+0xf8>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	4a07      	ldr	r2, [pc, #28]	@ (800d218 <prvAllowIPPacket+0xf8>)
 800d1fc:	6013      	str	r3, [r2, #0]
                                        }
                                    }
                                #endif /* ( ipconfigHAS_PRINTF != 0 ) */

                                /* Protocol checksum not accepted. */
                                eReturn = eReleaseBuffer;
 800d1fe:	2300      	movs	r3, #0
 800d200:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            /* to avoid warning unused parameters */
            ( void ) uxHeaderLength;
        }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 800d204:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3728      	adds	r7, #40	@ 0x28
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}
 800d210:	20000088 	.word	0x20000088
 800d214:	2000a2fc 	.word	0x2000a2fc
 800d218:	2000a378 	.word	0x2000a378

0800d21c <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b090      	sub	sp, #64	@ 0x40
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
 800d224:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	3310      	adds	r3, #16
 800d22a:	63bb      	str	r3, [r7, #56]	@ 0x38
    size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800d22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	637b      	str	r3, [r7, #52]	@ 0x34
    UBaseType_t uxHeaderLength = ( UBaseType_t ) ( ( uxLength & 0x0FU ) << 2 );
 800d232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d234:	009b      	lsls	r3, r3, #2
 800d236:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800d23a:	633b      	str	r3, [r7, #48]	@ 0x30
    uint8_t ucProtocol;

    /* Bound the calculated header length: take away the Ethernet header size,
     * then check if the IP header is claiming to be longer than the remaining
     * total packet size. Also check for minimal header field length. */
    if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	69db      	ldr	r3, [r3, #28]
 800d240:	3b0e      	subs	r3, #14
 800d242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d244:	429a      	cmp	r2, r3
 800d246:	d802      	bhi.n	800d24e <prvProcessIPPacket+0x32>
 800d248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d24a:	2b13      	cmp	r3, #19
 800d24c:	d803      	bhi.n	800d256 <prvProcessIPPacket+0x3a>
        ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
    {
        eReturn = eReleaseBuffer;
 800d24e:	2300      	movs	r3, #0
 800d250:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d254:	e0c8      	b.n	800d3e8 <prvProcessIPPacket+0x1cc>
    }
    else
    {
        ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	7e5b      	ldrb	r3, [r3, #25]
 800d25a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        /* Check if the IP headers are acceptable and if it has our destination. */
        eReturn = prvAllowIPPacket( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 800d25e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d260:	6839      	ldr	r1, [r7, #0]
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f7ff ff5c 	bl	800d120 <prvAllowIPPacket>
 800d268:	4603      	mov	r3, r0
 800d26a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( eReturn == eProcessBuffer )
 800d26e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d272:	2b01      	cmp	r3, #1
 800d274:	f040 80b8 	bne.w	800d3e8 <prvProcessIPPacket+0x1cc>
        {
            /* Are there IP-options. */
            if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 800d278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d27a:	2b14      	cmp	r3, #20
 800d27c:	d927      	bls.n	800d2ce <prvProcessIPPacket+0xb2>
                 * The extra space is used for IP-options. */
                #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
                    {
                        /* All structs of headers expect a IP header size of 20 bytes
                         * IP header options were included, we'll ignore them and cut them out. */
                        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800d27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d280:	3b14      	subs	r3, #20
 800d282:	62bb      	str	r3, [r7, #40]	@ 0x28
                        /* From: the previous start of UDP/ICMP/TCP data. */
                        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	699a      	ldr	r2, [r3, #24]
 800d288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d28a:	330e      	adds	r3, #14
 800d28c:	4413      	add	r3, r2
 800d28e:	627b      	str	r3, [r7, #36]	@ 0x24
                        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
                        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	699b      	ldr	r3, [r3, #24]
 800d294:	3322      	adds	r3, #34	@ 0x22
 800d296:	623b      	str	r3, [r7, #32]
                        /* How many: total length minus the options and the lower headers. */
                        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	69da      	ldr	r2, [r3, #28]
 800d29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d29e:	1ad3      	subs	r3, r2, r3
 800d2a0:	3b22      	subs	r3, #34	@ 0x22
 800d2a2:	61fb      	str	r3, [r7, #28]

                        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 800d2a4:	69fa      	ldr	r2, [r7, #28]
 800d2a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d2a8:	6a38      	ldr	r0, [r7, #32]
 800d2aa:	f008 fcb4 	bl	8015c16 <memmove>
                        pxNetworkBuffer->xDataLength -= optlen;
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	69da      	ldr	r2, [r3, #28]
 800d2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2b4:	1ad2      	subs	r2, r2, r3
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	61da      	str	r2, [r3, #28]

                        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
                        pxIPHeader->ucVersionHeaderLength = ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 800d2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	f023 030f 	bic.w	r3, r3, #15
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	f043 0305 	orr.w	r3, r3, #5
 800d2c8:	b2da      	uxtb	r2, r3
 800d2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2cc:	701a      	strb	r2, [r3, #0]
                        eReturn = eReleaseBuffer;
                    }
                #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */
            }

            if( eReturn != eReleaseBuffer )
 800d2ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	f000 8088 	beq.w	800d3e8 <prvProcessIPPacket+0x1cc>
            {
                /* Add the IP and MAC addresses to the ARP table if they are not
                 * already there - otherwise refresh the age of the existing
                 * entry. */
                if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 800d2d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d2dc:	2b11      	cmp	r3, #17
 800d2de:	d007      	beq.n	800d2f0 <prvProcessIPPacket+0xd4>
                    /* Refresh the ARP cache with the IP/MAC-address of the received
                     *  packet. For UDP packets, this will be done later in
                     *  xProcessReceivedUDPPacket(), as soon as it's know that the message
                     *  will be handled.  This will prevent the ARP cache getting
                     *  overwritten with the IP address of useless broadcast packets. */
                    vARPRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	1d9a      	adds	r2, r3, #6
 800d2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	4610      	mov	r0, r2
 800d2ec:	f7fe f9e4 	bl	800b6b8 <vARPRefreshCacheEntry>
                }

                switch( ucProtocol )
 800d2f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d2f4:	2b11      	cmp	r3, #17
 800d2f6:	d021      	beq.n	800d33c <prvProcessIPPacket+0x120>
 800d2f8:	2b11      	cmp	r3, #17
 800d2fa:	dc72      	bgt.n	800d3e2 <prvProcessIPPacket+0x1c6>
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	d002      	beq.n	800d306 <prvProcessIPPacket+0xea>
 800d300:	2b06      	cmp	r3, #6
 800d302:	d05f      	beq.n	800d3c4 <prvProcessIPPacket+0x1a8>
                                xProcessedTCPMessage++;
                                break;
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        break;
 800d304:	e06d      	b.n	800d3e2 <prvProcessIPPacket+0x1c6>
                            if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	69db      	ldr	r3, [r3, #28]
 800d30a:	2b2b      	cmp	r3, #43	@ 0x2b
 800d30c:	d912      	bls.n	800d334 <prvProcessIPPacket+0x118>
                                ICMPPacket_t * pxICMPPacket = ipCAST_PTR_TO_TYPE_PTR( ICMPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	699b      	ldr	r3, [r3, #24]
 800d312:	4618      	mov	r0, r3
 800d314:	f7ff f9a7 	bl	800c666 <vCastPointerTo_ICMPPacket_t>
 800d318:	60b8      	str	r0, [r7, #8]
                                if( pxIPHeader->ulDestinationIPAddress == *ipLOCAL_IP_ADDRESS_POINTER )
 800d31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d31c:	691a      	ldr	r2, [r3, #16]
 800d31e:	4b35      	ldr	r3, [pc, #212]	@ (800d3f4 <prvProcessIPPacket+0x1d8>)
 800d320:	695b      	ldr	r3, [r3, #20]
 800d322:	429a      	cmp	r2, r3
 800d324:	d15f      	bne.n	800d3e6 <prvProcessIPPacket+0x1ca>
                                    eReturn = prvProcessICMPPacket( pxICMPPacket );
 800d326:	68b8      	ldr	r0, [r7, #8]
 800d328:	f000 f8bc 	bl	800d4a4 <prvProcessICMPPacket>
 800d32c:	4603      	mov	r3, r0
 800d32e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                        break;
 800d332:	e058      	b.n	800d3e6 <prvProcessIPPacket+0x1ca>
                                eReturn = eReleaseBuffer;
 800d334:	2300      	movs	r3, #0
 800d336:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                        break;
 800d33a:	e054      	b.n	800d3e6 <prvProcessIPPacket+0x1ca>
                           const UDPPacket_t * pxUDPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	699b      	ldr	r3, [r3, #24]
 800d340:	4618      	mov	r0, r3
 800d342:	f7ff f99b 	bl	800c67c <vCastConstPointerTo_UDPPacket_t>
 800d346:	61b8      	str	r0, [r7, #24]
                           usLength = FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usLength );
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d34c:	021b      	lsls	r3, r3, #8
 800d34e:	b21a      	sxth	r2, r3
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d354:	0a1b      	lsrs	r3, r3, #8
 800d356:	b29b      	uxth	r3, r3
 800d358:	b21b      	sxth	r3, r3
 800d35a:	4313      	orrs	r3, r2
 800d35c:	b21b      	sxth	r3, r3
 800d35e:	82fb      	strh	r3, [r7, #22]
                           if( ( pxNetworkBuffer->xDataLength >= sizeof( UDPPacket_t ) ) &&
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	69db      	ldr	r3, [r3, #28]
 800d364:	2b2b      	cmp	r3, #43	@ 0x2b
 800d366:	d927      	bls.n	800d3b8 <prvProcessIPPacket+0x19c>
 800d368:	8afb      	ldrh	r3, [r7, #22]
 800d36a:	2b07      	cmp	r3, #7
 800d36c:	d924      	bls.n	800d3b8 <prvProcessIPPacket+0x19c>
                               uxPayloadSize_1 = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	69db      	ldr	r3, [r3, #28]
 800d372:	3b2c      	subs	r3, #44	@ 0x2c
 800d374:	613b      	str	r3, [r7, #16]
                               uxPayloadSize_2 = ( ( size_t ) usLength ) - sizeof( UDPHeader_t );
 800d376:	8afb      	ldrh	r3, [r7, #22]
 800d378:	3b08      	subs	r3, #8
 800d37a:	60fb      	str	r3, [r7, #12]
                               if( uxPayloadSize_1 > uxPayloadSize_2 )
 800d37c:	693a      	ldr	r2, [r7, #16]
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	429a      	cmp	r2, r3
 800d382:	d904      	bls.n	800d38e <prvProcessIPPacket+0x172>
                                   pxNetworkBuffer->xDataLength = uxPayloadSize_2 + sizeof( UDPPacket_t );
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	61da      	str	r2, [r3, #28]
                               pxNetworkBuffer->usPort = pxUDPPacket->xUDPHeader.usSourcePort;
 800d38e:	69bb      	ldr	r3, [r7, #24]
 800d390:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	841a      	strh	r2, [r3, #32]
                               pxNetworkBuffer->ulIPAddress = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 800d396:	69bb      	ldr	r3, [r7, #24]
 800d398:	69da      	ldr	r2, [r3, #28]
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	615a      	str	r2, [r3, #20]
                                                              pxUDPPacket->xUDPHeader.usDestinationPort ) == pdPASS )
 800d39e:	69bb      	ldr	r3, [r7, #24]
 800d3a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
                               if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	6838      	ldr	r0, [r7, #0]
 800d3a6:	f005 fe65 	bl	8013074 <xProcessReceivedUDPPacket>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d107      	bne.n	800d3c0 <prvProcessIPPacket+0x1a4>
                                   eReturn = eFrameConsumed;
 800d3b0:	2303      	movs	r3, #3
 800d3b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                           {
 800d3b6:	e003      	b.n	800d3c0 <prvProcessIPPacket+0x1a4>
                               eReturn = eReleaseBuffer;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                       break;
 800d3be:	e013      	b.n	800d3e8 <prvProcessIPPacket+0x1cc>
                           {
 800d3c0:	bf00      	nop
                       break;
 800d3c2:	e011      	b.n	800d3e8 <prvProcessIPPacket+0x1cc>
                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 800d3c4:	6838      	ldr	r0, [r7, #0]
 800d3c6:	f004 fa57 	bl	8011878 <xProcessReceivedTCPPacket>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d102      	bne.n	800d3d6 <prvProcessIPPacket+0x1ba>
                                    eReturn = eFrameConsumed;
 800d3d0:	2303      	movs	r3, #3
 800d3d2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                                xProcessedTCPMessage++;
 800d3d6:	4b08      	ldr	r3, [pc, #32]	@ (800d3f8 <prvProcessIPPacket+0x1dc>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	3301      	adds	r3, #1
 800d3dc:	4a06      	ldr	r2, [pc, #24]	@ (800d3f8 <prvProcessIPPacket+0x1dc>)
 800d3de:	6013      	str	r3, [r2, #0]
                                break;
 800d3e0:	e002      	b.n	800d3e8 <prvProcessIPPacket+0x1cc>
                        break;
 800d3e2:	bf00      	nop
 800d3e4:	e000      	b.n	800d3e8 <prvProcessIPPacket+0x1cc>
                        break;
 800d3e6:	bf00      	nop
                }
            }
        }
    }

    return eReturn;
 800d3e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3740      	adds	r7, #64	@ 0x40
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}
 800d3f4:	20000088 	.word	0x20000088
 800d3f8:	2000a32c 	.word	0x2000a32c

0800d3fc <prvProcessICMPEchoRequest>:
 * @brief Process an ICMP echo request.
 *
 * @param[in,out] pxICMPPacket: The IP packet that contains the ICMP message.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket )
    {
 800d3fc:	b480      	push	{r7}
 800d3fe:	b087      	sub	sp, #28
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint16_t usRequest;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	3324      	adds	r3, #36	@ 0x24
 800d408:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	3310      	adds	r3, #16
 800d40e:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	2200      	movs	r2, #0
 800d414:	701a      	strb	r2, [r3, #0]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	68da      	ldr	r2, [r3, #12]
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800d41e:	4b20      	ldr	r3, [pc, #128]	@ (800d4a0 <prvProcessICMPEchoRequest+0xa4>)
 800d420:	695a      	ldr	r2, [r3, #20]
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	60da      	str	r2, [r3, #12]
         * has been changed to ipICMP_ECHO_REPLY.  This is faster than calling
         * usGenerateChecksum(). */

        /* due to compiler warning "integer operation result is out of range" */

        usRequest = ( uint16_t ) ( ( uint16_t ) ipICMP_ECHO_REQUEST << 8 );
 800d426:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d42a:	81fb      	strh	r3, [r7, #14]

        if( pxICMPHeader->usChecksum >= FreeRTOS_htons( 0xFFFFU - usRequest ) )
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	885a      	ldrh	r2, [r3, #2]
 800d430:	89fb      	ldrh	r3, [r7, #14]
 800d432:	43db      	mvns	r3, r3
 800d434:	b29b      	uxth	r3, r3
 800d436:	021b      	lsls	r3, r3, #8
 800d438:	b299      	uxth	r1, r3
 800d43a:	89f8      	ldrh	r0, [r7, #14]
 800d43c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d440:	1a1b      	subs	r3, r3, r0
 800d442:	0a1b      	lsrs	r3, r3, #8
 800d444:	b29b      	uxth	r3, r3
 800d446:	430b      	orrs	r3, r1
 800d448:	b29b      	uxth	r3, r3
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d311      	bcc.n	800d472 <prvProcessICMPEchoRequest+0x76>
        {
            pxICMPHeader->usChecksum = pxICMPHeader->usChecksum + FreeRTOS_htons( usRequest + 1U );
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	885a      	ldrh	r2, [r3, #2]
 800d452:	89fb      	ldrh	r3, [r7, #14]
 800d454:	3301      	adds	r3, #1
 800d456:	b29b      	uxth	r3, r3
 800d458:	021b      	lsls	r3, r3, #8
 800d45a:	b299      	uxth	r1, r3
 800d45c:	89fb      	ldrh	r3, [r7, #14]
 800d45e:	3301      	adds	r3, #1
 800d460:	0a1b      	lsrs	r3, r3, #8
 800d462:	b29b      	uxth	r3, r3
 800d464:	430b      	orrs	r3, r1
 800d466:	b29b      	uxth	r3, r3
 800d468:	4413      	add	r3, r2
 800d46a:	b29a      	uxth	r2, r3
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	805a      	strh	r2, [r3, #2]
 800d470:	e00f      	b.n	800d492 <prvProcessICMPEchoRequest+0x96>
        }
        else
        {
            pxICMPHeader->usChecksum = pxICMPHeader->usChecksum + FreeRTOS_htons( usRequest );
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	885a      	ldrh	r2, [r3, #2]
 800d476:	89fb      	ldrh	r3, [r7, #14]
 800d478:	021b      	lsls	r3, r3, #8
 800d47a:	b219      	sxth	r1, r3
 800d47c:	89fb      	ldrh	r3, [r7, #14]
 800d47e:	0a1b      	lsrs	r3, r3, #8
 800d480:	b29b      	uxth	r3, r3
 800d482:	b21b      	sxth	r3, r3
 800d484:	430b      	orrs	r3, r1
 800d486:	b21b      	sxth	r3, r3
 800d488:	b29b      	uxth	r3, r3
 800d48a:	4413      	add	r3, r2
 800d48c:	b29a      	uxth	r2, r3
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	805a      	strh	r2, [r3, #2]
        }

        return eReturnEthernetFrame;
 800d492:	2302      	movs	r3, #2
    }
 800d494:	4618      	mov	r0, r3
 800d496:	371c      	adds	r7, #28
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr
 800d4a0:	20000088 	.word	0x20000088

0800d4a4 <prvProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    static eFrameProcessingResult_t prvProcessICMPPacket( ICMPPacket_t * const pxICMPPacket )
    {
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	73fb      	strb	r3, [r7, #15]

        iptraceICMP_PACKET_RECEIVED();

        switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d007      	beq.n	800d4ca <prvProcessICMPPacket+0x26>
 800d4ba:	2b08      	cmp	r3, #8
 800d4bc:	d107      	bne.n	800d4ce <prvProcessICMPPacket+0x2a>
        {
            case ipICMP_ECHO_REQUEST:
                #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
                    eReturn = prvProcessICMPEchoRequest( pxICMPPacket );
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f7ff ff9c 	bl	800d3fc <prvProcessICMPEchoRequest>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	73fb      	strb	r3, [r7, #15]
                #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
                break;
 800d4c8:	e002      	b.n	800d4d0 <prvProcessICMPPacket+0x2c>

            case ipICMP_ECHO_REPLY:
                #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                    prvProcessICMPEchoReply( pxICMPPacket );
                #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                break;
 800d4ca:	bf00      	nop
 800d4cc:	e000      	b.n	800d4d0 <prvProcessICMPPacket+0x2c>

            default:
                /* Only ICMP echo packets are handled. */
                break;
 800d4ce:	bf00      	nop
        }

        return eReturn;
 800d4d0:	7bfb      	ldrb	r3, [r7, #15]
    }
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3710      	adds	r7, #16
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}

0800d4da <xCheckSizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckSizeFields( const uint8_t * const pucEthernetBuffer,
                                        size_t uxBufferLength )
    {
 800d4da:	b580      	push	{r7, lr}
 800d4dc:	b08c      	sub	sp, #48	@ 0x30
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	6078      	str	r0, [r7, #4]
 800d4e2:	6039      	str	r1, [r7, #0]
        const ProtocolPacket_t * pxProtPack;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	62bb      	str	r3, [r7, #40]	@ 0x28

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	627b      	str	r3, [r7, #36]	@ 0x24

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	2b23      	cmp	r3, #35	@ 0x23
 800d4f0:	d802      	bhi.n	800d4f8 <xCheckSizeFields+0x1e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 800d4f6:	e077      	b.n	800d5e8 <xCheckSizeFields+0x10e>
            }

            /* Map the buffer onto a IP-Packet struct to easily access the
             * fields of the IP packet. */
            pxIPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPPacket_t, pucEthernetBuffer );
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f7ff f8a9 	bl	800c650 <vCastConstPointerTo_IPPacket_t>
 800d4fe:	6238      	str	r0, [r7, #32]

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 800d500:	6a3b      	ldr	r3, [r7, #32]
 800d502:	7c1b      	ldrb	r3, [r3, #16]
 800d504:	83fb      	strh	r3, [r7, #30]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800d506:	8bfb      	ldrh	r3, [r7, #30]
 800d508:	2b44      	cmp	r3, #68	@ 0x44
 800d50a:	d902      	bls.n	800d512 <xCheckSizeFields+0x38>
 800d50c:	8bfb      	ldrh	r3, [r7, #30]
 800d50e:	2b4f      	cmp	r3, #79	@ 0x4f
 800d510:	d902      	bls.n	800d518 <xCheckSizeFields+0x3e>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800d512:	2302      	movs	r3, #2
 800d514:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 800d516:	e067      	b.n	800d5e8 <xCheckSizeFields+0x10e>
            }

            ucVersionHeaderLength = ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2;
 800d518:	8bfb      	ldrh	r3, [r7, #30]
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800d522:	83fb      	strh	r3, [r7, #30]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 800d524:	8bfb      	ldrh	r3, [r7, #30]
 800d526:	61bb      	str	r3, [r7, #24]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 800d528:	69bb      	ldr	r3, [r7, #24]
 800d52a:	330e      	adds	r3, #14
 800d52c:	683a      	ldr	r2, [r7, #0]
 800d52e:	429a      	cmp	r2, r3
 800d530:	d202      	bcs.n	800d538 <xCheckSizeFields+0x5e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800d532:	2303      	movs	r3, #3
 800d534:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 800d536:	e057      	b.n	800d5e8 <xCheckSizeFields+0x10e>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 800d538:	6a3b      	ldr	r3, [r7, #32]
 800d53a:	8a5b      	ldrh	r3, [r3, #18]
 800d53c:	82fb      	strh	r3, [r7, #22]
            usLength = FreeRTOS_ntohs( usLength );
 800d53e:	8afb      	ldrh	r3, [r7, #22]
 800d540:	021b      	lsls	r3, r3, #8
 800d542:	b21a      	sxth	r2, r3
 800d544:	8afb      	ldrh	r3, [r7, #22]
 800d546:	0a1b      	lsrs	r3, r3, #8
 800d548:	b29b      	uxth	r3, r3
 800d54a:	b21b      	sxth	r3, r3
 800d54c:	4313      	orrs	r3, r2
 800d54e:	b21b      	sxth	r3, r3
 800d550:	82fb      	strh	r3, [r7, #22]

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 800d552:	8afb      	ldrh	r3, [r7, #22]
 800d554:	330e      	adds	r3, #14
 800d556:	683a      	ldr	r2, [r7, #0]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d202      	bcs.n	800d562 <xCheckSizeFields+0x88>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800d55c:	2304      	movs	r3, #4
 800d55e:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 800d560:	e042      	b.n	800d5e8 <xCheckSizeFields+0x10e>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800d562:	6a3b      	ldr	r3, [r7, #32]
 800d564:	7e5b      	ldrb	r3, [r3, #25]
 800d566:	757b      	strb	r3, [r7, #21]
             * protocol (Layer 3 or 4) header will be aligned, which is the convenience
             * of this calculation. */

            /* Map the Buffer onto the Protocol Packet struct for easy access to the
             * struct fields. */
            pxProtPack = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolPacket_t, &( pucEthernetBuffer[ uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ] ) );
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	3b14      	subs	r3, #20
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	4413      	add	r3, r2
 800d570:	4618      	mov	r0, r3
 800d572:	f7ff f899 	bl	800c6a8 <vCastConstPointerTo_ProtocolPacket_t>
 800d576:	6138      	str	r0, [r7, #16]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800d578:	7d7b      	ldrb	r3, [r7, #21]
 800d57a:	2b11      	cmp	r3, #17
 800d57c:	d103      	bne.n	800d586 <xCheckSizeFields+0xac>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 800d57e:	69bb      	ldr	r3, [r7, #24]
 800d580:	3316      	adds	r3, #22
 800d582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d584:	e013      	b.n	800d5ae <xCheckSizeFields+0xd4>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 800d586:	7d7b      	ldrb	r3, [r7, #21]
 800d588:	2b06      	cmp	r3, #6
 800d58a:	d103      	bne.n	800d594 <xCheckSizeFields+0xba>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 800d58c:	69bb      	ldr	r3, [r7, #24]
 800d58e:	3322      	adds	r3, #34	@ 0x22
 800d590:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d592:	e00c      	b.n	800d5ae <xCheckSizeFields+0xd4>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 800d594:	7d7b      	ldrb	r3, [r7, #21]
 800d596:	2b01      	cmp	r3, #1
 800d598:	d002      	beq.n	800d5a0 <xCheckSizeFields+0xc6>
 800d59a:	7d7b      	ldrb	r3, [r7, #21]
 800d59c:	2b02      	cmp	r3, #2
 800d59e:	d103      	bne.n	800d5a8 <xCheckSizeFields+0xce>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMP_HEADER;
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	3316      	adds	r3, #22
 800d5a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d5a6:	e002      	b.n	800d5ae <xCheckSizeFields+0xd4>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800d5a8:	2305      	movs	r3, #5
 800d5aa:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 800d5ac:	e01c      	b.n	800d5e8 <xCheckSizeFields+0x10e>
            }

            if( uxBufferLength < uxMinimumLength )
 800d5ae:	683a      	ldr	r2, [r7, #0]
 800d5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d202      	bcs.n	800d5bc <xCheckSizeFields+0xe2>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800d5b6:	2306      	movs	r3, #6
 800d5b8:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 800d5ba:	e015      	b.n	800d5e8 <xCheckSizeFields+0x10e>
            }

            uxLength = ( size_t ) usLength;
 800d5bc:	8afb      	ldrh	r3, [r7, #22]
 800d5be:	60fb      	str	r3, [r7, #12]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 800d5c0:	69bb      	ldr	r3, [r7, #24]
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	1a9b      	subs	r3, r3, r2
 800d5ca:	60fb      	str	r3, [r7, #12]

            if( ( uxLength < ( ( size_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2b07      	cmp	r3, #7
 800d5d0:	d905      	bls.n	800d5de <xCheckSizeFields+0x104>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 800d5d2:	69bb      	ldr	r3, [r7, #24]
 800d5d4:	f5c3 6396 	rsb	r3, r3, #1200	@ 0x4b0
            if( ( uxLength < ( ( size_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 800d5d8:	68fa      	ldr	r2, [r7, #12]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d902      	bls.n	800d5e4 <xCheckSizeFields+0x10a>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800d5de:	2307      	movs	r3, #7
 800d5e0:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 800d5e2:	e001      	b.n	800d5e8 <xCheckSizeFields+0x10e>
            }

            xResult = pdPASS;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	62bb      	str	r3, [r7, #40]	@ 0x28
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckSizeFields: location %ld\n", xLocation ) );
        }

        return xResult;
 800d5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3730      	adds	r7, #48	@ 0x30
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
	...

0800d5f4 <usGenerateProtocolChecksum>:
 *         When xOutgoingPacket is true: either ipINVALID_LENGTH or ipCORRECT_CRC.
 */
uint16_t usGenerateProtocolChecksum( const uint8_t * const pucEthernetBuffer,
                                     size_t uxBufferLength,
                                     BaseType_t xOutgoingPacket )
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b08e      	sub	sp, #56	@ 0x38
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	60f8      	str	r0, [r7, #12]
 800d5fc:	60b9      	str	r1, [r7, #8]
 800d5fe:	607a      	str	r2, [r7, #4]
    #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
        const char * pcType;
    #endif
    uint16_t usLength;
    uint16_t ucVersionHeaderLength;
    DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800d600:	2300      	movs	r3, #0
 800d602:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Introduce a do-while loop to allow use of break statements.
     * Note: MISRA prohibits use of 'goto', thus replaced with breaks. */
    do
    {
        /* Check for minimum packet size. */
        if( uxBufferLength < sizeof( IPPacket_t ) )
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	2b23      	cmp	r3, #35	@ 0x23
 800d608:	d805      	bhi.n	800d616 <usGenerateProtocolChecksum+0x22>
        {
            usChecksum = ipINVALID_LENGTH;
 800d60a:	f241 2334 	movw	r3, #4660	@ 0x1234
 800d60e:	86fb      	strh	r3, [r7, #54]	@ 0x36
            DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800d610:	2301      	movs	r3, #1
 800d612:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800d614:	e0ff      	b.n	800d816 <usGenerateProtocolChecksum+0x222>
        }

        /* Parse the packet length. */
        pxIPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPPacket_t, pucEthernetBuffer );
 800d616:	68f8      	ldr	r0, [r7, #12]
 800d618:	f7ff f81a 	bl	800c650 <vCastConstPointerTo_IPPacket_t>
 800d61c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Per https://tools.ietf.org/html/rfc791, the four-bit Internet Header
         * Length field contains the length of the internet header in 32-bit words. */
        ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 800d61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d620:	7c1b      	ldrb	r3, [r3, #16]
 800d622:	84fb      	strh	r3, [r7, #38]	@ 0x26
        ucVersionHeaderLength = ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2;
 800d624:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d626:	009b      	lsls	r3, r3, #2
 800d628:	b29b      	uxth	r3, r3
 800d62a:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800d62e:	84fb      	strh	r3, [r7, #38]	@ 0x26
        uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 800d630:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d632:	623b      	str	r3, [r7, #32]

        /* Check for minimum packet size. */
        if( uxBufferLength < ( sizeof( IPPacket_t ) + ( uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ) ) )
 800d634:	6a3b      	ldr	r3, [r7, #32]
 800d636:	3310      	adds	r3, #16
 800d638:	68ba      	ldr	r2, [r7, #8]
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d205      	bcs.n	800d64a <usGenerateProtocolChecksum+0x56>
        {
            usChecksum = ipINVALID_LENGTH;
 800d63e:	f241 2334 	movw	r3, #4660	@ 0x1234
 800d642:	86fb      	strh	r3, [r7, #54]	@ 0x36
            DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800d644:	2302      	movs	r3, #2
 800d646:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800d648:	e0e5      	b.n	800d816 <usGenerateProtocolChecksum+0x222>
        }

        usLength = pxIPPacket->xIPHeader.usLength;
 800d64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d64c:	8a5b      	ldrh	r3, [r3, #18]
 800d64e:	83fb      	strh	r3, [r7, #30]
        usLength = FreeRTOS_ntohs( usLength );
 800d650:	8bfb      	ldrh	r3, [r7, #30]
 800d652:	021b      	lsls	r3, r3, #8
 800d654:	b21a      	sxth	r2, r3
 800d656:	8bfb      	ldrh	r3, [r7, #30]
 800d658:	0a1b      	lsrs	r3, r3, #8
 800d65a:	b29b      	uxth	r3, r3
 800d65c:	b21b      	sxth	r3, r3
 800d65e:	4313      	orrs	r3, r2
 800d660:	b21b      	sxth	r3, r3
 800d662:	83fb      	strh	r3, [r7, #30]

        if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 800d664:	8bfb      	ldrh	r3, [r7, #30]
 800d666:	330e      	adds	r3, #14
 800d668:	68ba      	ldr	r2, [r7, #8]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d205      	bcs.n	800d67a <usGenerateProtocolChecksum+0x86>
        {
            usChecksum = ipINVALID_LENGTH;
 800d66e:	f241 2334 	movw	r3, #4660	@ 0x1234
 800d672:	86fb      	strh	r3, [r7, #54]	@ 0x36
            DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800d674:	2303      	movs	r3, #3
 800d676:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800d678:	e0cd      	b.n	800d816 <usGenerateProtocolChecksum+0x222>
        }

        /* Identify the next protocol. */
        ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800d67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d67c:	7e5b      	ldrb	r3, [r3, #25]
 800d67e:	777b      	strb	r3, [r7, #29]
        /* N.B., if this IP packet header includes Options, then the following
         * assignment results in a pointer into the protocol packet with the Ethernet
         * and IP headers incorrectly aligned. However, either way, the "third"
         * protocol (Layer 3 or 4) header will be aligned, which is the convenience
         * of this calculation. */
        pxProtPack = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolPacket_t, &( pucEthernetBuffer[ uxIPHeaderLength - ipSIZE_OF_IPv4_HEADER ] ) );
 800d680:	6a3b      	ldr	r3, [r7, #32]
 800d682:	3b14      	subs	r3, #20
 800d684:	68fa      	ldr	r2, [r7, #12]
 800d686:	4413      	add	r3, r2
 800d688:	4618      	mov	r0, r3
 800d68a:	f7ff f80d 	bl	800c6a8 <vCastConstPointerTo_ProtocolPacket_t>
 800d68e:	61b8      	str	r0, [r7, #24]

        /* Switch on the Layer 3/4 protocol. */
        if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800d690:	7f7b      	ldrb	r3, [r7, #29]
 800d692:	2b11      	cmp	r3, #17
 800d694:	d10e      	bne.n	800d6b4 <usGenerateProtocolChecksum+0xc0>
        {
            if( uxBufferLength < ( uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER ) )
 800d696:	6a3b      	ldr	r3, [r7, #32]
 800d698:	3316      	adds	r3, #22
 800d69a:	68ba      	ldr	r2, [r7, #8]
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d205      	bcs.n	800d6ac <usGenerateProtocolChecksum+0xb8>
            {
                usChecksum = ipINVALID_LENGTH;
 800d6a0:	f241 2334 	movw	r3, #4660	@ 0x1234
 800d6a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800d6a6:	2304      	movs	r3, #4
 800d6a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800d6aa:	e0b4      	b.n	800d816 <usGenerateProtocolChecksum+0x222>
            }

            pusChecksum = ( uint16_t * ) ( &( pxProtPack->xUDPPacket.xUDPHeader.usChecksum ) );
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	332a      	adds	r3, #42	@ 0x2a
 800d6b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800d6b2:	e02c      	b.n	800d70e <usGenerateProtocolChecksum+0x11a>
                {
                    pcType = "UDP";
                }
            #endif /* ipconfigHAS_DEBUG_PRINTF != 0 */
        }
        else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 800d6b4:	7f7b      	ldrb	r3, [r7, #29]
 800d6b6:	2b06      	cmp	r3, #6
 800d6b8:	d10e      	bne.n	800d6d8 <usGenerateProtocolChecksum+0xe4>
        {
            if( uxBufferLength < ( uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER ) )
 800d6ba:	6a3b      	ldr	r3, [r7, #32]
 800d6bc:	3322      	adds	r3, #34	@ 0x22
 800d6be:	68ba      	ldr	r2, [r7, #8]
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d205      	bcs.n	800d6d0 <usGenerateProtocolChecksum+0xdc>
            {
                usChecksum = ipINVALID_LENGTH;
 800d6c4:	f241 2334 	movw	r3, #4660	@ 0x1234
 800d6c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800d6ca:	2305      	movs	r3, #5
 800d6cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800d6ce:	e0a2      	b.n	800d816 <usGenerateProtocolChecksum+0x222>
            }

            pusChecksum = ( uint16_t * ) ( &( pxProtPack->xTCPPacket.xTCPHeader.usChecksum ) );
 800d6d0:	69bb      	ldr	r3, [r7, #24]
 800d6d2:	3334      	adds	r3, #52	@ 0x34
 800d6d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d6d6:	e01a      	b.n	800d70e <usGenerateProtocolChecksum+0x11a>
                {
                    pcType = "TCP";
                }
            #endif /* ipconfigHAS_DEBUG_PRINTF != 0 */
        }
        else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 800d6d8:	7f7b      	ldrb	r3, [r7, #29]
 800d6da:	2b01      	cmp	r3, #1
 800d6dc:	d002      	beq.n	800d6e4 <usGenerateProtocolChecksum+0xf0>
 800d6de:	7f7b      	ldrb	r3, [r7, #29]
 800d6e0:	2b02      	cmp	r3, #2
 800d6e2:	d10e      	bne.n	800d702 <usGenerateProtocolChecksum+0x10e>
                 ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
        {
            if( uxBufferLength < ( uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMP_HEADER ) )
 800d6e4:	6a3b      	ldr	r3, [r7, #32]
 800d6e6:	3316      	adds	r3, #22
 800d6e8:	68ba      	ldr	r2, [r7, #8]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d205      	bcs.n	800d6fa <usGenerateProtocolChecksum+0x106>
            {
                usChecksum = ipINVALID_LENGTH;
 800d6ee:	f241 2334 	movw	r3, #4660	@ 0x1234
 800d6f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800d6f4:	2306      	movs	r3, #6
 800d6f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800d6f8:	e08d      	b.n	800d816 <usGenerateProtocolChecksum+0x222>
            }

            pusChecksum = ( uint16_t * ) ( &( pxProtPack->xICMPPacket.xICMPHeader.usChecksum ) );
 800d6fa:	69bb      	ldr	r3, [r7, #24]
 800d6fc:	3326      	adds	r3, #38	@ 0x26
 800d6fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800d700:	e005      	b.n	800d70e <usGenerateProtocolChecksum+0x11a>
            #endif /* ipconfigHAS_DEBUG_PRINTF != 0 */
        }
        else
        {
            /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
            usChecksum = ipUNHANDLED_PROTOCOL;
 800d702:	f244 3321 	movw	r3, #17185	@ 0x4321
 800d706:	86fb      	strh	r3, [r7, #54]	@ 0x36
            DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800d708:	2307      	movs	r3, #7
 800d70a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800d70c:	e083      	b.n	800d816 <usGenerateProtocolChecksum+0x222>
        }

        /* The protocol and checksum field have been identified. Check the direction
         * of the packet. */
        if( xOutgoingPacket != pdFALSE )
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d003      	beq.n	800d71c <usGenerateProtocolChecksum+0x128>
        {
            /* This is an outgoing packet. Before calculating the checksum, set it
             * to zero. */
            *( pusChecksum ) = 0U;
 800d714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d716:	2200      	movs	r2, #0
 800d718:	801a      	strh	r2, [r3, #0]
 800d71a:	e014      	b.n	800d746 <usGenerateProtocolChecksum+0x152>
        }
        else if( ( *pusChecksum == 0U ) && ( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP ) )
 800d71c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d71e:	881b      	ldrh	r3, [r3, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d110      	bne.n	800d746 <usGenerateProtocolChecksum+0x152>
 800d724:	7f7b      	ldrb	r3, [r7, #29]
 800d726:	2b11      	cmp	r3, #17
 800d728:	d10d      	bne.n	800d746 <usGenerateProtocolChecksum+0x152>
        {
            #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
                {
                    /* Sender hasn't set the checksum, drop the packet because
                     * ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is not set. */
                    usChecksum = ipWRONG_CRC;
 800d72a:	2300      	movs	r3, #0
 800d72c:	86fb      	strh	r3, [r7, #54]	@ 0x36
                    #if ( ipconfigHAS_PRINTF != 0 )
                        {
                            static BaseType_t xCount = 0;

                            if( xCount < 5 )
 800d72e:	4b3c      	ldr	r3, [pc, #240]	@ (800d820 <usGenerateProtocolChecksum+0x22c>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	2b04      	cmp	r3, #4
 800d734:	dc04      	bgt.n	800d740 <usGenerateProtocolChecksum+0x14c>
                            {
                                FreeRTOS_printf( ( "usGenerateProtocolChecksum: UDP packet from %xip without CRC dropped\n",
                                                   FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                xCount++;
 800d736:	4b3a      	ldr	r3, [pc, #232]	@ (800d820 <usGenerateProtocolChecksum+0x22c>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	3301      	adds	r3, #1
 800d73c:	4a38      	ldr	r2, [pc, #224]	@ (800d820 <usGenerateProtocolChecksum+0x22c>)
 800d73e:	6013      	str	r3, [r2, #0]
                {
                    /* Sender hasn't set the checksum, no use to calculate it. */
                    usChecksum = ipCORRECT_CRC;
                }
            #endif /* if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 ) */
            DEBUG_SET_TRACE_VARIABLE( xLocation, 8 );
 800d740:	2308      	movs	r3, #8
 800d742:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800d744:	e067      	b.n	800d816 <usGenerateProtocolChecksum+0x222>
        else
        {
            /* Other incoming packet than UDP. */
        }

        usLength = pxIPPacket->xIPHeader.usLength;
 800d746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d748:	8a5b      	ldrh	r3, [r3, #18]
 800d74a:	83fb      	strh	r3, [r7, #30]
        usLength = FreeRTOS_ntohs( usLength );
 800d74c:	8bfb      	ldrh	r3, [r7, #30]
 800d74e:	021b      	lsls	r3, r3, #8
 800d750:	b21a      	sxth	r2, r3
 800d752:	8bfb      	ldrh	r3, [r7, #30]
 800d754:	0a1b      	lsrs	r3, r3, #8
 800d756:	b29b      	uxth	r3, r3
 800d758:	b21b      	sxth	r3, r3
 800d75a:	4313      	orrs	r3, r2
 800d75c:	b21b      	sxth	r3, r3
 800d75e:	83fb      	strh	r3, [r7, #30]
        ulLength = ( uint32_t ) usLength;
 800d760:	8bfb      	ldrh	r3, [r7, #30]
 800d762:	617b      	str	r3, [r7, #20]
        ulLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally minus 20 */
 800d764:	6a3b      	ldr	r3, [r7, #32]
 800d766:	b29b      	uxth	r3, r3
 800d768:	461a      	mov	r2, r3
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	1a9b      	subs	r3, r3, r2
 800d76e:	617b      	str	r3, [r7, #20]

        if( ( ulLength < ( ( uint32_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	2b07      	cmp	r3, #7
 800d774:	d905      	bls.n	800d782 <usGenerateProtocolChecksum+0x18e>
            ( ulLength > ( ( uint32_t ) ipconfigNETWORK_MTU - ( uint32_t ) uxIPHeaderLength ) ) )
 800d776:	6a3b      	ldr	r3, [r7, #32]
 800d778:	f5c3 6396 	rsb	r3, r3, #1200	@ 0x4b0
        if( ( ulLength < ( ( uint32_t ) sizeof( pxProtPack->xUDPPacket.xUDPHeader ) ) ) ||
 800d77c:	697a      	ldr	r2, [r7, #20]
 800d77e:	429a      	cmp	r2, r3
 800d780:	d905      	bls.n	800d78e <usGenerateProtocolChecksum+0x19a>

            /* Again, in a 16-bit return value there is no space to indicate an
             * error.  For incoming packets, 0x1234 will cause dropping of the packet.
             * For outgoing packets, there is a serious problem with the
             * format/length */
            usChecksum = ipINVALID_LENGTH;
 800d782:	f241 2334 	movw	r3, #4660	@ 0x1234
 800d786:	86fb      	strh	r3, [r7, #54]	@ 0x36
            DEBUG_SET_TRACE_VARIABLE( xLocation, 9 );
 800d788:	2309      	movs	r3, #9
 800d78a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800d78c:	e043      	b.n	800d816 <usGenerateProtocolChecksum+0x222>
        }

        if( ucProtocol <= ( uint8_t ) ipPROTOCOL_IGMP )
 800d78e:	7f7b      	ldrb	r3, [r7, #29]
 800d790:	2b02      	cmp	r3, #2
 800d792:	d80a      	bhi.n	800d7aa <usGenerateProtocolChecksum+0x1b6>
        {
            /* ICMP/IGMP do not have a pseudo header for CRC-calculation. */
            usChecksum = ( uint16_t )
                         ( ~usGenerateChecksum( 0U,
                                                ( const uint8_t * ) &( pxProtPack->xTCPPacket.xTCPHeader ), ( size_t ) ulLength ) );
 800d794:	69bb      	ldr	r3, [r7, #24]
 800d796:	3324      	adds	r3, #36	@ 0x24
                         ( ~usGenerateChecksum( 0U,
 800d798:	697a      	ldr	r2, [r7, #20]
 800d79a:	4619      	mov	r1, r3
 800d79c:	2000      	movs	r0, #0
 800d79e:	f000 f841 	bl	800d824 <usGenerateChecksum>
 800d7a2:	4603      	mov	r3, r0
            usChecksum = ( uint16_t )
 800d7a4:	43db      	mvns	r3, r3
 800d7a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d7a8:	e012      	b.n	800d7d0 <usGenerateProtocolChecksum+0x1dc>
        }
        else
        {
            /* For UDP and TCP, sum the pseudo header, i.e. IP protocol + length
             * fields */
            usChecksum = ( uint16_t ) ( ulLength + ( ( uint16_t ) ucProtocol ) );
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	b29a      	uxth	r2, r3
 800d7ae:	7f7b      	ldrb	r3, [r7, #29]
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	4413      	add	r3, r2
 800d7b4:	86fb      	strh	r3, [r7, #54]	@ 0x36

            /* And then continue at the IPv4 source and destination addresses. */
            usChecksum = ( uint16_t )
                         ( ~usGenerateChecksum( usChecksum,
                                                ipPOINTER_CAST( const uint8_t *, &( pxIPPacket->xIPHeader.ulSourceIPAddress ) ),
 800d7b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7b8:	f103 011c 	add.w	r1, r3, #28
                                                ( size_t ) ( ( 2U * ipSIZE_OF_IPv4_ADDRESS ) + ulLength ) ) );
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	f103 0208 	add.w	r2, r3, #8
                         ( ~usGenerateChecksum( usChecksum,
 800d7c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f000 f82d 	bl	800d824 <usGenerateChecksum>
 800d7ca:	4603      	mov	r3, r0
            usChecksum = ( uint16_t )
 800d7cc:	43db      	mvns	r3, r3
 800d7ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
            /* Sum TCP header and data. */
        }

        if( xOutgoingPacket == pdFALSE )
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d106      	bne.n	800d7e4 <usGenerateProtocolChecksum+0x1f0>
        {
            /* This is in incoming packet. If the CRC is correct, it should be zero. */
            if( usChecksum == 0U )
 800d7d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d10c      	bne.n	800d7f6 <usGenerateProtocolChecksum+0x202>
            {
                usChecksum = ( uint16_t ) ipCORRECT_CRC;
 800d7dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d7e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d7e2:	e008      	b.n	800d7f6 <usGenerateProtocolChecksum+0x202>
            }
        }
        else
        {
            if( ( usChecksum == 0U ) && ( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP ) )
 800d7e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d105      	bne.n	800d7f6 <usGenerateProtocolChecksum+0x202>
 800d7ea:	7f7b      	ldrb	r3, [r7, #29]
 800d7ec:	2b11      	cmp	r3, #17
 800d7ee:	d102      	bne.n	800d7f6 <usGenerateProtocolChecksum+0x202>
                            FreeRTOS_debug_printf( ( "usGenerateProtocolChecksum[%s]: crc swap: %04X\n", pcType, usChecksum ) );
                        }
                    }
                #endif /* ipconfigHAS_DEBUG_PRINTF != 0 */

                usChecksum = ( uint16_t ) 0xffffu;
 800d7f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d7f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            }
        }

        usChecksum = FreeRTOS_htons( usChecksum );
 800d7f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d7f8:	021b      	lsls	r3, r3, #8
 800d7fa:	b21a      	sxth	r2, r3
 800d7fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d7fe:	0a1b      	lsrs	r3, r3, #8
 800d800:	b29b      	uxth	r3, r3
 800d802:	b21b      	sxth	r3, r3
 800d804:	4313      	orrs	r3, r2
 800d806:	b21b      	sxth	r3, r3
 800d808:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if( xOutgoingPacket != pdFALSE )
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d002      	beq.n	800d816 <usGenerateProtocolChecksum+0x222>
        {
            *( pusChecksum ) = usChecksum;
 800d810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d812:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d814:	801a      	strh	r2, [r3, #0]
    {
        /* NOP if ipconfigHAS_PRINTF != 0 */
        FreeRTOS_printf( ( "CRC error: %04x location %ld\n", usChecksum, xLocation ) );
    }

    return usChecksum;
 800d816:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3738      	adds	r7, #56	@ 0x38
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	2000a37c 	.word	0x2000a37c

0800d824 <usGenerateChecksum>:
 *         words in the header
 */
uint16_t usGenerateChecksum( uint16_t usSum,
                             const uint8_t * pucNextData,
                             size_t uxByteCount )
{
 800d824:	b480      	push	{r7}
 800d826:	b08f      	sub	sp, #60	@ 0x3c
 800d828:	af00      	add	r7, sp, #0
 800d82a:	4603      	mov	r3, r0
 800d82c:	60b9      	str	r1, [r7, #8]
 800d82e:	607a      	str	r2, [r7, #4]
 800d830:	81fb      	strh	r3, [r7, #14]
 * aid though to optimise the calculations. */
    xUnion32 xSum2, xSum, xTerm;
    xUnionPtr xSource;
    xUnionPtr xLastSource;
    uintptr_t uxAlignBits;
    uint32_t ulCarry = 0UL;
 800d832:	2300      	movs	r3, #0
 800d834:	637b      	str	r3, [r7, #52]	@ 0x34
    uint16_t usTemp;
    size_t uxDataLengthBytes = uxByteCount;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	633b      	str	r3, [r7, #48]	@ 0x30
    /* Small MCUs often spend up to 30% of the time doing checksum calculations
    * This function is optimised for 32-bit CPUs; Each time it will try to fetch
    * 32-bits, sums it with an accumulator and counts the number of carries. */

    /* Swap the input (little endian platform only). */
    usTemp = FreeRTOS_ntohs( usSum );
 800d83a:	89fb      	ldrh	r3, [r7, #14]
 800d83c:	021b      	lsls	r3, r3, #8
 800d83e:	b21a      	sxth	r2, r3
 800d840:	89fb      	ldrh	r3, [r7, #14]
 800d842:	0a1b      	lsrs	r3, r3, #8
 800d844:	b29b      	uxth	r3, r3
 800d846:	b21b      	sxth	r3, r3
 800d848:	4313      	orrs	r3, r2
 800d84a:	b21b      	sxth	r3, r3
 800d84c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    xSum.u32 = ( uint32_t ) usTemp;
 800d84e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d850:	623b      	str	r3, [r7, #32]
    xTerm.u32 = 0UL;
 800d852:	2300      	movs	r3, #0
 800d854:	61fb      	str	r3, [r7, #28]

    xSource.u8ptr = ipPOINTER_CAST( uint8_t *, pucNextData );
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	61bb      	str	r3, [r7, #24]
    uxAlignBits = ( ( ( uintptr_t ) pucNextData ) & 0x03U );
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	f003 0303 	and.w	r3, r3, #3
 800d860:	62bb      	str	r3, [r7, #40]	@ 0x28
    /*
     * If pucNextData is non-aligned then the checksum is starting at an
     * odd position and we need to make sure the usSum value now in xSum is
     * as if it had been "aligned" in the same way.
     */
    if( ( uxAlignBits & 1UL ) != 0U )
 800d862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d864:	f003 0301 	and.w	r3, r3, #1
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d007      	beq.n	800d87c <usGenerateChecksum+0x58>
    {
        xSum.u32 = ( ( xSum.u32 & 0xffU ) << 8 ) | ( ( xSum.u32 & 0xff00U ) >> 8 );
 800d86c:	6a3b      	ldr	r3, [r7, #32]
 800d86e:	021b      	lsls	r3, r3, #8
 800d870:	b29a      	uxth	r2, r3
 800d872:	6a3b      	ldr	r3, [r7, #32]
 800d874:	0a1b      	lsrs	r3, r3, #8
 800d876:	b2db      	uxtb	r3, r3
 800d878:	4313      	orrs	r3, r2
 800d87a:	623b      	str	r3, [r7, #32]
    }

    /* If byte (8-bit) aligned... */
    if( ( ( uxAlignBits & 1UL ) != 0UL ) && ( uxDataLengthBytes >= ( size_t ) 1 ) )
 800d87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d87e:	f003 0301 	and.w	r3, r3, #1
 800d882:	2b00      	cmp	r3, #0
 800d884:	d00b      	beq.n	800d89e <usGenerateChecksum+0x7a>
 800d886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d008      	beq.n	800d89e <usGenerateChecksum+0x7a>
    {
        xTerm.u8[ 1 ] = *( xSource.u8ptr );
 800d88c:	69bb      	ldr	r3, [r7, #24]
 800d88e:	781b      	ldrb	r3, [r3, #0]
 800d890:	777b      	strb	r3, [r7, #29]
        xSource.u8ptr++;
 800d892:	69bb      	ldr	r3, [r7, #24]
 800d894:	3301      	adds	r3, #1
 800d896:	61bb      	str	r3, [r7, #24]
        uxDataLengthBytes--;
 800d898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d89a:	3b01      	subs	r3, #1
 800d89c:	633b      	str	r3, [r7, #48]	@ 0x30
        /* Now xSource is word (16-bit) aligned. */
    }

    /* If half-word (16-bit) aligned... */
    if( ( ( uxAlignBits == 1U ) || ( uxAlignBits == 2U ) ) && ( uxDataLengthBytes >= 2U ) )
 800d89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	d002      	beq.n	800d8aa <usGenerateChecksum+0x86>
 800d8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8a6:	2b02      	cmp	r3, #2
 800d8a8:	d10d      	bne.n	800d8c6 <usGenerateChecksum+0xa2>
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	d90a      	bls.n	800d8c6 <usGenerateChecksum+0xa2>
    {
        xSum.u32 += *( xSource.u16ptr );
 800d8b0:	6a3b      	ldr	r3, [r7, #32]
 800d8b2:	69ba      	ldr	r2, [r7, #24]
 800d8b4:	8812      	ldrh	r2, [r2, #0]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	623b      	str	r3, [r7, #32]
        xSource.u16ptr++;
 800d8ba:	69bb      	ldr	r3, [r7, #24]
 800d8bc:	3302      	adds	r3, #2
 800d8be:	61bb      	str	r3, [r7, #24]
        uxDataLengthBytes -= 2U;
 800d8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c2:	3b02      	subs	r3, #2
 800d8c4:	633b      	str	r3, [r7, #48]	@ 0x30
        /* Now xSource is word (32-bit) aligned. */
    }

    /* Word (32-bit) aligned, do the most part. */
    xLastSource.u32ptr = ( xSource.u32ptr + ( uxDataLengthBytes / 4U ) ) - 3U;
 800d8c6:	69ba      	ldr	r2, [r7, #24]
 800d8c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ca:	f023 0303 	bic.w	r3, r3, #3
 800d8ce:	3b0c      	subs	r3, #12
 800d8d0:	4413      	add	r3, r2
 800d8d2:	617b      	str	r3, [r7, #20]

    /* In this loop, four 32-bit additions will be done, in total 16 bytes.
     * Indexing with constants (0,1,2,3) gives faster code than using
     * post-increments. */
    while( xSource.u32ptr < xLastSource.u32ptr )
 800d8d4:	e035      	b.n	800d942 <usGenerateChecksum+0x11e>
    {
        /* Use a secondary Sum2, just to see if the addition produced an
         * overflow. */
        xSum2.u32 = xSum.u32 + xSource.u32ptr[ 0 ];
 800d8d6:	6a3a      	ldr	r2, [r7, #32]
 800d8d8:	69bb      	ldr	r3, [r7, #24]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4413      	add	r3, r2
 800d8de:	627b      	str	r3, [r7, #36]	@ 0x24

        if( xSum2.u32 < xSum.u32 )
 800d8e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8e2:	6a3b      	ldr	r3, [r7, #32]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d202      	bcs.n	800d8ee <usGenerateChecksum+0xca>
        {
            ulCarry++;
 800d8e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* Now add the secondary sum to the major sum, and remember if there was
         * a carry. */
        xSum.u32 = xSum2.u32 + xSource.u32ptr[ 1 ];
 800d8ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8f0:	69bb      	ldr	r3, [r7, #24]
 800d8f2:	3304      	adds	r3, #4
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	4413      	add	r3, r2
 800d8f8:	623b      	str	r3, [r7, #32]

        if( xSum2.u32 > xSum.u32 )
 800d8fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8fc:	6a3b      	ldr	r3, [r7, #32]
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d902      	bls.n	800d908 <usGenerateChecksum+0xe4>
        {
            ulCarry++;
 800d902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d904:	3301      	adds	r3, #1
 800d906:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* And do the same trick once again for indexes 2 and 3 */
        xSum2.u32 = xSum.u32 + xSource.u32ptr[ 2 ];
 800d908:	6a3a      	ldr	r2, [r7, #32]
 800d90a:	69bb      	ldr	r3, [r7, #24]
 800d90c:	3308      	adds	r3, #8
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	4413      	add	r3, r2
 800d912:	627b      	str	r3, [r7, #36]	@ 0x24

        if( xSum2.u32 < xSum.u32 )
 800d914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d916:	6a3b      	ldr	r3, [r7, #32]
 800d918:	429a      	cmp	r2, r3
 800d91a:	d202      	bcs.n	800d922 <usGenerateChecksum+0xfe>
        {
            ulCarry++;
 800d91c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d91e:	3301      	adds	r3, #1
 800d920:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        xSum.u32 = xSum2.u32 + xSource.u32ptr[ 3 ];
 800d922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d924:	69bb      	ldr	r3, [r7, #24]
 800d926:	330c      	adds	r3, #12
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	4413      	add	r3, r2
 800d92c:	623b      	str	r3, [r7, #32]

        if( xSum2.u32 > xSum.u32 )
 800d92e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d930:	6a3b      	ldr	r3, [r7, #32]
 800d932:	429a      	cmp	r2, r3
 800d934:	d902      	bls.n	800d93c <usGenerateChecksum+0x118>
        {
            ulCarry++;
 800d936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d938:	3301      	adds	r3, #1
 800d93a:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* And finally advance the pointer 4 * 4 = 16 bytes. */
        xSource.u32ptr = &( xSource.u32ptr[ 4 ] );
 800d93c:	69bb      	ldr	r3, [r7, #24]
 800d93e:	3310      	adds	r3, #16
 800d940:	61bb      	str	r3, [r7, #24]
    while( xSource.u32ptr < xLastSource.u32ptr )
 800d942:	69ba      	ldr	r2, [r7, #24]
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	429a      	cmp	r2, r3
 800d948:	d3c5      	bcc.n	800d8d6 <usGenerateChecksum+0xb2>
    }

    /* Now add all carries. */
    xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ] + ulCarry;
 800d94a:	8c3b      	ldrh	r3, [r7, #32]
 800d94c:	461a      	mov	r2, r3
 800d94e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d950:	441a      	add	r2, r3
 800d952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d954:	4413      	add	r3, r2
 800d956:	623b      	str	r3, [r7, #32]

    uxDataLengthBytes %= 16U;
 800d958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d95a:	f003 030f 	and.w	r3, r3, #15
 800d95e:	633b      	str	r3, [r7, #48]	@ 0x30
    xLastSource.u8ptr = ( uint8_t * ) ( xSource.u8ptr + ( uxDataLengthBytes & ~( ( size_t ) 1 ) ) );
 800d960:	69ba      	ldr	r2, [r7, #24]
 800d962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d964:	f023 0301 	bic.w	r3, r3, #1
 800d968:	4413      	add	r3, r2
 800d96a:	617b      	str	r3, [r7, #20]
    /* Half-word aligned. */

    /* Coverity does not like Unions. Warning issued here: "The operator "<"
     * is being applied to the pointers "xSource.u16ptr" and "xLastSource.u16ptr",
     * which do not point into the same object." */
    while( xSource.u16ptr < xLastSource.u16ptr )
 800d96c:	e007      	b.n	800d97e <usGenerateChecksum+0x15a>
    {
        /* At least one more short. */
        xSum.u32 += xSource.u16ptr[ 0 ];
 800d96e:	6a3b      	ldr	r3, [r7, #32]
 800d970:	69ba      	ldr	r2, [r7, #24]
 800d972:	8812      	ldrh	r2, [r2, #0]
 800d974:	4413      	add	r3, r2
 800d976:	623b      	str	r3, [r7, #32]
        xSource.u16ptr++;
 800d978:	69bb      	ldr	r3, [r7, #24]
 800d97a:	3302      	adds	r3, #2
 800d97c:	61bb      	str	r3, [r7, #24]
    while( xSource.u16ptr < xLastSource.u16ptr )
 800d97e:	69ba      	ldr	r2, [r7, #24]
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	429a      	cmp	r2, r3
 800d984:	d3f3      	bcc.n	800d96e <usGenerateChecksum+0x14a>
    }

    if( ( uxDataLengthBytes & ( size_t ) 1 ) != 0U ) /* Maybe one more ? */
 800d986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d988:	f003 0301 	and.w	r3, r3, #1
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d002      	beq.n	800d996 <usGenerateChecksum+0x172>
    {
        xTerm.u8[ 0 ] = xSource.u8ptr[ 0 ];
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	781b      	ldrb	r3, [r3, #0]
 800d994:	773b      	strb	r3, [r7, #28]
    }

    xSum.u32 += xTerm.u32;
 800d996:	6a3a      	ldr	r2, [r7, #32]
 800d998:	69fb      	ldr	r3, [r7, #28]
 800d99a:	4413      	add	r3, r2
 800d99c:	623b      	str	r3, [r7, #32]

    /* Now add all carries again. */

    /* Assigning value from "xTerm.u32" to "xSum.u32" here, but that stored value is overwritten before it can be used.
     * Coverity doesn't understand about union variables. */
    xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
 800d99e:	8c3b      	ldrh	r3, [r7, #32]
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d9a4:	4413      	add	r3, r2
 800d9a6:	623b      	str	r3, [r7, #32]

    /* coverity[value_overwrite] */
    xSum.u32 = ( uint32_t ) xSum.u16[ 0 ] + xSum.u16[ 1 ];
 800d9a8:	8c3b      	ldrh	r3, [r7, #32]
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d9ae:	4413      	add	r3, r2
 800d9b0:	623b      	str	r3, [r7, #32]

    if( ( uxAlignBits & 1U ) != 0U )
 800d9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9b4:	f003 0301 	and.w	r3, r3, #1
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d007      	beq.n	800d9cc <usGenerateChecksum+0x1a8>
    {
        /* Quite unlikely, but pucNextData might be non-aligned, which would
        * mean that a checksum is calculated starting at an odd position. */
        xSum.u32 = ( ( xSum.u32 & 0xffU ) << 8 ) | ( ( xSum.u32 & 0xff00U ) >> 8 );
 800d9bc:	6a3b      	ldr	r3, [r7, #32]
 800d9be:	021b      	lsls	r3, r3, #8
 800d9c0:	b29a      	uxth	r2, r3
 800d9c2:	6a3b      	ldr	r3, [r7, #32]
 800d9c4:	0a1b      	lsrs	r3, r3, #8
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	623b      	str	r3, [r7, #32]
    }

    /* swap the output (little endian platform only). */
    return FreeRTOS_htons( ( ( uint16_t ) xSum.u32 ) );
 800d9cc:	6a3b      	ldr	r3, [r7, #32]
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	021b      	lsls	r3, r3, #8
 800d9d2:	b21a      	sxth	r2, r3
 800d9d4:	6a3b      	ldr	r3, [r7, #32]
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	0a1b      	lsrs	r3, r3, #8
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	b21b      	sxth	r3, r3
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	b21b      	sxth	r3, r3
 800d9e2:	b29b      	uxth	r3, r3
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	373c      	adds	r7, #60	@ 0x3c
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer: The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend: Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b086      	sub	sp, #24
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]

        if( pxNetworkBuffer != NULL )
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* Map the Buffer to Ethernet Header struct for easy access to fields. */
        pxEthernetHeader = ipCAST_PTR_TO_TYPE_PTR( EthernetHeader_t, pxNetworkBuffer->pucEthernetBuffer );
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	699b      	ldr	r3, [r3, #24]
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7fe fdfa 	bl	800c5f8 <vCastPointerTo_EthernetHeader_t>
 800da04:	6178      	str	r0, [r7, #20]
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        /* Swap source and destination MAC addresses. */
        pvCopySource = &pxEthernetHeader->xSourceAddress;
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	3306      	adds	r3, #6
 800da0a:	613b      	str	r3, [r7, #16]
        pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 800da10:	2206      	movs	r2, #6
 800da12:	6939      	ldr	r1, [r7, #16]
 800da14:	68f8      	ldr	r0, [r7, #12]
 800da16:	f008 f994 	bl	8015d42 <memcpy>

        pvCopySource = ipLOCAL_MAC_ADDRESS;
 800da1a:	4b09      	ldr	r3, [pc, #36]	@ (800da40 <vReturnEthernetFrame+0x50>)
 800da1c:	613b      	str	r3, [r7, #16]
        pvCopyDest = &pxEthernetHeader->xSourceAddress;
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	3306      	adds	r3, #6
 800da22:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800da24:	2206      	movs	r2, #6
 800da26:	6939      	ldr	r1, [r7, #16]
 800da28:	68f8      	ldr	r0, [r7, #12]
 800da2a:	f008 f98a 	bl	8015d42 <memcpy>

        /* Send! */
        iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
        ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xReleaseAfterSend );
 800da2e:	6839      	ldr	r1, [r7, #0]
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f005 fd09 	bl	8013448 <xNetworkInterfaceOutput>
    }
}
 800da36:	bf00      	nop
 800da38:	3718      	adds	r7, #24
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	20000088 	.word	0x20000088

0800da44 <vPrintResourceStats>:
/**
 * @brief A function that monitors a three resources: the heap, the space in the message
 *        queue of the IP-task, the number of available network buffer descriptors.
 */
    void vPrintResourceStats( void )
    {
 800da44:	b580      	push	{r7, lr}
 800da46:	b082      	sub	sp, #8
 800da48:	af00      	add	r7, sp, #0
        /* When setting up and testing a project with FreeRTOS+TCP, it is
         * can be helpful to monitor a few resources: the number of network
         * buffers and the amount of available heap.
         * This function will issue some logging when a minimum value has
         * changed. */
        uxCurrentBufferCount = uxGetMinimumFreeNetworkBuffers();
 800da4a:	f006 fd25 	bl	8014498 <uxGetMinimumFreeNetworkBuffers>
 800da4e:	6078      	str	r0, [r7, #4]

        if( uxLastMinBufferCount > uxCurrentBufferCount )
 800da50:	4b14      	ldr	r3, [pc, #80]	@ (800daa4 <vPrintResourceStats+0x60>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	687a      	ldr	r2, [r7, #4]
 800da56:	429a      	cmp	r2, r3
 800da58:	d202      	bcs.n	800da60 <vPrintResourceStats+0x1c>
        {
            /* The logging produced below may be helpful
             * while tuning +TCP: see how many buffers are in use. */
            uxLastMinBufferCount = uxCurrentBufferCount;
 800da5a:	4a12      	ldr	r2, [pc, #72]	@ (800daa4 <vPrintResourceStats+0x60>)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
                               uxGetNumberOfFreeNetworkBuffers(),
                               uxCurrentBufferCount ) );
        }

        uxMinSize = xPortGetMinimumEverFreeHeapSize();
 800da60:	f7fd fcd0 	bl	800b404 <xPortGetMinimumEverFreeHeapSize>
 800da64:	6038      	str	r0, [r7, #0]

        if( uxMinLastSize == 0U )
 800da66:	4b10      	ldr	r3, [pc, #64]	@ (800daa8 <vPrintResourceStats+0x64>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d103      	bne.n	800da76 <vPrintResourceStats+0x32>
        {
            /* Probably the first time this function is called. */
            uxMinLastSize = uxMinSize;
 800da6e:	4a0e      	ldr	r2, [pc, #56]	@ (800daa8 <vPrintResourceStats+0x64>)
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	6013      	str	r3, [r2, #0]
                    uxLastMinQueueSpace = uxCurrentCount;
                    FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
                }
            }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */
    }
 800da74:	e011      	b.n	800da9a <vPrintResourceStats+0x56>
        else if( uxMinSize >= ipMONITOR_MAX_HEAP )
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800da7c:	d20d      	bcs.n	800da9a <vPrintResourceStats+0x56>
        else if( ( uxMinLastSize * ipMONITOR_PERCENTAGE_90 ) > ( uxMinSize * ipMONITOR_PERCENTAGE_100 ) )
 800da7e:	4b0a      	ldr	r3, [pc, #40]	@ (800daa8 <vPrintResourceStats+0x64>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	225a      	movs	r2, #90	@ 0x5a
 800da84:	fb03 f202 	mul.w	r2, r3, r2
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	2164      	movs	r1, #100	@ 0x64
 800da8c:	fb01 f303 	mul.w	r3, r1, r3
 800da90:	429a      	cmp	r2, r3
 800da92:	d902      	bls.n	800da9a <vPrintResourceStats+0x56>
            uxMinLastSize = uxMinSize;
 800da94:	4a04      	ldr	r2, [pc, #16]	@ (800daa8 <vPrintResourceStats+0x64>)
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	6013      	str	r3, [r2, #0]
    }
 800da9a:	bf00      	nop
 800da9c:	3708      	adds	r7, #8
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	20000084 	.word	0x20000084
 800daa8:	2000a380 	.word	0x2000a380

0800daac <FreeRTOS_GetMACAddress>:
 * @brief Get the MAC address.
 *
 * @return The pointer to MAC address.
 */
const uint8_t * FreeRTOS_GetMACAddress( void )
{
 800daac:	b480      	push	{r7}
 800daae:	af00      	add	r7, sp, #0
    return ipLOCAL_MAC_ADDRESS;
 800dab0:	4b02      	ldr	r3, [pc, #8]	@ (800dabc <FreeRTOS_GetMACAddress+0x10>)
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr
 800dabc:	20000088 	.word	0x20000088

0800dac0 <vIPSetDHCPTimerEnableState>:
 * @brief Enable/disable the DHCP timer.
 *
 * @param[in] xEnableState: pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetDHCPTimerEnableState( BaseType_t xEnableState )
    {
 800dac0:	b480      	push	{r7}
 800dac2:	b083      	sub	sp, #12
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
        if( xEnableState != pdFALSE )
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d005      	beq.n	800dada <vIPSetDHCPTimerEnableState+0x1a>
        {
            xDHCPTimer.bActive = pdTRUE_UNSIGNED;
 800dace:	4a08      	ldr	r2, [pc, #32]	@ (800daf0 <vIPSetDHCPTimerEnableState+0x30>)
 800dad0:	7813      	ldrb	r3, [r2, #0]
 800dad2:	f043 0301 	orr.w	r3, r3, #1
 800dad6:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xDHCPTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800dad8:	e004      	b.n	800dae4 <vIPSetDHCPTimerEnableState+0x24>
            xDHCPTimer.bActive = pdFALSE_UNSIGNED;
 800dada:	4a05      	ldr	r2, [pc, #20]	@ (800daf0 <vIPSetDHCPTimerEnableState+0x30>)
 800dadc:	7813      	ldrb	r3, [r2, #0]
 800dade:	f36f 0300 	bfc	r3, #0, #1
 800dae2:	7013      	strb	r3, [r2, #0]
    }
 800dae4:	bf00      	nop
 800dae6:	370c      	adds	r7, #12
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr
 800daf0:	2000a348 	.word	0x2000a348

0800daf4 <vIPReloadDHCPTimer>:
 * @brief Reload the DHCP timer.
 *
 * @param[in] ulLeaseTime: The reload value.
 */
    void vIPReloadDHCPTimer( uint32_t ulLeaseTime )
    {
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b082      	sub	sp, #8
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xDHCPTimer, ulLeaseTime );
 800dafc:	6879      	ldr	r1, [r7, #4]
 800dafe:	4803      	ldr	r0, [pc, #12]	@ (800db0c <vIPReloadDHCPTimer+0x18>)
 800db00:	f7fe ffac 	bl	800ca5c <prvIPTimerReload>
    }
 800db04:	bf00      	nop
 800db06:	3708      	adds	r7, #8
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	2000a348 	.word	0x2000a348

0800db10 <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 800db10:	b480      	push	{r7}
 800db12:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 800db14:	4b03      	ldr	r3, [pc, #12]	@ (800db24 <xIPIsNetworkTaskReady+0x14>)
 800db16:	681b      	ldr	r3, [r3, #0]
}
 800db18:	4618      	mov	r0, r3
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr
 800db22:	bf00      	nop
 800db24:	2000a370 	.word	0x2000a370

0800db28 <FreeRTOS_IsNetworkUp>:
 * @brief Returns whether this node is connected to network or not.
 *
 * @return pdTRUE if network is connected, else pdFALSE.
 */
BaseType_t FreeRTOS_IsNetworkUp( void )
{
 800db28:	b480      	push	{r7}
 800db2a:	af00      	add	r7, sp, #0
    return xNetworkUp;
 800db2c:	4b03      	ldr	r3, [pc, #12]	@ (800db3c <FreeRTOS_IsNetworkUp+0x14>)
 800db2e:	681b      	ldr	r3, [r3, #0]
}
 800db30:	4618      	mov	r0, r3
 800db32:	46bd      	mov	sp, r7
 800db34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db38:	4770      	bx	lr
 800db3a:	bf00      	nop
 800db3c:	2000a330 	.word	0x2000a330

0800db40 <FreeRTOS_max_uint32>:
        {
            return ( a >= b ) ? a : b;
        }
        static portINLINE uint32_t FreeRTOS_max_uint32( uint32_t a,
                                                        uint32_t b )
        {
 800db40:	b480      	push	{r7}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
            return ( a >= b ) ? a : b;
 800db4a:	687a      	ldr	r2, [r7, #4]
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	4293      	cmp	r3, r2
 800db50:	bf38      	it	cc
 800db52:	4613      	movcc	r3, r2
        }
 800db54:	4618      	mov	r0, r3
 800db56:	370c      	adds	r7, #12
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr

0800db60 <FreeRTOS_round_up>:
        {
            return ( a <= b ) ? a : b;
        }
        static portINLINE uint32_t FreeRTOS_round_up( uint32_t a,
                                                      uint32_t d )
        {
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
            return d * ( ( a + d - 1U ) / d );
 800db6a:	687a      	ldr	r2, [r7, #4]
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	4413      	add	r3, r2
 800db70:	1e5a      	subs	r2, r3, #1
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	fbb2 f3f3 	udiv	r3, r2, r3
 800db78:	683a      	ldr	r2, [r7, #0]
 800db7a:	fb02 f303 	mul.w	r3, r2, r3
        }
 800db7e:	4618      	mov	r0, r3
 800db80:	370c      	adds	r7, #12
 800db82:	46bd      	mov	sp, r7
 800db84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db88:	4770      	bx	lr

0800db8a <uxStreamBufferSpace>:
                                                  const size_t uxLower,
                                                  const size_t uxUpper );
    static portINLINE size_t uxStreamBufferSpace( const StreamBuffer_t * pxBuffer,
                                                  const size_t uxLower,
                                                  const size_t uxUpper )
    {
 800db8a:	b480      	push	{r7}
 800db8c:	b087      	sub	sp, #28
 800db8e:	af00      	add	r7, sp, #0
 800db90:	60f8      	str	r0, [r7, #12]
 800db92:	60b9      	str	r1, [r7, #8]
 800db94:	607a      	str	r2, [r7, #4]
/* Returns the space between uxLower and uxUpper, which equals to the distance minus 1 */
        size_t uxCount;

        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	691a      	ldr	r2, [r3, #16]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	441a      	add	r2, r3
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	3b01      	subs	r3, #1
 800dba4:	617b      	str	r3, [r7, #20]

        if( uxCount >= pxBuffer->LENGTH )
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	691b      	ldr	r3, [r3, #16]
 800dbaa:	697a      	ldr	r2, [r7, #20]
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d304      	bcc.n	800dbba <uxStreamBufferSpace+0x30>
        {
            uxCount -= pxBuffer->LENGTH;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	691b      	ldr	r3, [r3, #16]
 800dbb4:	697a      	ldr	r2, [r7, #20]
 800dbb6:	1ad3      	subs	r3, r2, r3
 800dbb8:	617b      	str	r3, [r7, #20]
        }

        return uxCount;
 800dbba:	697b      	ldr	r3, [r7, #20]
    }
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	371c      	adds	r7, #28
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr

0800dbc8 <uxStreamBufferDistance>:
                                                     const size_t uxLower,
                                                     const size_t uxUpper );
    static portINLINE size_t uxStreamBufferDistance( const StreamBuffer_t * pxBuffer,
                                                     const size_t uxLower,
                                                     const size_t uxUpper )
    {
 800dbc8:	b480      	push	{r7}
 800dbca:	b087      	sub	sp, #28
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
/* Returns the distance between uxLower and uxUpper */
        size_t uxCount;

        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	691a      	ldr	r2, [r3, #16]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	441a      	add	r2, r3
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	1ad3      	subs	r3, r2, r3
 800dbe0:	617b      	str	r3, [r7, #20]

        if( uxCount >= pxBuffer->LENGTH )
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	691b      	ldr	r3, [r3, #16]
 800dbe6:	697a      	ldr	r2, [r7, #20]
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d304      	bcc.n	800dbf6 <uxStreamBufferDistance+0x2e>
        {
            uxCount -= pxBuffer->LENGTH;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	691b      	ldr	r3, [r3, #16]
 800dbf0:	697a      	ldr	r2, [r7, #20]
 800dbf2:	1ad3      	subs	r3, r2, r3
 800dbf4:	617b      	str	r3, [r7, #20]
        }

        return uxCount;
 800dbf6:	697b      	ldr	r3, [r7, #20]
    }
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	371c      	adds	r7, #28
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr

0800dc04 <uxStreamBufferGetSpace>:
/*-----------------------------------------------------------*/

    static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t * pxBuffer );
    static portINLINE size_t uxStreamBufferGetSpace( const StreamBuffer_t * pxBuffer )
    {
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b084      	sub	sp, #16
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can still be added to uxHead
 * before hitting on uxTail */
        size_t uxHead = pxBuffer->uxHead;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	689b      	ldr	r3, [r3, #8]
 800dc10:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	60bb      	str	r3, [r7, #8]

        return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800dc18:	68ba      	ldr	r2, [r7, #8]
 800dc1a:	68f9      	ldr	r1, [r7, #12]
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f7ff ffb4 	bl	800db8a <uxStreamBufferSpace>
 800dc22:	4603      	mov	r3, r0
    }
 800dc24:	4618      	mov	r0, r3
 800dc26:	3710      	adds	r7, #16
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <uxStreamBufferFrontSpace>:
/*-----------------------------------------------------------*/

    static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t * pxBuffer );
    static portINLINE size_t uxStreamBufferFrontSpace( const StreamBuffer_t * pxBuffer )
    {
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b084      	sub	sp, #16
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
/* Distance between uxFront and uxTail
 * or the number of items which can still be added to uxFront,
 * before hitting on uxTail */

        size_t uxFront = pxBuffer->uxFront;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	68db      	ldr	r3, [r3, #12]
 800dc38:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	60bb      	str	r3, [r7, #8]

        return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800dc40:	68ba      	ldr	r2, [r7, #8]
 800dc42:	68f9      	ldr	r1, [r7, #12]
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f7ff ffa0 	bl	800db8a <uxStreamBufferSpace>
 800dc4a:	4603      	mov	r3, r0
    }
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3710      	adds	r7, #16
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <uxStreamBufferGetSize>:
/*-----------------------------------------------------------*/

    static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t * pxBuffer );
    static portINLINE size_t uxStreamBufferGetSize( const StreamBuffer_t * pxBuffer )
    {
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
/* Returns the number of items which can be read from uxTail
 * before reaching uxHead */
        size_t uxHead = pxBuffer->uxHead;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	689b      	ldr	r3, [r3, #8]
 800dc60:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	60bb      	str	r3, [r7, #8]

        return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800dc68:	68fa      	ldr	r2, [r7, #12]
 800dc6a:	68b9      	ldr	r1, [r7, #8]
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f7ff ffab 	bl	800dbc8 <uxStreamBufferDistance>
 800dc72:	4603      	mov	r3, r0
    }
 800dc74:	4618      	mov	r0, r3
 800dc76:	3710      	adds	r7, #16
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}

0800dc7c <vCastPointerTo_FreeRTOS_Socket_t>:
    {
 800dc7c:	b480      	push	{r7}
 800dc7e:	b083      	sub	sp, #12
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
        return ( FreeRTOS_Socket_t * ) pvArgument;
 800dc84:	687b      	ldr	r3, [r7, #4]
    }
 800dc86:	4618      	mov	r0, r3
 800dc88:	370c      	adds	r7, #12
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr

0800dc92 <vCastConstPointerTo_FreeRTOS_Socket_t>:
    {
 800dc92:	b480      	push	{r7}
 800dc94:	b083      	sub	sp, #12
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
        return ( const FreeRTOS_Socket_t * ) pvArgument;
 800dc9a:	687b      	ldr	r3, [r7, #4]
    }
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	370c      	adds	r7, #12
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <vCastPointerTo_NetworkBufferDescriptor_t>:
 * @brief Utility function to cast pointer of a type to pointer of type NetworkBufferDescriptor_t.
 *
 * @return The casted pointer.
 */
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( NetworkBufferDescriptor_t )
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
    return ( NetworkBufferDescriptor_t * ) pvArgument;
 800dcb0:	687b      	ldr	r3, [r7, #4]
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	370c      	adds	r7, #12
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbc:	4770      	bx	lr

0800dcbe <vCastPointerTo_StreamBuffer_t>:
 * @brief Utility function to cast pointer of a type to pointer of type StreamBuffer_t.
 *
 * @return The casted pointer.
 */
static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( StreamBuffer_t )
{
 800dcbe:	b480      	push	{r7}
 800dcc0:	b083      	sub	sp, #12
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	6078      	str	r0, [r7, #4]
    return ( StreamBuffer_t * ) pvArgument;
 800dcc6:	687b      	ldr	r3, [r7, #4]
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	370c      	adds	r7, #12
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr

0800dcd4 <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b087      	sub	sp, #28
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d003      	beq.n	800dcee <prvValidSocket+0x1a>
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcec:	d102      	bne.n	800dcf4 <prvValidSocket+0x20>
    {
        xReturn = pdFALSE;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	617b      	str	r3, [r7, #20]
 800dcf2:	e015      	b.n	800dd20 <prvValidSocket+0x4c>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d006      	beq.n	800dd08 <prvValidSocket+0x34>
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	699b      	ldr	r3, [r3, #24]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d102      	bne.n	800dd08 <prvValidSocket+0x34>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800dd02:	2300      	movs	r3, #0
 800dd04:	617b      	str	r3, [r7, #20]
 800dd06:	e00b      	b.n	800dd20 <prvValidSocket+0x4c>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d002      	beq.n	800dd1c <prvValidSocket+0x48>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 800dd16:	2300      	movs	r3, #0
 800dd18:	617b      	str	r3, [r7, #20]
 800dd1a:	e001      	b.n	800dd20 <prvValidSocket+0x4c>
    }
    else
    {
        xReturn = pdTRUE;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800dd20:	697b      	ldr	r3, [r7, #20]
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	371c      	adds	r7, #28
 800dd26:	46bd      	mov	sp, r7
 800dd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2c:	4770      	bx	lr
	...

0800dd30 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800dd34:	4803      	ldr	r0, [pc, #12]	@ (800dd44 <vNetworkSocketsInit+0x14>)
 800dd36:	f7fa f9f4 	bl	8008122 <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
        {
            vListInitialise( &xBoundTCPSocketsList );
 800dd3a:	4803      	ldr	r0, [pc, #12]	@ (800dd48 <vNetworkSocketsInit+0x18>)
 800dd3c:	f7fa f9f1 	bl	8008122 <vListInitialise>
        }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800dd40:	bf00      	nop
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	2000a384 	.word	0x2000a384
 800dd48:	2000a398 	.word	0x2000a398

0800dd4c <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b08c      	sub	sp, #48	@ 0x30
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	607a      	str	r2, [r7, #4]
 800dd58:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800dd62:	f7ff fed5 	bl	800db10 <xIPIsNetworkTaskReady>
 800dd66:	4603      	mov	r3, r0
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d102      	bne.n	800dd72 <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dd70:	e084      	b.n	800de7c <prvDetermineSocketSize+0x130>
    }
    else
    {
        /* Only Ethernet is currently supported. */
        configASSERT( xDomain == FREERTOS_AF_INET );
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2b02      	cmp	r3, #2
 800dd76:	d00d      	beq.n	800dd94 <prvDetermineSocketSize+0x48>
	__asm volatile
 800dd78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd7c:	b672      	cpsid	i
 800dd7e:	f383 8811 	msr	BASEPRI, r3
 800dd82:	f3bf 8f6f 	isb	sy
 800dd86:	f3bf 8f4f 	dsb	sy
 800dd8a:	b662      	cpsie	i
 800dd8c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dd8e:	bf00      	nop
 800dd90:	bf00      	nop
 800dd92:	e7fd      	b.n	800dd90 <prvDetermineSocketSize+0x44>

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800dd94:	4b3c      	ldr	r3, [pc, #240]	@ (800de88 <prvDetermineSocketSize+0x13c>)
 800dd96:	689b      	ldr	r3, [r3, #8]
 800dd98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd9c:	d00d      	beq.n	800ddba <prvDetermineSocketSize+0x6e>
	__asm volatile
 800dd9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dda2:	b672      	cpsid	i
 800dda4:	f383 8811 	msr	BASEPRI, r3
 800dda8:	f3bf 8f6f 	isb	sy
 800ddac:	f3bf 8f4f 	dsb	sy
 800ddb0:	b662      	cpsie	i
 800ddb2:	623b      	str	r3, [r7, #32]
}
 800ddb4:	bf00      	nop
 800ddb6:	bf00      	nop
 800ddb8:	e7fd      	b.n	800ddb6 <prvDetermineSocketSize+0x6a>
        #if ( ipconfigUSE_TCP == 1 )
            {
                /* Check if the TCP socket-list has been initialised. */
                configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800ddba:	4b34      	ldr	r3, [pc, #208]	@ (800de8c <prvDetermineSocketSize+0x140>)
 800ddbc:	689b      	ldr	r3, [r3, #8]
 800ddbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddc2:	d00d      	beq.n	800dde0 <prvDetermineSocketSize+0x94>
	__asm volatile
 800ddc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddc8:	b672      	cpsid	i
 800ddca:	f383 8811 	msr	BASEPRI, r3
 800ddce:	f3bf 8f6f 	isb	sy
 800ddd2:	f3bf 8f4f 	dsb	sy
 800ddd6:	b662      	cpsie	i
 800ddd8:	61fb      	str	r3, [r7, #28]
}
 800ddda:	bf00      	nop
 800dddc:	bf00      	nop
 800ddde:	e7fd      	b.n	800dddc <prvDetermineSocketSize+0x90>
            }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2b11      	cmp	r3, #17
 800dde4:	d119      	bne.n	800de1a <prvDetermineSocketSize+0xce>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	2b02      	cmp	r3, #2
 800ddea:	d012      	beq.n	800de12 <prvDetermineSocketSize+0xc6>
            {
                xReturn = pdFAIL;
 800ddec:	2300      	movs	r3, #0
 800ddee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                configASSERT( xReturn == pdPASS );
 800ddf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddf2:	2b01      	cmp	r3, #1
 800ddf4:	d00d      	beq.n	800de12 <prvDetermineSocketSize+0xc6>
	__asm volatile
 800ddf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddfa:	b672      	cpsid	i
 800ddfc:	f383 8811 	msr	BASEPRI, r3
 800de00:	f3bf 8f6f 	isb	sy
 800de04:	f3bf 8f4f 	dsb	sy
 800de08:	b662      	cpsie	i
 800de0a:	61bb      	str	r3, [r7, #24]
}
 800de0c:	bf00      	nop
 800de0e:	bf00      	nop
 800de10:	e7fd      	b.n	800de0e <prvDetermineSocketSize+0xc2>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	224c      	movs	r2, #76	@ 0x4c
 800de16:	601a      	str	r2, [r3, #0]
 800de18:	e030      	b.n	800de7c <prvDetermineSocketSize+0x130>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2b06      	cmp	r3, #6
 800de1e:	d11a      	bne.n	800de56 <prvDetermineSocketSize+0x10a>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	2b01      	cmp	r3, #1
 800de24:	d012      	beq.n	800de4c <prvDetermineSocketSize+0x100>
                {
                    xReturn = pdFAIL;
 800de26:	2300      	movs	r3, #0
 800de28:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    configASSERT( xReturn == pdPASS );
 800de2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de2c:	2b01      	cmp	r3, #1
 800de2e:	d00d      	beq.n	800de4c <prvDetermineSocketSize+0x100>
	__asm volatile
 800de30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de34:	b672      	cpsid	i
 800de36:	f383 8811 	msr	BASEPRI, r3
 800de3a:	f3bf 8f6f 	isb	sy
 800de3e:	f3bf 8f4f 	dsb	sy
 800de42:	b662      	cpsie	i
 800de44:	617b      	str	r3, [r7, #20]
}
 800de46:	bf00      	nop
 800de48:	bf00      	nop
 800de4a:	e7fd      	b.n	800de48 <prvDetermineSocketSize+0xfc>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 800de52:	601a      	str	r2, [r3, #0]
 800de54:	e012      	b.n	800de7c <prvDetermineSocketSize+0x130>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800de56:	2300      	movs	r3, #0
 800de58:	62fb      	str	r3, [r7, #44]	@ 0x2c
            configASSERT( xReturn == pdPASS );
 800de5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	d00d      	beq.n	800de7c <prvDetermineSocketSize+0x130>
	__asm volatile
 800de60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de64:	b672      	cpsid	i
 800de66:	f383 8811 	msr	BASEPRI, r3
 800de6a:	f3bf 8f6f 	isb	sy
 800de6e:	f3bf 8f4f 	dsb	sy
 800de72:	b662      	cpsie	i
 800de74:	613b      	str	r3, [r7, #16]
}
 800de76:	bf00      	nop
 800de78:	bf00      	nop
 800de7a:	e7fd      	b.n	800de78 <prvDetermineSocketSize+0x12c>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800de7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3730      	adds	r7, #48	@ 0x30
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
 800de86:	bf00      	nop
 800de88:	2000a384 	.word	0x2000a384
 800de8c:	2000a398 	.word	0x2000a398

0800de90 <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b088      	sub	sp, #32
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	60b9      	str	r1, [r7, #8]
 800de9a:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800de9c:	2301      	movs	r3, #1
 800de9e:	613b      	str	r3, [r7, #16]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;

    if( prvDetermineSocketSize( xDomain, xType, xProtocol, &uxSocketSize ) == pdFAIL )
 800dea0:	f107 0310 	add.w	r3, r7, #16
 800dea4:	687a      	ldr	r2, [r7, #4]
 800dea6:	68b9      	ldr	r1, [r7, #8]
 800dea8:	68f8      	ldr	r0, [r7, #12]
 800deaa:	f7ff ff4f 	bl	800dd4c <prvDetermineSocketSize>
 800deae:	4603      	mov	r3, r0
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d103      	bne.n	800debc <FreeRTOS_socket+0x2c>
    {
        xReturn = FREERTOS_INVALID_SOCKET;
 800deb4:	f04f 33ff 	mov.w	r3, #4294967295
 800deb8:	61fb      	str	r3, [r7, #28]
 800deba:	e07e      	b.n	800dfba <FreeRTOS_socket+0x12a>
    {
        /* Allocate the structure that will hold the socket information. The
        * size depends on the type of socket: UDP sockets need less space. A
        * define 'pvPortMallocSocket' will used to allocate the necessary space.
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */
        pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, pvPortMallocSocket( uxSocketSize ) );
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	4618      	mov	r0, r3
 800dec0:	f7fd f972 	bl	800b1a8 <pvPortMalloc>
 800dec4:	4603      	mov	r3, r0
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7ff fed8 	bl	800dc7c <vCastPointerTo_FreeRTOS_Socket_t>
 800decc:	61b8      	str	r0, [r7, #24]

        if( pxSocket == NULL )
 800dece:	69bb      	ldr	r3, [r7, #24]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d103      	bne.n	800dedc <FreeRTOS_socket+0x4c>
        {
            xReturn = FREERTOS_INVALID_SOCKET;
 800ded4:	f04f 33ff 	mov.w	r3, #4294967295
 800ded8:	61fb      	str	r3, [r7, #28]
 800deda:	e06e      	b.n	800dfba <FreeRTOS_socket+0x12a>
            iptraceFAILED_TO_CREATE_SOCKET();
        }
        else
        {
            xEventGroup = xEventGroupCreate();
 800dedc:	f7f9 ff06 	bl	8007cec <xEventGroupCreate>
 800dee0:	6178      	str	r0, [r7, #20]

            if( xEventGroup == NULL )
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d106      	bne.n	800def6 <FreeRTOS_socket+0x66>
            {
                vPortFreeSocket( pxSocket );
 800dee8:	69b8      	ldr	r0, [r7, #24]
 800deea:	f7fd fa2b 	bl	800b344 <vPortFree>
                xReturn = FREERTOS_INVALID_SOCKET;
 800deee:	f04f 33ff 	mov.w	r3, #4294967295
 800def2:	61fb      	str	r3, [r7, #28]
 800def4:	e061      	b.n	800dfba <FreeRTOS_socket+0x12a>
                    /* Lint wants at least a comment, in case the macro is empty. */
                    iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
                }

                /* Clear the entire space to avoid nulling individual entries. */
                ( void ) memset( pxSocket, 0, uxSocketSize );
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	461a      	mov	r2, r3
 800defa:	2100      	movs	r1, #0
 800defc:	69b8      	ldr	r0, [r7, #24]
 800defe:	f007 fea4 	bl	8015c4a <memset>

                pxSocket->xEventGroup = xEventGroup;
 800df02:	69bb      	ldr	r3, [r7, #24]
 800df04:	697a      	ldr	r2, [r7, #20]
 800df06:	605a      	str	r2, [r3, #4]

                /* Initialise the socket's members.  The semaphore will be created
                 * if the socket is bound to an address, for now the pointer to the
                 * semaphore is just set to NULL to show it has not been created. */
                if( xProtocol == FREERTOS_IPPROTO_UDP )
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2b11      	cmp	r3, #17
 800df0c:	d104      	bne.n	800df18 <FreeRTOS_socket+0x88>
                {
                    vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800df0e:	69bb      	ldr	r3, [r7, #24]
 800df10:	3338      	adds	r3, #56	@ 0x38
 800df12:	4618      	mov	r0, r3
 800df14:	f7fa f905 	bl	8008122 <vListInitialise>
                            pxSocket->u.xUDP.uxMaxPackets = ( UBaseType_t ) ipconfigUDP_MAX_RX_PACKETS;
                        }
                    #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
                }

                vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	3308      	adds	r3, #8
 800df1c:	4618      	mov	r0, r3
 800df1e:	f7fa f920 	bl	8008162 <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ipPOINTER_CAST( void *, pxSocket ) );
 800df22:	69bb      	ldr	r3, [r7, #24]
 800df24:	69ba      	ldr	r2, [r7, #24]
 800df26:	615a      	str	r2, [r3, #20]

                pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800df28:	69bb      	ldr	r3, [r7, #24]
 800df2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800df2e:	61da      	str	r2, [r3, #28]
                pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800df30:	69bb      	ldr	r3, [r7, #24]
 800df32:	f241 3288 	movw	r2, #5000	@ 0x1388
 800df36:	621a      	str	r2, [r3, #32]
                pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800df38:	69bb      	ldr	r3, [r7, #24]
 800df3a:	2202      	movs	r2, #2
 800df3c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
                pxSocket->ucProtocol = ( uint8_t ) xProtocol; /* protocol: UDP or TCP */
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	b2da      	uxtb	r2, r3
 800df44:	69bb      	ldr	r3, [r7, #24]
 800df46:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

                #if ( ipconfigUSE_TCP == 1 )
                    {
                        if( xProtocol == FREERTOS_IPPROTO_TCP )
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2b06      	cmp	r3, #6
 800df4e:	d132      	bne.n	800dfb6 <FreeRTOS_socket+0x126>
                        {
                            /* StreamSize is expressed in number of bytes */
                            /* Round up buffer sizes to nearest multiple of MSS */
                            pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ipconfigTCP_MSS;
 800df50:	69bb      	ldr	r3, [r7, #24]
 800df52:	f44f 6291 	mov.w	r2, #1160	@ 0x488
 800df56:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
                            pxSocket->u.xTCP.usInitMSS = ( uint16_t ) ipconfigTCP_MSS;
 800df5a:	69bb      	ldr	r3, [r7, #24]
 800df5c:	f44f 6291 	mov.w	r2, #1160	@ 0x488
 800df60:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
                            pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800df64:	69bb      	ldr	r3, [r7, #24]
 800df66:	f242 7210 	movw	r2, #10000	@ 0x2710
 800df6a:	66da      	str	r2, [r3, #108]	@ 0x6c
                            pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800df6c:	f44f 6191 	mov.w	r1, #1160	@ 0x488
 800df70:	f242 7010 	movw	r0, #10000	@ 0x2710
 800df74:	f7ff fdf4 	bl	800db60 <FreeRTOS_round_up>
 800df78:	4602      	mov	r2, r0
 800df7a:	69bb      	ldr	r3, [r7, #24]
 800df7c:	671a      	str	r2, [r3, #112]	@ 0x70
                            /* Use half of the buffer size of the TCP windows */
                            #if ( ipconfigUSE_TCP_WIN == 1 )
                                {
                                    pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800df7e:	69bb      	ldr	r3, [r7, #24]
 800df80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df82:	4a10      	ldr	r2, [pc, #64]	@ (800dfc4 <FreeRTOS_socket+0x134>)
 800df84:	fba2 2303 	umull	r2, r3, r2, r3
 800df88:	0adb      	lsrs	r3, r3, #11
 800df8a:	4619      	mov	r1, r3
 800df8c:	2001      	movs	r0, #1
 800df8e:	f7ff fdd7 	bl	800db40 <FreeRTOS_max_uint32>
 800df92:	4602      	mov	r2, r0
 800df94:	69bb      	ldr	r3, [r7, #24]
 800df96:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
                                    pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_uint32( 1UL, ( uint32_t ) ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800df9a:	69bb      	ldr	r3, [r7, #24]
 800df9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df9e:	4a09      	ldr	r2, [pc, #36]	@ (800dfc4 <FreeRTOS_socket+0x134>)
 800dfa0:	fba2 2303 	umull	r2, r3, r2, r3
 800dfa4:	0adb      	lsrs	r3, r3, #11
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	2001      	movs	r0, #1
 800dfaa:	f7ff fdc9 	bl	800db40 <FreeRTOS_max_uint32>
 800dfae:	4602      	mov	r2, r0
 800dfb0:	69bb      	ldr	r3, [r7, #24]
 800dfb2:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
                             * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
                             * socket is connected and data is exchanged. */
                        }
                    }
                #endif /* ipconfigUSE_TCP == 1 */
                xReturn = pxSocket;
 800dfb6:	69bb      	ldr	r3, [r7, #24]
 800dfb8:	61fb      	str	r3, [r7, #28]
    }

    /* Remove compiler warnings in the case the configASSERT() is not defined. */
    ( void ) xDomain;

    return xReturn;
 800dfba:	69fb      	ldr	r3, [r7, #28]
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3720      	adds	r7, #32
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	e1fc780f 	.word	0xe1fc780f

0800dfc8 <FreeRTOS_recvfrom>:
                           void * pvBuffer,
                           size_t uxBufferLength,
                           BaseType_t xFlags,
                           struct freertos_sockaddr * pxSourceAddress,
                           socklen_t * pxSourceAddressLength )
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b092      	sub	sp, #72	@ 0x48
 800dfcc:	af02      	add	r7, sp, #8
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	607a      	str	r2, [r7, #4]
 800dfd4:	603b      	str	r3, [r7, #0]
    BaseType_t lPacketCount;
    NetworkBufferDescriptor_t * pxNetworkBuffer;
    const void * pvCopySource;
    FreeRTOS_Socket_t const * pxSocket = xSocket;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	633b      	str	r3, [r7, #48]	@ 0x30
    TickType_t xRemainingTime = ( TickType_t ) 0; /* Obsolete assignment, but some compilers output a warning if its not done. */
 800dfda:	2300      	movs	r3, #0
 800dfdc:	61fb      	str	r3, [r7, #28]
    BaseType_t xTimed = pdFALSE;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	63bb      	str	r3, [r7, #56]	@ 0x38
    TimeOut_t xTimeOut;
    int32_t lReturn;
    EventBits_t xEventBits = ( EventBits_t ) 0;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t uxPayloadLength;

    if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdTRUE ) == pdFALSE )
 800dfe6:	2201      	movs	r2, #1
 800dfe8:	2111      	movs	r1, #17
 800dfea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dfec:	f7ff fe72 	bl	800dcd4 <prvValidSocket>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d103      	bne.n	800dffe <FreeRTOS_recvfrom+0x36>
    {
        lReturn = -pdFREERTOS_ERRNO_EINVAL;
 800dff6:	f06f 0315 	mvn.w	r3, #21
 800dffa:	637b      	str	r3, [r7, #52]	@ 0x34
 800dffc:	e08e      	b.n	800e11c <FreeRTOS_recvfrom+0x154>
    }
    else
    {
        lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800dffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e002:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* The function prototype is designed to maintain the expected Berkeley
         * sockets standard, but this implementation does not use all the parameters. */
        ( void ) pxSourceAddressLength;

        while( lPacketCount == 0 )
 800e004:	e02f      	b.n	800e066 <FreeRTOS_recvfrom+0x9e>
        {
            if( xTimed == pdFALSE )
 800e006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d111      	bne.n	800e030 <FreeRTOS_recvfrom+0x68>
            {
                /* Check to see if the socket is non blocking on the first
                 * iteration.  */
                xRemainingTime = pxSocket->xReceiveBlockTime;
 800e00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e00e:	69db      	ldr	r3, [r3, #28]
 800e010:	61fb      	str	r3, [r7, #28]

                if( xRemainingTime == ( TickType_t ) 0 )
 800e012:	69fb      	ldr	r3, [r7, #28]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d02a      	beq.n	800e06e <FreeRTOS_recvfrom+0xa6>
                        }
                    #endif /* ipconfigSUPPORT_SIGNALS */
                    break;
                }

                if( ( ( ( UBaseType_t ) xFlags ) & ( ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) ) != 0U )
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	f003 0310 	and.w	r3, r3, #16
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d127      	bne.n	800e072 <FreeRTOS_recvfrom+0xaa>
                {
                    break;
                }

                /* To ensure this part only executes once. */
                xTimed = pdTRUE;
 800e022:	2301      	movs	r3, #1
 800e024:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800e026:	f107 0314 	add.w	r3, r7, #20
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7fb fe6e 	bl	8009d0c <vTaskSetTimeOutState>
            }

            /* Wait for arrival of data.  While waiting, the IP-task may set the
             * 'eSOCKET_RECEIVE' bit in 'xEventGroup', if it receives data for this
             * socket, thus unblocking this API call. */
            xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup, ( ( EventBits_t ) eSOCKET_RECEIVE ) | ( ( EventBits_t ) eSOCKET_INTR ),
 800e030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e032:	6858      	ldr	r0, [r3, #4]
 800e034:	69fb      	ldr	r3, [r7, #28]
 800e036:	9300      	str	r3, [sp, #0]
 800e038:	2300      	movs	r3, #0
 800e03a:	2201      	movs	r2, #1
 800e03c:	2141      	movs	r1, #65	@ 0x41
 800e03e:	f7f9 fe6f 	bl	8007d20 <xEventGroupWaitBits>
 800e042:	62f8      	str	r0, [r7, #44]	@ 0x2c
                {
                    ( void ) xEventBits;
                }
            #endif /* ipconfigSUPPORT_SIGNALS */

            lPacketCount = ( BaseType_t ) listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800e044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e048:	63fb      	str	r3, [r7, #60]	@ 0x3c

            if( lPacketCount != 0 )
 800e04a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d112      	bne.n	800e076 <FreeRTOS_recvfrom+0xae>
            {
                break;
            }

            /* Has the timeout been reached ? */
            if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800e050:	f107 021c 	add.w	r2, r7, #28
 800e054:	f107 0314 	add.w	r3, r7, #20
 800e058:	4611      	mov	r1, r2
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7fb fe96 	bl	8009d8c <xTaskCheckForTimeOut>
 800e060:	4603      	mov	r3, r0
 800e062:	2b00      	cmp	r3, #0
 800e064:	d109      	bne.n	800e07a <FreeRTOS_recvfrom+0xb2>
        while( lPacketCount == 0 )
 800e066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d0cc      	beq.n	800e006 <FreeRTOS_recvfrom+0x3e>
 800e06c:	e006      	b.n	800e07c <FreeRTOS_recvfrom+0xb4>
                    break;
 800e06e:	bf00      	nop
 800e070:	e004      	b.n	800e07c <FreeRTOS_recvfrom+0xb4>
                    break;
 800e072:	bf00      	nop
 800e074:	e002      	b.n	800e07c <FreeRTOS_recvfrom+0xb4>
                break;
 800e076:	bf00      	nop
 800e078:	e000      	b.n	800e07c <FreeRTOS_recvfrom+0xb4>
            {
                break;
 800e07a:	bf00      	nop
            }
        } /* while( lPacketCount == 0 ) */

        if( lPacketCount != 0 )
 800e07c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d049      	beq.n	800e116 <FreeRTOS_recvfrom+0x14e>
        {
            taskENTER_CRITICAL();
 800e082:	f7fc ff63 	bl	800af4c <vPortEnterCritical>
            {
                /* The owner of the list item is the network buffer. */
                pxNetworkBuffer = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800e086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7ff fe0b 	bl	800dca8 <vCastPointerTo_NetworkBufferDescriptor_t>
 800e092:	62b8      	str	r0, [r7, #40]	@ 0x28

                if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_PEEK ) == 0U )
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	f003 0304 	and.w	r3, r3, #4
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d103      	bne.n	800e0a6 <FreeRTOS_recvfrom+0xde>
                {
                    /* Remove the network buffer from the list of buffers waiting to
                     * be processed by the socket. */
                    ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800e09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7fa f8c8 	bl	8008236 <uxListRemove>
                }
            }
            taskEXIT_CRITICAL();
 800e0a6:	f7fc ff87 	bl	800afb8 <vPortExitCritical>

            /* The returned value is the length of the payload data, which is
             * calculated at the total packet size minus the headers.
             * The validity of `xDataLength` prvProcessIPPacket has been confirmed
             * in 'prvProcessIPPacket()'. */
            uxPayloadLength = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 800e0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ac:	69db      	ldr	r3, [r3, #28]
 800e0ae:	3b2c      	subs	r3, #44	@ 0x2c
 800e0b0:	627b      	str	r3, [r7, #36]	@ 0x24
            lReturn = ( int32_t ) uxPayloadLength;
 800e0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b4:	637b      	str	r3, [r7, #52]	@ 0x34

            if( pxSourceAddress != NULL )
 800e0b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d007      	beq.n	800e0cc <FreeRTOS_recvfrom+0x104>
            {
                pxSourceAddress->sin_port = pxNetworkBuffer->usPort;
 800e0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0be:	8c1a      	ldrh	r2, [r3, #32]
 800e0c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e0c2:	805a      	strh	r2, [r3, #2]
                pxSourceAddress->sin_addr = pxNetworkBuffer->ulIPAddress;
 800e0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0c6:	695a      	ldr	r2, [r3, #20]
 800e0c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e0ca:	605a      	str	r2, [r3, #4]
            }

            if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	f003 0301 	and.w	r3, r3, #1
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d118      	bne.n	800e108 <FreeRTOS_recvfrom+0x140>
            {
                /* The zero copy flag is not set.  Truncate the length if it won't
                 * fit in the provided buffer. */
                if( lReturn > ( int32_t ) uxBufferLength )
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	dd01      	ble.n	800e0e2 <FreeRTOS_recvfrom+0x11a>
                {
                    iptraceRECVFROM_DISCARDING_BYTES( ( uxBufferLength - lReturn ) );
                    lReturn = ( int32_t ) uxBufferLength;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	637b      	str	r3, [r7, #52]	@ 0x34
                }

                /* Copy the received data into the provided buffer, then release the
                 * network buffer. */
                pvCopySource = ( const void * ) &pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ];
 800e0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0e4:	699b      	ldr	r3, [r3, #24]
 800e0e6:	332c      	adds	r3, #44	@ 0x2c
 800e0e8:	623b      	str	r3, [r7, #32]
                ( void ) memcpy( pvBuffer, pvCopySource, ( size_t ) lReturn );
 800e0ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0ec:	461a      	mov	r2, r3
 800e0ee:	6a39      	ldr	r1, [r7, #32]
 800e0f0:	68b8      	ldr	r0, [r7, #8]
 800e0f2:	f007 fe26 	bl	8015d42 <memcpy>

                if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_PEEK ) == 0U )
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	f003 0304 	and.w	r3, r3, #4
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d10d      	bne.n	800e11c <FreeRTOS_recvfrom+0x154>
                {
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e100:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e102:	f006 f995 	bl	8014430 <vReleaseNetworkBufferAndDescriptor>
 800e106:	e009      	b.n	800e11c <FreeRTOS_recvfrom+0x154>
            {
                /* The zero copy flag was set.  pvBuffer is not a buffer into which
                 * the received data can be copied, but a pointer that must be set to
                 * point to the buffer in which the received data has already been
                 * placed. */
                *( ( void ** ) pvBuffer ) = ipPOINTER_CAST( void *, &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] ) );
 800e108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e10a:	699b      	ldr	r3, [r3, #24]
 800e10c:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	601a      	str	r2, [r3, #0]
 800e114:	e002      	b.n	800e11c <FreeRTOS_recvfrom+0x154>
                iptraceRECVFROM_INTERRUPTED();
            }
        #endif /* ipconfigSUPPORT_SIGNALS */
        else
        {
            lReturn = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800e116:	f06f 030a 	mvn.w	r3, #10
 800e11a:	637b      	str	r3, [r7, #52]	@ 0x34
            iptraceRECVFROM_TIMEOUT();
        }
    }

    return lReturn;
 800e11c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3740      	adds	r7, #64	@ 0x40
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}

0800e126 <FreeRTOS_sendto>:
                         const void * pvBuffer,
                         size_t uxTotalDataLength,
                         BaseType_t xFlags,
                         const struct freertos_sockaddr * pxDestinationAddress,
                         socklen_t xDestinationAddressLength )
{
 800e126:	b580      	push	{r7, lr}
 800e128:	b090      	sub	sp, #64	@ 0x40
 800e12a:	af00      	add	r7, sp, #0
 800e12c:	60f8      	str	r0, [r7, #12]
 800e12e:	60b9      	str	r1, [r7, #8]
 800e130:	607a      	str	r2, [r7, #4]
 800e132:	603b      	str	r3, [r7, #0]
    NetworkBufferDescriptor_t * pxNetworkBuffer;
    void * pvCopyDest;
    IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800e134:	2304      	movs	r3, #4
 800e136:	773b      	strb	r3, [r7, #28]
 800e138:	2300      	movs	r3, #0
 800e13a:	623b      	str	r3, [r7, #32]
    TimeOut_t xTimeOut;
    TickType_t xTicksToWait;
    int32_t lReturn = 0;
 800e13c:	2300      	movs	r3, #0
 800e13e:	63bb      	str	r3, [r7, #56]	@ 0x38
    FreeRTOS_Socket_t const * pxSocket;
    const size_t uxMaxPayloadLength = ipMAX_UDP_PAYLOAD_LENGTH;
 800e140:	f240 4394 	movw	r3, #1172	@ 0x494
 800e144:	637b      	str	r3, [r7, #52]	@ 0x34
    const size_t uxPayloadOffset = ipUDP_PAYLOAD_OFFSET_IPv4;
 800e146:	232c      	movs	r3, #44	@ 0x2c
 800e148:	633b      	str	r3, [r7, #48]	@ 0x30


    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the
     * parameters. */
    ( void ) xDestinationAddressLength;
    configASSERT( pvBuffer != NULL );
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d10d      	bne.n	800e170 <FreeRTOS_sendto+0x4a>
	__asm volatile
 800e154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e158:	b672      	cpsid	i
 800e15a:	f383 8811 	msr	BASEPRI, r3
 800e15e:	f3bf 8f6f 	isb	sy
 800e162:	f3bf 8f4f 	dsb	sy
 800e166:	b662      	cpsie	i
 800e168:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e16a:	bf00      	nop
 800e16c:	bf00      	nop
 800e16e:	e7fd      	b.n	800e16c <FreeRTOS_sendto+0x46>

    if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 800e170:	687a      	ldr	r2, [r7, #4]
 800e172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e174:	429a      	cmp	r2, r3
 800e176:	d87a      	bhi.n	800e26e <FreeRTOS_sendto+0x148>
    {
        /* If the socket is not already bound to an address, bind it now.
         * Passing NULL as the address parameter tells FreeRTOS_bind() to select
         * the address to bind to. */
        if( socketSOCKET_IS_BOUND( pxSocket ) ||
 800e178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e17a:	699b      	ldr	r3, [r3, #24]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d107      	bne.n	800e190 <FreeRTOS_sendto+0x6a>
            ( FreeRTOS_bind( xSocket, NULL, 0U ) == 0 ) )
 800e180:	2200      	movs	r2, #0
 800e182:	2100      	movs	r1, #0
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	f000 f877 	bl	800e278 <FreeRTOS_bind>
 800e18a:	4603      	mov	r3, r0
        if( socketSOCKET_IS_BOUND( pxSocket ) ||
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d16e      	bne.n	800e26e <FreeRTOS_sendto+0x148>
        {
            xTicksToWait = pxSocket->xSendBlockTime;
 800e190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e192:	6a1b      	ldr	r3, [r3, #32]
 800e194:	613b      	str	r3, [r7, #16]
                        xTicksToWait = ( TickType_t ) 0;
                    }
                }
            #endif /* ipconfigUSE_CALLBACKS */

            if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	f003 0310 	and.w	r3, r3, #16
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d001      	beq.n	800e1a4 <FreeRTOS_sendto+0x7e>
            {
                xTicksToWait = ( TickType_t ) 0;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	613b      	str	r3, [r7, #16]
            }

            if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	f003 0301 	and.w	r3, r3, #1
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d128      	bne.n	800e200 <FreeRTOS_sendto+0xda>
            {
                /* Zero copy is not set, so obtain a network buffer into
                 * which the payload will be copied. */
                vTaskSetTimeOutState( &xTimeOut );
 800e1ae:	f107 0314 	add.w	r3, r7, #20
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fb fdaa 	bl	8009d0c <vTaskSetTimeOutState>

                /* Block until a buffer becomes available, or until a
                 * timeout has been reached */
                pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 800e1b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	4413      	add	r3, r2
 800e1be:	693a      	ldr	r2, [r7, #16]
 800e1c0:	4611      	mov	r1, r2
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f006 f8e4 	bl	8014390 <pxGetNetworkBufferWithDescriptor>
 800e1c8:	63f8      	str	r0, [r7, #60]	@ 0x3c

                if( pxNetworkBuffer != NULL )
 800e1ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d01b      	beq.n	800e208 <FreeRTOS_sendto+0xe2>
                {
                    pvCopyDest = ( void * ) &pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ];
 800e1d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1d2:	699a      	ldr	r2, [r3, #24]
 800e1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1d6:	4413      	add	r3, r2
 800e1d8:	62bb      	str	r3, [r7, #40]	@ 0x28
                    ( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 800e1da:	687a      	ldr	r2, [r7, #4]
 800e1dc:	68b9      	ldr	r1, [r7, #8]
 800e1de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e1e0:	f007 fdaf 	bl	8015d42 <memcpy>

                    if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800e1e4:	f107 0210 	add.w	r2, r7, #16
 800e1e8:	f107 0314 	add.w	r3, r7, #20
 800e1ec:	4611      	mov	r1, r2
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fb fdcc 	bl	8009d8c <xTaskCheckForTimeOut>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	2b01      	cmp	r3, #1
 800e1f8:	d106      	bne.n	800e208 <FreeRTOS_sendto+0xe2>
                    {
                        /* The entire block time has been used up. */
                        xTicksToWait = ( TickType_t ) 0;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	613b      	str	r3, [r7, #16]
 800e1fe:	e003      	b.n	800e208 <FreeRTOS_sendto+0xe2>
            else
            {
                /* When zero copy is used, pvBuffer is a pointer to the
                 * payload of a buffer that has already been obtained from the
                 * stack.  Obtain the network buffer pointer from the buffer. */
                pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 800e200:	68b8      	ldr	r0, [r7, #8]
 800e202:	f7fe fcb7 	bl	800cb74 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800e206:	63f8      	str	r0, [r7, #60]	@ 0x3c
            }

            if( pxNetworkBuffer != NULL )
 800e208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d02f      	beq.n	800e26e <FreeRTOS_sendto+0x148>
            {
                /* xDataLength is the size of the total packet, including the Ethernet header. */
                pxNetworkBuffer->xDataLength = uxTotalDataLength + sizeof( UDPPacket_t );
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800e214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e216:	61da      	str	r2, [r3, #28]
                pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800e218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e21a:	885a      	ldrh	r2, [r3, #2]
 800e21c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e21e:	841a      	strh	r2, [r3, #32]
                pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800e220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e222:	689b      	ldr	r3, [r3, #8]
 800e224:	b29a      	uxth	r2, r3
 800e226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e228:	845a      	strh	r2, [r3, #34]	@ 0x22
                pxNetworkBuffer->ulIPAddress = pxDestinationAddress->sin_addr;
 800e22a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e22c:	685a      	ldr	r2, [r3, #4]
 800e22e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e230:	615a      	str	r2, [r3, #20]

                /* The socket options are passed to the IP layer in the
                 * space that will eventually get used by the Ethernet header. */
                pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800e232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e234:	699b      	ldr	r3, [r3, #24]
 800e236:	3306      	adds	r3, #6
 800e238:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e23a:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 800e23e:	701a      	strb	r2, [r3, #0]

                /* Tell the networking task that the packet needs sending. */
                xStackTxEvent.pvData = pxNetworkBuffer;
 800e240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e242:	623b      	str	r3, [r7, #32]

                /* Ask the IP-task to send this packet */
                if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800e244:	693a      	ldr	r2, [r7, #16]
 800e246:	f107 031c 	add.w	r3, r7, #28
 800e24a:	4611      	mov	r1, r2
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7fe fdbd 	bl	800cdcc <xSendEventStructToIPTask>
 800e252:	4603      	mov	r3, r0
 800e254:	2b01      	cmp	r3, #1
 800e256:	d102      	bne.n	800e25e <FreeRTOS_sendto+0x138>
                {
                    /* The packet was successfully sent to the IP task. */
                    lReturn = ( int32_t ) uxTotalDataLength;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e25c:	e007      	b.n	800e26e <FreeRTOS_sendto+0x148>
                }
                else
                {
                    /* If the buffer was allocated in this function, release
                     * it. */
                    if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	f003 0301 	and.w	r3, r3, #1
 800e264:	2b00      	cmp	r3, #0
 800e266:	d102      	bne.n	800e26e <FreeRTOS_sendto+0x148>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e268:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e26a:	f006 f8e1 	bl	8014430 <vReleaseNetworkBufferAndDescriptor>
    {
        /* The data is longer than the available buffer space. */
        iptraceSENDTO_DATA_TOO_LONG();
    }

    return lReturn;
 800e26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
} /* Tested */
 800e270:	4618      	mov	r0, r3
 800e272:	3740      	adds	r7, #64	@ 0x40
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}

0800e278 <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b08c      	sub	sp, #48	@ 0x30
 800e27c:	af02      	add	r7, sp, #8
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	60b9      	str	r1, [r7, #8]
 800e282:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	623b      	str	r3, [r7, #32]
    BaseType_t xReturn = 0;
 800e288:	2300      	movs	r3, #0
 800e28a:	627b      	str	r3, [r7, #36]	@ 0x24

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 800e28c:	f7fe fb1c 	bl	800c8c8 <xIsCallingFromIPTask>
 800e290:	4603      	mov	r3, r0
 800e292:	2b00      	cmp	r3, #0
 800e294:	d00d      	beq.n	800e2b2 <FreeRTOS_bind+0x3a>
	__asm volatile
 800e296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e29a:	b672      	cpsid	i
 800e29c:	f383 8811 	msr	BASEPRI, r3
 800e2a0:	f3bf 8f6f 	isb	sy
 800e2a4:	f3bf 8f4f 	dsb	sy
 800e2a8:	b662      	cpsie	i
 800e2aa:	61fb      	str	r3, [r7, #28]
}
 800e2ac:	bf00      	nop
 800e2ae:	bf00      	nop
 800e2b0:	e7fd      	b.n	800e2ae <FreeRTOS_bind+0x36>

    if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800e2b2:	6a3b      	ldr	r3, [r7, #32]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d003      	beq.n	800e2c0 <FreeRTOS_bind+0x48>
 800e2b8:	6a3b      	ldr	r3, [r7, #32]
 800e2ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2be:	d103      	bne.n	800e2c8 <FreeRTOS_bind+0x50>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e2c0:	f06f 0315 	mvn.w	r3, #21
 800e2c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2c6:	e03f      	b.n	800e348 <FreeRTOS_bind+0xd0>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 800e2c8:	6a3b      	ldr	r3, [r7, #32]
 800e2ca:	699b      	ldr	r3, [r3, #24]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d003      	beq.n	800e2d8 <FreeRTOS_bind+0x60>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e2d0:	f06f 0315 	mvn.w	r3, #21
 800e2d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2d6:	e037      	b.n	800e348 <FreeRTOS_bind+0xd0>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 800e2d8:	2309      	movs	r3, #9
 800e2da:	753b      	strb	r3, [r7, #20]
        xBindEvent.pvData = xSocket;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	61bb      	str	r3, [r7, #24]

        if( pxAddress != NULL )
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d00e      	beq.n	800e304 <FreeRTOS_bind+0x8c>
        {
            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	885b      	ldrh	r3, [r3, #2]
 800e2ea:	021b      	lsls	r3, r3, #8
 800e2ec:	b21a      	sxth	r2, r3
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	885b      	ldrh	r3, [r3, #2]
 800e2f2:	0a1b      	lsrs	r3, r3, #8
 800e2f4:	b29b      	uxth	r3, r3
 800e2f6:	b21b      	sxth	r3, r3
 800e2f8:	4313      	orrs	r3, r2
 800e2fa:	b21b      	sxth	r3, r3
 800e2fc:	b29a      	uxth	r2, r3
 800e2fe:	6a3b      	ldr	r3, [r7, #32]
 800e300:	849a      	strh	r2, [r3, #36]	@ 0x24
 800e302:	e002      	b.n	800e30a <FreeRTOS_bind+0x92>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800e304:	6a3b      	ldr	r3, [r7, #32]
 800e306:	2200      	movs	r2, #0
 800e308:	849a      	strh	r2, [r3, #36]	@ 0x24
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800e30a:	f107 0314 	add.w	r3, r7, #20
 800e30e:	f04f 31ff 	mov.w	r1, #4294967295
 800e312:	4618      	mov	r0, r3
 800e314:	f7fe fd5a 	bl	800cdcc <xSendEventStructToIPTask>
 800e318:	4603      	mov	r3, r0
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d103      	bne.n	800e326 <FreeRTOS_bind+0xae>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800e31e:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800e322:	627b      	str	r3, [r7, #36]	@ 0x24
 800e324:	e010      	b.n	800e348 <FreeRTOS_bind+0xd0>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800e326:	6a3b      	ldr	r3, [r7, #32]
 800e328:	6858      	ldr	r0, [r3, #4]
 800e32a:	f04f 33ff 	mov.w	r3, #4294967295
 800e32e:	9300      	str	r3, [sp, #0]
 800e330:	2300      	movs	r3, #0
 800e332:	2201      	movs	r2, #1
 800e334:	2110      	movs	r1, #16
 800e336:	f7f9 fcf3 	bl	8007d20 <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800e33a:	6a3b      	ldr	r3, [r7, #32]
 800e33c:	699b      	ldr	r3, [r3, #24]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d102      	bne.n	800e348 <FreeRTOS_bind+0xd0>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e342:	f06f 0315 	mvn.w	r3, #21
 800e346:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    return xReturn;
 800e348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3728      	adds	r7, #40	@ 0x28
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
	...

0800e354 <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b08c      	sub	sp, #48	@ 0x30
 800e358:	af00      	add	r7, sp, #0
 800e35a:	60f8      	str	r0, [r7, #12]
 800e35c:	60b9      	str	r1, [r7, #8]
 800e35e:	607a      	str	r2, [r7, #4]
 800e360:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800e362:	2300      	movs	r3, #0
 800e364:	62fb      	str	r3, [r7, #44]	@ 0x2c
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	627b      	str	r3, [r7, #36]	@ 0x24
    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800e370:	2b06      	cmp	r3, #6
 800e372:	d102      	bne.n	800e37a <vSocketBind+0x26>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800e374:	4b45      	ldr	r3, [pc, #276]	@ (800e48c <vSocketBind+0x138>)
 800e376:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e378:	e001      	b.n	800e37e <vSocketBind+0x2a>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800e37a:	4b45      	ldr	r3, [pc, #276]	@ (800e490 <vSocketBind+0x13c>)
 800e37c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) uxAddressLength;

    configASSERT( pxSocket != NULL );
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d10d      	bne.n	800e3a0 <vSocketBind+0x4c>
	__asm volatile
 800e384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e388:	b672      	cpsid	i
 800e38a:	f383 8811 	msr	BASEPRI, r3
 800e38e:	f3bf 8f6f 	isb	sy
 800e392:	f3bf 8f4f 	dsb	sy
 800e396:	b662      	cpsie	i
 800e398:	623b      	str	r3, [r7, #32]
}
 800e39a:	bf00      	nop
 800e39c:	bf00      	nop
 800e39e:	e7fd      	b.n	800e39c <vSocketBind+0x48>
    configASSERT( pxSocket != FREERTOS_INVALID_SOCKET );
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3a6:	d10d      	bne.n	800e3c4 <vSocketBind+0x70>
	__asm volatile
 800e3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3ac:	b672      	cpsid	i
 800e3ae:	f383 8811 	msr	BASEPRI, r3
 800e3b2:	f3bf 8f6f 	isb	sy
 800e3b6:	f3bf 8f4f 	dsb	sy
 800e3ba:	b662      	cpsie	i
 800e3bc:	61fb      	str	r3, [r7, #28]
}
 800e3be:	bf00      	nop
 800e3c0:	bf00      	nop
 800e3c2:	e7fd      	b.n	800e3c0 <vSocketBind+0x6c>
            /* pxAddress will be NULL if sendto() was called on a socket without the
             * socket being bound to an address. In this case, automatically allocate
             * an address to the socket.  There is a small chance that the allocated
             * port will already be in use - if that is the case, then the check below
             * [pxListFindListItemWithValue()] will result in an error being returned. */
            if( pxAddress == NULL )
 800e3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d105      	bne.n	800e3d6 <vSocketBind+0x82>
            {
                pxAddress = &xAddress;
 800e3ca:	f107 0310 	add.w	r3, r7, #16
 800e3ce:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Put the port to zero to be assigned later. */
                pxAddress->sin_port = 0U;
 800e3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	805a      	strh	r2, [r3, #2]
        }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800e3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d10d      	bne.n	800e3f8 <vSocketBind+0xa4>
	__asm volatile
 800e3dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3e0:	b672      	cpsid	i
 800e3e2:	f383 8811 	msr	BASEPRI, r3
 800e3e6:	f3bf 8f6f 	isb	sy
 800e3ea:	f3bf 8f4f 	dsb	sy
 800e3ee:	b662      	cpsie	i
 800e3f0:	61bb      	str	r3, [r7, #24]
}
 800e3f2:	bf00      	nop
 800e3f4:	bf00      	nop
 800e3f6:	e7fd      	b.n	800e3f4 <vSocketBind+0xa0>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800e3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3fa:	885b      	ldrh	r3, [r3, #2]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d111      	bne.n	800e424 <vSocketBind+0xd0>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800e406:	4618      	mov	r0, r3
 800e408:	f000 faf2 	bl	800e9f0 <prvGetPrivatePortNumber>
 800e40c:	4603      	mov	r3, r0
 800e40e:	461a      	mov	r2, r3
 800e410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e412:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800e414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e416:	885b      	ldrh	r3, [r3, #2]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d103      	bne.n	800e424 <vSocketBind+0xd0>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800e41c:	f06f 037c 	mvn.w	r3, #124	@ 0x7c
 800e420:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 800e422:	e02d      	b.n	800e480 <vSocketBind+0x12c>
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            /* Check to ensure the port is not already in use.  If the bind is
             * called internally, a port MAY be used by more than one socket. */
            if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d004      	beq.n	800e434 <vSocketBind+0xe0>
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800e430:	2b06      	cmp	r3, #6
 800e432:	d00c      	beq.n	800e44e <vSocketBind+0xfa>
                ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800e434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e436:	885b      	ldrh	r3, [r3, #2]
 800e438:	4619      	mov	r1, r3
 800e43a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e43c:	f000 fb30 	bl	800eaa0 <pxListFindListItemWithValue>
 800e440:	4603      	mov	r3, r0
            if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800e442:	2b00      	cmp	r3, #0
 800e444:	d003      	beq.n	800e44e <vSocketBind+0xfa>
            {
                FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
                                         ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                         FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800e446:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 800e44a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e44c:	e018      	b.n	800e480 <vSocketBind+0x12c>
            }
            else
            {
                /* Allocate the port number to the socket.
                 * This macro will set 'xBoundSocketListItem->xItemValue' */
                socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800e44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e450:	885b      	ldrh	r3, [r3, #2]
 800e452:	461a      	mov	r2, r3
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	609a      	str	r2, [r3, #8]

                /* And also store it in a socket field 'usLocalPort' in host-byte-order,
                 * mostly used for logging and debugging purposes */
                pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800e458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e45a:	885b      	ldrh	r3, [r3, #2]
 800e45c:	021b      	lsls	r3, r3, #8
 800e45e:	b21a      	sxth	r2, r3
 800e460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e462:	885b      	ldrh	r3, [r3, #2]
 800e464:	0a1b      	lsrs	r3, r3, #8
 800e466:	b29b      	uxth	r3, r3
 800e468:	b21b      	sxth	r3, r3
 800e46a:	4313      	orrs	r3, r2
 800e46c:	b21b      	sxth	r3, r3
 800e46e:	b29a      	uxth	r2, r3
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	849a      	strh	r2, [r3, #36]	@ 0x24
                            vTaskSuspendAll();
                        }
                    #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

                    /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
                    vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	3308      	adds	r3, #8
 800e478:	4619      	mov	r1, r3
 800e47a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e47c:	f7f9 fe7e 	bl	800817c <vListInsertEnd>
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800e480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
} /* Tested */
 800e482:	4618      	mov	r0, r3
 800e484:	3730      	adds	r7, #48	@ 0x30
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	2000a398 	.word	0x2000a398
 800e490:	2000a384 	.word	0x2000a384

0800e494 <FreeRTOS_closesocket>:
 *         1: If the socket was successfully closed (read the brief above).
 *        -1: If the socket was valid but could not be closed because the message
 *            could not be delivered to the IP-task. Try again later.
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b086      	sub	sp, #24
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigUSE_CALLBACKS == 1 )
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
    #endif
    IPStackEvent_t xCloseEvent;
    xCloseEvent.eEventType = eSocketCloseEvent;
 800e49c:	230a      	movs	r3, #10
 800e49e:	733b      	strb	r3, [r7, #12]
    xCloseEvent.pvData = xSocket;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	613b      	str	r3, [r7, #16]

    if( ( xSocket == NULL ) || ( xSocket == FREERTOS_INVALID_SOCKET ) )
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d003      	beq.n	800e4b2 <FreeRTOS_closesocket+0x1e>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4b0:	d102      	bne.n	800e4b8 <FreeRTOS_closesocket+0x24>
    {
        xResult = 0;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	617b      	str	r3, [r7, #20]
 800e4b6:	e00e      	b.n	800e4d6 <FreeRTOS_closesocket+0x42>
         * packet handling. */

        /* Note when changing the time-out value below, it must be checked who is calling
         * this function. If it is called by the IP-task, a deadlock could occur.
         * The IP-task would only call it in case of a user call-back */
        if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) 0 ) == pdFAIL )
 800e4b8:	f107 030c 	add.w	r3, r7, #12
 800e4bc:	2100      	movs	r1, #0
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7fe fc84 	bl	800cdcc <xSendEventStructToIPTask>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d103      	bne.n	800e4d2 <FreeRTOS_closesocket+0x3e>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
            xResult = -1;
 800e4ca:	f04f 33ff 	mov.w	r3, #4294967295
 800e4ce:	617b      	str	r3, [r7, #20]
 800e4d0:	e001      	b.n	800e4d6 <FreeRTOS_closesocket+0x42>
        }
        else
        {
            xResult = 1;
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 800e4d6:	697b      	ldr	r3, [r7, #20]
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3718      	adds	r7, #24
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <vSocketClose>:
 * @param[in] pxSocket: The socket descriptor of the socket being closed.
 *
 * @return Returns NULL, always.
 */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b084      	sub	sp, #16
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
        {
            /* For TCP: clean up a little more. */
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800e4ee:	2b06      	cmp	r3, #6
 800e4f0:	d122      	bne.n	800e538 <vSocketClose+0x58>
            {
                #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d004      	beq.n	800e504 <vSocketClose+0x24>
                        {
                            vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e4fe:	4618      	mov	r0, r3
 800e500:	f005 ff96 	bl	8014430 <vReleaseNetworkBufferAndDescriptor>
                        }

                        /* Free the resources which were claimed by the tcpWin member */
                        vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	33e0      	adds	r3, #224	@ 0xe0
 800e508:	4618      	mov	r0, r3
 800e50a:	f003 ff1f 	bl	801234c <vTCPWindowDestroy>
                    }
                #endif /* ipconfigUSE_TCP_WIN */

                /* Free the input and output streams */
                if( pxSocket->u.xTCP.rxStream != NULL )
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e512:	2b00      	cmp	r3, #0
 800e514:	d004      	beq.n	800e520 <vSocketClose+0x40>
                {
                    iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                    vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7fc ff12 	bl	800b344 <vPortFree>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e524:	2b00      	cmp	r3, #0
 800e526:	d004      	beq.n	800e532 <vSocketClose+0x52>
                {
                    iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                    vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7fc ff09 	bl	800b344 <vPortFree>
                }

                /* In case this is a child socket, make sure the child-count of the
                 * parent socket is decreased. */
                prvTCPSetSocketCount( pxSocket );
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f000 f832 	bl	800e59c <prvTCPSetSocketCount>
        }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	699b      	ldr	r3, [r3, #24]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d004      	beq.n	800e54a <vSocketClose+0x6a>
            {
                vTaskSuspendAll();
            }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	3308      	adds	r3, #8
 800e544:	4618      	mov	r0, r3
 800e546:	f7f9 fe76 	bl	8008236 <uxListRemove>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800e550:	2b11      	cmp	r3, #17
 800e552:	d112      	bne.n	800e57a <vSocketClose+0x9a>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800e554:	e00d      	b.n	800e572 <vSocketClose+0x92>
        {
            pxNetworkBuffer = ipCAST_PTR_TO_TYPE_PTR( NetworkBufferDescriptor_t, listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e55a:	68db      	ldr	r3, [r3, #12]
 800e55c:	4618      	mov	r0, r3
 800e55e:	f7ff fba3 	bl	800dca8 <vCastPointerTo_NetworkBufferDescriptor_t>
 800e562:	60f8      	str	r0, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	4618      	mov	r0, r3
 800e568:	f7f9 fe65 	bl	8008236 <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e56c:	68f8      	ldr	r0, [r7, #12]
 800e56e:	f005 ff5f 	bl	8014430 <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e576:	2b00      	cmp	r3, #0
 800e578:	d1ed      	bne.n	800e556 <vSocketClose+0x76>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d004      	beq.n	800e58c <vSocketClose+0xac>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	685b      	ldr	r3, [r3, #4]
 800e586:	4618      	mov	r0, r3
 800e588:	f7f9 fd71 	bl	800806e <vEventGroupDelete>
        }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f7fc fed9 	bl	800b344 <vPortFree>

    return NULL;
 800e592:	2300      	movs	r3, #0
} /* Tested */
 800e594:	4618      	mov	r0, r3
 800e596:	3710      	adds	r7, #16
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <prvTCPSetSocketCount>:
 *        keep a pointer to it.
 *
 * @param[in] pxSocketToDelete: The socket being closed.
 */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b086      	sub	sp, #24
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800e5a4:	4b19      	ldr	r3, [pc, #100]	@ (800e60c <prvTCPSetSocketCount+0x70>)
 800e5a6:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e5ac:	81fb      	strh	r3, [r7, #14]

        for( pxIterator = listGET_NEXT( pxEnd );
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	617b      	str	r3, [r7, #20]
 800e5b4:	e020      	b.n	800e5f8 <prvTCPSetSocketCount+0x5c>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            pxOtherSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	68db      	ldr	r3, [r3, #12]
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7ff fb5e 	bl	800dc7c <vCastPointerTo_FreeRTOS_Socket_t>
 800e5c0:	60b8      	str	r0, [r7, #8]

            if( ( pxOtherSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN ) &&
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d112      	bne.n	800e5f2 <prvTCPSetSocketCount+0x56>
                ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
            if( ( pxOtherSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN ) &&
 800e5d0:	89fa      	ldrh	r2, [r7, #14]
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d10d      	bne.n	800e5f2 <prvTCPSetSocketCount+0x56>
                ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
                ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d008      	beq.n	800e5f2 <prvTCPSetSocketCount+0x56>
            {
                pxOtherSocket->u.xTCP.usChildCount--;
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800e5e6:	3b01      	subs	r3, #1
 800e5e8:	b29a      	uxth	r2, r3
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
                FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
                                         pxOtherSocket->usLocalPort,
                                         pxOtherSocket->u.xTCP.usChildCount,
                                         pxOtherSocket->u.xTCP.usBacklog,
                                         ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                break;
 800e5f0:	e007      	b.n	800e602 <prvTCPSetSocketCount+0x66>
             pxIterator = listGET_NEXT( pxIterator ) )
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	685b      	ldr	r3, [r3, #4]
 800e5f6:	617b      	str	r3, [r7, #20]
             pxIterator != pxEnd;
 800e5f8:	697a      	ldr	r2, [r7, #20]
 800e5fa:	693b      	ldr	r3, [r7, #16]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d1da      	bne.n	800e5b6 <prvTCPSetSocketCount+0x1a>
            }
        }
    }
 800e600:	bf00      	nop
 800e602:	bf00      	nop
 800e604:	3718      	adds	r7, #24
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	bf00      	nop
 800e60c:	2000a3a0 	.word	0x2000a3a0

0800e610 <prvSockopt_so_buffer>:
 *         value is returned.
 */
    static BaseType_t prvSockopt_so_buffer( FreeRTOS_Socket_t * pxSocket,
                                            int32_t lOptionName,
                                            const void * pvOptionValue )
    {
 800e610:	b580      	push	{r7, lr}
 800e612:	b086      	sub	sp, #24
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	607a      	str	r2, [r7, #4]
        uint32_t ulNewValue;
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800e622:	2b06      	cmp	r3, #6
 800e624:	d003      	beq.n	800e62e <prvSockopt_so_buffer+0x1e>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e626:	f06f 0315 	mvn.w	r3, #21
 800e62a:	617b      	str	r3, [r7, #20]
 800e62c:	e028      	b.n	800e680 <prvSockopt_so_buffer+0x70>
        }
        else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	2b04      	cmp	r3, #4
 800e632:	d103      	bne.n	800e63c <prvSockopt_so_buffer+0x2c>
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d106      	bne.n	800e64a <prvSockopt_so_buffer+0x3a>
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	2b05      	cmp	r3, #5
 800e640:	d107      	bne.n	800e652 <prvSockopt_so_buffer+0x42>
                 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e646:	2b00      	cmp	r3, #0
 800e648:	d003      	beq.n	800e652 <prvSockopt_so_buffer+0x42>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e64a:	f06f 0315 	mvn.w	r3, #21
 800e64e:	617b      	str	r3, [r7, #20]
 800e650:	e016      	b.n	800e680 <prvSockopt_so_buffer+0x70>
        }
        else
        {
            ulNewValue = *( ipPOINTER_CAST( const uint32_t *, pvOptionValue ) );
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	613b      	str	r3, [r7, #16]

            if( lOptionName == FREERTOS_SO_SNDBUF )
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	2b04      	cmp	r3, #4
 800e65c:	d10b      	bne.n	800e676 <prvSockopt_so_buffer+0x66>
            {
                /* Round up to nearest MSS size */
                ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 800e664:	4619      	mov	r1, r3
 800e666:	6938      	ldr	r0, [r7, #16]
 800e668:	f7ff fa7a 	bl	800db60 <FreeRTOS_round_up>
 800e66c:	6138      	str	r0, [r7, #16]
                pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	693a      	ldr	r2, [r7, #16]
 800e672:	671a      	str	r2, [r3, #112]	@ 0x70
 800e674:	e002      	b.n	800e67c <prvSockopt_so_buffer+0x6c>
            }
            else
            {
                pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	693a      	ldr	r2, [r7, #16]
 800e67a:	66da      	str	r2, [r3, #108]	@ 0x6c
            }

            xReturn = 0;
 800e67c:	2300      	movs	r3, #0
 800e67e:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800e680:	697b      	ldr	r3, [r7, #20]
    }
 800e682:	4618      	mov	r0, r3
 800e684:	3718      	adds	r7, #24
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
	...

0800e68c <FreeRTOS_setsockopt>:
BaseType_t FreeRTOS_setsockopt( Socket_t xSocket,
                                int32_t lLevel,
                                int32_t lOptionName,
                                const void * pvOptionValue,
                                size_t uxOptionLength )
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b088      	sub	sp, #32
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	60b9      	str	r1, [r7, #8]
 800e696:	607a      	str	r2, [r7, #4]
 800e698:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
    BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e69a:	f06f 0315 	mvn.w	r3, #21
 800e69e:	61fb      	str	r3, [r7, #28]
    FreeRTOS_Socket_t * pxSocket;

    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	61bb      	str	r3, [r7, #24]
    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) lLevel;
    ( void ) uxOptionLength;

    if( ( pxSocket == NULL ) || ( pxSocket == FREERTOS_INVALID_SOCKET ) )
 800e6a4:	69bb      	ldr	r3, [r7, #24]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d003      	beq.n	800e6b2 <FreeRTOS_setsockopt+0x26>
 800e6aa:	69bb      	ldr	r3, [r7, #24]
 800e6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6b0:	d104      	bne.n	800e6bc <FreeRTOS_setsockopt+0x30>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e6b2:	f06f 0315 	mvn.w	r3, #21
 800e6b6:	61fb      	str	r3, [r7, #28]
        return xReturn;
 800e6b8:	69fb      	ldr	r3, [r7, #28]
 800e6ba:	e195      	b.n	800e9e8 <FreeRTOS_setsockopt+0x35c>
    }

    switch( lOptionName )
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2b12      	cmp	r3, #18
 800e6c0:	f200 817a 	bhi.w	800e9b8 <FreeRTOS_setsockopt+0x32c>
 800e6c4:	a201      	add	r2, pc, #4	@ (adr r2, 800e6cc <FreeRTOS_setsockopt+0x40>)
 800e6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6ca:	bf00      	nop
 800e6cc:	0800e719 	.word	0x0800e719
 800e6d0:	0800e727 	.word	0x0800e727
 800e6d4:	0800e753 	.word	0x0800e753
 800e6d8:	0800e9b9 	.word	0x0800e9b9
 800e6dc:	0800e7d3 	.word	0x0800e7d3
 800e6e0:	0800e7d3 	.word	0x0800e7d3
 800e6e4:	0800e9b9 	.word	0x0800e9b9
 800e6e8:	0800e9b9 	.word	0x0800e9b9
 800e6ec:	0800e9b9 	.word	0x0800e9b9
 800e6f0:	0800e9b9 	.word	0x0800e9b9
 800e6f4:	0800e9b9 	.word	0x0800e9b9
 800e6f8:	0800e88d 	.word	0x0800e88d
 800e6fc:	0800e8c5 	.word	0x0800e8c5
 800e700:	0800e7e1 	.word	0x0800e7e1
 800e704:	0800e8fd 	.word	0x0800e8fd
 800e708:	0800e967 	.word	0x0800e967
 800e70c:	0800e9b9 	.word	0x0800e9b9
 800e710:	0800e785 	.word	0x0800e785
 800e714:	0800e791 	.word	0x0800e791
    {
        case FREERTOS_SO_RCVTIMEO:
            /* Receive time out. */
            pxSocket->xReceiveBlockTime = *( ( const TickType_t * ) pvOptionValue );
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	681a      	ldr	r2, [r3, #0]
 800e71c:	69bb      	ldr	r3, [r7, #24]
 800e71e:	61da      	str	r2, [r3, #28]
            xReturn = 0;
 800e720:	2300      	movs	r3, #0
 800e722:	61fb      	str	r3, [r7, #28]
            break;
 800e724:	e15f      	b.n	800e9e6 <FreeRTOS_setsockopt+0x35a>

        case FREERTOS_SO_SNDTIMEO:
            pxSocket->xSendBlockTime = *( ( const TickType_t * ) pvOptionValue );
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	681a      	ldr	r2, [r3, #0]
 800e72a:	69bb      	ldr	r3, [r7, #24]
 800e72c:	621a      	str	r2, [r3, #32]

            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800e734:	2b11      	cmp	r3, #17
 800e736:	d109      	bne.n	800e74c <FreeRTOS_setsockopt+0xc0>
            {
                /* The send time out is capped for the reason stated in the
                 * comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
                 * in FreeRTOSIPConfig.h (assuming an official configuration file
                 * is being used. */
                if( pxSocket->xSendBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800e738:	69bb      	ldr	r3, [r7, #24]
 800e73a:	6a1b      	ldr	r3, [r3, #32]
 800e73c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e740:	4293      	cmp	r3, r2
 800e742:	d903      	bls.n	800e74c <FreeRTOS_setsockopt+0xc0>
                {
                    pxSocket->xSendBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800e744:	69bb      	ldr	r3, [r7, #24]
 800e746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e74a:	621a      	str	r2, [r3, #32]
                /* For TCP socket, it isn't necessary to limit the blocking time
                 * because the FreeRTOS_send() function does not wait for a network
                 * buffer to become available. */
            }

            xReturn = 0;
 800e74c:	2300      	movs	r3, #0
 800e74e:	61fb      	str	r3, [r7, #28]
            break;
 800e750:	e149      	b.n	800e9e6 <FreeRTOS_setsockopt+0x35a>
        case FREERTOS_SO_UDPCKSUM_OUT:

            /* Turn calculating of the UDP checksum on/off for this socket. If pvOptionValue
             * is anything else than NULL, the checksum generation will be turned on. */

            if( pvOptionValue == NULL )
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d109      	bne.n	800e76c <FreeRTOS_setsockopt+0xe0>
            {
                pxSocket->ucSocketOptions &= ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT );
 800e758:	69bb      	ldr	r3, [r7, #24]
 800e75a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800e75e:	f023 0302 	bic.w	r3, r3, #2
 800e762:	b2da      	uxtb	r2, r3
 800e764:	69bb      	ldr	r3, [r7, #24]
 800e766:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 800e76a:	e008      	b.n	800e77e <FreeRTOS_setsockopt+0xf2>
            }
            else
            {
                pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800e772:	f043 0302 	orr.w	r3, r3, #2
 800e776:	b2da      	uxtb	r2, r3
 800e778:	69bb      	ldr	r3, [r7, #24]
 800e77a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
            }

            xReturn = 0;
 800e77e:	2300      	movs	r3, #0
 800e780:	61fb      	str	r3, [r7, #28]
            break;
 800e782:	e130      	b.n	800e9e6 <FreeRTOS_setsockopt+0x35a>

                        /* Each socket can have a callback function that is executed
                         * when there is an event the socket's owner might want to
                         * process. */
                        /* The type cast of the pointer expression "A" to type "B" removes const qualifier from the pointed to type. */
                        pxSocket->pxUserWakeCallback = ( const SocketWakeupCallback_t ) pvOptionValue;
 800e784:	683a      	ldr	r2, [r7, #0]
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	629a      	str	r2, [r3, #40]	@ 0x28
                        xReturn = 0;
 800e78a:	2300      	movs	r3, #0
 800e78c:	61fb      	str	r3, [r7, #28]
                        break;
 800e78e:	e12a      	b.n	800e9e6 <FreeRTOS_setsockopt+0x35a>
                #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

                case FREERTOS_SO_SET_LOW_HIGH_WATER:
                   {
                       const LowHighWater_t * pxLowHighWater = ipPOINTER_CAST( const LowHighWater_t *, pvOptionValue );
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	617b      	str	r3, [r7, #20]

                       if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e794:	69bb      	ldr	r3, [r7, #24]
 800e796:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800e79a:	2b06      	cmp	r3, #6
 800e79c:	f040 8110 	bne.w	800e9c0 <FreeRTOS_setsockopt+0x334>
                           /* It is not allowed to access 'pxSocket->u.xTCP'. */
                           FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	681a      	ldr	r2, [r3, #0]
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	f080 810b 	bcs.w	800e9c4 <FreeRTOS_setsockopt+0x338>
                           ( pxLowHighWater->uxEnoughSpace > pxSocket->u.xTCP.uxRxStreamSize ) )
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	685a      	ldr	r2, [r3, #4]
 800e7b2:	69bb      	ldr	r3, [r7, #24]
 800e7b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
                       if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	f200 8104 	bhi.w	800e9c4 <FreeRTOS_setsockopt+0x338>
                           FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       /* Send a STOP when buffer space drops below 'uxLittleSpace' bytes. */
                       pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	681a      	ldr	r2, [r3, #0]
 800e7c0:	69bb      	ldr	r3, [r7, #24]
 800e7c2:	665a      	str	r2, [r3, #100]	@ 0x64
                       /* Send a GO when buffer space grows above 'uxEnoughSpace' bytes. */
                       pxSocket->u.xTCP.uxEnoughSpace = pxLowHighWater->uxEnoughSpace;
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	685a      	ldr	r2, [r3, #4]
 800e7c8:	69bb      	ldr	r3, [r7, #24]
 800e7ca:	669a      	str	r2, [r3, #104]	@ 0x68
                       xReturn = 0;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	61fb      	str	r3, [r7, #28]
                   }
                   break;
 800e7d0:	e109      	b.n	800e9e6 <FreeRTOS_setsockopt+0x35a>

                case FREERTOS_SO_SNDBUF: /* Set the size of the send buffer, in units of MSS (TCP only) */
                case FREERTOS_SO_RCVBUF: /* Set the size of the receive buffer, in units of MSS (TCP only) */
                    xReturn = prvSockopt_so_buffer( pxSocket, lOptionName, pvOptionValue );
 800e7d2:	683a      	ldr	r2, [r7, #0]
 800e7d4:	6879      	ldr	r1, [r7, #4]
 800e7d6:	69b8      	ldr	r0, [r7, #24]
 800e7d8:	f7ff ff1a 	bl	800e610 <prvSockopt_so_buffer>
 800e7dc:	61f8      	str	r0, [r7, #28]
                    break;
 800e7de:	e102      	b.n	800e9e6 <FreeRTOS_setsockopt+0x35a>

                case FREERTOS_SO_WIN_PROPERTIES: /* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
                   {
                       const WinProperties_t * pxProps;

                       if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e7e0:	69bb      	ldr	r3, [r7, #24]
 800e7e2:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800e7e6:	2b06      	cmp	r3, #6
 800e7e8:	f040 80ee 	bne.w	800e9c8 <FreeRTOS_setsockopt+0x33c>
                       {
                           FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       if( ( pxSocket->u.xTCP.txStream != NULL ) || ( pxSocket->u.xTCP.rxStream != NULL ) )
 800e7ec:	69bb      	ldr	r3, [r7, #24]
 800e7ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	f040 80eb 	bne.w	800e9cc <FreeRTOS_setsockopt+0x340>
 800e7f6:	69bb      	ldr	r3, [r7, #24]
 800e7f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	f040 80e6 	bne.w	800e9cc <FreeRTOS_setsockopt+0x340>
                       {
                           FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: buffer already created\n" ) );
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       pxProps = ipPOINTER_CAST( const WinProperties_t *, pvOptionValue );
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	613b      	str	r3, [r7, #16]

                       xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ) );
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	461a      	mov	r2, r3
 800e808:	2104      	movs	r1, #4
 800e80a:	69b8      	ldr	r0, [r7, #24]
 800e80c:	f7ff ff00 	bl	800e610 <prvSockopt_so_buffer>
 800e810:	61f8      	str	r0, [r7, #28]

                       if( xReturn != 0 )
 800e812:	69fb      	ldr	r3, [r7, #28]
 800e814:	2b00      	cmp	r3, #0
 800e816:	f040 80db 	bne.w	800e9d0 <FreeRTOS_setsockopt+0x344>
                       {
                           break; /* will return an error. */
                       }

                       xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ) );
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	3308      	adds	r3, #8
 800e81e:	461a      	mov	r2, r3
 800e820:	2105      	movs	r1, #5
 800e822:	69b8      	ldr	r0, [r7, #24]
 800e824:	f7ff fef4 	bl	800e610 <prvSockopt_so_buffer>
 800e828:	61f8      	str	r0, [r7, #28]

                       if( xReturn != 0 )
 800e82a:	69fb      	ldr	r3, [r7, #28]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	f040 80d1 	bne.w	800e9d4 <FreeRTOS_setsockopt+0x348>
                           break; /* will return an error. */
                       }

                       #if ( ipconfigUSE_TCP_WIN == 1 )
                           {
                               pxSocket->u.xTCP.uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	68db      	ldr	r3, [r3, #12]
 800e836:	461a      	mov	r2, r3
 800e838:	69bb      	ldr	r3, [r7, #24]
 800e83a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
                               pxSocket->u.xTCP.uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	685b      	ldr	r3, [r3, #4]
 800e842:	461a      	mov	r2, r3
 800e844:	69bb      	ldr	r3, [r7, #24]
 800e846:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
                           }
                       #endif

                       /* In case the socket has already initialised its tcpWin,
                        * adapt the window size parameters */
                       if( pxSocket->u.xTCP.xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800e84a:	69bb      	ldr	r3, [r7, #24]
 800e84c:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800e850:	f003 0301 	and.w	r3, r3, #1
 800e854:	b2db      	uxtb	r3, r3
 800e856:	2b00      	cmp	r3, #0
 800e858:	d015      	beq.n	800e886 <FreeRTOS_setsockopt+0x1fa>
                       {
                           pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength = pxSocket->u.xTCP.uxRxWinSize * pxSocket->u.xTCP.usInitMSS;
 800e85a:	69bb      	ldr	r3, [r7, #24]
 800e85c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e860:	69ba      	ldr	r2, [r7, #24]
 800e862:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 800e866:	fb03 f202 	mul.w	r2, r3, r2
 800e86a:	69bb      	ldr	r3, [r7, #24]
 800e86c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
                           pxSocket->u.xTCP.xTCPWindow.xSize.ulTxWindowLength = pxSocket->u.xTCP.uxTxWinSize * pxSocket->u.xTCP.usInitMSS;
 800e870:	69bb      	ldr	r3, [r7, #24]
 800e872:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e876:	69ba      	ldr	r2, [r7, #24]
 800e878:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 800e87c:	fb03 f202 	mul.w	r2, r3, r2
 800e880:	69bb      	ldr	r3, [r7, #24]
 800e882:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
                       }
                   }

                    xReturn = 0;
 800e886:	2300      	movs	r3, #0
 800e888:	61fb      	str	r3, [r7, #28]
                    break;
 800e88a:	e0ac      	b.n	800e9e6 <FreeRTOS_setsockopt+0x35a>

                case FREERTOS_SO_REUSE_LISTEN_SOCKET: /* If true, the server-socket will turn into a connected socket */
                   {
                       if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e88c:	69bb      	ldr	r3, [r7, #24]
 800e88e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800e892:	2b06      	cmp	r3, #6
 800e894:	f040 80a0 	bne.w	800e9d8 <FreeRTOS_setsockopt+0x34c>
                       {
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d007      	beq.n	800e8b0 <FreeRTOS_setsockopt+0x224>
                       {
                           pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 800e8a0:	69ba      	ldr	r2, [r7, #24]
 800e8a2:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 800e8a6:	f043 0308 	orr.w	r3, r3, #8
 800e8aa:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
 800e8ae:	e006      	b.n	800e8be <FreeRTOS_setsockopt+0x232>
                       }
                       else
                       {
                           pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE;
 800e8b0:	69ba      	ldr	r2, [r7, #24]
 800e8b2:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 800e8b6:	f36f 03c3 	bfc	r3, #3, #1
 800e8ba:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
                       }
                   }
                    xReturn = 0;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	61fb      	str	r3, [r7, #28]
                    break;
 800e8c2:	e090      	b.n	800e9e6 <FreeRTOS_setsockopt+0x35a>

                case FREERTOS_SO_CLOSE_AFTER_SEND: /* As soon as the last byte has been transmitted, finalise the connection */
                   {
                       if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e8c4:	69bb      	ldr	r3, [r7, #24]
 800e8c6:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800e8ca:	2b06      	cmp	r3, #6
 800e8cc:	f040 8086 	bne.w	800e9dc <FreeRTOS_setsockopt+0x350>
                       {
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d007      	beq.n	800e8e8 <FreeRTOS_setsockopt+0x25c>
                       {
                           pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE;
 800e8d8:	69ba      	ldr	r2, [r7, #24]
 800e8da:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 800e8de:	f043 0310 	orr.w	r3, r3, #16
 800e8e2:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
 800e8e6:	e006      	b.n	800e8f6 <FreeRTOS_setsockopt+0x26a>
                       }
                       else
                       {
                           pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE;
 800e8e8:	69ba      	ldr	r2, [r7, #24]
 800e8ea:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 800e8ee:	f36f 1304 	bfc	r3, #4, #1
 800e8f2:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
                       }
                   }
                    xReturn = 0;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	61fb      	str	r3, [r7, #28]
                    break;
 800e8fa:	e074      	b.n	800e9e6 <FreeRTOS_setsockopt+0x35a>

                case FREERTOS_SO_SET_FULL_SIZE: /* Refuse to send packets smaller than MSS  */
                   {
                       if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e8fc:	69bb      	ldr	r3, [r7, #24]
 800e8fe:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800e902:	2b06      	cmp	r3, #6
 800e904:	d16c      	bne.n	800e9e0 <FreeRTOS_setsockopt+0x354>
                       {
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d007      	beq.n	800e91e <FreeRTOS_setsockopt+0x292>
                       {
                           pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE;
 800e90e:	69ba      	ldr	r2, [r7, #24]
 800e910:	f892 30e0 	ldrb.w	r3, [r2, #224]	@ 0xe0
 800e914:	f043 0302 	orr.w	r3, r3, #2
 800e918:	f882 30e0 	strb.w	r3, [r2, #224]	@ 0xe0
 800e91c:	e006      	b.n	800e92c <FreeRTOS_setsockopt+0x2a0>
                       }
                       else
                       {
                           pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE;
 800e91e:	69ba      	ldr	r2, [r7, #24]
 800e920:	f892 30e0 	ldrb.w	r3, [r2, #224]	@ 0xe0
 800e924:	f36f 0341 	bfc	r3, #1, #1
 800e928:	f882 30e0 	strb.w	r3, [r2, #224]	@ 0xe0
                       }

                       if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
 800e92c:	69bb      	ldr	r3, [r7, #24]
 800e92e:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800e932:	f003 0302 	and.w	r3, r3, #2
 800e936:	b2db      	uxtb	r3, r3
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d111      	bne.n	800e960 <FreeRTOS_setsockopt+0x2d4>
                           ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 800e93c:	69bb      	ldr	r3, [r7, #24]
 800e93e:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
                       if( ( pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize == pdFALSE_UNSIGNED ) &&
 800e942:	2b04      	cmp	r3, #4
 800e944:	d90c      	bls.n	800e960 <FreeRTOS_setsockopt+0x2d4>
                           ( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800e946:	69b8      	ldr	r0, [r7, #24]
 800e948:	f000 faf8 	bl	800ef3c <FreeRTOS_tx_size>
 800e94c:	4603      	mov	r3, r0
                           ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d006      	beq.n	800e960 <FreeRTOS_setsockopt+0x2d4>
                       {
                           pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bSendFullSize */
 800e952:	69bb      	ldr	r3, [r7, #24]
 800e954:	2201      	movs	r2, #1
 800e956:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                           ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800e95a:	2006      	movs	r0, #6
 800e95c:	f7fe fa20 	bl	800cda0 <xSendEventToIPTask>
                       }
                   }
                    xReturn = 0;
 800e960:	2300      	movs	r3, #0
 800e962:	61fb      	str	r3, [r7, #28]
                    break;
 800e964:	e03f      	b.n	800e9e6 <FreeRTOS_setsockopt+0x35a>

                case FREERTOS_SO_STOP_RX: /* Refuse to receive more packets. */
                   {
                       if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800e96c:	2b06      	cmp	r3, #6
 800e96e:	d139      	bne.n	800e9e4 <FreeRTOS_setsockopt+0x358>
                       {
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
                       }

                       if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d007      	beq.n	800e988 <FreeRTOS_setsockopt+0x2fc>
                       {
                           pxSocket->u.xTCP.bits.bRxStopped = pdTRUE;
 800e978:	69ba      	ldr	r2, [r7, #24]
 800e97a:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 800e97e:	f043 0304 	orr.w	r3, r3, #4
 800e982:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
 800e986:	e006      	b.n	800e996 <FreeRTOS_setsockopt+0x30a>
                       }
                       else
                       {
                           pxSocket->u.xTCP.bits.bRxStopped = pdFALSE;
 800e988:	69ba      	ldr	r2, [r7, #24]
 800e98a:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 800e98e:	f36f 0382 	bfc	r3, #2, #1
 800e992:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
                       }

                       pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 800e996:	69ba      	ldr	r2, [r7, #24]
 800e998:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 800e99c:	f043 0301 	orr.w	r3, r3, #1
 800e9a0:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
                       pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 800e9a4:	69bb      	ldr	r3, [r7, #24]
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                       ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800e9ac:	2006      	movs	r0, #6
 800e9ae:	f7fe f9f7 	bl	800cda0 <xSendEventToIPTask>
                   }
                    xReturn = 0;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	61fb      	str	r3, [r7, #28]
                    break;
 800e9b6:	e016      	b.n	800e9e6 <FreeRTOS_setsockopt+0x35a>
            #endif /* ipconfigUSE_TCP == 1 */

        default:
            /* No other options are handled. */
            xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800e9b8:	f06f 036c 	mvn.w	r3, #108	@ 0x6c
 800e9bc:	61fb      	str	r3, [r7, #28]
            break;
 800e9be:	e012      	b.n	800e9e6 <FreeRTOS_setsockopt+0x35a>
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800e9c0:	bf00      	nop
 800e9c2:	e010      	b.n	800e9e6 <FreeRTOS_setsockopt+0x35a>
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800e9c4:	bf00      	nop
 800e9c6:	e00e      	b.n	800e9e6 <FreeRTOS_setsockopt+0x35a>
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800e9c8:	bf00      	nop
 800e9ca:	e00c      	b.n	800e9e6 <FreeRTOS_setsockopt+0x35a>
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800e9cc:	bf00      	nop
 800e9ce:	e00a      	b.n	800e9e6 <FreeRTOS_setsockopt+0x35a>
                           break; /* will return an error. */
 800e9d0:	bf00      	nop
 800e9d2:	e008      	b.n	800e9e6 <FreeRTOS_setsockopt+0x35a>
                           break; /* will return an error. */
 800e9d4:	bf00      	nop
 800e9d6:	e006      	b.n	800e9e6 <FreeRTOS_setsockopt+0x35a>
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800e9d8:	bf00      	nop
 800e9da:	e004      	b.n	800e9e6 <FreeRTOS_setsockopt+0x35a>
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800e9dc:	bf00      	nop
 800e9de:	e002      	b.n	800e9e6 <FreeRTOS_setsockopt+0x35a>
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800e9e0:	bf00      	nop
 800e9e2:	e000      	b.n	800e9e6 <FreeRTOS_setsockopt+0x35a>
                           break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800e9e4:	bf00      	nop
    }

    return xReturn;
 800e9e6:	69fb      	ldr	r3, [r7, #28]
} /* Tested */
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	3720      	adds	r7, #32
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}

0800e9f0 <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b086      	sub	sp, #24
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800e9f8:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800e9fc:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800e9fe:	89fb      	ldrh	r3, [r7, #14]
 800ea00:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800ea02:	2300      	movs	r3, #0
 800ea04:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800ea06:	2300      	movs	r3, #0
 800ea08:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2b06      	cmp	r3, #6
 800ea0e:	d102      	bne.n	800ea16 <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800ea10:	4b21      	ldr	r3, [pc, #132]	@ (800ea98 <prvGetPrivatePortNumber+0xa8>)
 800ea12:	613b      	str	r3, [r7, #16]
 800ea14:	e001      	b.n	800ea1a <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800ea16:	4b21      	ldr	r3, [pc, #132]	@ (800ea9c <prvGetPrivatePortNumber+0xac>)
 800ea18:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800ea1a:	f107 0308 	add.w	r3, r7, #8
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7f3 fd87 	bl	8002532 <xApplicationGetRandomNumber>
 800ea24:	4603      	mov	r3, r0
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d030      	beq.n	800ea8c <prvGetPrivatePortNumber+0x9c>
        }

        /* Map the random to a candidate port. */
        usResult =
            socketAUTO_PORT_ALLOCATION_START_NUMBER +
            ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount );
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	b29b      	uxth	r3, r3
            socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800ea2e:	89fa      	ldrh	r2, [r7, #14]
 800ea30:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea34:	fb01 f202 	mul.w	r2, r1, r2
 800ea38:	1a9b      	subs	r3, r3, r2
 800ea3a:	b29b      	uxth	r3, r3
        usResult =
 800ea3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ea40:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
                pxList,
                ( TickType_t ) FreeRTOS_htons( usResult ) ) )
 800ea42:	8abb      	ldrh	r3, [r7, #20]
 800ea44:	021b      	lsls	r3, r3, #8
 800ea46:	b21a      	sxth	r2, r3
 800ea48:	8abb      	ldrh	r3, [r7, #20]
 800ea4a:	0a1b      	lsrs	r3, r3, #8
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	b21b      	sxth	r3, r3
 800ea50:	4313      	orrs	r3, r2
 800ea52:	b21b      	sxth	r3, r3
 800ea54:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue(
 800ea56:	4619      	mov	r1, r3
 800ea58:	6938      	ldr	r0, [r7, #16]
 800ea5a:	f000 f821 	bl	800eaa0 <pxListFindListItemWithValue>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d10a      	bne.n	800ea7a <prvGetPrivatePortNumber+0x8a>
        {
            usResult = FreeRTOS_htons( usResult );
 800ea64:	8abb      	ldrh	r3, [r7, #20]
 800ea66:	021b      	lsls	r3, r3, #8
 800ea68:	b21a      	sxth	r2, r3
 800ea6a:	8abb      	ldrh	r3, [r7, #20]
 800ea6c:	0a1b      	lsrs	r3, r3, #8
 800ea6e:	b29b      	uxth	r3, r3
 800ea70:	b21b      	sxth	r3, r3
 800ea72:	4313      	orrs	r3, r2
 800ea74:	b21b      	sxth	r3, r3
 800ea76:	82bb      	strh	r3, [r7, #20]
            break;
 800ea78:	e009      	b.n	800ea8e <prvGetPrivatePortNumber+0x9e>
        }
        else
        {
            usResult = 0;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800ea7e:	8afb      	ldrh	r3, [r7, #22]
 800ea80:	3b01      	subs	r3, #1
 800ea82:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800ea84:	8afb      	ldrh	r3, [r7, #22]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d1c7      	bne.n	800ea1a <prvGetPrivatePortNumber+0x2a>
 800ea8a:	e000      	b.n	800ea8e <prvGetPrivatePortNumber+0x9e>
            break;
 800ea8c:	bf00      	nop

    return usResult;
 800ea8e:	8abb      	ldrh	r3, [r7, #20]
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3718      	adds	r7, #24
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}
 800ea98:	2000a398 	.word	0x2000a398
 800ea9c:	2000a384 	.word	0x2000a384

0800eaa0 <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b086      	sub	sp, #24
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800eaae:	f7ff f82f 	bl	800db10 <xIPIsNetworkTaskReady>
 800eab2:	4603      	mov	r3, r0
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d018      	beq.n	800eaea <pxListFindListItemWithValue+0x4a>
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d015      	beq.n	800eaea <pxListFindListItemWithValue+0x4a>
    {
        const ListItem_t * pxIterator;
        const ListItem_t * pxEnd = listGET_END_MARKER( pxList );
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	3308      	adds	r3, #8
 800eac2:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_NEXT( pxEnd );
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	613b      	str	r3, [r7, #16]
 800eaca:	e00a      	b.n	800eae2 <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	683a      	ldr	r2, [r7, #0]
 800ead2:	429a      	cmp	r2, r3
 800ead4:	d102      	bne.n	800eadc <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	617b      	str	r3, [r7, #20]
                break;
 800eada:	e006      	b.n	800eaea <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	613b      	str	r3, [r7, #16]
             pxIterator != pxEnd;
 800eae2:	693a      	ldr	r2, [r7, #16]
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d1f0      	bne.n	800eacc <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800eaea:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800eaec:	4618      	mov	r0, r3
 800eaee:	3718      	adds	r7, #24
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}

0800eaf4 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b086      	sub	sp, #24
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800eafc:	2300      	movs	r3, #0
 800eafe:	617b      	str	r3, [r7, #20]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800eb00:	6879      	ldr	r1, [r7, #4]
 800eb02:	4811      	ldr	r0, [pc, #68]	@ (800eb48 <pxUDPSocketLookup+0x54>)
 800eb04:	f7ff ffcc 	bl	800eaa0 <pxListFindListItemWithValue>
 800eb08:	6138      	str	r0, [r7, #16]

    if( pxListItem != NULL )
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d016      	beq.n	800eb3e <pxUDPSocketLookup+0x4a>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxListItem ) );
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	68db      	ldr	r3, [r3, #12]
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7ff f8b1 	bl	800dc7c <vCastPointerTo_FreeRTOS_Socket_t>
 800eb1a:	6178      	str	r0, [r7, #20]
        configASSERT( pxSocket != NULL );
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d10d      	bne.n	800eb3e <pxUDPSocketLookup+0x4a>
	__asm volatile
 800eb22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb26:	b672      	cpsid	i
 800eb28:	f383 8811 	msr	BASEPRI, r3
 800eb2c:	f3bf 8f6f 	isb	sy
 800eb30:	f3bf 8f4f 	dsb	sy
 800eb34:	b662      	cpsie	i
 800eb36:	60fb      	str	r3, [r7, #12]
}
 800eb38:	bf00      	nop
 800eb3a:	bf00      	nop
 800eb3c:	e7fd      	b.n	800eb3a <pxUDPSocketLookup+0x46>
    }

    return pxSocket;
 800eb3e:	697b      	ldr	r3, [r7, #20]
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3718      	adds	r7, #24
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}
 800eb48:	2000a384 	.word	0x2000a384

0800eb4c <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket: The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b084      	sub	sp, #16
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
        }
    #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

    #if ( ipconfigSOCKET_HAS_USER_WAKE_CALLBACK == 1 )
        {
            if( pxSocket->pxUserWakeCallback != NULL )
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d003      	beq.n	800eb64 <vSocketWakeUpUser+0x18>
            {
                pxSocket->pxUserWakeCallback( pxSocket );
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	4798      	blx	r3
        }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            if( pxSocket->pxSocketSet != NULL )
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d015      	beq.n	800eb98 <vSocketWakeUpUser+0x4c>
            {
                EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	0a1b      	lsrs	r3, r3, #8
 800eb72:	f003 030f 	and.w	r3, r3, #15
 800eb76:	60fb      	str	r3, [r7, #12]

                if( xSelectBits != 0UL )
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d00c      	beq.n	800eb98 <vSocketWakeUpUser+0x4c>
                {
                    pxSocket->xSocketBits |= xSelectBits;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	431a      	orrs	r2, r3
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	635a      	str	r2, [r3, #52]	@ 0x34
                    ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	68f9      	ldr	r1, [r7, #12]
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7f9 f9db 	bl	8007f4e <xEventGroupSetBits>
                }
            }

            pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	601a      	str	r2, [r3, #0]
        }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	685b      	ldr	r3, [r3, #4]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d00b      	beq.n	800ebc4 <vSocketWakeUpUser+0x78>
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d007      	beq.n	800ebc4 <vSocketWakeUpUser+0x78>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	685a      	ldr	r2, [r3, #4]
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	4619      	mov	r1, r3
 800ebbe:	4610      	mov	r0, r2
 800ebc0:	f7f9 f9c5 	bl	8007f4e <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0UL;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	601a      	str	r2, [r3, #0]
}
 800ebca:	bf00      	nop
 800ebcc:	3710      	adds	r7, #16
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}
	...

0800ebd4 <xTCPTimerCheck>:
 * @param[in] xWillSleep: Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b08a      	sub	sp, #40	@ 0x28
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800ebdc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ebe0:	627b      	str	r3, [r7, #36]	@ 0x24
        TickType_t xNow = xTaskGetTickCount();
 800ebe2:	f7fa fe01 	bl	80097e8 <xTaskGetTickCount>
 800ebe6:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 800ebe8:	4b33      	ldr	r3, [pc, #204]	@ (800ecb8 <xTCPTimerCheck+0xe4>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	69ba      	ldr	r2, [r7, #24]
 800ebee:	1ad3      	subs	r3, r2, r3
 800ebf0:	623b      	str	r3, [r7, #32]
        const ListItem_t * pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800ebf2:	4b32      	ldr	r3, [pc, #200]	@ (800ecbc <xTCPTimerCheck+0xe8>)
 800ebf4:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800ebf6:	4b32      	ldr	r3, [pc, #200]	@ (800ecc0 <xTCPTimerCheck+0xec>)
 800ebf8:	68db      	ldr	r3, [r3, #12]
 800ebfa:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 800ebfc:	4a2e      	ldr	r2, [pc, #184]	@ (800ecb8 <xTCPTimerCheck+0xe4>)
 800ebfe:	69bb      	ldr	r3, [r7, #24]
 800ec00:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 800ec02:	6a3b      	ldr	r3, [r7, #32]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d14e      	bne.n	800eca6 <xTCPTimerCheck+0xd2>
        {
            xDelta = 1U;
 800ec08:	2301      	movs	r3, #1
 800ec0a:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 800ec0c:	e04b      	b.n	800eca6 <xTCPTimerCheck+0xd2>
        {
            pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800ec0e:	69fb      	ldr	r3, [r7, #28]
 800ec10:	68db      	ldr	r3, [r3, #12]
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7ff f832 	bl	800dc7c <vCastPointerTo_FreeRTOS_Socket_t>
 800ec18:	6138      	str	r0, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800ec1a:	69fb      	ldr	r3, [r7, #28]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d03a      	beq.n	800eca0 <xTCPTimerCheck+0xcc>
            {
                continue;
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ec30:	461a      	mov	r2, r3
 800ec32:	6a3b      	ldr	r3, [r7, #32]
 800ec34:	4293      	cmp	r3, r2
 800ec36:	d20a      	bcs.n	800ec4e <xTCPTimerCheck+0x7a>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ec3e:	6a3b      	ldr	r3, [r7, #32]
 800ec40:	b29b      	uxth	r3, r3
 800ec42:	1ad3      	subs	r3, r2, r3
 800ec44:	b29a      	uxth	r2, r3
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ec4c:	e00a      	b.n	800ec64 <xTCPTimerCheck+0x90>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	2200      	movs	r2, #0
 800ec52:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                xRc = xTCPSocketCheck( pxSocket );
 800ec56:	6938      	ldr	r0, [r7, #16]
 800ec58:	f000 fe90 	bl	800f97c <xTCPSocketCheck>
 800ec5c:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	db1f      	blt.n	800eca4 <xTCPTimerCheck+0xd0>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 800ec64:	693b      	ldr	r3, [r7, #16]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d008      	beq.n	800ec7e <xTCPTimerCheck+0xaa>
            {
                if( xWillSleep != pdFALSE )
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d003      	beq.n	800ec7a <xTCPTimerCheck+0xa6>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 800ec72:	6938      	ldr	r0, [r7, #16]
 800ec74:	f7ff ff6a 	bl	800eb4c <vSocketWakeUpUser>
 800ec78:	e001      	b.n	800ec7e <xTCPTimerCheck+0xaa>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d00e      	beq.n	800eca6 <xTCPTimerCheck+0xd2>
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ec8e:	461a      	mov	r2, r3
 800ec90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d907      	bls.n	800eca6 <xTCPTimerCheck+0xd2>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ec9c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec9e:	e002      	b.n	800eca6 <xTCPTimerCheck+0xd2>
                continue;
 800eca0:	bf00      	nop
 800eca2:	e000      	b.n	800eca6 <xTCPTimerCheck+0xd2>
                    continue;
 800eca4:	bf00      	nop
        while( pxIterator != pxEnd )
 800eca6:	69fa      	ldr	r2, [r7, #28]
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d1af      	bne.n	800ec0e <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 800ecae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3728      	adds	r7, #40	@ 0x28
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	2000a3ac 	.word	0x2000a3ac
 800ecbc:	2000a3a0 	.word	0x2000a3a0
 800ecc0:	2000a398 	.word	0x2000a398

0800ecc4 <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           uint32_t ulRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b08a      	sub	sp, #40	@ 0x28
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	60f8      	str	r0, [r7, #12]
 800eccc:	60b9      	str	r1, [r7, #8]
 800ecce:	607a      	str	r2, [r7, #4]
 800ecd0:	603b      	str	r3, [r7, #0]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	623b      	str	r3, [r7, #32]
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	61fb      	str	r3, [r7, #28]
        const ListItem_t * pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800ecda:	4b1c      	ldr	r3, [pc, #112]	@ (800ed4c <pxTCPSocketLookup+0x88>)
 800ecdc:	61bb      	str	r3, [r7, #24]

        /* Parameter not yet supported. */
        ( void ) ulLocalIP;

        for( pxIterator = listGET_NEXT( pxEnd );
 800ecde:	69bb      	ldr	r3, [r7, #24]
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	627b      	str	r3, [r7, #36]	@ 0x24
 800ece4:	e024      	b.n	800ed30 <pxTCPSocketLookup+0x6c>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800ece6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ece8:	68db      	ldr	r3, [r3, #12]
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7fe ffc6 	bl	800dc7c <vCastPointerTo_FreeRTOS_Socket_t>
 800ecf0:	6178      	str	r0, [r7, #20]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	b29b      	uxth	r3, r3
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d115      	bne.n	800ed2a <pxTCPSocketLookup+0x66>
            {
                if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d102      	bne.n	800ed0e <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	61fb      	str	r3, [r7, #28]
 800ed0c:	e00d      	b.n	800ed2a <pxTCPSocketLookup+0x66>
                }
                else if( ( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort ) && ( pxSocket->u.xTCP.ulRemoteIP == ulRemoteIP ) )
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	b29b      	uxth	r3, r3
 800ed16:	429a      	cmp	r2, r3
 800ed18:	d107      	bne.n	800ed2a <pxTCPSocketLookup+0x66>
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed1e:	687a      	ldr	r2, [r7, #4]
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d102      	bne.n	800ed2a <pxTCPSocketLookup+0x66>
                {
                    /* For sockets not in listening mode, find a match with
                     * xLocalPort, ulRemoteIP AND xRemotePort. */
                    pxResult = pxSocket;
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	623b      	str	r3, [r7, #32]
                    break;
 800ed28:	e006      	b.n	800ed38 <pxTCPSocketLookup+0x74>
             pxIterator = listGET_NEXT( pxIterator ) )
 800ed2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	627b      	str	r3, [r7, #36]	@ 0x24
             pxIterator != pxEnd;
 800ed30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed32:	69bb      	ldr	r3, [r7, #24]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d1d6      	bne.n	800ece6 <pxTCPSocketLookup+0x22>
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 800ed38:	6a3b      	ldr	r3, [r7, #32]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d101      	bne.n	800ed42 <pxTCPSocketLookup+0x7e>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 800ed3e:	69fb      	ldr	r3, [r7, #28]
 800ed40:	623b      	str	r3, [r7, #32]
        }

        return pxResult;
 800ed42:	6a3b      	ldr	r3, [r7, #32]
    }
 800ed44:	4618      	mov	r0, r3
 800ed46:	3728      	adds	r7, #40	@ 0x28
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}
 800ed4c:	2000a3a0 	.word	0x2000a3a0

0800ed50 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b086      	sub	sp, #24
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d025      	beq.n	800edac <prvTCPCreateStream+0x5c>
        {
            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed64:	617b      	str	r3, [r7, #20]

            if( pxSocket->u.xTCP.uxLittleSpace == 0UL )
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d10c      	bne.n	800ed88 <prvTCPCreateStream+0x38>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( sock20_PERCENT * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ed72:	4613      	mov	r3, r2
 800ed74:	009b      	lsls	r3, r3, #2
 800ed76:	4413      	add	r3, r2
 800ed78:	009b      	lsls	r3, r3, #2
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	4b29      	ldr	r3, [pc, #164]	@ (800ee24 <prvTCPCreateStream+0xd4>)
 800ed7e:	fba3 2302 	umull	r2, r3, r3, r2
 800ed82:	095a      	lsrs	r2, r3, #5
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	665a      	str	r2, [r3, #100]	@ 0x64
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0UL )
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d110      	bne.n	800edb2 <prvTCPCreateStream+0x62>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( sock80_PERCENT * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ed94:	4613      	mov	r3, r2
 800ed96:	009b      	lsls	r3, r3, #2
 800ed98:	4413      	add	r3, r2
 800ed9a:	011b      	lsls	r3, r3, #4
 800ed9c:	461a      	mov	r2, r3
 800ed9e:	4b21      	ldr	r3, [pc, #132]	@ (800ee24 <prvTCPCreateStream+0xd4>)
 800eda0:	fba3 2302 	umull	r2, r3, r3, r2
 800eda4:	095a      	lsrs	r2, r3, #5
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	669a      	str	r2, [r3, #104]	@ 0x68
 800edaa:	e002      	b.n	800edb2 <prvTCPCreateStream+0x62>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800edb0:	617b      	str	r3, [r7, #20]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	3304      	adds	r3, #4
 800edb6:	617b      	str	r3, [r7, #20]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	f023 0303 	bic.w	r3, r3, #3
 800edbe:	617b      	str	r3, [r7, #20]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	3314      	adds	r3, #20
 800edc4:	613b      	str	r3, [r7, #16]

        pxBuffer = ipCAST_PTR_TO_TYPE_PTR( StreamBuffer_t, pvPortMallocLarge( uxSize ) );
 800edc6:	6938      	ldr	r0, [r7, #16]
 800edc8:	f7fc f9ee 	bl	800b1a8 <pvPortMalloc>
 800edcc:	4603      	mov	r3, r0
 800edce:	4618      	mov	r0, r3
 800edd0:	f7fe ff75 	bl	800dcbe <vCastPointerTo_StreamBuffer_t>
 800edd4:	60f8      	str	r0, [r7, #12]

        if( pxBuffer == NULL )
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d10b      	bne.n	800edf4 <prvTCPCreateStream+0xa4>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE;
 800eddc:	687a      	ldr	r2, [r7, #4]
 800edde:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 800ede2:	f043 0308 	orr.w	r3, r3, #8
 800ede6:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800edea:	2108      	movs	r1, #8
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f001 fbaa 	bl	8010546 <vTCPStateChange>
 800edf2:	e011      	b.n	800ee18 <prvTCPCreateStream+0xc8>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800edf4:	2214      	movs	r2, #20
 800edf6:	2100      	movs	r1, #0
 800edf8:	68f8      	ldr	r0, [r7, #12]
 800edfa:	f006 ff26 	bl	8015c4a <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	697a      	ldr	r2, [r7, #20]
 800ee02:	611a      	str	r2, [r3, #16]
            if( xTCPWindowLoggingLevel != 0 )
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', uxLength, uxSize ) );
            }

            if( xIsInputStream != 0 )
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d003      	beq.n	800ee12 <prvTCPCreateStream+0xc2>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	68fa      	ldr	r2, [r7, #12]
 800ee0e:	675a      	str	r2, [r3, #116]	@ 0x74
 800ee10:	e002      	b.n	800ee18 <prvTCPCreateStream+0xc8>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	68fa      	ldr	r2, [r7, #12]
 800ee16:	679a      	str	r2, [r3, #120]	@ 0x78
            }
        }

        return pxBuffer;
 800ee18:	68fb      	ldr	r3, [r7, #12]
    }
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3718      	adds	r7, #24
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
 800ee22:	bf00      	nop
 800ee24:	51eb851f 	.word	0x51eb851f

0800ee28 <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b088      	sub	sp, #32
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	60f8      	str	r0, [r7, #12]
 800ee30:	60b9      	str	r1, [r7, #8]
 800ee32:	607a      	str	r2, [r7, #4]
 800ee34:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee3a:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	61bb      	str	r3, [r7, #24]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 800ee40:	69fb      	ldr	r3, [r7, #28]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d10a      	bne.n	800ee5c <lTCPAddRxdata+0x34>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800ee46:	2101      	movs	r1, #1
 800ee48:	68f8      	ldr	r0, [r7, #12]
 800ee4a:	f7ff ff81 	bl	800ed50 <prvTCPCreateStream>
 800ee4e:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 800ee50:	69fb      	ldr	r3, [r7, #28]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d102      	bne.n	800ee5c <lTCPAddRxdata+0x34>
            {
                xResult = -1;
 800ee56:	f04f 33ff 	mov.w	r3, #4294967295
 800ee5a:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 800ee5c:	69bb      	ldr	r3, [r7, #24]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	db44      	blt.n	800eeec <lTCPAddRxdata+0xc4>
                        pcData = NULL;
                    }
                }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	687a      	ldr	r2, [r7, #4]
 800ee66:	68b9      	ldr	r1, [r7, #8]
 800ee68:	69f8      	ldr	r0, [r7, #28]
 800ee6a:	f000 fafb 	bl	800f464 <uxStreamBufferAdd>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	61bb      	str	r3, [r7, #24]
                                                 ( UBaseType_t ) pxStream->uxFront ) );
                    }
                }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d139      	bne.n	800eeec <lTCPAddRxdata+0xc4>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    /* See if running out of space. */
                    if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ee7e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d11f      	bne.n	800eec8 <lTCPAddRxdata+0xa0>
                    {
                        size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7fe fecd 	bl	800dc2c <uxStreamBufferFrontSpace>
 800ee92:	6178      	str	r0, [r7, #20]

                        if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ee98:	697a      	ldr	r2, [r7, #20]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d814      	bhi.n	800eec8 <lTCPAddRxdata+0xa0>
                        {
                            pxSocket->u.xTCP.bits.bLowWater = pdTRUE;
 800ee9e:	68fa      	ldr	r2, [r7, #12]
 800eea0:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 800eea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eea8:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
                            pxSocket->u.xTCP.bits.bWinChange = pdTRUE;
 800eeac:	68fa      	ldr	r2, [r7, #12]
 800eeae:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 800eeb2:	f043 0301 	orr.w	r3, r3, #1
 800eeb6:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41

                            /* bLowWater was reached, send the changed window size. */
                            pxSocket->u.xTCP.usTimeout = 1U;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	2201      	movs	r2, #1
 800eebe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800eec2:	2006      	movs	r0, #6
 800eec4:	f7fd ff6c 	bl	800cda0 <xSendEventToIPTask>
                        }
                    }

                    /* New incoming data is available, wake up the user.   User's
                     * semaphores will be set just before the IP-task goes asleep. */
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	f043 0201 	orr.w	r2, r3, #1
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                        {
                            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eed8:	f003 0301 	and.w	r3, r3, #1
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d005      	beq.n	800eeec <lTCPAddRxdata+0xc4>
                            {
                                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	601a      	str	r2, [r3, #0]
                    #endif
                }
            }
        }

        return xResult;
 800eeec:	69bb      	ldr	r3, [r7, #24]
    }
 800eeee:	4618      	mov	r0, r3
 800eef0:	3720      	adds	r7, #32
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}

0800eef6 <FreeRTOS_tx_space>:
 * @param[in] xSocket: the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 800eef6:	b580      	push	{r7, lr}
 800eef8:	b084      	sub	sp, #16
 800eefa:	af00      	add	r7, sp, #0
 800eefc:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800ef08:	2b06      	cmp	r3, #6
 800ef0a:	d003      	beq.n	800ef14 <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ef0c:	f06f 0315 	mvn.w	r3, #21
 800ef10:	60fb      	str	r3, [r7, #12]
 800ef12:	e00e      	b.n	800ef32 <FreeRTOS_tx_space+0x3c>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d007      	beq.n	800ef2c <FreeRTOS_tx_space+0x36>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7fe fe6f 	bl	800dc04 <uxStreamBufferGetSpace>
 800ef26:	4603      	mov	r3, r0
 800ef28:	60fb      	str	r3, [r7, #12]
 800ef2a:	e002      	b.n	800ef32 <FreeRTOS_tx_space+0x3c>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef30:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800ef32:	68fb      	ldr	r3, [r7, #12]
    }
 800ef34:	4618      	mov	r0, r3
 800ef36:	3710      	adds	r7, #16
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <FreeRTOS_tx_size>:
 *
 * @return The number of bytes stored in the Tx buffer of the socket.
 *         Or an error code.
 */
    BaseType_t FreeRTOS_tx_size( ConstSocket_t xSocket )
    {
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b084      	sub	sp, #16
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800ef4e:	2b06      	cmp	r3, #6
 800ef50:	d003      	beq.n	800ef5a <FreeRTOS_tx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ef52:	f06f 0315 	mvn.w	r3, #21
 800ef56:	60fb      	str	r3, [r7, #12]
 800ef58:	e00d      	b.n	800ef76 <FreeRTOS_tx_size+0x3a>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d007      	beq.n	800ef72 <FreeRTOS_tx_size+0x36>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.txStream );
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7fe fe74 	bl	800dc54 <uxStreamBufferGetSize>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	60fb      	str	r3, [r7, #12]
 800ef70:	e001      	b.n	800ef76 <FreeRTOS_tx_size+0x3a>
            }
            else
            {
                xReturn = 0;
 800ef72:	2300      	movs	r3, #0
 800ef74:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800ef76:	68fb      	ldr	r3, [r7, #12]
    }
 800ef78:	4618      	mov	r0, r3
 800ef7a:	3710      	adds	r7, #16
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}

0800ef80 <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b084      	sub	sp, #16
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800ef92:	2b06      	cmp	r3, #6
 800ef94:	d003      	beq.n	800ef9e <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ef96:	f06f 0315 	mvn.w	r3, #21
 800ef9a:	60fb      	str	r3, [r7, #12]
 800ef9c:	e00d      	b.n	800efba <FreeRTOS_rx_size+0x3a>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d007      	beq.n	800efb6 <FreeRTOS_rx_size+0x36>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800efaa:	4618      	mov	r0, r3
 800efac:	f7fe fe52 	bl	800dc54 <uxStreamBufferGetSize>
 800efb0:	4603      	mov	r3, r0
 800efb2:	60fb      	str	r3, [r7, #12]
 800efb4:	e001      	b.n	800efba <FreeRTOS_rx_size+0x3a>
        }
        else
        {
            xReturn = 0;
 800efb6:	2300      	movs	r3, #0
 800efb8:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800efba:	68fb      	ldr	r3, [r7, #12]
    }
 800efbc:	4618      	mov	r0, r3
 800efbe:	3710      	adds	r7, #16
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b092      	sub	sp, #72	@ 0x48
 800efc8:	af02      	add	r7, sp, #8
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 800efca:	2300      	movs	r3, #0
 800efcc:	63bb      	str	r3, [r7, #56]	@ 0x38
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 800efce:	f005 fa63 	bl	8014498 <uxGetMinimumFreeNetworkBuffers>
 800efd2:	6378      	str	r0, [r7, #52]	@ 0x34
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 800efd4:	f005 fa6c 	bl	80144b0 <uxGetNumberOfFreeNetworkBuffers>
 800efd8:	6338      	str	r0, [r7, #48]	@ 0x30

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 800efda:	4b3a      	ldr	r3, [pc, #232]	@ (800f0c4 <vTCPNetStat+0x100>)
 800efdc:	689b      	ldr	r3, [r3, #8]
 800efde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efe2:	d16a      	bne.n	800f0ba <vTCPNetStat+0xf6>
        {
            FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
        }
        else
        {
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 800efe4:	4b38      	ldr	r3, [pc, #224]	@ (800f0c8 <vTCPNetStat+0x104>)
 800efe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 800efe8:	4b38      	ldr	r3, [pc, #224]	@ (800f0cc <vTCPNetStat+0x108>)
 800efea:	62bb      	str	r3, [r7, #40]	@ 0x28
            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );

            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800efec:	4b35      	ldr	r3, [pc, #212]	@ (800f0c4 <vTCPNetStat+0x100>)
 800efee:	68db      	ldr	r3, [r3, #12]
 800eff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eff2:	e050      	b.n	800f096 <vTCPNetStat+0xd2>
                 pxIterator != pxEndTCP;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                const FreeRTOS_Socket_t * pxSocket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800eff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eff6:	68db      	ldr	r3, [r3, #12]
 800eff8:	4618      	mov	r0, r3
 800effa:	f7fe fe4a 	bl	800dc92 <vCastConstPointerTo_FreeRTOS_Socket_t>
 800effe:	6278      	str	r0, [r7, #36]	@ 0x24
                #if ( ipconfigTCP_KEEP_ALIVE == 1 )
                    TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800f000:	f7fa fbf2 	bl	80097e8 <xTaskGetTickCount>
 800f004:	4602      	mov	r2, r0
 800f006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f00a:	1ad3      	subs	r3, r2, r3
 800f00c:	623b      	str	r3, [r7, #32]
                #else
                    TickType_t age = 0U;
                #endif

                char ucChildText[ 16 ] = "";
 800f00e:	2300      	movs	r3, #0
 800f010:	607b      	str	r3, [r7, #4]
 800f012:	f107 0308 	add.w	r3, r7, #8
 800f016:	2200      	movs	r2, #0
 800f018:	601a      	str	r2, [r3, #0]
 800f01a:	605a      	str	r2, [r3, #4]
 800f01c:	609a      	str	r2, [r3, #8]

                if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800f01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f020:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800f024:	2b01      	cmp	r3, #1
 800f026:	d130      	bne.n	800f08a <vTCPNetStat+0xc6>
                {
                    /* Using function "snprintf". */
                    const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
                                                         ( int32_t ) pxSocket->u.xTCP.usChildCount,
 800f028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f02a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
                    const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800f02e:	461a      	mov	r2, r3
                                                         ( int32_t ) pxSocket->u.xTCP.usBacklog );
 800f030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
                    const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800f036:	1d38      	adds	r0, r7, #4
 800f038:	9300      	str	r3, [sp, #0]
 800f03a:	4613      	mov	r3, r2
 800f03c:	4a24      	ldr	r2, [pc, #144]	@ (800f0d0 <vTCPNetStat+0x10c>)
 800f03e:	2110      	movs	r1, #16
 800f040:	f006 fd62 	bl	8015b08 <sniprintf>
 800f044:	61f8      	str	r0, [r7, #28]
                    ( void ) copied_len;
                    /* These should never evaluate to false since the buffers are both shorter than 5-6 characters (<=65535) */
                    configASSERT( copied_len >= 0 );
 800f046:	69fb      	ldr	r3, [r7, #28]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	da0d      	bge.n	800f068 <vTCPNetStat+0xa4>
	__asm volatile
 800f04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f050:	b672      	cpsid	i
 800f052:	f383 8811 	msr	BASEPRI, r3
 800f056:	f3bf 8f6f 	isb	sy
 800f05a:	f3bf 8f4f 	dsb	sy
 800f05e:	b662      	cpsie	i
 800f060:	61bb      	str	r3, [r7, #24]
}
 800f062:	bf00      	nop
 800f064:	bf00      	nop
 800f066:	e7fd      	b.n	800f064 <vTCPNetStat+0xa0>
                    configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) );
 800f068:	69fb      	ldr	r3, [r7, #28]
 800f06a:	2b0f      	cmp	r3, #15
 800f06c:	dd0d      	ble.n	800f08a <vTCPNetStat+0xc6>
	__asm volatile
 800f06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f072:	b672      	cpsid	i
 800f074:	f383 8811 	msr	BASEPRI, r3
 800f078:	f3bf 8f6f 	isb	sy
 800f07c:	f3bf 8f4f 	dsb	sy
 800f080:	b662      	cpsie	i
 800f082:	617b      	str	r3, [r7, #20]
}
 800f084:	bf00      	nop
 800f086:	bf00      	nop
 800f088:	e7fd      	b.n	800f086 <vTCPNetStat+0xc2>
                                   ( pxSocket->u.xTCP.txStream != NULL ) ? 1 : 0,
                                   FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.ucTCPState ),
                                   ( age > 999999u ) ? 999999u : age, /* Format 'age' for printing */
                                   pxSocket->u.xTCP.usTimeout,
                                   ucChildText ) );
                count++;
 800f08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f08c:	3301      	adds	r3, #1
 800f08e:	63bb      	str	r3, [r7, #56]	@ 0x38
                 pxIterator = listGET_NEXT( pxIterator ) )
 800f090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	63fb      	str	r3, [r7, #60]	@ 0x3c
                 pxIterator != pxEndTCP;
 800f096:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f09a:	429a      	cmp	r2, r3
 800f09c:	d1aa      	bne.n	800eff4 <vTCPNetStat+0x30>
            }

            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800f09e:	4b0d      	ldr	r3, [pc, #52]	@ (800f0d4 <vTCPNetStat+0x110>)
 800f0a0:	68db      	ldr	r3, [r3, #12]
 800f0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0a4:	e005      	b.n	800f0b2 <vTCPNetStat+0xee>
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                /* Local port on this machine */
                FreeRTOS_printf( ( "UDP Port %5u\n",
                                   FreeRTOS_ntohs( listGET_LIST_ITEM_VALUE( pxIterator ) ) ) );
                count++;
 800f0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0a8:	3301      	adds	r3, #1
 800f0aa:	63bb      	str	r3, [r7, #56]	@ 0x38
                 pxIterator = listGET_NEXT( pxIterator ) )
 800f0ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0ae:	685b      	ldr	r3, [r3, #4]
 800f0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                 pxIterator != pxEndUDP;
 800f0b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d1f5      	bne.n	800f0a6 <vTCPNetStat+0xe2>
                               ( UBaseType_t ) count,
                               ( UBaseType_t ) uxMinimum,
                               ( UBaseType_t ) uxCurrent,
                               ( BaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 800f0ba:	bf00      	nop
 800f0bc:	3740      	adds	r7, #64	@ 0x40
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
 800f0c2:	bf00      	nop
 800f0c4:	2000a398 	.word	0x2000a398
 800f0c8:	2000a3a0 	.word	0x2000a3a0
 800f0cc:	2000a38c 	.word	0x2000a38c
 800f0d0:	08016dec 	.word	0x08016dec
 800f0d4:	2000a384 	.word	0x2000a384

0800f0d8 <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet: The socket-set which is to be waited on for change.
 */
    void vSocketSelect( SocketSelect_t * pxSocketSet )
    {
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b08c      	sub	sp, #48	@ 0x30
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	613b      	str	r3, [r7, #16]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	627b      	str	r3, [r7, #36]	@ 0x24

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f0ec:	e0e4      	b.n	800f2b8 <vSocketSelect+0x1e0>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;

            if( xRound == 0 )
 800f0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d102      	bne.n	800f0fa <vSocketSelect+0x22>
            {
                pxEnd = listGET_END_MARKER( &xBoundUDPSocketsList );
 800f0f4:	4b85      	ldr	r3, [pc, #532]	@ (800f30c <vSocketSelect+0x234>)
 800f0f6:	61fb      	str	r3, [r7, #28]
 800f0f8:	e001      	b.n	800f0fe <vSocketSelect+0x26>
            }

            #if ipconfigUSE_TCP == 1
                else
                {
                    pxEnd = listGET_END_MARKER( &xBoundTCPSocketsList );
 800f0fa:	4b85      	ldr	r3, [pc, #532]	@ (800f310 <vSocketSelect+0x238>)
 800f0fc:	61fb      	str	r3, [r7, #28]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_NEXT( pxEnd );
 800f0fe:	69fb      	ldr	r3, [r7, #28]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	623b      	str	r3, [r7, #32]
 800f104:	e0d0      	b.n	800f2a8 <vSocketSelect+0x1d0>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f106:	6a3b      	ldr	r3, [r7, #32]
 800f108:	68db      	ldr	r3, [r3, #12]
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7fe fdb6 	bl	800dc7c <vCastPointerTo_FreeRTOS_Socket_t>
 800f110:	60b8      	str	r0, [r7, #8]

                if( pxSocket->pxSocketSet != pxSocketSet )
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f116:	687a      	ldr	r2, [r7, #4]
 800f118:	429a      	cmp	r2, r3
 800f11a:	f040 80c1 	bne.w	800f2a0 <vSocketSelect+0x1c8>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 800f11e:	2300      	movs	r3, #0
 800f120:	62bb      	str	r3, [r7, #40]	@ 0x28

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800f128:	2b06      	cmp	r3, #6
 800f12a:	f040 80a3 	bne.w	800f274 <vSocketSelect+0x19c>
                    {
                        /* Check if the socket has already been accepted by the
                         * owner.  If not, it is useless to return it from a
                         * select(). */
                        BaseType_t bAccepted = pdFALSE;
 800f12e:	2300      	movs	r3, #0
 800f130:	61bb      	str	r3, [r7, #24]

                        if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f138:	f003 0304 	and.w	r3, r3, #4
 800f13c:	b2db      	uxtb	r3, r3
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d109      	bne.n	800f156 <vSocketSelect+0x7e>
                        {
                            if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f148:	f003 0302 	and.w	r3, r3, #2
 800f14c:	b2db      	uxtb	r3, r3
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d101      	bne.n	800f156 <vSocketSelect+0x7e>
                            {
                                bAccepted = pdTRUE;
 800f152:	2301      	movs	r3, #1
 800f154:	61bb      	str	r3, [r7, #24]
                            }
                        }

                        /* Is the set owner interested in READ events? */
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f15a:	f003 0301 	and.w	r3, r3, #1
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d038      	beq.n	800f1d4 <vSocketSelect+0xfc>
                        {
                            if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800f168:	2b01      	cmp	r3, #1
 800f16a:	d111      	bne.n	800f190 <vSocketSelect+0xb8>
                            {
                                if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f170:	2b00      	cmp	r3, #0
 800f172:	d02f      	beq.n	800f1d4 <vSocketSelect+0xfc>
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f178:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f17c:	f003 0302 	and.w	r3, r3, #2
 800f180:	b2db      	uxtb	r3, r3
 800f182:	2b00      	cmp	r3, #0
 800f184:	d026      	beq.n	800f1d4 <vSocketSelect+0xfc>
                                {
                                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800f186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f188:	f043 0301 	orr.w	r3, r3, #1
 800f18c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f18e:	e021      	b.n	800f1d4 <vSocketSelect+0xfc>
                                }
                            }
                            else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f196:	f003 0308 	and.w	r3, r3, #8
 800f19a:	b2db      	uxtb	r3, r3
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d00c      	beq.n	800f1ba <vSocketSelect+0xe2>
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f1a6:	f003 0302 	and.w	r3, r3, #2
 800f1aa:	b2db      	uxtb	r3, r3
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d004      	beq.n	800f1ba <vSocketSelect+0xe2>
                            {
                                /* This socket has the re-use flag. After connecting it turns into
                                 * a connected socket. Set the READ event, so that accept() will be called. */
                                xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800f1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1b2:	f043 0301 	orr.w	r3, r3, #1
 800f1b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f1b8:	e00c      	b.n	800f1d4 <vSocketSelect+0xfc>
                            }
                            else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 800f1ba:	69bb      	ldr	r3, [r7, #24]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d009      	beq.n	800f1d4 <vSocketSelect+0xfc>
 800f1c0:	68b8      	ldr	r0, [r7, #8]
 800f1c2:	f7ff fedd 	bl	800ef80 <FreeRTOS_rx_size>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	dd03      	ble.n	800f1d4 <vSocketSelect+0xfc>
                            {
                                xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800f1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1ce:	f043 0301 	orr.w	r3, r3, #1
 800f1d2:	62bb      	str	r3, [r7, #40]	@ 0x28
                                /* Nothing. */
                            }
                        }

                        /* Is the set owner interested in EXCEPTION events? */
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1d8:	f003 0304 	and.w	r3, r3, #4
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d00d      	beq.n	800f1fc <vSocketSelect+0x124>
                        {
                            if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSE_WAIT ) || ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCLOSED ) )
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800f1e6:	2b08      	cmp	r3, #8
 800f1e8:	d004      	beq.n	800f1f4 <vSocketSelect+0x11c>
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d103      	bne.n	800f1fc <vSocketSelect+0x124>
                            {
                                xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 800f1f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1f6:	f043 0304 	orr.w	r3, r3, #4
 800f1fa:	62bb      	str	r3, [r7, #40]	@ 0x28
                            }
                        }

                        /* Is the set owner interested in WRITE events? */
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f200:	f003 0302 	and.w	r3, r3, #2
 800f204:	2b00      	cmp	r3, #0
 800f206:	d043      	beq.n	800f290 <vSocketSelect+0x1b8>
                        {
                            BaseType_t bMatch = pdFALSE;
 800f208:	2300      	movs	r3, #0
 800f20a:	617b      	str	r3, [r7, #20]

                            if( bAccepted != 0 )
 800f20c:	69bb      	ldr	r3, [r7, #24]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d007      	beq.n	800f222 <vSocketSelect+0x14a>
                            {
                                if( FreeRTOS_tx_space( pxSocket ) > 0 )
 800f212:	68b8      	ldr	r0, [r7, #8]
 800f214:	f7ff fe6f 	bl	800eef6 <FreeRTOS_tx_space>
 800f218:	4603      	mov	r3, r0
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	dd01      	ble.n	800f222 <vSocketSelect+0x14a>
                                {
                                    bMatch = pdTRUE;
 800f21e:	2301      	movs	r3, #1
 800f220:	617b      	str	r3, [r7, #20]
                                }
                            }

                            if( bMatch == pdFALSE )
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d11d      	bne.n	800f264 <vSocketSelect+0x18c>
                            {
                                if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f22e:	f003 0308 	and.w	r3, r3, #8
 800f232:	b2db      	uxtb	r3, r3
 800f234:	2b00      	cmp	r3, #0
 800f236:	d015      	beq.n	800f264 <vSocketSelect+0x18c>
                                    ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
                                if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800f23e:	2b04      	cmp	r3, #4
 800f240:	d910      	bls.n	800f264 <vSocketSelect+0x18c>
                                    ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f248:	f003 0310 	and.w	r3, r3, #16
 800f24c:	b2db      	uxtb	r3, r3
                                    ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) &&
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d108      	bne.n	800f264 <vSocketSelect+0x18c>
                                {
                                    pxSocket->u.xTCP.bits.bConnPassed = pdTRUE;
 800f252:	68ba      	ldr	r2, [r7, #8]
 800f254:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 800f258:	f043 0310 	orr.w	r3, r3, #16
 800f25c:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
                                    bMatch = pdTRUE;
 800f260:	2301      	movs	r3, #1
 800f262:	617b      	str	r3, [r7, #20]
                                }
                            }

                            if( bMatch != pdFALSE )
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d012      	beq.n	800f290 <vSocketSelect+0x1b8>
                            {
                                xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 800f26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f26c:	f043 0302 	orr.w	r3, r3, #2
 800f270:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f272:	e00d      	b.n	800f290 <vSocketSelect+0x1b8>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f278:	f003 0301 	and.w	r3, r3, #1
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d007      	beq.n	800f290 <vSocketSelect+0x1b8>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800f284:	2b00      	cmp	r3, #0
 800f286:	d003      	beq.n	800f290 <vSocketSelect+0x1b8>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800f288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f28a:	f043 0301 	orr.w	r3, r3, #1
 800f28e:	62bb      	str	r3, [r7, #40]	@ 0x28
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f294:	635a      	str	r2, [r3, #52]	@ 0x34

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 800f296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f29a:	4313      	orrs	r3, r2
 800f29c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f29e:	e000      	b.n	800f2a2 <vSocketSelect+0x1ca>
                    continue;
 800f2a0:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 800f2a2:	6a3b      	ldr	r3, [r7, #32]
 800f2a4:	685b      	ldr	r3, [r3, #4]
 800f2a6:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 800f2a8:	6a3a      	ldr	r2, [r7, #32]
 800f2aa:	69fb      	ldr	r3, [r7, #28]
 800f2ac:	429a      	cmp	r2, r3
 800f2ae:	f47f af2a 	bne.w	800f106 <vSocketSelect+0x2e>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800f2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2b4:	3301      	adds	r3, #1
 800f2b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f2b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	f77f af16 	ble.w	800f0ee <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	2100      	movs	r1, #0
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7f8 fe03 	bl	8007ed4 <xEventGroupClearBits>
 800f2ce:	60f8      	str	r0, [r7, #12]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 800f2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2d2:	43da      	mvns	r2, r3
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	4013      	ands	r3, r2
 800f2d8:	f003 030f 	and.w	r3, r3, #15
 800f2dc:	60fb      	str	r3, [r7, #12]
                 * and cleared in FreeRTOS_select(). */
                xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
            }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d005      	beq.n	800f2f0 <vSocketSelect+0x218>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	68f9      	ldr	r1, [r7, #12]
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7f8 fdf2 	bl	8007ed4 <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681a      	ldr	r2, [r3, #0]
 800f2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2f6:	f043 0310 	orr.w	r3, r3, #16
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	4610      	mov	r0, r2
 800f2fe:	f7f8 fe26 	bl	8007f4e <xEventGroupSetBits>
    }
 800f302:	bf00      	nop
 800f304:	3730      	adds	r7, #48	@ 0x30
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	2000a38c 	.word	0x2000a38c
 800f310:	2000a3a0 	.word	0x2000a3a0

0800f314 <FreeRTOS_min_uint32>:
        {
 800f314:	b480      	push	{r7}
 800f316:	b083      	sub	sp, #12
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
 800f31c:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800f31e:	687a      	ldr	r2, [r7, #4]
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	4293      	cmp	r3, r2
 800f324:	bf28      	it	cs
 800f326:	4613      	movcs	r3, r2
        }
 800f328:	4618      	mov	r0, r3
 800f32a:	370c      	adds	r7, #12
 800f32c:	46bd      	mov	sp, r7
 800f32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f332:	4770      	bx	lr

0800f334 <uxStreamBufferSpace>:
    {
 800f334:	b480      	push	{r7}
 800f336:	b087      	sub	sp, #28
 800f338:	af00      	add	r7, sp, #0
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	60b9      	str	r1, [r7, #8]
 800f33e:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	691a      	ldr	r2, [r3, #16]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	441a      	add	r2, r3
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	1ad3      	subs	r3, r2, r3
 800f34c:	3b01      	subs	r3, #1
 800f34e:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	691b      	ldr	r3, [r3, #16]
 800f354:	697a      	ldr	r2, [r7, #20]
 800f356:	429a      	cmp	r2, r3
 800f358:	d304      	bcc.n	800f364 <uxStreamBufferSpace+0x30>
            uxCount -= pxBuffer->LENGTH;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	691b      	ldr	r3, [r3, #16]
 800f35e:	697a      	ldr	r2, [r7, #20]
 800f360:	1ad3      	subs	r3, r2, r3
 800f362:	617b      	str	r3, [r7, #20]
        return uxCount;
 800f364:	697b      	ldr	r3, [r7, #20]
    }
 800f366:	4618      	mov	r0, r3
 800f368:	371c      	adds	r7, #28
 800f36a:	46bd      	mov	sp, r7
 800f36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f370:	4770      	bx	lr

0800f372 <uxStreamBufferDistance>:
    {
 800f372:	b480      	push	{r7}
 800f374:	b087      	sub	sp, #28
 800f376:	af00      	add	r7, sp, #0
 800f378:	60f8      	str	r0, [r7, #12]
 800f37a:	60b9      	str	r1, [r7, #8]
 800f37c:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	691a      	ldr	r2, [r3, #16]
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	441a      	add	r2, r3
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	1ad3      	subs	r3, r2, r3
 800f38a:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	691b      	ldr	r3, [r3, #16]
 800f390:	697a      	ldr	r2, [r7, #20]
 800f392:	429a      	cmp	r2, r3
 800f394:	d304      	bcc.n	800f3a0 <uxStreamBufferDistance+0x2e>
            uxCount -= pxBuffer->LENGTH;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	691b      	ldr	r3, [r3, #16]
 800f39a:	697a      	ldr	r2, [r7, #20]
 800f39c:	1ad3      	subs	r3, r2, r3
 800f39e:	617b      	str	r3, [r7, #20]
        return uxCount;
 800f3a0:	697b      	ldr	r3, [r7, #20]
    }
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	371c      	adds	r7, #28
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ac:	4770      	bx	lr

0800f3ae <uxStreamBufferGetSpace>:
    {
 800f3ae:	b580      	push	{r7, lr}
 800f3b0:	b084      	sub	sp, #16
 800f3b2:	af00      	add	r7, sp, #0
 800f3b4:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	689b      	ldr	r3, [r3, #8]
 800f3ba:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800f3c2:	68ba      	ldr	r2, [r7, #8]
 800f3c4:	68f9      	ldr	r1, [r7, #12]
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f7ff ffb4 	bl	800f334 <uxStreamBufferSpace>
 800f3cc:	4603      	mov	r3, r0
    }
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3710      	adds	r7, #16
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}

0800f3d6 <uxStreamBufferGetSize>:
    {
 800f3d6:	b580      	push	{r7, lr}
 800f3d8:	b084      	sub	sp, #16
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	689b      	ldr	r3, [r3, #8]
 800f3e2:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferDistance( pxBuffer, uxTail, uxHead );
 800f3ea:	68fa      	ldr	r2, [r7, #12]
 800f3ec:	68b9      	ldr	r1, [r7, #8]
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f7ff ffbf 	bl	800f372 <uxStreamBufferDistance>
 800f3f4:	4603      	mov	r3, r0
    }
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3710      	adds	r7, #16
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}

0800f3fe <xStreamBufferLessThenEqual>:
                                                             const size_t uxLeft,
                                                             const size_t uxRight );
    static portINLINE BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * pxBuffer,
                                                             const size_t uxLeft,
                                                             const size_t uxRight )
    {
 800f3fe:	b480      	push	{r7}
 800f400:	b087      	sub	sp, #28
 800f402:	af00      	add	r7, sp, #0
 800f404:	60f8      	str	r0, [r7, #12]
 800f406:	60b9      	str	r1, [r7, #8]
 800f408:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn;
        size_t uxTail = pxBuffer->uxTail;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	613b      	str	r3, [r7, #16]

        /* Returns true if ( uxLeft < uxRight ) */
        if( ( ( ( uxLeft < uxTail ) ? 1U : 0U ) ^ ( ( uxRight < uxTail ) ? 1U : 0U ) ) != 0U )
 800f410:	68ba      	ldr	r2, [r7, #8]
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	429a      	cmp	r2, r3
 800f416:	d201      	bcs.n	800f41c <xStreamBufferLessThenEqual+0x1e>
 800f418:	2201      	movs	r2, #1
 800f41a:	e000      	b.n	800f41e <xStreamBufferLessThenEqual+0x20>
 800f41c:	2200      	movs	r2, #0
 800f41e:	6879      	ldr	r1, [r7, #4]
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	4299      	cmp	r1, r3
 800f424:	d201      	bcs.n	800f42a <xStreamBufferLessThenEqual+0x2c>
 800f426:	2301      	movs	r3, #1
 800f428:	e000      	b.n	800f42c <xStreamBufferLessThenEqual+0x2e>
 800f42a:	2300      	movs	r3, #0
 800f42c:	429a      	cmp	r2, r3
 800f42e:	d009      	beq.n	800f444 <xStreamBufferLessThenEqual+0x46>
        {
            if( uxRight < uxTail )
 800f430:	687a      	ldr	r2, [r7, #4]
 800f432:	693b      	ldr	r3, [r7, #16]
 800f434:	429a      	cmp	r2, r3
 800f436:	d202      	bcs.n	800f43e <xStreamBufferLessThenEqual+0x40>
            {
                xReturn = pdTRUE;
 800f438:	2301      	movs	r3, #1
 800f43a:	617b      	str	r3, [r7, #20]
 800f43c:	e00b      	b.n	800f456 <xStreamBufferLessThenEqual+0x58>
            }
            else
            {
                xReturn = pdFALSE;
 800f43e:	2300      	movs	r3, #0
 800f440:	617b      	str	r3, [r7, #20]
 800f442:	e008      	b.n	800f456 <xStreamBufferLessThenEqual+0x58>
            }
        }
        else
        {
            if( uxLeft <= uxRight )
 800f444:	68ba      	ldr	r2, [r7, #8]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	429a      	cmp	r2, r3
 800f44a:	d802      	bhi.n	800f452 <xStreamBufferLessThenEqual+0x54>
            {
                xReturn = pdTRUE;
 800f44c:	2301      	movs	r3, #1
 800f44e:	617b      	str	r3, [r7, #20]
 800f450:	e001      	b.n	800f456 <xStreamBufferLessThenEqual+0x58>
            }
            else
            {
                xReturn = pdFALSE;
 800f452:	2300      	movs	r3, #0
 800f454:	617b      	str	r3, [r7, #20]
            }
        }

        return xReturn;
 800f456:	697b      	ldr	r3, [r7, #20]
    }
 800f458:	4618      	mov	r0, r3
 800f45a:	371c      	adds	r7, #28
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr

0800f464 <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * pxBuffer,
                          size_t uxOffset,
                          const uint8_t * pucData,
                          size_t uxByteCount )
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b088      	sub	sp, #32
 800f468:	af00      	add	r7, sp, #0
 800f46a:	60f8      	str	r0, [r7, #12]
 800f46c:	60b9      	str	r1, [r7, #8]
 800f46e:	607a      	str	r2, [r7, #4]
 800f470:	603b      	str	r3, [r7, #0]
    size_t uxSpace, uxNextHead, uxFirst;
    size_t uxCount = uxByteCount;
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	617b      	str	r3, [r7, #20]

    uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800f476:	68f8      	ldr	r0, [r7, #12]
 800f478:	f7ff ff99 	bl	800f3ae <uxStreamBufferGetSpace>
 800f47c:	61f8      	str	r0, [r7, #28]

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 800f47e:	69fa      	ldr	r2, [r7, #28]
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	429a      	cmp	r2, r3
 800f484:	d904      	bls.n	800f490 <uxStreamBufferAdd+0x2c>
    {
        uxSpace -= uxOffset;
 800f486:	69fa      	ldr	r2, [r7, #28]
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	1ad3      	subs	r3, r2, r3
 800f48c:	61fb      	str	r3, [r7, #28]
 800f48e:	e001      	b.n	800f494 <uxStreamBufferAdd+0x30>
    }
    else
    {
        uxSpace = 0U;
 800f490:	2300      	movs	r3, #0
 800f492:	61fb      	str	r3, [r7, #28]
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_uint32( uxSpace, uxCount );
 800f494:	6979      	ldr	r1, [r7, #20]
 800f496:	69f8      	ldr	r0, [r7, #28]
 800f498:	f7ff ff3c 	bl	800f314 <FreeRTOS_min_uint32>
 800f49c:	6178      	str	r0, [r7, #20]

    if( uxCount != 0U )
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d05a      	beq.n	800f55a <uxStreamBufferAdd+0xf6>
    {
        uxNextHead = pxBuffer->uxHead;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	689b      	ldr	r3, [r3, #8]
 800f4a8:	61bb      	str	r3, [r7, #24]

        if( uxOffset != 0U )
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d00d      	beq.n	800f4cc <uxStreamBufferAdd+0x68>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 800f4b0:	69ba      	ldr	r2, [r7, #24]
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	4413      	add	r3, r2
 800f4b6:	61bb      	str	r3, [r7, #24]

            if( uxNextHead >= pxBuffer->LENGTH )
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	691b      	ldr	r3, [r3, #16]
 800f4bc:	69ba      	ldr	r2, [r7, #24]
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	d304      	bcc.n	800f4cc <uxStreamBufferAdd+0x68>
            {
                uxNextHead -= pxBuffer->LENGTH;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	691b      	ldr	r3, [r3, #16]
 800f4c6:	69ba      	ldr	r2, [r7, #24]
 800f4c8:	1ad3      	subs	r3, r2, r3
 800f4ca:	61bb      	str	r3, [r7, #24]
            }
        }

        if( pucData != NULL )
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d022      	beq.n	800f518 <uxStreamBufferAdd+0xb4>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextHead, uxCount );
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	691a      	ldr	r2, [r3, #16]
 800f4d6:	69bb      	ldr	r3, [r7, #24]
 800f4d8:	1ad3      	subs	r3, r2, r3
 800f4da:	6979      	ldr	r1, [r7, #20]
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f7ff ff19 	bl	800f314 <FreeRTOS_min_uint32>
 800f4e2:	6138      	str	r0, [r7, #16]

            /* Write as many bytes as can be written in the first write. */
            ( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 800f4e4:	69bb      	ldr	r3, [r7, #24]
 800f4e6:	3310      	adds	r3, #16
 800f4e8:	68fa      	ldr	r2, [r7, #12]
 800f4ea:	4413      	add	r3, r2
 800f4ec:	3304      	adds	r3, #4
 800f4ee:	693a      	ldr	r2, [r7, #16]
 800f4f0:	6879      	ldr	r1, [r7, #4]
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f006 fc25 	bl	8015d42 <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 800f4f8:	697a      	ldr	r2, [r7, #20]
 800f4fa:	693b      	ldr	r3, [r7, #16]
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d90b      	bls.n	800f518 <uxStreamBufferAdd+0xb4>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	f103 0014 	add.w	r0, r3, #20
 800f506:	687a      	ldr	r2, [r7, #4]
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	18d1      	adds	r1, r2, r3
 800f50c:	697a      	ldr	r2, [r7, #20]
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	1ad3      	subs	r3, r2, r3
 800f512:	461a      	mov	r2, r3
 800f514:	f006 fc15 	bl	8015d42 <memcpy>
            }
        }

        if( uxOffset == 0U )
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d110      	bne.n	800f540 <uxStreamBufferAdd+0xdc>
        {
            /* ( uxOffset == 0 ) means: write at uxHead position */
            uxNextHead += uxCount;
 800f51e:	69ba      	ldr	r2, [r7, #24]
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	4413      	add	r3, r2
 800f524:	61bb      	str	r3, [r7, #24]

            if( uxNextHead >= pxBuffer->LENGTH )
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	691b      	ldr	r3, [r3, #16]
 800f52a:	69ba      	ldr	r2, [r7, #24]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d304      	bcc.n	800f53a <uxStreamBufferAdd+0xd6>
            {
                uxNextHead -= pxBuffer->LENGTH;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	691b      	ldr	r3, [r3, #16]
 800f534:	69ba      	ldr	r2, [r7, #24]
 800f536:	1ad3      	subs	r3, r2, r3
 800f538:	61bb      	str	r3, [r7, #24]
            }

            pxBuffer->uxHead = uxNextHead;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	69ba      	ldr	r2, [r7, #24]
 800f53e:	609a      	str	r2, [r3, #8]
        }

        if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	68db      	ldr	r3, [r3, #12]
 800f544:	69ba      	ldr	r2, [r7, #24]
 800f546:	4619      	mov	r1, r3
 800f548:	68f8      	ldr	r0, [r7, #12]
 800f54a:	f7ff ff58 	bl	800f3fe <xStreamBufferLessThenEqual>
 800f54e:	4603      	mov	r3, r0
 800f550:	2b00      	cmp	r3, #0
 800f552:	d002      	beq.n	800f55a <uxStreamBufferAdd+0xf6>
        {
            /* Advance the front pointer */
            pxBuffer->uxFront = uxNextHead;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	69ba      	ldr	r2, [r7, #24]
 800f558:	60da      	str	r2, [r3, #12]
        }
    }

    return uxCount;
 800f55a:	697b      	ldr	r3, [r7, #20]
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	3720      	adds	r7, #32
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}

0800f564 <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * pxBuffer,
                          size_t uxOffset,
                          uint8_t * pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b088      	sub	sp, #32
 800f568:	af00      	add	r7, sp, #0
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	60b9      	str	r1, [r7, #8]
 800f56e:	607a      	str	r2, [r7, #4]
 800f570:	603b      	str	r3, [r7, #0]
    size_t uxSize, uxCount, uxFirst, uxNextTail;

    /* How much data is available? */
    uxSize = uxStreamBufferGetSize( pxBuffer );
 800f572:	68f8      	ldr	r0, [r7, #12]
 800f574:	f7ff ff2f 	bl	800f3d6 <uxStreamBufferGetSize>
 800f578:	61f8      	str	r0, [r7, #28]

    if( uxSize > uxOffset )
 800f57a:	69fa      	ldr	r2, [r7, #28]
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	429a      	cmp	r2, r3
 800f580:	d904      	bls.n	800f58c <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 800f582:	69fa      	ldr	r2, [r7, #28]
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	1ad3      	subs	r3, r2, r3
 800f588:	61fb      	str	r3, [r7, #28]
 800f58a:	e001      	b.n	800f590 <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 800f58c:	2300      	movs	r3, #0
 800f58e:	61fb      	str	r3, [r7, #28]
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_uint32( uxSize, uxMaxCount );
 800f590:	6839      	ldr	r1, [r7, #0]
 800f592:	69f8      	ldr	r0, [r7, #28]
 800f594:	f7ff febe 	bl	800f314 <FreeRTOS_min_uint32>
 800f598:	6178      	str	r0, [r7, #20]

    if( uxCount > 0U )
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d050      	beq.n	800f642 <uxStreamBufferGet+0xde>
    {
        uxNextTail = pxBuffer->uxTail;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	61bb      	str	r3, [r7, #24]

        if( uxOffset != 0U )
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d00d      	beq.n	800f5c8 <uxStreamBufferGet+0x64>
        {
            uxNextTail += uxOffset;
 800f5ac:	69ba      	ldr	r2, [r7, #24]
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	4413      	add	r3, r2
 800f5b2:	61bb      	str	r3, [r7, #24]

            if( uxNextTail >= pxBuffer->LENGTH )
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	691b      	ldr	r3, [r3, #16]
 800f5b8:	69ba      	ldr	r2, [r7, #24]
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d304      	bcc.n	800f5c8 <uxStreamBufferGet+0x64>
            {
                uxNextTail -= pxBuffer->LENGTH;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	691b      	ldr	r3, [r3, #16]
 800f5c2:	69ba      	ldr	r2, [r7, #24]
 800f5c4:	1ad3      	subs	r3, r2, r3
 800f5c6:	61bb      	str	r3, [r7, #24]
            }
        }

        if( pucData != NULL )
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d022      	beq.n	800f614 <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            uxFirst = FreeRTOS_min_uint32( pxBuffer->LENGTH - uxNextTail, uxCount );
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	691a      	ldr	r2, [r3, #16]
 800f5d2:	69bb      	ldr	r3, [r7, #24]
 800f5d4:	1ad3      	subs	r3, r2, r3
 800f5d6:	6979      	ldr	r1, [r7, #20]
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f7ff fe9b 	bl	800f314 <FreeRTOS_min_uint32>
 800f5de:	6138      	str	r0, [r7, #16]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 800f5e0:	69bb      	ldr	r3, [r7, #24]
 800f5e2:	3310      	adds	r3, #16
 800f5e4:	68fa      	ldr	r2, [r7, #12]
 800f5e6:	4413      	add	r3, r2
 800f5e8:	3304      	adds	r3, #4
 800f5ea:	693a      	ldr	r2, [r7, #16]
 800f5ec:	4619      	mov	r1, r3
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f006 fba7 	bl	8015d42 <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 800f5f4:	697a      	ldr	r2, [r7, #20]
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	d90b      	bls.n	800f614 <uxStreamBufferGet+0xb0>
            {
                /*...then read the remaining bytes from the start of the buffer. */
                ( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 800f5fc:	687a      	ldr	r2, [r7, #4]
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	18d0      	adds	r0, r2, r3
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	f103 0114 	add.w	r1, r3, #20
 800f608:	697a      	ldr	r2, [r7, #20]
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	1ad3      	subs	r3, r2, r3
 800f60e:	461a      	mov	r2, r3
 800f610:	f006 fb97 	bl	8015d42 <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0UL ) )
 800f614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f616:	2b00      	cmp	r3, #0
 800f618:	d113      	bne.n	800f642 <uxStreamBufferGet+0xde>
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d110      	bne.n	800f642 <uxStreamBufferGet+0xde>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 800f620:	69ba      	ldr	r2, [r7, #24]
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	4413      	add	r3, r2
 800f626:	61bb      	str	r3, [r7, #24]

            if( uxNextTail >= pxBuffer->LENGTH )
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	691b      	ldr	r3, [r3, #16]
 800f62c:	69ba      	ldr	r2, [r7, #24]
 800f62e:	429a      	cmp	r2, r3
 800f630:	d304      	bcc.n	800f63c <uxStreamBufferGet+0xd8>
            {
                uxNextTail -= pxBuffer->LENGTH;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	691b      	ldr	r3, [r3, #16]
 800f636:	69ba      	ldr	r2, [r7, #24]
 800f638:	1ad3      	subs	r3, r2, r3
 800f63a:	61bb      	str	r3, [r7, #24]
            }

            pxBuffer->uxTail = uxNextTail;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	69ba      	ldr	r2, [r7, #24]
 800f640:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 800f642:	697b      	ldr	r3, [r7, #20]
}
 800f644:	4618      	mov	r0, r3
 800f646:	3720      	adds	r7, #32
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}

0800f64c <FreeRTOS_min_int32>:
        {
 800f64c:	b480      	push	{r7}
 800f64e:	b083      	sub	sp, #12
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
 800f654:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800f656:	687a      	ldr	r2, [r7, #4]
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	4293      	cmp	r3, r2
 800f65c:	bfa8      	it	ge
 800f65e:	4613      	movge	r3, r2
        }
 800f660:	4618      	mov	r0, r3
 800f662:	370c      	adds	r7, #12
 800f664:	46bd      	mov	sp, r7
 800f666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66a:	4770      	bx	lr

0800f66c <FreeRTOS_min_uint32>:
        {
 800f66c:	b480      	push	{r7}
 800f66e:	b083      	sub	sp, #12
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 800f676:	687a      	ldr	r2, [r7, #4]
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	4293      	cmp	r3, r2
 800f67c:	bf28      	it	cs
 800f67e:	4613      	movcs	r3, r2
        }
 800f680:	4618      	mov	r0, r3
 800f682:	370c      	adds	r7, #12
 800f684:	46bd      	mov	sp, r7
 800f686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68a:	4770      	bx	lr

0800f68c <uxStreamBufferSpace>:
    {
 800f68c:	b480      	push	{r7}
 800f68e:	b087      	sub	sp, #28
 800f690:	af00      	add	r7, sp, #0
 800f692:	60f8      	str	r0, [r7, #12]
 800f694:	60b9      	str	r1, [r7, #8]
 800f696:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower - 1U;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	691a      	ldr	r2, [r3, #16]
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	441a      	add	r2, r3
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	1ad3      	subs	r3, r2, r3
 800f6a4:	3b01      	subs	r3, #1
 800f6a6:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	691b      	ldr	r3, [r3, #16]
 800f6ac:	697a      	ldr	r2, [r7, #20]
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d304      	bcc.n	800f6bc <uxStreamBufferSpace+0x30>
            uxCount -= pxBuffer->LENGTH;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	691b      	ldr	r3, [r3, #16]
 800f6b6:	697a      	ldr	r2, [r7, #20]
 800f6b8:	1ad3      	subs	r3, r2, r3
 800f6ba:	617b      	str	r3, [r7, #20]
        return uxCount;
 800f6bc:	697b      	ldr	r3, [r7, #20]
    }
 800f6be:	4618      	mov	r0, r3
 800f6c0:	371c      	adds	r7, #28
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c8:	4770      	bx	lr

0800f6ca <uxStreamBufferDistance>:
    {
 800f6ca:	b480      	push	{r7}
 800f6cc:	b087      	sub	sp, #28
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	60f8      	str	r0, [r7, #12]
 800f6d2:	60b9      	str	r1, [r7, #8]
 800f6d4:	607a      	str	r2, [r7, #4]
        uxCount = pxBuffer->LENGTH + uxUpper - uxLower;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	691a      	ldr	r2, [r3, #16]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	441a      	add	r2, r3
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	1ad3      	subs	r3, r2, r3
 800f6e2:	617b      	str	r3, [r7, #20]
        if( uxCount >= pxBuffer->LENGTH )
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	691b      	ldr	r3, [r3, #16]
 800f6e8:	697a      	ldr	r2, [r7, #20]
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d304      	bcc.n	800f6f8 <uxStreamBufferDistance+0x2e>
            uxCount -= pxBuffer->LENGTH;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	691b      	ldr	r3, [r3, #16]
 800f6f2:	697a      	ldr	r2, [r7, #20]
 800f6f4:	1ad3      	subs	r3, r2, r3
 800f6f6:	617b      	str	r3, [r7, #20]
        return uxCount;
 800f6f8:	697b      	ldr	r3, [r7, #20]
    }
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	371c      	adds	r7, #28
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr

0800f706 <uxStreamBufferGetSpace>:
    {
 800f706:	b580      	push	{r7, lr}
 800f708:	b084      	sub	sp, #16
 800f70a:	af00      	add	r7, sp, #0
 800f70c:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	689b      	ldr	r3, [r3, #8]
 800f712:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferSpace( pxBuffer, uxHead, uxTail );
 800f71a:	68ba      	ldr	r2, [r7, #8]
 800f71c:	68f9      	ldr	r1, [r7, #12]
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f7ff ffb4 	bl	800f68c <uxStreamBufferSpace>
 800f724:	4603      	mov	r3, r0
    }
 800f726:	4618      	mov	r0, r3
 800f728:	3710      	adds	r7, #16
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}

0800f72e <uxStreamBufferFrontSpace>:
    {
 800f72e:	b580      	push	{r7, lr}
 800f730:	b084      	sub	sp, #16
 800f732:	af00      	add	r7, sp, #0
 800f734:	6078      	str	r0, [r7, #4]
        size_t uxFront = pxBuffer->uxFront;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	68db      	ldr	r3, [r3, #12]
 800f73a:	60fb      	str	r3, [r7, #12]
        size_t uxTail = pxBuffer->uxTail;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferSpace( pxBuffer, uxFront, uxTail );
 800f742:	68ba      	ldr	r2, [r7, #8]
 800f744:	68f9      	ldr	r1, [r7, #12]
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f7ff ffa0 	bl	800f68c <uxStreamBufferSpace>
 800f74c:	4603      	mov	r3, r0
    }
 800f74e:	4618      	mov	r0, r3
 800f750:	3710      	adds	r7, #16
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}

0800f756 <uxStreamBufferMidSpace>:
    {
 800f756:	b580      	push	{r7, lr}
 800f758:	b084      	sub	sp, #16
 800f75a:	af00      	add	r7, sp, #0
 800f75c:	6078      	str	r0, [r7, #4]
        size_t uxHead = pxBuffer->uxHead;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	689b      	ldr	r3, [r3, #8]
 800f762:	60fb      	str	r3, [r7, #12]
        size_t uxMid = pxBuffer->uxMid;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	60bb      	str	r3, [r7, #8]
        return uxStreamBufferDistance( pxBuffer, uxMid, uxHead );
 800f76a:	68fa      	ldr	r2, [r7, #12]
 800f76c:	68b9      	ldr	r1, [r7, #8]
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f7ff ffab 	bl	800f6ca <uxStreamBufferDistance>
 800f774:	4603      	mov	r3, r0
    }
 800f776:	4618      	mov	r0, r3
 800f778:	3710      	adds	r7, #16
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}

0800f77e <vStreamBufferMoveMid>:
    {
 800f77e:	b580      	push	{r7, lr}
 800f780:	b084      	sub	sp, #16
 800f782:	af00      	add	r7, sp, #0
 800f784:	6078      	str	r0, [r7, #4]
 800f786:	6039      	str	r1, [r7, #0]
        size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f7ff ffe4 	bl	800f756 <uxStreamBufferMidSpace>
 800f78e:	60b8      	str	r0, [r7, #8]
        size_t uxMoveCount = uxCount;
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	60fb      	str	r3, [r7, #12]
        if( uxMoveCount > uxSize )
 800f794:	68fa      	ldr	r2, [r7, #12]
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	429a      	cmp	r2, r3
 800f79a:	d901      	bls.n	800f7a0 <vStreamBufferMoveMid+0x22>
            uxMoveCount = uxSize;
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	60fb      	str	r3, [r7, #12]
        pxBuffer->uxMid += uxMoveCount;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	685a      	ldr	r2, [r3, #4]
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	441a      	add	r2, r3
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	605a      	str	r2, [r3, #4]
        if( pxBuffer->uxMid >= pxBuffer->LENGTH )
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	685a      	ldr	r2, [r3, #4]
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	691b      	ldr	r3, [r3, #16]
 800f7b4:	429a      	cmp	r2, r3
 800f7b6:	d306      	bcc.n	800f7c6 <vStreamBufferMoveMid+0x48>
            pxBuffer->uxMid -= pxBuffer->LENGTH;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	685a      	ldr	r2, [r3, #4]
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	691b      	ldr	r3, [r3, #16]
 800f7c0:	1ad2      	subs	r2, r2, r3
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	605a      	str	r2, [r3, #4]
    }
 800f7c6:	bf00      	nop
 800f7c8:	3710      	adds	r7, #16
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}

0800f7ce <vCastConstPointerTo_IPHeader_t>:
    {
 800f7ce:	b480      	push	{r7}
 800f7d0:	b083      	sub	sp, #12
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	6078      	str	r0, [r7, #4]
        return ( const IPHeader_t * ) pvArgument;
 800f7d6:	687b      	ldr	r3, [r7, #4]
    }
 800f7d8:	4618      	mov	r0, r3
 800f7da:	370c      	adds	r7, #12
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e2:	4770      	bx	lr

0800f7e4 <vCastPointerTo_TCPPacket_t>:
    {
 800f7e4:	b480      	push	{r7}
 800f7e6:	b083      	sub	sp, #12
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
        return ( TCPPacket_t * ) pvArgument;
 800f7ec:	687b      	ldr	r3, [r7, #4]
    }
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	370c      	adds	r7, #12
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f8:	4770      	bx	lr

0800f7fa <vCastConstPointerTo_TCPPacket_t>:
    {
 800f7fa:	b480      	push	{r7}
 800f7fc:	b083      	sub	sp, #12
 800f7fe:	af00      	add	r7, sp, #0
 800f800:	6078      	str	r0, [r7, #4]
        return ( const TCPPacket_t * ) pvArgument;
 800f802:	687b      	ldr	r3, [r7, #4]
    }
 800f804:	4618      	mov	r0, r3
 800f806:	370c      	adds	r7, #12
 800f808:	46bd      	mov	sp, r7
 800f80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80e:	4770      	bx	lr

0800f810 <vCastPointerTo_ProtocolHeaders_t>:
    {
 800f810:	b480      	push	{r7}
 800f812:	b083      	sub	sp, #12
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
        return ( ProtocolHeaders_t * ) pvArgument;
 800f818:	687b      	ldr	r3, [r7, #4]
    }
 800f81a:	4618      	mov	r0, r3
 800f81c:	370c      	adds	r7, #12
 800f81e:	46bd      	mov	sp, r7
 800f820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f824:	4770      	bx	lr

0800f826 <vCastConstPointerTo_ProtocolHeaders_t>:
    {
 800f826:	b480      	push	{r7}
 800f828:	b083      	sub	sp, #12
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
        return ( const ProtocolHeaders_t * ) pvArgument;
 800f82e:	687b      	ldr	r3, [r7, #4]
    }
 800f830:	4618      	mov	r0, r3
 800f832:	370c      	adds	r7, #12
 800f834:	46bd      	mov	sp, r7
 800f836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83a:	4770      	bx	lr

0800f83c <vCastPointerTo_FreeRTOS_Socket_t>:
    {
 800f83c:	b480      	push	{r7}
 800f83e:	b083      	sub	sp, #12
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
        return ( FreeRTOS_Socket_t * ) pvArgument;
 800f844:	687b      	ldr	r3, [r7, #4]
    }
 800f846:	4618      	mov	r0, r3
 800f848:	370c      	adds	r7, #12
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr

0800f852 <ulChar2u32>:
    {
 800f852:	b480      	push	{r7}
 800f854:	b083      	sub	sp, #12
 800f856:	af00      	add	r7, sp, #0
 800f858:	6078      	str	r0, [r7, #4]
        return ( ( ( uint32_t ) apChr[ 0 ] ) << 24 ) |
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	781b      	ldrb	r3, [r3, #0]
 800f85e:	061a      	lsls	r2, r3, #24
               ( ( ( uint32_t ) apChr[ 1 ] ) << 16 ) |
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	3301      	adds	r3, #1
 800f864:	781b      	ldrb	r3, [r3, #0]
 800f866:	041b      	lsls	r3, r3, #16
        return ( ( ( uint32_t ) apChr[ 0 ] ) << 24 ) |
 800f868:	431a      	orrs	r2, r3
               ( ( ( uint32_t ) apChr[ 2 ] ) << 8 ) |
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	3302      	adds	r3, #2
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	021b      	lsls	r3, r3, #8
               ( ( ( uint32_t ) apChr[ 1 ] ) << 16 ) |
 800f872:	4313      	orrs	r3, r2
               ( ( ( uint32_t ) apChr[ 3 ] ) );
 800f874:	687a      	ldr	r2, [r7, #4]
 800f876:	3203      	adds	r2, #3
 800f878:	7812      	ldrb	r2, [r2, #0]
               ( ( ( uint32_t ) apChr[ 2 ] ) << 8 ) |
 800f87a:	4313      	orrs	r3, r2
    }
 800f87c:	4618      	mov	r0, r3
 800f87e:	370c      	adds	r7, #12
 800f880:	46bd      	mov	sp, r7
 800f882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f886:	4770      	bx	lr

0800f888 <usChar2u16>:
    {
 800f888:	b480      	push	{r7}
 800f88a:	b083      	sub	sp, #12
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
               ( ( ( ( uint32_t ) apChr[ 0 ] ) << 8 ) |
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	021b      	lsls	r3, r3, #8
 800f896:	b29b      	uxth	r3, r3
                 ( ( ( uint32_t ) apChr[ 1 ] ) ) );
 800f898:	687a      	ldr	r2, [r7, #4]
 800f89a:	3201      	adds	r2, #1
 800f89c:	7812      	ldrb	r2, [r2, #0]
        return ( uint16_t )
 800f89e:	4313      	orrs	r3, r2
 800f8a0:	b29b      	uxth	r3, r3
    }
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	370c      	adds	r7, #12
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ac:	4770      	bx	lr

0800f8ae <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    static BaseType_t prvTCPSocketIsActive( eIPTCPState_t xStatus )
    {
 800f8ae:	b480      	push	{r7}
 800f8b0:	b085      	sub	sp, #20
 800f8b2:	af00      	add	r7, sp, #0
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( xStatus )
 800f8b8:	79fb      	ldrb	r3, [r7, #7]
 800f8ba:	2b0b      	cmp	r3, #11
 800f8bc:	bf8c      	ite	hi
 800f8be:	2201      	movhi	r2, #1
 800f8c0:	2200      	movls	r2, #0
 800f8c2:	b2d2      	uxtb	r2, r2
 800f8c4:	2a00      	cmp	r2, #0
 800f8c6:	d10f      	bne.n	800f8e8 <prvTCPSocketIsActive+0x3a>
 800f8c8:	f640 3281 	movw	r2, #2945	@ 0xb81
 800f8cc:	fa22 f303 	lsr.w	r3, r2, r3
 800f8d0:	f003 0301 	and.w	r3, r3, #1
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	bf14      	ite	ne
 800f8d8:	2301      	movne	r3, #1
 800f8da:	2300      	moveq	r3, #0
 800f8dc:	b2db      	uxtb	r3, r3
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d002      	beq.n	800f8e8 <prvTCPSocketIsActive+0x3a>
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	60fb      	str	r3, [r7, #12]
                break;
 800f8e6:	e002      	b.n	800f8ee <prvTCPSocketIsActive+0x40>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	60fb      	str	r3, [r7, #12]
                break;
 800f8ec:	bf00      	nop
        }

        return xResult;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
    }
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3714      	adds	r7, #20
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr

0800f8fc <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        static BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b086      	sub	sp, #24
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;
            eIPTCPState_t eState = ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState );
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800f90a:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 800f90c:	7cfb      	ldrb	r3, [r7, #19]
 800f90e:	2b08      	cmp	r3, #8
 800f910:	d00b      	beq.n	800f92a <prvTCPStatusAgeCheck+0x2e>
 800f912:	2b08      	cmp	r3, #8
 800f914:	dc0c      	bgt.n	800f930 <prvTCPStatusAgeCheck+0x34>
 800f916:	2b01      	cmp	r3, #1
 800f918:	dc02      	bgt.n	800f920 <prvTCPStatusAgeCheck+0x24>
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	da05      	bge.n	800f92a <prvTCPStatusAgeCheck+0x2e>
 800f91e:	e007      	b.n	800f930 <prvTCPStatusAgeCheck+0x34>
 800f920:	2b05      	cmp	r3, #5
 800f922:	d105      	bne.n	800f930 <prvTCPStatusAgeCheck+0x34>
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 800f924:	2300      	movs	r3, #0
 800f926:	617b      	str	r3, [r7, #20]
                    break;
 800f928:	e005      	b.n	800f936 <prvTCPStatusAgeCheck+0x3a>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 800f92a:	2300      	movs	r3, #0
 800f92c:	617b      	str	r3, [r7, #20]
                    break;
 800f92e:	e002      	b.n	800f936 <prvTCPStatusAgeCheck+0x3a>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 800f930:	2301      	movs	r3, #1
 800f932:	617b      	str	r3, [r7, #20]
                    break;
 800f934:	bf00      	nop
            }

            if( xResult != pdFALSE )
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d01a      	beq.n	800f972 <prvTCPStatusAgeCheck+0x76>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 800f93c:	f7f9 ff54 	bl	80097e8 <xTaskGetTickCount>
 800f940:	4602      	mov	r2, r0
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f946:	1ad3      	subs	r3, r2, r3
 800f948:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	f247 5230 	movw	r2, #30000	@ 0x7530
 800f950:	4293      	cmp	r3, r2
 800f952:	d90e      	bls.n	800f972 <prvTCPStatusAgeCheck+0x76>
                                                     FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.ucTCPState ) ) );
                        }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800f954:	2108      	movs	r1, #8
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f000 fdf5 	bl	8010546 <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f962:	f003 0304 	and.w	r3, r3, #4
 800f966:	b2db      	uxtb	r3, r3
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d002      	beq.n	800f972 <prvTCPStatusAgeCheck+0x76>
                    {
                        /* vTCPStateChange() has called FreeRTOS_closesocket()
                         * in case the socket is not yet owned by the application.
                         * Return a negative value to inform the caller that
                         * the socket will be closed in the next cycle. */
                        xResult = -1;
 800f96c:	f04f 33ff 	mov.w	r3, #4294967295
 800f970:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 800f972:	697b      	ldr	r3, [r7, #20]
        }
 800f974:	4618      	mov	r0, r3
 800f976:	3718      	adds	r7, #24
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}

0800f97c <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 800f984:	2300      	movs	r3, #0
 800f986:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 800f988:	2300      	movs	r3, #0
 800f98a:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800f992:	2b04      	cmp	r3, #4
 800f994:	d906      	bls.n	800f9a4 <xTCPSocketCheck+0x28>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d002      	beq.n	800f9a4 <xTCPSocketCheck+0x28>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f001 f910 	bl	8010bc4 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d02a      	beq.n	800fa02 <xTCPSocketCheck+0x86>
                {
                    /* The first task of this regular socket check is to send-out delayed
                     * ACK's. */
                    if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f9b2:	f003 0320 	and.w	r3, r3, #32
 800f9b6:	b2db      	uxtb	r3, r3
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d116      	bne.n	800f9ea <xTCPSocketCheck+0x6e>
                    {
                        /* Earlier data was received but not yet acknowledged.  This
                         * function is called when the TCP timer for the socket expires, the
                         * ACK may be sent now. */
                        if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCLOSED )
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d009      	beq.n	800f9da <xTCPSocketCheck+0x5e>
                        {
                            if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800f9c6:	4b1d      	ldr	r3, [pc, #116]	@ (800fa3c <xTCPSocketCheck+0xc0>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2b01      	cmp	r3, #1
                                                         pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber,
                                                         pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber,
                                                         ( unsigned ) ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ) );
                            }

                            prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER, ipconfigZERO_COPY_TX_DRIVER );
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	2228      	movs	r2, #40	@ 0x28
 800f9d4:	6878      	ldr	r0, [r7, #4]
 800f9d6:	f000 f8c9 	bl	800fb6c <prvTCPReturnPacket>
                                    pxSocket->u.xTCP.pxAckMessage = NULL;
                                }
                            #endif /* ipconfigZERO_COPY_TX_DRIVER */
                        }

                        if( prvTCPNextTimeout( pxSocket ) > 1U )
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f001 f872 	bl	8010ac4 <prvTCPNextTimeout>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	2b01      	cmp	r3, #1
 800f9e4:	d901      	bls.n	800f9ea <xTCPSocketCheck+0x6e>
                        {
                            /* Tell the code below that this function is ready. */
                            xReady = pdTRUE;
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	60bb      	str	r3, [r7, #8]
                        /* The user wants to perform an active shutdown(), skip sending
                         * the delayed ACK.  The function prvTCPSendPacket() will send the
                         * FIN along with the ACK's. */
                    }

                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d007      	beq.n	800fa02 <xTCPSocketCheck+0x86>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f004 fd1a 	bl	8014430 <vReleaseNetworkBufferAndDescriptor>
                        pxSocket->u.xTCP.pxAckMessage = NULL;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	67da      	str	r2, [r3, #124]	@ 0x7c
                    }
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d113      	bne.n	800fa30 <xTCPSocketCheck+0xb4>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) ||
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800fa0e:	2b04      	cmp	r3, #4
 800fa10:	d804      	bhi.n	800fa1c <xTCPSocketCheck+0xa0>
                ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN ) )
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
            if( ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) ||
 800fa18:	2b02      	cmp	r3, #2
 800fa1a:	d102      	bne.n	800fa22 <xTCPSocketCheck+0xa6>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f000 f80f 	bl	800fa40 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 800fa22:	6878      	ldr	r0, [r7, #4]
 800fa24:	f001 f84e 	bl	8010ac4 <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
                {
                    /* In all (non-connected) states in which keep-alive messages can not be sent
                     * the anti-hang protocol will close sockets that are 'hanging'. */
                    xResult = prvTCPStatusAgeCheck( pxSocket );
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f7ff ff67 	bl	800f8fc <prvTCPStatusAgeCheck>
 800fa2e:	60f8      	str	r0, [r7, #12]
                }
            #endif
        }

        return xResult;
 800fa30:	68fb      	ldr	r3, [r7, #12]
    }
 800fa32:	4618      	mov	r0, r3
 800fa34:	3710      	adds	r7, #16
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}
 800fa3a:	bf00      	nop
 800fa3c:	2000a3c8 	.word	0x2000a3c8

0800fa40 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    static int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b088      	sub	sp, #32
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.ucTCPState != ( uint8_t ) eCONNECT_SYN )
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800fa56:	2b02      	cmp	r3, #2
 800fa58:	d010      	beq.n	800fa7c <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	60bb      	str	r3, [r7, #8]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 800fa5e:	f107 0308 	add.w	r3, r7, #8
 800fa62:	4619      	mov	r1, r3
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f000 f853 	bl	800fb10 <prvTCPSendRepeated>
 800fa6a:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d049      	beq.n	800fb06 <prvTCPSendPacket+0xc6>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	4618      	mov	r0, r3
 800fa76:	f004 fcdb 	bl	8014430 <vReleaseNetworkBufferAndDescriptor>
 800fa7a:	e044      	b.n	800fb06 <prvTCPSendPacket+0xc6>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800fa82:	2b02      	cmp	r3, #2
 800fa84:	d904      	bls.n	800fa90 <prvTCPSendPacket+0x50>
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %lxip:%u\n",
                                         pxSocket->u.xTCP.ulRemoteIP,       /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) ); /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800fa86:	2108      	movs	r1, #8
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f000 fd5c 	bl	8010546 <vTCPStateChange>
 800fa8e:	e03a      	b.n	800fb06 <prvTCPSendPacket+0xc6>
            }
            else if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) || ( prvTCPPrepareConnect( pxSocket ) == pdTRUE ) )
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fa96:	f003 0308 	and.w	r3, r3, #8
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d105      	bne.n	800faac <prvTCPSendPacket+0x6c>
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f000 fa51 	bl	800ff48 <prvTCPPrepareConnect>
 800faa6:	4603      	mov	r3, r0
 800faa8:	2b01      	cmp	r3, #1
 800faaa:	d12c      	bne.n	800fb06 <prvTCPSendPacket+0xc6>
            {
                ProtocolHeaders_t * pxProtocolHeaders;
                const UBaseType_t uxHeaderSize = ipSIZE_OF_IPv4_HEADER;
 800faac:	2314      	movs	r3, #20
 800faae:	617b      	str	r3, [r7, #20]

                /* Or else, if the connection has been prepared, or can be prepared
                 * now, proceed to send the packet with the SYN flag.
                 * prvTCPPrepareConnect() prepares 'xPacket' and returns pdTRUE if
                 * the Ethernet address of the peer or the gateway is found. */
                pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxHeaderSize ] ) );
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	330e      	adds	r3, #14
 800fab4:	3380      	adds	r3, #128	@ 0x80
 800fab6:	687a      	ldr	r2, [r7, #4]
 800fab8:	4413      	add	r3, r2
 800faba:	3302      	adds	r3, #2
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7ff fea7 	bl	800f810 <vCastPointerTo_ProtocolHeaders_t>
 800fac2:	6138      	str	r0, [r7, #16]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	4619      	mov	r1, r3
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f000 fcc7 	bl	801045c <prvSetSynAckOptions>
 800face:	60f8      	str	r0, [r7, #12]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	3328      	adds	r3, #40	@ 0x28
 800fad4:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 800fad6:	69bb      	ldr	r3, [r7, #24]
 800fad8:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	b2db      	uxtb	r3, r3
 800fade:	3314      	adds	r3, #20
 800fae0:	b2db      	uxtb	r3, r3
 800fae2:	009b      	lsls	r3, r3, #2
 800fae4:	b2da      	uxtb	r2, r3
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800faf0:	3301      	adds	r3, #1
 800faf2:	b2da      	uxtb	r2, r3
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 800fafa:	69fa      	ldr	r2, [r7, #28]
 800fafc:	2300      	movs	r3, #0
 800fafe:	2100      	movs	r1, #0
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	f000 f833 	bl	800fb6c <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 800fb06:	69fb      	ldr	r3, [r7, #28]
    }
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3720      	adds	r7, #32
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    static int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                       NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b086      	sub	sp, #24
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 800fb1e:	2300      	movs	r3, #0
 800fb20:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800fb22:	2300      	movs	r3, #0
 800fb24:	617b      	str	r3, [r7, #20]
 800fb26:	e016      	b.n	800fb56 <prvTCPSendRepeated+0x46>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 800fb28:	68fa      	ldr	r2, [r7, #12]
 800fb2a:	6839      	ldr	r1, [r7, #0]
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f000 fe63 	bl	80107f8 <prvTCPPrepareSend>
 800fb32:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	dd11      	ble.n	800fb5e <prvTCPSendRepeated+0x4e>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	6819      	ldr	r1, [r3, #0]
 800fb3e:	68ba      	ldr	r2, [r7, #8]
 800fb40:	2300      	movs	r3, #0
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f000 f812 	bl	800fb6c <prvTCPReturnPacket>
                {
                    *ppxNetworkBuffer = NULL;
                }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 800fb48:	693a      	ldr	r2, [r7, #16]
 800fb4a:	68bb      	ldr	r3, [r7, #8]
 800fb4c:	4413      	add	r3, r2
 800fb4e:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 800fb50:	697b      	ldr	r3, [r7, #20]
 800fb52:	3301      	adds	r3, #1
 800fb54:	617b      	str	r3, [r7, #20]
 800fb56:	697b      	ldr	r3, [r7, #20]
 800fb58:	2b07      	cmp	r3, #7
 800fb5a:	d9e5      	bls.n	800fb28 <prvTCPSendRepeated+0x18>
 800fb5c:	e000      	b.n	800fb60 <prvTCPSendRepeated+0x50>
                break;
 800fb5e:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 800fb60:	693b      	ldr	r3, [r7, #16]
    }
 800fb62:	4618      	mov	r0, r3
 800fb64:	3718      	adds	r7, #24
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}
	...

0800fb6c <prvTCPReturnPacket>:
 */
    static void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                                    NetworkBufferDescriptor_t * pxDescriptor,
                                    uint32_t ulLen,
                                    BaseType_t xReleaseAfterSend )
    {
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b09e      	sub	sp, #120	@ 0x78
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	60f8      	str	r0, [r7, #12]
 800fb74:	60b9      	str	r1, [r7, #8]
 800fb76:	607a      	str	r2, [r7, #4]
 800fb78:	603b      	str	r3, [r7, #0]
        TCPPacket_t * pxTCPPacket;
        IPHeader_t * pxIPHeader;
        BaseType_t xDoRelease = xReleaseAfterSend;
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	677b      	str	r3, [r7, #116]	@ 0x74
        EthernetHeader_t * pxEthernetHeader;
        uint32_t ulFrontSpace, ulSpace, ulSourceAddress, ulWinSize;
        const TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	663b      	str	r3, [r7, #96]	@ 0x60
        void * pvCopyDest;


        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 800fb82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d10c      	bne.n	800fba2 <prvTCPReturnPacket+0x36>
        {
            pxNetworkBuffer = &xTempBuffer;
 800fb88:	f107 0314 	add.w	r3, r7, #20
 800fb8c:	663b      	str	r3, [r7, #96]	@ 0x60
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
                {
                    pxNetworkBuffer->pxNextBuffer = NULL;
                }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	f103 0282 	add.w	r2, r3, #130	@ 0x82
 800fb94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fb96:	619a      	str	r2, [r3, #24]
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800fb98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fb9a:	2248      	movs	r2, #72	@ 0x48
 800fb9c:	61da      	str	r2, [r3, #28]
            xDoRelease = pdFALSE;
 800fb9e:	2300      	movs	r3, #0
 800fba0:	677b      	str	r3, [r7, #116]	@ 0x74
                }
            }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL )
 800fba2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	f000 819f 	beq.w	800fee8 <prvTCPReturnPacket+0x37c>
        #endif
        {
            /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */
            pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 800fbaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fbac:	699b      	ldr	r3, [r3, #24]
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7ff fe18 	bl	800f7e4 <vCastPointerTo_TCPPacket_t>
 800fbb4:	65f8      	str	r0, [r7, #92]	@ 0x5c
            pxIPHeader = &pxTCPPacket->xIPHeader;
 800fbb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fbb8:	3310      	adds	r3, #16
 800fbba:	65bb      	str	r3, [r7, #88]	@ 0x58
            pxEthernetHeader = &pxTCPPacket->xEthernetHeader;
 800fbbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fbbe:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	f000 80e2 	beq.w	800fd8c <prvTCPReturnPacket+0x220>
            {
                /* Calculate the space in the RX buffer in order to advertise the
                 * size of this socket's reception window. */
                pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	33e0      	adds	r3, #224	@ 0xe0
 800fbcc:	64fb      	str	r3, [r7, #76]	@ 0x4c

                if( pxSocket->u.xTCP.rxStream != NULL )
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d006      	beq.n	800fbe4 <prvTCPReturnPacket+0x78>
                {
                    /* An RX stream was created already, see how much space is
                     * available. */
                    ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f7ff fda7 	bl	800f72e <uxStreamBufferFrontSpace>
 800fbe0:	6738      	str	r0, [r7, #112]	@ 0x70
 800fbe2:	e002      	b.n	800fbea <prvTCPReturnPacket+0x7e>
                }
                else
                {
                    /* No RX stream has been created, the full stream size is
                     * available. */
                    ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fbe8:	673b      	str	r3, [r7, #112]	@ 0x70
                }

                /* Take the minimum of the RX buffer space and the RX window size. */
                ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 800fbea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fbec:	685b      	ldr	r3, [r3, #4]
 800fbee:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7ff fd3b 	bl	800f66c <FreeRTOS_min_uint32>
 800fbf6:	66f8      	str	r0, [r7, #108]	@ 0x6c

                if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fbfe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fc02:	b2db      	uxtb	r3, r3
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d107      	bne.n	800fc18 <prvTCPReturnPacket+0xac>
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fc0e:	f003 0304 	and.w	r3, r3, #4
 800fc12:	b2db      	uxtb	r3, r3
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d001      	beq.n	800fc1c <prvTCPReturnPacket+0xb0>
                {
                    /* The low-water mark was reached, meaning there was little
                     * space left.  The socket will wait until the application has read
                     * or flushed the incoming data, and 'zero-window' will be
                     * advertised. */
                    ulSpace = 0U;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                }

                /* If possible, advertise an RX window size of at least 1 MSS, otherwise
                 * the peer might start 'zero window probing', i.e. sending small packets
                 * (1, 2, 4, 8... bytes). */
                if( ( ulSpace < pxSocket->u.xTCP.usCurMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usCurMSS ) )
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800fc22:	461a      	mov	r2, r3
 800fc24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d20a      	bcs.n	800fc40 <prvTCPReturnPacket+0xd4>
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800fc30:	461a      	mov	r2, r3
 800fc32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fc34:	4293      	cmp	r3, r2
 800fc36:	d303      	bcc.n	800fc40 <prvTCPReturnPacket+0xd4>
                {
                    ulSpace = pxSocket->u.xTCP.usCurMSS;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800fc3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
                }

                /* Avoid overflow of the 16-bit win field. */
                #if ( ipconfigUSE_TCP_WIN != 0 )
                    {
                        ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	f893 30d1 	ldrb.w	r3, [r3, #209]	@ 0xd1
 800fc46:	461a      	mov	r2, r3
 800fc48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fc4a:	40d3      	lsrs	r3, r2
 800fc4c:	667b      	str	r3, [r7, #100]	@ 0x64
                    {
                        ulWinSize = ulSpace;
                    }
                #endif

                if( ulWinSize > 0xfffcUL )
 800fc4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc50:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 800fc54:	4293      	cmp	r3, r2
 800fc56:	d902      	bls.n	800fc5e <prvTCPReturnPacket+0xf2>
                {
                    ulWinSize = 0xfffcUL;
 800fc58:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800fc5c:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                pxTCPPacket->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 800fc5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc60:	b29b      	uxth	r3, r3
 800fc62:	021b      	lsls	r3, r3, #8
 800fc64:	b21a      	sxth	r2, r3
 800fc66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fc68:	b29b      	uxth	r3, r3
 800fc6a:	0a1b      	lsrs	r3, r3, #8
 800fc6c:	b29b      	uxth	r3, r3
 800fc6e:	b21b      	sxth	r3, r3
 800fc70:	4313      	orrs	r3, r2
 800fc72:	b21b      	sxth	r3, r3
 800fc74:	b29a      	uxth	r2, r3
 800fc76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fc78:	865a      	strh	r2, [r3, #50]	@ 0x32

                /* The new window size has been advertised, switch off the flag. */
                pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 800fc7a:	68fa      	ldr	r2, [r7, #12]
 800fc7c:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 800fc80:	f36f 0300 	bfc	r3, #0, #1
 800fc84:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41

                /* Later on, when deciding to delay an ACK, a precise estimate is needed
                 * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
                 * highest sequence number minus 1 that the socket will accept. */
                pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 800fc88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc8a:	691a      	ldr	r2, [r3, #16]
 800fc8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fc8e:	441a      	add	r2, r3
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	645a      	str	r2, [r3, #68]	@ 0x44

                #if ( ipconfigTCP_KEEP_ALIVE == 1 )
                    if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc9a:	f003 0302 	and.w	r3, r3, #2
 800fc9e:	b2db      	uxtb	r3, r3
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d029      	beq.n	800fcf8 <prvTCPReturnPacket+0x18c>
                    {
                        /* Sending a keep-alive packet, send the current sequence number
                         * minus 1, which will be recognised as a keep-alive packet and
                         * responded to by acknowledging the last byte. */
                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 800fca4:	68fa      	ldr	r2, [r7, #12]
 800fca6:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 800fcaa:	f36f 0341 	bfc	r3, #1, #1
 800fcae:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
                        pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 800fcb2:	68fa      	ldr	r2, [r7, #12]
 800fcb4:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 800fcb8:	f043 0304 	orr.w	r3, r3, #4
 800fcbc:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41

                        pxTCPPacket->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1UL;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800fcc6:	1e5a      	subs	r2, r3, #1
 800fcc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fcca:	629a      	str	r2, [r3, #40]	@ 0x28
                        pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 800fccc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fcce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcd0:	061a      	lsls	r2, r3, #24
 800fcd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fcd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcd6:	021b      	lsls	r3, r3, #8
 800fcd8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800fcdc:	431a      	orrs	r2, r3
 800fcde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fce2:	0a1b      	lsrs	r3, r3, #8
 800fce4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fce8:	431a      	orrs	r2, r3
 800fcea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fcec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcee:	0e1b      	lsrs	r3, r3, #24
 800fcf0:	431a      	orrs	r2, r3
 800fcf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fcf4:	629a      	str	r2, [r3, #40]	@ 0x28
 800fcf6:	e033      	b.n	800fd60 <prvTCPReturnPacket+0x1f4>
                    }
                    else
                #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
                {
                    pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800fcfe:	061a      	lsls	r2, r3, #24
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800fd06:	021b      	lsls	r3, r3, #8
 800fd08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800fd0c:	431a      	orrs	r2, r3
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800fd14:	0a1b      	lsrs	r3, r3, #8
 800fd16:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fd1a:	431a      	orrs	r2, r3
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800fd22:	0e1b      	lsrs	r3, r3, #24
 800fd24:	431a      	orrs	r2, r3
 800fd26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd28:	629a      	str	r2, [r3, #40]	@ 0x28

                    if( ( pxTCPPacket->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 800fd2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd2c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800fd30:	f003 0301 	and.w	r3, r3, #1
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d013      	beq.n	800fd60 <prvTCPReturnPacket+0x1f4>
                    {
                        /* Suppress FIN in case this packet carries earlier data to be
                         * retransmitted. */
                        uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + ipSIZE_OF_IPv4_HEADER ) );
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	3b28      	subs	r3, #40	@ 0x28
 800fd3c:	64bb      	str	r3, [r7, #72]	@ 0x48

                        if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 800fd3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fd44:	441a      	add	r2, r3
 800fd46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d008      	beq.n	800fd60 <prvTCPReturnPacket+0x1f4>
                        {
                            pxTCPPacket->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 800fd4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd50:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800fd54:	f023 0301 	bic.w	r3, r3, #1
 800fd58:	b2da      	uxtb	r2, r3
 800fd5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd5c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
                        }
                    }
                }

                /* Tell which sequence number is expected next time */
                pxTCPPacket->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 800fd60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd62:	691b      	ldr	r3, [r3, #16]
 800fd64:	061a      	lsls	r2, r3, #24
 800fd66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd68:	691b      	ldr	r3, [r3, #16]
 800fd6a:	021b      	lsls	r3, r3, #8
 800fd6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800fd70:	431a      	orrs	r2, r3
 800fd72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd74:	691b      	ldr	r3, [r3, #16]
 800fd76:	0a1b      	lsrs	r3, r3, #8
 800fd78:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fd7c:	431a      	orrs	r2, r3
 800fd7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd80:	691b      	ldr	r3, [r3, #16]
 800fd82:	0e1b      	lsrs	r3, r3, #24
 800fd84:	431a      	orrs	r2, r3
 800fd86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd88:	62da      	str	r2, [r3, #44]	@ 0x2c
 800fd8a:	e009      	b.n	800fda0 <prvTCPReturnPacket+0x234>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxTCPPacket->xTCPHeader.ulSequenceNumber, pxTCPPacket->xTCPHeader.ulAckNr );
 800fd8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd90:	653b      	str	r3, [r7, #80]	@ 0x50
 800fd92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd98:	629a      	str	r2, [r3, #40]	@ 0x28
 800fd9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd9c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fd9e:	62da      	str	r2, [r3, #44]	@ 0x2c
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 800fda0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fda2:	2280      	movs	r2, #128	@ 0x80
 800fda4:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	b29b      	uxth	r3, r3
 800fdaa:	021b      	lsls	r3, r3, #8
 800fdac:	b29a      	uxth	r2, r3
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	0a1b      	lsrs	r3, r3, #8
 800fdb2:	b29b      	uxth	r3, r3
 800fdb4:	4313      	orrs	r3, r2
 800fdb6:	b29a      	uxth	r2, r3
 800fdb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fdba:	805a      	strh	r2, [r3, #2]

            if( ( pxSocket == NULL ) || ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ) )
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d003      	beq.n	800fdca <prvTCPReturnPacket+0x25e>
 800fdc2:	4b4b      	ldr	r3, [pc, #300]	@ (800fef0 <prvTCPReturnPacket+0x384>)
 800fdc4:	695b      	ldr	r3, [r3, #20]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d103      	bne.n	800fdd2 <prvTCPReturnPacket+0x266>
            {
                /* When pxSocket is NULL, this function is called by prvTCPSendReset()
                * and the IP-addresses must be swapped.
                * Also swap the IP-addresses in case the IP-tack doesn't have an
                * IP-address yet, i.e. when ( *ipLOCAL_IP_ADDRESS_POINTER == 0UL ). */
                ulSourceAddress = pxIPHeader->ulDestinationIPAddress;
 800fdca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fdcc:	691b      	ldr	r3, [r3, #16]
 800fdce:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fdd0:	e002      	b.n	800fdd8 <prvTCPReturnPacket+0x26c>
            }
            else
            {
                ulSourceAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 800fdd2:	4b47      	ldr	r3, [pc, #284]	@ (800fef0 <prvTCPReturnPacket+0x384>)
 800fdd4:	695b      	ldr	r3, [r3, #20]
 800fdd6:	66bb      	str	r3, [r7, #104]	@ 0x68
            }

            pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 800fdd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fdda:	68da      	ldr	r2, [r3, #12]
 800fddc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fdde:	611a      	str	r2, [r3, #16]
            pxIPHeader->ulSourceIPAddress = ulSourceAddress;
 800fde0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fde2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800fde4:	60da      	str	r2, [r3, #12]
            vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800fde6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fde8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fdea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800fdee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fdf0:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 800fdf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fdf4:	849a      	strh	r2, [r3, #36]	@ 0x24
 800fdf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fdf8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800fdfc:	84da      	strh	r2, [r3, #38]	@ 0x26

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800fdfe:	4b3d      	ldr	r3, [pc, #244]	@ (800fef4 <prvTCPReturnPacket+0x388>)
 800fe00:	881b      	ldrh	r3, [r3, #0]
 800fe02:	021b      	lsls	r3, r3, #8
 800fe04:	b21a      	sxth	r2, r3
 800fe06:	4b3b      	ldr	r3, [pc, #236]	@ (800fef4 <prvTCPReturnPacket+0x388>)
 800fe08:	881b      	ldrh	r3, [r3, #0]
 800fe0a:	0a1b      	lsrs	r3, r3, #8
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	b21b      	sxth	r3, r3
 800fe10:	4313      	orrs	r3, r2
 800fe12:	b21b      	sxth	r3, r3
 800fe14:	b29a      	uxth	r2, r3
 800fe16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe18:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 800fe1a:	4b36      	ldr	r3, [pc, #216]	@ (800fef4 <prvTCPReturnPacket+0x388>)
 800fe1c:	881b      	ldrh	r3, [r3, #0]
 800fe1e:	3301      	adds	r3, #1
 800fe20:	b29a      	uxth	r2, r3
 800fe22:	4b34      	ldr	r3, [pc, #208]	@ (800fef4 <prvTCPReturnPacket+0x388>)
 800fe24:	801a      	strh	r2, [r3, #0]
            pxIPHeader->usFragmentOffset = 0U;
 800fe26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe28:	2200      	movs	r2, #0
 800fe2a:	80da      	strh	r2, [r3, #6]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ulLen + ipSIZE_OF_ETH_HEADER;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	f103 020e 	add.w	r2, r3, #14
 800fe32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fe34:	61da      	str	r2, [r3, #28]

            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                {
                    /* calculate the IP header checksum, in case the driver won't do that. */
                    pxIPHeader->usHeaderChecksum = 0x00U;
 800fe36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe38:	2200      	movs	r2, #0
 800fe3a:	815a      	strh	r2, [r3, #10]
                    pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0U, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
 800fe3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe3e:	2214      	movs	r2, #20
 800fe40:	4619      	mov	r1, r3
 800fe42:	2000      	movs	r0, #0
 800fe44:	f7fd fcee 	bl	800d824 <usGenerateChecksum>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	461a      	mov	r2, r3
 800fe4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe4e:	815a      	strh	r2, [r3, #10]
                    pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 800fe50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe52:	895b      	ldrh	r3, [r3, #10]
 800fe54:	021b      	lsls	r3, r3, #8
 800fe56:	b21a      	sxth	r2, r3
 800fe58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe5a:	895b      	ldrh	r3, [r3, #10]
 800fe5c:	0a1b      	lsrs	r3, r3, #8
 800fe5e:	b29b      	uxth	r3, r3
 800fe60:	b21b      	sxth	r3, r3
 800fe62:	4313      	orrs	r3, r2
 800fe64:	b21b      	sxth	r3, r3
 800fe66:	b29b      	uxth	r3, r3
 800fe68:	43db      	mvns	r3, r3
 800fe6a:	b29a      	uxth	r2, r3
 800fe6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe6e:	815a      	strh	r2, [r3, #10]

                    /* calculate the TCP checksum for an outgoing packet. */
                    ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
 800fe70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fe72:	69db      	ldr	r3, [r3, #28]
 800fe74:	2201      	movs	r2, #1
 800fe76:	4619      	mov	r1, r3
 800fe78:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800fe7a:	f7fd fbbb 	bl	800d5f4 <usGenerateProtocolChecksum>

                    /* A calculated checksum of 0 must be inverted as 0 means the checksum
                     * is disabled. */
                    if( pxTCPPacket->xTCPHeader.usChecksum == 0U )
 800fe7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fe80:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d103      	bne.n	800fe8e <prvTCPReturnPacket+0x322>
                    {
                        pxTCPPacket->xTCPHeader.usChecksum = 0xffffU;
 800fe86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fe88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fe8c:	869a      	strh	r2, [r3, #52]	@ 0x34
                    pxNetworkBuffer->pxNextBuffer = NULL;
                }
            #endif

            /* Fill in the destination MAC addresses. */
            ( void ) memcpy( ( void * ) ( &( pxEthernetHeader->xDestinationAddress ) ),
 800fe8e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
                             ( const void * ) ( &( pxEthernetHeader->xSourceAddress ) ),
 800fe90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe92:	3306      	adds	r3, #6
            ( void ) memcpy( ( void * ) ( &( pxEthernetHeader->xDestinationAddress ) ),
 800fe94:	2206      	movs	r2, #6
 800fe96:	4619      	mov	r1, r3
 800fe98:	f005 ff53 	bl	8015d42 <memcpy>
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            /* The source MAC addresses is fixed to 'ipLOCAL_MAC_ADDRESS'. */
            pvCopySource = ipLOCAL_MAC_ADDRESS;
 800fe9c:	4b14      	ldr	r3, [pc, #80]	@ (800fef0 <prvTCPReturnPacket+0x384>)
 800fe9e:	643b      	str	r3, [r7, #64]	@ 0x40
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 800fea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fea2:	3306      	adds	r3, #6
 800fea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800fea6:	2206      	movs	r2, #6
 800fea8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800feaa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800feac:	f005 ff49 	bl	8015d42 <memcpy>
                }
            #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, xDoRelease );
 800feb0:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800feb2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800feb4:	f003 fac8 	bl	8013448 <xNetworkInterfaceOutput>

            if( xDoRelease == pdFALSE )
 800feb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800feba:	2b00      	cmp	r3, #0
 800febc:	d114      	bne.n	800fee8 <prvTCPReturnPacket+0x37c>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 800febe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fec0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fec2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800fec4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fec6:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 800fec8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800feca:	849a      	strh	r2, [r3, #36]	@ 0x24
 800fecc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fece:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800fed0:	84da      	strh	r2, [r3, #38]	@ 0x26
                pxTCPPacket->xIPHeader.ulSourceIPAddress = pxTCPPacket->xIPHeader.ulDestinationIPAddress;
 800fed2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fed4:	6a1a      	ldr	r2, [r3, #32]
 800fed6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fed8:	61da      	str	r2, [r3, #28]
                ( void ) memcpy( ( void * ) ( pxEthernetHeader->xSourceAddress.ucBytes ), ( const void * ) ( pxEthernetHeader->xDestinationAddress.ucBytes ), ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800feda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fedc:	3306      	adds	r3, #6
 800fede:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fee0:	2206      	movs	r2, #6
 800fee2:	4618      	mov	r0, r3
 800fee4:	f005 ff2d 	bl	8015d42 <memcpy>
            else
            {
                /* Nothing to do: the buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    }
 800fee8:	bf00      	nop
 800feea:	3778      	adds	r7, #120	@ 0x78
 800feec:	46bd      	mov	sp, r7
 800feee:	bd80      	pop	{r7, pc}
 800fef0:	20000088 	.word	0x20000088
 800fef4:	2000a2f8 	.word	0x2000a2f8

0800fef8 <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    static void prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 800fef8:	b5b0      	push	{r4, r5, r7, lr}
 800fefa:	b084      	sub	sp, #16
 800fefc:	af02      	add	r7, sp, #8
 800fefe:	6078      	str	r0, [r7, #4]
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        vTCPWindowCreate(
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f103 00e0 	add.w	r0, r3, #224	@ 0xe0
            &pxSocket->u.xTCP.xTCPWindow,
            ipconfigTCP_MSS * pxSocket->u.xTCP.uxRxWinSize,
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ff0c:	f44f 6291 	mov.w	r2, #1160	@ 0x488
 800ff10:	fb02 f103 	mul.w	r1, r2, r3
            ipconfigTCP_MSS * pxSocket->u.xTCP.uxTxWinSize,
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ff1a:	f44f 6291 	mov.w	r2, #1160	@ 0x488
 800ff1e:	fb02 f403 	mul.w	r4, r2, r3
        vTCPWindowCreate(
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f8d3 50f0 	ldr.w	r5, [r3, #240]	@ 0xf0
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usInitMSS );
 800ff2e:	687a      	ldr	r2, [r7, #4]
 800ff30:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
        vTCPWindowCreate(
 800ff34:	9201      	str	r2, [sp, #4]
 800ff36:	9300      	str	r3, [sp, #0]
 800ff38:	462b      	mov	r3, r5
 800ff3a:	4622      	mov	r2, r4
 800ff3c:	f002 fa36 	bl	80123ac <vTCPWindowCreate>
    }
 800ff40:	bf00      	nop
 800ff42:	3708      	adds	r7, #8
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bdb0      	pop	{r4, r5, r7, pc}

0800ff48 <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b08c      	sub	sp, #48	@ 0x30
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
        TCPPacket_t * pxTCPPacket;
        IPHeader_t * pxIPHeader;
        eARPLookupResult_t eReturned;
        uint32_t ulRemoteIP;
        MACAddress_t xEthAddress;
        BaseType_t xReturn = pdTRUE;
 800ff50:	2301      	movs	r3, #1
 800ff52:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t ulInitialSequenceNumber = 0;
 800ff54:	2300      	movs	r3, #0
 800ff56:	62bb      	str	r3, [r7, #40]	@ 0x28

        #if ( ipconfigHAS_PRINTF != 0 )
            {
                /* Only necessary for nicer logging. */
                ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 800ff58:	f107 030c 	add.w	r3, r7, #12
 800ff5c:	2206      	movs	r2, #6
 800ff5e:	2100      	movs	r1, #0
 800ff60:	4618      	mov	r0, r3
 800ff62:	f005 fe72 	bl	8015c4a <memset>
            }
        #endif /* ipconfigHAS_PRINTF != 0 */

        ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff6a:	061a      	lsls	r2, r3, #24
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff70:	021b      	lsls	r3, r3, #8
 800ff72:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ff76:	431a      	orrs	r2, r3
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff7c:	0a1b      	lsrs	r3, r3, #8
 800ff7e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ff82:	431a      	orrs	r2, r3
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff88:	0e1b      	lsrs	r3, r3, #24
 800ff8a:	4313      	orrs	r3, r2
 800ff8c:	617b      	str	r3, [r7, #20]

        /* Determine the ARP cache status for the requested IP address. */
        eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ) );
 800ff8e:	f107 020c 	add.w	r2, r7, #12
 800ff92:	f107 0314 	add.w	r3, r7, #20
 800ff96:	4611      	mov	r1, r2
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f7fb fc85 	bl	800b8a8 <eARPGetCacheEntry>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        switch( eReturned )
 800ffa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ffa8:	2b01      	cmp	r3, #1
 800ffaa:	d00e      	beq.n	800ffca <prvTCPPrepareConnect+0x82>

            case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
            case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
            default:
                /* Count the number of times it could not find the ARP address. */
                pxSocket->u.xTCP.ucRepCount++;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	b2da      	uxtb	r2, r3
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
                                         xEthAddress.ucBytes[ 3 ],
                                         xEthAddress.ucBytes[ 4 ],
                                         xEthAddress.ucBytes[ 5 ] ) );

                /* And issue a (new) ARP request */
                FreeRTOS_OutputARPRequest( ulRemoteIP );
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f7fb fdb4 	bl	800bb2c <FreeRTOS_OutputARPRequest>
                xReturn = pdFALSE;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800ffc8:	e000      	b.n	800ffcc <prvTCPPrepareConnect+0x84>
                break;            /* We can now prepare the SYN packet. */
 800ffca:	bf00      	nop
        }

        if( xReturn != pdFALSE )
 800ffcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d00f      	beq.n	800fff2 <prvTCPPrepareConnect+0xaa>
        {
            /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
            ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
 800ffd2:	4b51      	ldr	r3, [pc, #324]	@ (8010118 <prvTCPPrepareConnect+0x1d0>)
 800ffd4:	6958      	ldr	r0, [r3, #20]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800ffe2:	f7f2 fab4 	bl	800254e <ulApplicationGetNextSequenceNumber>
 800ffe6:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                          pxSocket->usLocalPort,
                                                                          pxSocket->u.xTCP.ulRemoteIP,
                                                                          pxSocket->u.xTCP.usRemotePort );

            /* Check for a random number generation error. */
            if( ulInitialSequenceNumber == 0UL )
 800ffe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d101      	bne.n	800fff2 <prvTCPPrepareConnect+0xaa>
            {
                xReturn = pdFALSE;
 800ffee:	2300      	movs	r3, #0
 800fff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
        }

        if( xReturn != pdFALSE )
 800fff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	f000 8089 	beq.w	801010c <prvTCPPrepareConnect+0x1c4>
            uint16_t usLength;

            /* The MAC-address of the peer (or gateway) has been found,
             * now prepare the initial TCP packet and some fields in the socket. Map
             * the buffer onto the TCPPacket_t struct to easily access it's field. */
            pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	3382      	adds	r3, #130	@ 0x82
 800fffe:	4618      	mov	r0, r3
 8010000:	f7ff fbf0 	bl	800f7e4 <vCastPointerTo_TCPPacket_t>
 8010004:	6238      	str	r0, [r7, #32]
            pxIPHeader = &pxTCPPacket->xIPHeader;
 8010006:	6a3b      	ldr	r3, [r7, #32]
 8010008:	3310      	adds	r3, #16
 801000a:	61fb      	str	r3, [r7, #28]

            /* reset the retry counter to zero. */
            pxSocket->u.xTCP.ucRepCount = 0U;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2200      	movs	r2, #0
 8010010:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

            /* And remember that the connect/SYN data are prepared. */
            pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8010014:	687a      	ldr	r2, [r7, #4]
 8010016:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 801001a:	f043 0308 	orr.w	r3, r3, #8
 801001e:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41

            /* Now that the Ethernet address is known, the initial packet can be
             * prepared. */
            ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	3382      	adds	r3, #130	@ 0x82
 8010026:	2248      	movs	r2, #72	@ 0x48
 8010028:	2100      	movs	r1, #0
 801002a:	4618      	mov	r0, r3
 801002c:	f005 fe0d 	bl	8015c4a <memset>

            /* Write the Ethernet address in Source, because it will be swapped by
             * prvTCPReturnPacket(). */
            ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8010030:	6a3b      	ldr	r3, [r7, #32]
 8010032:	3306      	adds	r3, #6
 8010034:	461a      	mov	r2, r3
 8010036:	f107 030c 	add.w	r3, r7, #12
 801003a:	6818      	ldr	r0, [r3, #0]
 801003c:	6010      	str	r0, [r2, #0]
 801003e:	889b      	ldrh	r3, [r3, #4]
 8010040:	8093      	strh	r3, [r2, #4]

            /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
            pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8010042:	6a3b      	ldr	r3, [r7, #32]
 8010044:	2208      	movs	r2, #8
 8010046:	819a      	strh	r2, [r3, #12]

            pxIPHeader->ucVersionHeaderLength = 0x45U;
 8010048:	69fb      	ldr	r3, [r7, #28]
 801004a:	2245      	movs	r2, #69	@ 0x45
 801004c:	701a      	strb	r2, [r3, #0]
            usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 801004e:	233a      	movs	r3, #58	@ 0x3a
 8010050:	837b      	strh	r3, [r7, #26]
            pxIPHeader->usLength = FreeRTOS_htons( usLength );
 8010052:	8b7b      	ldrh	r3, [r7, #26]
 8010054:	021b      	lsls	r3, r3, #8
 8010056:	b21a      	sxth	r2, r3
 8010058:	8b7b      	ldrh	r3, [r7, #26]
 801005a:	0a1b      	lsrs	r3, r3, #8
 801005c:	b29b      	uxth	r3, r3
 801005e:	b21b      	sxth	r3, r3
 8010060:	4313      	orrs	r3, r2
 8010062:	b21b      	sxth	r3, r3
 8010064:	b29a      	uxth	r2, r3
 8010066:	69fb      	ldr	r3, [r7, #28]
 8010068:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 801006a:	69fb      	ldr	r3, [r7, #28]
 801006c:	2280      	movs	r2, #128	@ 0x80
 801006e:	721a      	strb	r2, [r3, #8]

            pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 8010070:	69fb      	ldr	r3, [r7, #28]
 8010072:	2206      	movs	r2, #6
 8010074:	725a      	strb	r2, [r3, #9]

            /* Addresses and ports will be stored swapped because prvTCPReturnPacket
             * will swap them back while replying. */
            pxIPHeader->ulDestinationIPAddress = *ipLOCAL_IP_ADDRESS_POINTER;
 8010076:	4b28      	ldr	r3, [pc, #160]	@ (8010118 <prvTCPPrepareConnect+0x1d0>)
 8010078:	695a      	ldr	r2, [r3, #20]
 801007a:	69fb      	ldr	r3, [r7, #28]
 801007c:	611a      	str	r2, [r3, #16]
            pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.ulRemoteIP );
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010082:	061a      	lsls	r2, r3, #24
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010088:	021b      	lsls	r3, r3, #8
 801008a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801008e:	431a      	orrs	r2, r3
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010094:	0a1b      	lsrs	r3, r3, #8
 8010096:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801009a:	431a      	orrs	r2, r3
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100a0:	0e1b      	lsrs	r3, r3, #24
 80100a2:	431a      	orrs	r2, r3
 80100a4:	69fb      	ldr	r3, [r7, #28]
 80100a6:	60da      	str	r2, [r3, #12]

            pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80100ac:	021b      	lsls	r3, r3, #8
 80100ae:	b21a      	sxth	r2, r3
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80100b4:	0a1b      	lsrs	r3, r3, #8
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	b21b      	sxth	r3, r3
 80100ba:	4313      	orrs	r3, r2
 80100bc:	b21b      	sxth	r3, r3
 80100be:	b29a      	uxth	r2, r3
 80100c0:	6a3b      	ldr	r3, [r7, #32]
 80100c2:	849a      	strh	r2, [r3, #36]	@ 0x24
            pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80100c8:	021b      	lsls	r3, r3, #8
 80100ca:	b21a      	sxth	r2, r3
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80100d0:	0a1b      	lsrs	r3, r3, #8
 80100d2:	b29b      	uxth	r3, r3
 80100d4:	b21b      	sxth	r3, r3
 80100d6:	4313      	orrs	r3, r2
 80100d8:	b21b      	sxth	r3, r3
 80100da:	b29a      	uxth	r2, r3
 80100dc:	6a3b      	ldr	r3, [r7, #32]
 80100de:	84da      	strh	r2, [r3, #38]	@ 0x26

            /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
             * isn't known yet. */
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0UL;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2200      	movs	r2, #0
 80100e4:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

            /* Start with ISN (Initial Sequence Number). */
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80100ec:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

            /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
             * the high nibble of the TCP offset field. */
            pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 80100f0:	6a3b      	ldr	r3, [r7, #32]
 80100f2:	2250      	movs	r2, #80	@ 0x50
 80100f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

            /* Only set the SYN flag. */
            pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 80100f8:	6a3b      	ldr	r3, [r7, #32]
 80100fa:	2202      	movs	r2, #2
 80100fc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

            /* Set the values of usInitMSS / usCurMSS for this socket. */
            prvSocketSetMSS( pxSocket );
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	f001 fb7f 	bl	8011804 <prvSocketSetMSS>

            /* The initial sequence numbers at our side are known.  Later
             * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
             * first wait for a SYN+ACK reply. */
            prvTCPCreateWindow( pxSocket );
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f7ff fef6 	bl	800fef8 <prvTCPCreateWindow>
        }

        return xReturn;
 801010c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 801010e:	4618      	mov	r0, r3
 8010110:	3730      	adds	r7, #48	@ 0x30
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	20000088 	.word	0x20000088

0801011c <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    _static void prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                  const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 801011c:	b580      	push	{r7, lr}
 801011e:	b08c      	sub	sp, #48	@ 0x30
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer );
 8010126:	2322      	movs	r3, #34	@ 0x22
 8010128:	623b      	str	r3, [r7, #32]
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	699a      	ldr	r2, [r3, #24]
 801012e:	6a3b      	ldr	r3, [r7, #32]
 8010130:	4413      	add	r3, r2
 8010132:	4618      	mov	r0, r3
 8010134:	f7ff fb6c 	bl	800f810 <vCastPointerTo_ProtocolHeaders_t>
 8010138:	61f8      	str	r0, [r7, #28]
                                                                              &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ( sizeof( TCPHeader_t ) - sizeof( pxTCPHeader->ucOptdata ) );
 801013a:	6a3b      	ldr	r3, [r7, #32]
 801013c:	3314      	adds	r3, #20
 801013e:	61bb      	str	r3, [r7, #24]
        size_t uxOptionsLength;
        size_t uxResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8010140:	69fb      	ldr	r3, [r7, #28]
 8010142:	617b      	str	r3, [r7, #20]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	3314      	adds	r3, #20
 8010148:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	7b1b      	ldrb	r3, [r3, #12]
 801014e:	2b50      	cmp	r3, #80	@ 0x50
 8010150:	d93e      	bls.n	80101d0 <prvCheckOptions+0xb4>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	7b1b      	ldrb	r3, [r3, #12]
 8010156:	091b      	lsrs	r3, r3, #4
 8010158:	b2db      	uxtb	r3, r3
 801015a:	3b05      	subs	r3, #5
 801015c:	b2db      	uxtb	r3, r3
 801015e:	009b      	lsls	r3, r3, #2
 8010160:	74fb      	strb	r3, [r7, #19]
            uxOptionsLength = ( size_t ) ucLength;
 8010162:	7cfb      	ldrb	r3, [r7, #19]
 8010164:	627b      	str	r3, [r7, #36]	@ 0x24

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	69db      	ldr	r3, [r3, #28]
 801016a:	69ba      	ldr	r2, [r7, #24]
 801016c:	429a      	cmp	r2, r3
 801016e:	d22f      	bcs.n	80101d0 <prvCheckOptions+0xb4>
            {
                /* Validate options size calculation. */
                if( ( pxNetworkBuffer->xDataLength > uxOptionOffset ) &&
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	69db      	ldr	r3, [r3, #28]
 8010174:	69ba      	ldr	r2, [r7, #24]
 8010176:	429a      	cmp	r2, r3
 8010178:	d22a      	bcs.n	80101d0 <prvCheckOptions+0xb4>
                    ( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) ) )
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	69da      	ldr	r2, [r3, #28]
 801017e:	69bb      	ldr	r3, [r7, #24]
 8010180:	1ad3      	subs	r3, r2, r3
                if( ( pxNetworkBuffer->xDataLength > uxOptionOffset ) &&
 8010182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010184:	429a      	cmp	r2, r3
 8010186:	d823      	bhi.n	80101d0 <prvCheckOptions+0xb4>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	7b5b      	ldrb	r3, [r3, #13]
 801018c:	f003 0302 	and.w	r3, r3, #2
 8010190:	2b00      	cmp	r3, #0
 8010192:	d002      	beq.n	801019a <prvCheckOptions+0x7e>
                    {
                        xHasSYNFlag = pdTRUE;
 8010194:	2301      	movs	r3, #1
 8010196:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010198:	e001      	b.n	801019e <prvCheckOptions+0x82>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 801019a:	2300      	movs	r3, #0
 801019c:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 801019e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d012      	beq.n	80101ca <prvCheckOptions+0xae>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        uxResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 80101a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101a6:	687a      	ldr	r2, [r7, #4]
 80101a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80101aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80101ac:	f000 f814 	bl	80101d8 <prvSingleStepTCPHeaderOptions>
 80101b0:	60f8      	str	r0, [r7, #12]

                        if( uxResult == 0UL )
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d00a      	beq.n	80101ce <prvCheckOptions+0xb2>
                        {
                            break;
                        }

                        uxOptionsLength -= uxResult;
 80101b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	1ad3      	subs	r3, r2, r3
 80101be:	627b      	str	r3, [r7, #36]	@ 0x24
                        pucPtr = &( pucPtr[ uxResult ] );
 80101c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	4413      	add	r3, r2
 80101c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if( uxOptionsLength == 0U )
 80101c8:	e7e9      	b.n	801019e <prvCheckOptions+0x82>
                            break;
 80101ca:	bf00      	nop
 80101cc:	e000      	b.n	80101d0 <prvCheckOptions+0xb4>
                            break;
 80101ce:	bf00      	nop
                    }
                }
            }
        }
    }
 80101d0:	bf00      	nop
 80101d2:	3730      	adds	r7, #48	@ 0x30
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}

080101d8 <prvSingleStepTCPHeaderOptions>:
 */
    _static size_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 80101d8:	b580      	push	{r7, lr}
 80101da:	b08a      	sub	sp, #40	@ 0x28
 80101dc:	af00      	add	r7, sp, #0
 80101de:	60f8      	str	r0, [r7, #12]
 80101e0:	60b9      	str	r1, [r7, #8]
 80101e2:	607a      	str	r2, [r7, #4]
 80101e4:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	61bb      	str	r3, [r7, #24]
        uint8_t ucLen;
        size_t uxIndex;
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	33e0      	adds	r3, #224	@ 0xe0
 80101ee:	617b      	str	r3, [r7, #20]
        BaseType_t xReturn = pdFALSE;
 80101f0:	2300      	movs	r3, #0
 80101f2:	61fb      	str	r3, [r7, #28]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	781b      	ldrb	r3, [r3, #0]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d102      	bne.n	8010202 <prvSingleStepTCPHeaderOptions+0x2a>
        {
            /* End of options. */
            uxIndex = 0U;
 80101fc:	2300      	movs	r3, #0
 80101fe:	623b      	str	r3, [r7, #32]
 8010200:	e0c3      	b.n	801038a <prvSingleStepTCPHeaderOptions+0x1b2>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	781b      	ldrb	r3, [r3, #0]
 8010206:	2b01      	cmp	r3, #1
 8010208:	d102      	bne.n	8010210 <prvSingleStepTCPHeaderOptions+0x38>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            uxIndex = 1U;
 801020a:	2301      	movs	r3, #1
 801020c:	623b      	str	r3, [r7, #32]
 801020e:	e0bc      	b.n	801038a <prvSingleStepTCPHeaderOptions+0x1b2>
        }
        else if( uxRemainingOptionsBytes < 2U )
 8010210:	69bb      	ldr	r3, [r7, #24]
 8010212:	2b01      	cmp	r3, #1
 8010214:	d802      	bhi.n	801021c <prvSingleStepTCPHeaderOptions+0x44>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            uxIndex = 0U;
 8010216:	2300      	movs	r3, #0
 8010218:	623b      	str	r3, [r7, #32]
 801021a:	e0b6      	b.n	801038a <prvSingleStepTCPHeaderOptions+0x1b2>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	781b      	ldrb	r3, [r3, #0]
 8010220:	2b03      	cmp	r3, #3
 8010222:	d11d      	bne.n	8010260 <prvSingleStepTCPHeaderOptions+0x88>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 8010224:	69bb      	ldr	r3, [r7, #24]
 8010226:	2b02      	cmp	r3, #2
 8010228:	d904      	bls.n	8010234 <prvSingleStepTCPHeaderOptions+0x5c>
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	3301      	adds	r3, #1
 801022e:	781b      	ldrb	r3, [r3, #0]
 8010230:	2b03      	cmp	r3, #3
 8010232:	d002      	beq.n	801023a <prvSingleStepTCPHeaderOptions+0x62>
                {
                    uxIndex = 0U;
 8010234:	2300      	movs	r3, #0
 8010236:	623b      	str	r3, [r7, #32]
 8010238:	e0a7      	b.n	801038a <prvSingleStepTCPHeaderOptions+0x1b2>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d00c      	beq.n	801025a <prvSingleStepTCPHeaderOptions+0x82>
                    {
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	3302      	adds	r3, #2
 8010244:	781a      	ldrb	r2, [r3, #0]
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 801024c:	687a      	ldr	r2, [r7, #4]
 801024e:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 8010252:	f043 0310 	orr.w	r3, r3, #16
 8010256:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
                    }

                    uxIndex = tcpTCP_OPT_WSOPT_LEN;
 801025a:	2303      	movs	r3, #3
 801025c:	623b      	str	r3, [r7, #32]
 801025e:	e094      	b.n	801038a <prvSingleStepTCPHeaderOptions+0x1b2>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	781b      	ldrb	r3, [r3, #0]
 8010264:	2b02      	cmp	r3, #2
 8010266:	d15d      	bne.n	8010324 <prvSingleStepTCPHeaderOptions+0x14c>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 8010268:	69bb      	ldr	r3, [r7, #24]
 801026a:	2b03      	cmp	r3, #3
 801026c:	d904      	bls.n	8010278 <prvSingleStepTCPHeaderOptions+0xa0>
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	3301      	adds	r3, #1
 8010272:	781b      	ldrb	r3, [r3, #0]
 8010274:	2b04      	cmp	r3, #4
 8010276:	d002      	beq.n	801027e <prvSingleStepTCPHeaderOptions+0xa6>
            {
                uxIndex = 0U;
 8010278:	2300      	movs	r3, #0
 801027a:	623b      	str	r3, [r7, #32]
 801027c:	e085      	b.n	801038a <prvSingleStepTCPHeaderOptions+0x1b2>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	3302      	adds	r3, #2
 8010282:	4618      	mov	r0, r3
 8010284:	f7ff fb00 	bl	800f888 <usChar2u16>
 8010288:	4603      	mov	r3, r0
 801028a:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8010292:	461a      	mov	r2, r3
 8010294:	693b      	ldr	r3, [r7, #16]
 8010296:	4293      	cmp	r3, r2
 8010298:	d006      	beq.n	80102a8 <prvSingleStepTCPHeaderOptions+0xd0>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 801029a:	693b      	ldr	r3, [r7, #16]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d103      	bne.n	80102a8 <prvSingleStepTCPHeaderOptions+0xd0>
                    {
                        uxIndex = 0U;
 80102a0:	2300      	movs	r3, #0
 80102a2:	623b      	str	r3, [r7, #32]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 80102a4:	2301      	movs	r3, #1
 80102a6:	61fb      	str	r3, [r7, #28]
                        FreeRTOS_debug_printf( ( "MSS change %u -> %lu\n", pxSocket->u.xTCP.usInitMSS, uxNewMSS ) );
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 80102a8:	69fb      	ldr	r3, [r7, #28]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d16d      	bne.n	801038a <prvSingleStepTCPHeaderOptions+0x1b2>
                {
                    if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80102b4:	461a      	mov	r2, r3
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	4293      	cmp	r3, r2
 80102ba:	d230      	bcs.n	801031e <prvSingleStepTCPHeaderOptions+0x146>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 80102bc:	687a      	ldr	r2, [r7, #4]
 80102be:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 80102c2:	f043 0301 	orr.w	r3, r3, #1
 80102c6:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40

                        if( pxSocket->u.xTCP.usCurMSS > uxNewMSS )
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80102d0:	461a      	mov	r2, r3
 80102d2:	693b      	ldr	r3, [r7, #16]
 80102d4:	4293      	cmp	r3, r2
 80102d6:	d204      	bcs.n	80102e2 <prvSingleStepTCPHeaderOptions+0x10a>
                        {
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %lu\n", pxSocket->u.xTCP.usCurMSS, uxNewMSS ) );
                            pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 80102d8:	693b      	ldr	r3, [r7, #16]
 80102da:	b29a      	uxth	r2, r3
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	685a      	ldr	r2, [r3, #4]
 80102e6:	693b      	ldr	r3, [r7, #16]
 80102e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80102ec:	693a      	ldr	r2, [r7, #16]
 80102ee:	fb03 f202 	mul.w	r2, r3, r2
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 80102f6:	693b      	ldr	r3, [r7, #16]
 80102f8:	b29a      	uxth	r2, r3
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	b29a      	uxth	r2, r3
 8010304:	697b      	ldr	r3, [r7, #20]
 8010306:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
                        pxSocket->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
 801030a:	693b      	ldr	r3, [r7, #16]
 801030c:	b29a      	uxth	r2, r3
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
                        pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 8010314:	693b      	ldr	r3, [r7, #16]
 8010316:	b29a      	uxth	r2, r3
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
                    }

                    uxIndex = tcpTCP_OPT_MSS_LEN;
 801031e:	2304      	movs	r3, #4
 8010320:	623b      	str	r3, [r7, #32]
 8010322:	e032      	b.n	801038a <prvSingleStepTCPHeaderOptions+0x1b2>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	3301      	adds	r3, #1
 8010328:	781b      	ldrb	r3, [r3, #0]
 801032a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            uxIndex = 0U;
 801032e:	2300      	movs	r3, #0
 8010330:	623b      	str	r3, [r7, #32]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 8010332:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010336:	2b01      	cmp	r3, #1
 8010338:	d927      	bls.n	801038a <prvSingleStepTCPHeaderOptions+0x1b2>
 801033a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801033e:	69ba      	ldr	r2, [r7, #24]
 8010340:	429a      	cmp	r2, r3
 8010342:	d322      	bcc.n	801038a <prvSingleStepTCPHeaderOptions+0x1b2>
                    {
                        /* Selective ACK: the peer has received a packet but it is missing
                         * earlier packets. At least this packet does not need retransmission
                         * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                         */
                        if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	781b      	ldrb	r3, [r3, #0]
 8010348:	2b05      	cmp	r3, #5
 801034a:	d119      	bne.n	8010380 <prvSingleStepTCPHeaderOptions+0x1a8>
                        {
                            ucLen -= 2U;
 801034c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010350:	3b02      	subs	r3, #2
 8010352:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                            uxIndex += 2U;
 8010356:	6a3b      	ldr	r3, [r7, #32]
 8010358:	3302      	adds	r3, #2
 801035a:	623b      	str	r3, [r7, #32]

                            while( ucLen >= ( uint8_t ) 8U )
 801035c:	e00c      	b.n	8010378 <prvSingleStepTCPHeaderOptions+0x1a0>
                            {
                                prvReadSackOption( pucPtr, uxIndex, pxSocket );
 801035e:	687a      	ldr	r2, [r7, #4]
 8010360:	6a39      	ldr	r1, [r7, #32]
 8010362:	68f8      	ldr	r0, [r7, #12]
 8010364:	f000 f816 	bl	8010394 <prvReadSackOption>
                                uxIndex += 8U;
 8010368:	6a3b      	ldr	r3, [r7, #32]
 801036a:	3308      	adds	r3, #8
 801036c:	623b      	str	r3, [r7, #32]
                                ucLen -= 8U;
 801036e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010372:	3b08      	subs	r3, #8
 8010374:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                            while( ucLen >= ( uint8_t ) 8U )
 8010378:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801037c:	2b07      	cmp	r3, #7
 801037e:	d8ee      	bhi.n	801035e <prvSingleStepTCPHeaderOptions+0x186>
                            /* ucLen should be 0 by now. */
                        }
                    }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                uxIndex += ( size_t ) ucLen;
 8010380:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010384:	6a3a      	ldr	r2, [r7, #32]
 8010386:	4413      	add	r3, r2
 8010388:	623b      	str	r3, [r7, #32]
            }
        }
        return uxIndex;
 801038a:	6a3b      	ldr	r3, [r7, #32]
    }
 801038c:	4618      	mov	r0, r3
 801038e:	3728      	adds	r7, #40	@ 0x28
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}

08010394 <prvReadSackOption>:
 * @param[in] pxSocket: Socket handling the TCP connection.
 */
        _static void prvReadSackOption( const uint8_t * const pucPtr,
                                        size_t uxIndex,
                                        FreeRTOS_Socket_t * const pxSocket )
        {
 8010394:	b580      	push	{r7, lr}
 8010396:	b08a      	sub	sp, #40	@ 0x28
 8010398:	af02      	add	r7, sp, #8
 801039a:	60f8      	str	r0, [r7, #12]
 801039c:	60b9      	str	r1, [r7, #8]
 801039e:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 80103a0:	68fa      	ldr	r2, [r7, #12]
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	4413      	add	r3, r2
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7ff fa53 	bl	800f852 <ulChar2u32>
 80103ac:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	3304      	adds	r3, #4
 80103b2:	68fa      	ldr	r2, [r7, #12]
 80103b4:	4413      	add	r3, r2
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7ff fa4b 	bl	800f852 <ulChar2u32>
 80103bc:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	33e0      	adds	r3, #224	@ 0xe0
 80103c2:	69ba      	ldr	r2, [r7, #24]
 80103c4:	69f9      	ldr	r1, [r7, #28]
 80103c6:	4618      	mov	r0, r3
 80103c8:	f002 fd58 	bl	8012e7c <ulTCPWindowTxSack>
 80103cc:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d01d      	beq.n	8010412 <prvReadSackOption+0x7e>
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d01a      	beq.n	8010412 <prvReadSackOption+0x7e>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80103e0:	2300      	movs	r3, #0
 80103e2:	9300      	str	r3, [sp, #0]
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	2200      	movs	r2, #0
 80103e8:	2100      	movs	r1, #0
 80103ea:	f7ff f8bb 	bl	800f564 <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	f043 0202 	orr.w	r2, r3, #2
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103fe:	f003 0302 	and.w	r3, r3, #2
 8010402:	2b00      	cmp	r3, #0
 8010404:	d005      	beq.n	8010412 <prvReadSackOption+0x7e>
                        {
                            /* The field 'xEventBits' is used to store regular socket events
                             * (at most 8), as well as 'select events', which will be left-shifted.
                             */
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	601a      	str	r2, [r3, #0]
                            pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
                        }
                    }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 8010412:	bf00      	nop
 8010414:	3720      	adds	r7, #32
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}

0801041a <prvWinScaleFactor>:
 * @param[in] pxSocket: The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 801041a:	b480      	push	{r7}
 801041c:	b085      	sub	sp, #20
 801041e:	af00      	add	r7, sp, #0
 8010420:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8010428:	687a      	ldr	r2, [r7, #4]
 801042a:	f8b2 204c 	ldrh.w	r2, [r2, #76]	@ 0x4c
 801042e:	fb02 f303 	mul.w	r3, r2, r3
 8010432:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 8010434:	2300      	movs	r3, #0
 8010436:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffUL )
 8010438:	e005      	b.n	8010446 <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	085b      	lsrs	r3, r3, #1
 801043e:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 8010440:	7afb      	ldrb	r3, [r7, #11]
 8010442:	3301      	adds	r3, #1
 8010444:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffUL )
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801044c:	d2f5      	bcs.n	801043a <prvWinScaleFactor+0x20>
            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     ( unsigned ) pxSocket->u.xTCP.usInitMSS,
                                     ucFactor ) );

            return ucFactor;
 801044e:	7afb      	ldrb	r3, [r7, #11]
        }
 8010450:	4618      	mov	r0, r3
 8010452:	3714      	adds	r7, #20
 8010454:	46bd      	mov	sp, r7
 8010456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045a:	4770      	bx	lr

0801045c <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    static UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                            TCPHeader_t * pxTCPHeader )
    {
 801045c:	b580      	push	{r7, lr}
 801045e:	b084      	sub	sp, #16
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usInitMSS;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 801046c:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	2202      	movs	r2, #2
 8010472:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	2204      	movs	r2, #4
 8010478:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 801047a:	89fb      	ldrh	r3, [r7, #14]
 801047c:	0a1b      	lsrs	r3, r3, #8
 801047e:	b29b      	uxth	r3, r3
 8010480:	b2da      	uxtb	r2, r3
 8010482:	683b      	ldr	r3, [r7, #0]
 8010484:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 8010486:	89fb      	ldrh	r3, [r7, #14]
 8010488:	b2da      	uxtb	r2, r3
 801048a:	683b      	ldr	r3, [r7, #0]
 801048c:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f7ff ffc3 	bl	801041a <prvWinScaleFactor>
 8010494:	4603      	mov	r3, r0
 8010496:	461a      	mov	r2, r3
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1

                pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	2201      	movs	r2, #1
 80104a2:	761a      	strb	r2, [r3, #24]
                pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	2203      	movs	r2, #3
 80104a8:	765a      	strb	r2, [r3, #25]
                pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	2203      	movs	r2, #3
 80104ae:	769a      	strb	r2, [r3, #26]
                pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	f893 20d1 	ldrb.w	r2, [r3, #209]	@ 0xd1
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	76da      	strb	r2, [r3, #27]
                uxOptionsLength = 8U;
 80104ba:	2308      	movs	r3, #8
 80104bc:	60bb      	str	r3, [r7, #8]
            }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 80104be:	683a      	ldr	r2, [r7, #0]
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	4413      	add	r3, r2
 80104c4:	3314      	adds	r3, #20
 80104c6:	2201      	movs	r2, #1
 80104c8:	701a      	strb	r2, [r3, #0]
                pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	3301      	adds	r3, #1
 80104ce:	683a      	ldr	r2, [r7, #0]
 80104d0:	4413      	add	r3, r2
 80104d2:	2201      	movs	r2, #1
 80104d4:	751a      	strb	r2, [r3, #20]
                pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	3302      	adds	r3, #2
 80104da:	683a      	ldr	r2, [r7, #0]
 80104dc:	4413      	add	r3, r2
 80104de:	2204      	movs	r2, #4
 80104e0:	751a      	strb	r2, [r3, #20]
                pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	3303      	adds	r3, #3
 80104e6:	683a      	ldr	r2, [r7, #0]
 80104e8:	4413      	add	r3, r2
 80104ea:	2202      	movs	r2, #2
 80104ec:	751a      	strb	r2, [r3, #20]
                uxOptionsLength += 4U;
 80104ee:	68bb      	ldr	r3, [r7, #8]
 80104f0:	3304      	adds	r3, #4
 80104f2:	60bb      	str	r3, [r7, #8]
            }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 80104f4:	68bb      	ldr	r3, [r7, #8]
    }
 80104f6:	4618      	mov	r0, r3
 80104f8:	3710      	adds	r7, #16
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}

080104fe <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    static void prvTCPTouchSocket( FreeRTOS_Socket_t * pxSocket )
    {
 80104fe:	b580      	push	{r7, lr}
 8010500:	b082      	sub	sp, #8
 8010502:	af00      	add	r7, sp, #0
 8010504:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 8010506:	f7f9 f96f 	bl	80097e8 <xTaskGetTickCount>
 801050a:	4602      	mov	r2, r0
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	661a      	str	r2, [r3, #96]	@ 0x60
            }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            {
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 8010510:	687a      	ldr	r2, [r7, #4]
 8010512:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 8010516:	f36f 0382 	bfc	r3, #2, #1
 801051a:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 801051e:	687a      	ldr	r2, [r7, #4]
 8010520:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 8010524:	f36f 0341 	bfc	r3, #1, #1
 8010528:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
                pxSocket->u.xTCP.ucKeepRepCount = 0U;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2200      	movs	r2, #0
 8010530:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
                pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8010534:	f7f9 f958 	bl	80097e8 <xTaskGetTickCount>
 8010538:	4602      	mov	r2, r0
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	65da      	str	r2, [r3, #92]	@ 0x5c
            }
        #endif

        ( void ) pxSocket;
    }
 801053e:	bf00      	nop
 8010540:	3708      	adds	r7, #8
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}

08010546 <vTCPStateChange>:
 * @param[in] pxSocket: The socket whose state we are trying to change.
 * @param[in] eTCPState: The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 8010546:	b580      	push	{r7, lr}
 8010548:	b086      	sub	sp, #24
 801054a:	af00      	add	r7, sp, #0
 801054c:	6078      	str	r0, [r7, #4]
 801054e:	460b      	mov	r3, r1
 8010550:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = NULL;
 8010552:	2300      	movs	r3, #0
 8010554:	617b      	str	r3, [r7, #20]
        BaseType_t bBefore = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.ucTCPState ) ); /* Was it connected ? */
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 801055c:	2b04      	cmp	r3, #4
 801055e:	d906      	bls.n	801056e <vTCPStateChange+0x28>
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8010566:	2b08      	cmp	r3, #8
 8010568:	d001      	beq.n	801056e <vTCPStateChange+0x28>
 801056a:	2301      	movs	r3, #1
 801056c:	e000      	b.n	8010570 <vTCPStateChange+0x2a>
 801056e:	2300      	movs	r3, #0
 8010570:	613b      	str	r3, [r7, #16]
        BaseType_t bAfter = ipNUMERIC_CAST( BaseType_t, tcpNOW_CONNECTED( ( BaseType_t ) eTCPState ) );                    /* Is it connected now ? */
 8010572:	78fb      	ldrb	r3, [r7, #3]
 8010574:	2b04      	cmp	r3, #4
 8010576:	d904      	bls.n	8010582 <vTCPStateChange+0x3c>
 8010578:	78fb      	ldrb	r3, [r7, #3]
 801057a:	2b08      	cmp	r3, #8
 801057c:	d001      	beq.n	8010582 <vTCPStateChange+0x3c>
 801057e:	2301      	movs	r3, #1
 8010580:	e000      	b.n	8010584 <vTCPStateChange+0x3e>
 8010582:	2300      	movs	r3, #0
 8010584:	60fb      	str	r3, [r7, #12]
        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
        #endif

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 8010586:	693a      	ldr	r2, [r7, #16]
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	429a      	cmp	r2, r3
 801058c:	f000 808b 	beq.w	80106a6 <vTCPStateChange+0x160>
        {
            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d067      	beq.n	8010666 <vTCPStateChange+0x120>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801059c:	f003 0304 	and.w	r3, r3, #4
 80105a0:	b2db      	uxtb	r3, r3
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d04c      	beq.n	8010640 <vTCPStateChange+0xfa>
                {
                    /* Now that it is connected, find it's parent. */
                    if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80105ac:	f003 0308 	and.w	r3, r3, #8
 80105b0:	b2db      	uxtb	r3, r3
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d002      	beq.n	80105bc <vTCPStateChange+0x76>
                    {
                        xParent = pxSocket;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	617b      	str	r3, [r7, #20]
 80105ba:	e013      	b.n	80105e4 <vTCPStateChange+0x9e>
                    }
                    else
                    {
                        xParent = pxSocket->u.xTCP.pxPeerSocket;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80105c0:	617b      	str	r3, [r7, #20]
                        configASSERT( xParent != NULL );
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d10d      	bne.n	80105e4 <vTCPStateChange+0x9e>
	__asm volatile
 80105c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105cc:	b672      	cpsid	i
 80105ce:	f383 8811 	msr	BASEPRI, r3
 80105d2:	f3bf 8f6f 	isb	sy
 80105d6:	f3bf 8f4f 	dsb	sy
 80105da:	b662      	cpsie	i
 80105dc:	60bb      	str	r3, [r7, #8]
}
 80105de:	bf00      	nop
 80105e0:	bf00      	nop
 80105e2:	e7fd      	b.n	80105e0 <vTCPStateChange+0x9a>
                    }

                    if( xParent != NULL )
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d018      	beq.n	801061c <vTCPStateChange+0xd6>
                    {
                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d102      	bne.n	80105f8 <vTCPStateChange+0xb2>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	687a      	ldr	r2, [r7, #4]
 80105f6:	655a      	str	r2, [r3, #84]	@ 0x54
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	f043 0204 	orr.w	r2, r3, #4
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                            {
                                /* Library support FreeRTOS_select().  Receiving a new
                                 * connection is being translated as a READ event. */
                                if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 8010604:	697b      	ldr	r3, [r7, #20]
 8010606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010608:	f003 0301 	and.w	r3, r3, #1
 801060c:	2b00      	cmp	r3, #0
 801060e:	d005      	beq.n	801061c <vTCPStateChange+0xd6>
                                {
                                    xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 8010610:	697b      	ldr	r3, [r7, #20]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	601a      	str	r2, [r3, #0]
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2200      	movs	r2, #0
 8010620:	655a      	str	r2, [r3, #84]	@ 0x54
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 8010622:	687a      	ldr	r2, [r7, #4]
 8010624:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 8010628:	f36f 0382 	bfc	r3, #2, #1
 801062c:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 8010630:	687a      	ldr	r2, [r7, #4]
 8010632:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 8010636:	f043 0302 	orr.w	r3, r3, #2
 801063a:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
 801063e:	e024      	b.n	801068a <vTCPStateChange+0x144>
                }
                else
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	f043 0208 	orr.w	r2, r3, #8
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010650:	f003 0302 	and.w	r3, r3, #2
 8010654:	2b00      	cmp	r3, #0
 8010656:	d018      	beq.n	801068a <vTCPStateChange+0x144>
                            {
                                pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	601a      	str	r2, [r3, #0]
 8010664:	e011      	b.n	801068a <vTCPStateChange+0x144>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting a semaphore. */
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	f043 0220 	orr.w	r2, r3, #32
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010676:	f003 0304 	and.w	r3, r3, #4
 801067a:	2b00      	cmp	r3, #0
 801067c:	d005      	beq.n	801068a <vTCPStateChange+0x144>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	601a      	str	r2, [r3, #0]
                        xConnected = pxSocket;
                    }
                }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == 0 )
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8010690:	4618      	mov	r0, r3
 8010692:	f7ff f90c 	bl	800f8ae <prvTCPSocketIsActive>
 8010696:	4603      	mov	r3, r0
 8010698:	2b00      	cmp	r3, #0
 801069a:	d125      	bne.n	80106e8 <vTCPStateChange+0x1a2>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2200      	movs	r2, #0
 80106a0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80106a4:	e020      	b.n	80106e8 <vTCPStateChange+0x1a2>
            }
        }
        else
        {
            if( ( eTCPState == eCLOSED ) ||
 80106a6:	78fb      	ldrb	r3, [r7, #3]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d002      	beq.n	80106b2 <vTCPStateChange+0x16c>
 80106ac:	78fb      	ldrb	r3, [r7, #3]
 80106ae:	2b08      	cmp	r3, #8
 80106b0:	d11a      	bne.n	80106e8 <vTCPStateChange+0x1a2>
                ( eTCPState == eCLOSE_WAIT ) )
            {
                /* Socket goes to status eCLOSED because of a RST.
                 * When nobody owns the socket yet, delete it. */
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80106b8:	f003 0304 	and.w	r3, r3, #4
 80106bc:	b2db      	uxtb	r3, r3
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d107      	bne.n	80106d2 <vTCPStateChange+0x18c>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80106c8:	f003 0302 	and.w	r3, r3, #2
 80106cc:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d00a      	beq.n	80106e8 <vTCPStateChange+0x1a2>
                {
                    FreeRTOS_debug_printf( ( "vTCPStateChange: Closing socket\n" ) );

                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80106d8:	f003 0308 	and.w	r3, r3, #8
 80106dc:	b2db      	uxtb	r3, r3
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d102      	bne.n	80106e8 <vTCPStateChange+0x1a2>
                    {
                        ( void ) FreeRTOS_closesocket( pxSocket );
 80106e2:	6878      	ldr	r0, [r7, #4]
 80106e4:	f7fd fed6 	bl	800e494 <FreeRTOS_closesocket>
                }
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.ucTCPState = ( uint8_t ) eTCPState;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	78fa      	ldrb	r2, [r7, #3]
 80106ec:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f7ff ff04 	bl	80104fe <prvTCPTouchSocket>
                    xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
                }
            }
        #endif

        if( xParent != NULL )
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d002      	beq.n	8010702 <vTCPStateChange+0x1bc>
        {
            vSocketWakeUpUser( xParent );
 80106fc:	6978      	ldr	r0, [r7, #20]
 80106fe:	f7fe fa25 	bl	800eb4c <vSocketWakeUpUser>
        }
    }
 8010702:	bf00      	nop
 8010704:	3718      	adds	r7, #24
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
	...

0801070c <prvTCPBufferResize>:
 */
    static NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                           NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                           int32_t lDataLen,
                                                           UBaseType_t uxOptionsLength )
    {
 801070c:	b580      	push	{r7, lr}
 801070e:	b088      	sub	sp, #32
 8010710:	af00      	add	r7, sp, #0
 8010712:	60f8      	str	r0, [r7, #12]
 8010714:	60b9      	str	r1, [r7, #8]
 8010716:	607a      	str	r2, [r7, #4]
 8010718:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 801071a:	4b36      	ldr	r3, [pc, #216]	@ (80107f4 <prvTCPBufferResize+0xe8>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d00b      	beq.n	801073a <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 8010722:	f240 43c6 	movw	r3, #1222	@ 0x4c6
 8010726:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d102      	bne.n	8010734 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 801072e:	2301      	movs	r3, #1
 8010730:	617b      	str	r3, [r7, #20]
 8010732:	e019      	b.n	8010768 <prvTCPBufferResize+0x5c>
            }
            else
            {
                xResize = pdFALSE;
 8010734:	2300      	movs	r3, #0
 8010736:	617b      	str	r3, [r7, #20]
 8010738:	e016      	b.n	8010768 <prvTCPBufferResize+0x5c>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipNUMERIC_CAST( size_t, ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + lDataLen;
 801073a:	687a      	ldr	r2, [r7, #4]
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	4413      	add	r3, r2
 8010740:	3336      	adds	r3, #54	@ 0x36
 8010742:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 8010744:	69bb      	ldr	r3, [r7, #24]
 8010746:	2b47      	cmp	r3, #71	@ 0x47
 8010748:	d801      	bhi.n	801074e <prvTCPBufferResize+0x42>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 801074a:	2348      	movs	r3, #72	@ 0x48
 801074c:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d004      	beq.n	801075e <prvTCPBufferResize+0x52>
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	69db      	ldr	r3, [r3, #28]
 8010758:	69ba      	ldr	r2, [r7, #24]
 801075a:	429a      	cmp	r2, r3
 801075c:	d902      	bls.n	8010764 <prvTCPBufferResize+0x58>
            {
                xResize = pdTRUE;
 801075e:	2301      	movs	r3, #1
 8010760:	617b      	str	r3, [r7, #20]
 8010762:	e001      	b.n	8010768 <prvTCPBufferResize+0x5c>
            }
            else
            {
                xResize = pdFALSE;
 8010764:	2300      	movs	r3, #0
 8010766:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d023      	beq.n	80107b6 <prvTCPBufferResize+0xaa>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 801076e:	2100      	movs	r1, #0
 8010770:	69b8      	ldr	r0, [r7, #24]
 8010772:	f003 fe0d 	bl	8014390 <pxGetNetworkBufferWithDescriptor>
 8010776:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 8010778:	69fb      	ldr	r3, [r7, #28]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d035      	beq.n	80107ea <prvTCPBufferResize+0xde>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 801077e:	69fb      	ldr	r3, [r7, #28]
 8010780:	69ba      	ldr	r2, [r7, #24]
 8010782:	61da      	str	r2, [r3, #28]

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 8010784:	68bb      	ldr	r3, [r7, #8]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d00c      	beq.n	80107a4 <prvTCPBufferResize+0x98>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 801078a:	69fb      	ldr	r3, [r7, #28]
 801078c:	6998      	ldr	r0, [r3, #24]
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	6999      	ldr	r1, [r3, #24]
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	69db      	ldr	r3, [r3, #28]
 8010796:	461a      	mov	r2, r3
 8010798:	f005 fad3 	bl	8015d42 <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801079c:	68b8      	ldr	r0, [r7, #8]
 801079e:	f003 fe47 	bl	8014430 <vReleaseNetworkBufferAndDescriptor>
 80107a2:	e022      	b.n	80107ea <prvTCPBufferResize+0xde>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 80107a4:	69fb      	ldr	r3, [r7, #28]
 80107a6:	6998      	ldr	r0, [r3, #24]
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	3382      	adds	r3, #130	@ 0x82
 80107ac:	2248      	movs	r2, #72	@ 0x48
 80107ae:	4619      	mov	r1, r3
 80107b0:	f005 fac7 	bl	8015d42 <memcpy>
 80107b4:	e019      	b.n	80107ea <prvTCPBufferResize+0xde>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d10d      	bne.n	80107d8 <prvTCPBufferResize+0xcc>
	__asm volatile
 80107bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107c0:	b672      	cpsid	i
 80107c2:	f383 8811 	msr	BASEPRI, r3
 80107c6:	f3bf 8f6f 	isb	sy
 80107ca:	f3bf 8f4f 	dsb	sy
 80107ce:	b662      	cpsie	i
 80107d0:	613b      	str	r3, [r7, #16]
}
 80107d2:	bf00      	nop
 80107d4:	bf00      	nop
 80107d6:	e7fd      	b.n	80107d4 <prvTCPBufferResize+0xc8>
            pxReturn = pxNetworkBuffer;
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 80107dc:	687a      	ldr	r2, [r7, #4]
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	4413      	add	r3, r2
 80107e2:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	61da      	str	r2, [r3, #28]
        }

        return pxReturn;
 80107ea:	69fb      	ldr	r3, [r7, #28]
    }
 80107ec:	4618      	mov	r0, r3
 80107ee:	3720      	adds	r7, #32
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}
 80107f4:	08016f60 	.word	0x08016f60

080107f8 <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    static int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                                      NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                      UBaseType_t uxOptionsLength )
    {
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b094      	sub	sp, #80	@ 0x50
 80107fc:	af02      	add	r7, sp, #8
 80107fe:	60f8      	str	r0, [r7, #12]
 8010800:	60b9      	str	r1, [r7, #8]
 8010802:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 8010804:	2300      	movs	r3, #0
 8010806:	637b      	str	r3, [r7, #52]	@ 0x34

        if( ( *ppxNetworkBuffer ) != NULL )
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d004      	beq.n	801081a <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 8010810:	68bb      	ldr	r3, [r7, #8]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	699b      	ldr	r3, [r3, #24]
 8010816:	643b      	str	r3, [r7, #64]	@ 0x40
 8010818:	e002      	b.n	8010820 <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	3382      	adds	r3, #130	@ 0x82
 801081e:	643b      	str	r3, [r7, #64]	@ 0x40
        }

        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8010820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010822:	3322      	adds	r3, #34	@ 0x22
 8010824:	4618      	mov	r0, r3
 8010826:	f7fe fff3 	bl	800f810 <vCastPointerTo_ProtocolHeaders_t>
 801082a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	33e0      	adds	r3, #224	@ 0xe0
 8010830:	633b      	str	r3, [r7, #48]	@ 0x30
        lDataLen = 0;
 8010832:	2300      	movs	r3, #0
 8010834:	647b      	str	r3, [r7, #68]	@ 0x44
        lStreamPos = 0;
 8010836:	2300      	movs	r3, #0
 8010838:	617b      	str	r3, [r7, #20]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 801083a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801083c:	7b5b      	ldrb	r3, [r3, #13]
 801083e:	f043 0310 	orr.w	r3, r3, #16
 8010842:	b2da      	uxtb	r2, r3
 8010844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010846:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801084c:	2b00      	cmp	r3, #0
 801084e:	d079      	beq.n	8010944 <prvTCPPrepareSend+0x14c>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usCurMSS > 1U )
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010856:	2b01      	cmp	r3, #1
 8010858:	d90a      	bls.n	8010870 <prvTCPPrepareSend+0x78>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010860:	f107 0214 	add.w	r2, r7, #20
 8010864:	4619      	mov	r1, r3
 8010866:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010868:	f002 f8ee 	bl	8012a48 <ulTCPWindowTxGet>
 801086c:	4603      	mov	r3, r0
 801086e:	647b      	str	r3, [r7, #68]	@ 0x44
            }

            if( lDataLen > 0 )
 8010870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010872:	2b00      	cmp	r3, #0
 8010874:	dd66      	ble.n	8010944 <prvTCPPrepareSend+0x14c>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 8010876:	68bb      	ldr	r3, [r7, #8]
 8010878:	6819      	ldr	r1, [r3, #0]
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801087e:	68f8      	ldr	r0, [r7, #12]
 8010880:	f7ff ff44 	bl	801070c <prvTCPBufferResize>
 8010884:	62f8      	str	r0, [r7, #44]	@ 0x2c

                if( pxNewBuffer != NULL )
 8010886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010888:	2b00      	cmp	r3, #0
 801088a:	d058      	beq.n	801093e <prvTCPPrepareSend+0x146>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 801088c:	68bb      	ldr	r3, [r7, #8]
 801088e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010890:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 8010892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010894:	699b      	ldr	r3, [r3, #24]
 8010896:	643b      	str	r3, [r7, #64]	@ 0x40

                    /* Map the byte stream onto ProtocolHeaders_t struct for easy
                     * access to the fields. */
                    pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t, &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8010898:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801089a:	3322      	adds	r3, #34	@ 0x22
 801089c:	4618      	mov	r0, r3
 801089e:	f7fe ffb7 	bl	800f810 <vCastPointerTo_ProtocolHeaders_t>
 80108a2:	63f8      	str	r0, [r7, #60]	@ 0x3c

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	3336      	adds	r3, #54	@ 0x36
 80108a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80108aa:	4413      	add	r3, r2
 80108ac:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	697a      	ldr	r2, [r7, #20]
 80108ba:	4619      	mov	r1, r3
 80108bc:	f7fe ff05 	bl	800f6ca <uxStreamBufferDistance>
 80108c0:	6278      	str	r0, [r7, #36]	@ 0x24

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80108c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80108c8:	2201      	movs	r2, #1
 80108ca:	9200      	str	r2, [sp, #0]
 80108cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80108ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80108d0:	f7fe fe48 	bl	800f564 <uxStreamBufferGet>
 80108d4:	6238      	str	r0, [r7, #32]
                        }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( ( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) )
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80108dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108e0:	b2db      	uxtb	r3, r3
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d02e      	beq.n	8010944 <prvTCPPrepareSend+0x14c>
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80108ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108f0:	b2db      	uxtb	r3, r3
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d126      	bne.n	8010944 <prvTCPPrepareSend+0x14c>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80108fa:	697b      	ldr	r3, [r7, #20]
 80108fc:	4619      	mov	r1, r3
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010902:	689b      	ldr	r3, [r3, #8]
 8010904:	461a      	mov	r2, r3
 8010906:	f7fe fee0 	bl	800f6ca <uxStreamBufferDistance>
 801090a:	61f8      	str	r0, [r7, #28]

                        if( ulDistance == ulDataGot )
 801090c:	69fa      	ldr	r2, [r7, #28]
 801090e:	6a3b      	ldr	r3, [r7, #32]
 8010910:	429a      	cmp	r2, r3
 8010912:	d117      	bne.n	8010944 <prvTCPPrepareSend+0x14c>
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8010914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010916:	7b5b      	ldrb	r3, [r3, #13]
 8010918:	f043 0301 	orr.w	r3, r3, #1
 801091c:	b2da      	uxtb	r2, r3
 801091e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010920:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 8010922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010928:	441a      	add	r2, r3
 801092a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801092c:	625a      	str	r2, [r3, #36]	@ 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 801092e:	68fa      	ldr	r2, [r7, #12]
 8010930:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 8010934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010938:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
 801093c:	e002      	b.n	8010944 <prvTCPPrepareSend+0x14c>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 801093e:	f04f 33ff 	mov.w	r3, #4294967295
 8010942:	647b      	str	r3, [r7, #68]	@ 0x44
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) )
 8010944:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010946:	2b00      	cmp	r3, #0
 8010948:	db7c      	blt.n	8010a44 <prvTCPPrepareSend+0x24c>
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8010950:	2b05      	cmp	r3, #5
 8010952:	d177      	bne.n	8010a44 <prvTCPPrepareSend+0x24c>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801095a:	f003 0320 	and.w	r3, r3, #32
 801095e:	b2db      	uxtb	r3, r3
 8010960:	2b00      	cmp	r3, #0
 8010962:	d029      	beq.n	80109b8 <prvTCPPrepareSend+0x1c0>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 8010964:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010966:	f001 ffb7 	bl	80128d8 <xTCPWindowTxDone>
 801096a:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 801096c:	2b00      	cmp	r3, #0
 801096e:	d023      	beq.n	80109b8 <prvTCPPrepareSend+0x1c0>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 8010970:	68fa      	ldr	r2, [r7, #12]
 8010972:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 8010976:	f36f 1345 	bfc	r3, #5, #1
 801097a:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 801097e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010980:	7b5b      	ldrb	r3, [r3, #13]
 8010982:	f043 0301 	orr.w	r3, r3, #1
 8010986:	b2da      	uxtb	r2, r3
 8010988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801098a:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 801098c:	68fa      	ldr	r2, [r7, #12]
 801098e:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 8010992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010996:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 801099a:	68fa      	ldr	r2, [r7, #12]
 801099c:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 80109a0:	f043 0301 	orr.w	r3, r3, #1
 80109a4:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80109a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109aa:	6a1a      	ldr	r2, [r3, #32]
 80109ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109ae:	625a      	str	r2, [r3, #36]	@ 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 80109b0:	2106      	movs	r1, #6
 80109b2:	68f8      	ldr	r0, [r7, #12]
 80109b4:	f7ff fdc7 	bl	8010546 <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
                {
                    if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80109be:	2b03      	cmp	r3, #3
 80109c0:	d906      	bls.n	80109d0 <prvTCPPrepareSend+0x1d8>
                    {
                        FreeRTOS_debug_printf( ( "keep-alive: giving up %lxip:%u\n",
                                                 pxSocket->u.xTCP.ulRemoteIP,       /* IP address of remote machine. */
                                                 pxSocket->u.xTCP.usRemotePort ) ); /* Port on remote machine. */
                        vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80109c2:	2108      	movs	r1, #8
 80109c4:	68f8      	ldr	r0, [r7, #12]
 80109c6:	f7ff fdbe 	bl	8010546 <vTCPStateChange>
                        lDataLen = -1;
 80109ca:	f04f 33ff 	mov.w	r3, #4294967295
 80109ce:	647b      	str	r3, [r7, #68]	@ 0x44
                    }

                    if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 80109d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d136      	bne.n	8010a44 <prvTCPPrepareSend+0x24c>
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80109dc:	f003 0301 	and.w	r3, r3, #1
 80109e0:	b2db      	uxtb	r3, r3
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d12e      	bne.n	8010a44 <prvTCPPrepareSend+0x24c>
                    {
                        /* If there is no data to be sent, and no window-update message,
                         * we might want to send a keep-alive message. */
                        TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 80109e6:	f7f8 feff 	bl	80097e8 <xTaskGetTickCount>
 80109ea:	4602      	mov	r2, r0
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80109f0:	1ad3      	subs	r3, r2, r3
 80109f2:	61bb      	str	r3, [r7, #24]
                        TickType_t xMax;
                        xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 80109f4:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80109f8:	63bb      	str	r3, [r7, #56]	@ 0x38

                        if( pxSocket->u.xTCP.ucKeepRepCount != ( uint8_t ) 0U )
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d002      	beq.n	8010a0a <prvTCPPrepareSend+0x212>
                        {
                            xMax = ( TickType_t ) ( 3U * configTICK_RATE_HZ );
 8010a04:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8010a08:	63bb      	str	r3, [r7, #56]	@ 0x38
                        }

                        if( xAge > xMax )
 8010a0a:	69ba      	ldr	r2, [r7, #24]
 8010a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d918      	bls.n	8010a44 <prvTCPPrepareSend+0x24c>
                        {
                            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8010a12:	f7f8 fee9 	bl	80097e8 <xTaskGetTickCount>
 8010a16:	4602      	mov	r2, r0
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	65da      	str	r2, [r3, #92]	@ 0x5c
                                                         pxSocket->u.xTCP.ulRemoteIP,
                                                         pxSocket->u.xTCP.usRemotePort,
                                                         pxSocket->u.xTCP.ucKeepRepCount ) );
                            }

                            pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 8010a1c:	68fa      	ldr	r2, [r7, #12]
 8010a1e:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 8010a22:	f043 0302 	orr.w	r3, r3, #2
 8010a26:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
                            pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8010a30:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                            pxSocket->u.xTCP.ucKeepRepCount++;
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8010a3a:	3301      	adds	r3, #1
 8010a3c:	b2da      	uxtb	r2, r3
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        /* Anything to send, a change of the advertised window size, or maybe send a
         * keep-alive message? */
        if( ( lDataLen > 0 ) ||
 8010a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	dc0f      	bgt.n	8010a6a <prvTCPPrepareSend+0x272>
            ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010a50:	f003 0301 	and.w	r3, r3, #1
 8010a54:	b2db      	uxtb	r3, r3
        if( ( lDataLen > 0 ) ||
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d107      	bne.n	8010a6a <prvTCPPrepareSend+0x272>
            ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010a60:	f003 0302 	and.w	r3, r3, #2
 8010a64:	b2db      	uxtb	r3, r3
            ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d026      	beq.n	8010ab8 <prvTCPPrepareSend+0x2c0>
        {
            pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 8010a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a6c:	7b5b      	ldrb	r3, [r3, #13]
 8010a6e:	f023 0308 	bic.w	r3, r3, #8
 8010a72:	b2da      	uxtb	r2, r3
 8010a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a76:	735a      	strb	r2, [r3, #13]
            pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	b2db      	uxtb	r3, r3
 8010a7c:	3314      	adds	r3, #20
 8010a7e:	b2db      	uxtb	r3, r3
 8010a80:	009b      	lsls	r3, r3, #2
 8010a82:	b2da      	uxtb	r2, r3
 8010a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a86:	731a      	strb	r2, [r3, #12]

            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 8010a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a8a:	7b5b      	ldrb	r3, [r3, #13]
 8010a8c:	f043 0310 	orr.w	r3, r3, #16
 8010a90:	b2da      	uxtb	r2, r3
 8010a92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a94:	735a      	strb	r2, [r3, #13]

            if( lDataLen != 0L )
 8010a96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d006      	beq.n	8010aaa <prvTCPPrepareSend+0x2b2>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 8010a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a9e:	7b5b      	ldrb	r3, [r3, #13]
 8010aa0:	f043 0308 	orr.w	r3, r3, #8
 8010aa4:	b2da      	uxtb	r2, r3
 8010aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010aa8:	735a      	strb	r2, [r3, #13]
            }

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	3328      	adds	r3, #40	@ 0x28
 8010aae:	637b      	str	r3, [r7, #52]	@ 0x34
            lDataLen += ( int32_t ) uxIntermediateResult;
 8010ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ab2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010ab4:	4413      	add	r3, r2
 8010ab6:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        return lDataLen;
 8010ab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 8010aba:	4618      	mov	r0, r3
 8010abc:	3748      	adds	r7, #72	@ 0x48
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}
	...

08010ac4 <prvTCPNextTimeout>:
 * @param[in] pxSocket: The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    static TickType_t prvTCPNextTimeout( FreeRTOS_Socket_t * pxSocket )
    {
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b084      	sub	sp, #16
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8010acc:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8010ad0:	60bb      	str	r3, [r7, #8]

        if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8010ad8:	2b02      	cmp	r3, #2
 8010ada:	d135      	bne.n	8010b48 <prvTCPNextTimeout+0x84>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010ae2:	f003 0308 	and.w	r3, r3, #8
 8010ae6:	b2db      	uxtb	r3, r3
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d012      	beq.n	8010b12 <prvTCPNextTimeout+0x4e>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8010af2:	2b02      	cmp	r3, #2
 8010af4:	d809      	bhi.n	8010b0a <prvTCPNextTimeout+0x46>
                {
                    ulDelayMs = ( 3000UL << ( pxSocket->u.xTCP.ucRepCount - 1U ) );
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8010afc:	3b01      	subs	r3, #1
 8010afe:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8010b02:	fa02 f303 	lsl.w	r3, r2, r3
 8010b06:	60bb      	str	r3, [r7, #8]
 8010b08:	e006      	b.n	8010b18 <prvTCPNextTimeout+0x54>
                }
                else
                {
                    ulDelayMs = 11000UL;
 8010b0a:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 8010b0e:	60bb      	str	r3, [r7, #8]
 8010b10:	e002      	b.n	8010b18 <prvTCPNextTimeout+0x54>
                }
            }
            else
            {
                /* Still in the ARP phase: check every half second. */
                ulDelayMs = 500UL;
 8010b12:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8010b16:	60bb      	str	r3, [r7, #8]
            }

            FreeRTOS_debug_printf( ( "Connect[%lxip:%u]: next timeout %u: %lu ms\n",
                                     pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010b1e:	fb02 f303 	mul.w	r3, r2, r3
 8010b22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010b26:	d30a      	bcc.n	8010b3e <prvTCPNextTimeout+0x7a>
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010b2e:	fb02 f303 	mul.w	r3, r2, r3
 8010b32:	4a23      	ldr	r2, [pc, #140]	@ (8010bc0 <prvTCPNextTimeout+0xfc>)
 8010b34:	fba2 2303 	umull	r2, r3, r2, r3
 8010b38:	099b      	lsrs	r3, r3, #6
 8010b3a:	b29a      	uxth	r2, r3
 8010b3c:	e000      	b.n	8010b40 <prvTCPNextTimeout+0x7c>
 8010b3e:	2201      	movs	r2, #1
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010b46:	e033      	b.n	8010bb0 <prvTCPNextTimeout+0xec>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d12e      	bne.n	8010bb0 <prvTCPNextTimeout+0xec>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f103 00e0 	add.w	r0, r3, #224	@ 0xe0
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010b5e:	f107 0208 	add.w	r2, r7, #8
 8010b62:	4619      	mov	r1, r3
 8010b64:	f001 ff10 	bl	8012988 <xTCPWindowTxHasData>
 8010b68:	60f8      	str	r0, [r7, #12]

            if( ulDelayMs == 0U )
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d108      	bne.n	8010b82 <prvTCPNextTimeout+0xbe>
            {
                if( xResult != ( BaseType_t ) 0 )
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d002      	beq.n	8010b7c <prvTCPNextTimeout+0xb8>
                {
                    ulDelayMs = 1UL;
 8010b76:	2301      	movs	r3, #1
 8010b78:	60bb      	str	r3, [r7, #8]
 8010b7a:	e002      	b.n	8010b82 <prvTCPNextTimeout+0xbe>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8010b7c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8010b80:	60bb      	str	r3, [r7, #8]
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010b88:	fb02 f303 	mul.w	r3, r2, r3
 8010b8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010b90:	d30a      	bcc.n	8010ba8 <prvTCPNextTimeout+0xe4>
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010b98:	fb02 f303 	mul.w	r3, r2, r3
 8010b9c:	4a08      	ldr	r2, [pc, #32]	@ (8010bc0 <prvTCPNextTimeout+0xfc>)
 8010b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8010ba2:	099b      	lsrs	r3, r3, #6
 8010ba4:	b29a      	uxth	r2, r3
 8010ba6:	e000      	b.n	8010baa <prvTCPNextTimeout+0xe6>
 8010ba8:	2201      	movs	r2, #1
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
    }
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3710      	adds	r7, #16
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}
 8010bbe:	bf00      	nop
 8010bc0:	10624dd3 	.word	0x10624dd3

08010bc4 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket: The socket owning the connection.
 */
    static void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b084      	sub	sp, #16
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7fe fdc0 	bl	800f756 <uxStreamBufferMidSpace>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	dd17      	ble.n	8010c10 <prvTCPAddTxData+0x4c>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f103 00e0 	add.w	r0, r3, #224	@ 0xe0
 8010be6:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010bec:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8010bee:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010bf4:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8010bf6:	f001 fdb9 	bl	801276c <lTCPWindowTxAdd>
 8010bfa:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	dd06      	ble.n	8010c10 <prvTCPAddTxData+0x4c>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010c06:	68ba      	ldr	r2, [r7, #8]
 8010c08:	4611      	mov	r1, r2
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7fe fdb7 	bl	800f77e <vStreamBufferMoveMid>
            }
        }
    }
 8010c10:	bf00      	nop
 8010c12:	3710      	adds	r7, #16
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b088      	sub	sp, #32
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
 8010c20:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	699b      	ldr	r3, [r3, #24]
 8010c26:	3322      	adds	r3, #34	@ 0x22
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f7fe fdf1 	bl	800f810 <vCastPointerTo_ProtocolHeaders_t>
 8010c2e:	61b8      	str	r0, [r7, #24]
                                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8010c30:	69bb      	ldr	r3, [r7, #24]
 8010c32:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8010c34:	2300      	movs	r3, #0
 8010c36:	74fb      	strb	r3, [r7, #19]
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	7b5b      	ldrb	r3, [r3, #13]
 8010c3c:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	33e0      	adds	r3, #224	@ 0xe0
 8010c42:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 8010c44:	2300      	movs	r3, #0
 8010c46:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	689b      	ldr	r3, [r3, #8]
 8010c4c:	061a      	lsls	r2, r3, #24
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	689b      	ldr	r3, [r3, #8]
 8010c52:	021b      	lsls	r3, r3, #8
 8010c54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010c58:	431a      	orrs	r2, r3
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	689b      	ldr	r3, [r3, #8]
 8010c5e:	0a1b      	lsrs	r3, r3, #8
 8010c60:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010c64:	431a      	orrs	r2, r3
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	689b      	ldr	r3, [r3, #8]
 8010c6a:	0e1b      	lsrs	r3, r3, #24
 8010c6c:	4313      	orrs	r3, r2
 8010c6e:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 8010c70:	7cbb      	ldrb	r3, [r7, #18]
 8010c72:	f003 0301 	and.w	r3, r3, #1
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d004      	beq.n	8010c84 <prvTCPHandleFin+0x6c>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	695b      	ldr	r3, [r3, #20]
 8010c7e:	1c5a      	adds	r2, r3, #1
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d10b      	bne.n	8010cac <prvTCPHandleFin+0x94>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	6a1a      	ldr	r2, [r3, #32]
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8010c9c:	687a      	ldr	r2, [r7, #4]
 8010c9e:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 8010ca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ca6:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
 8010caa:	e00c      	b.n	8010cc6 <prvTCPHandleFin+0xae>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1UL ) )
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	68ba      	ldr	r2, [r7, #8]
 8010cb4:	429a      	cmp	r2, r3
 8010cb6:	d106      	bne.n	8010cc6 <prvTCPHandleFin+0xae>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 8010cb8:	687a      	ldr	r2, [r7, #4]
 8010cba:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 8010cbe:	f043 0301 	orr.w	r3, r3, #1
 8010cc2:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010ccc:	f003 0301 	and.w	r3, r3, #1
 8010cd0:	b2db      	uxtb	r3, r3
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d10b      	bne.n	8010cee <prvTCPHandleFin+0xd6>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	2211      	movs	r2, #17
 8010ce2:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 8010ce4:	210a      	movs	r1, #10
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f7ff fc2d 	bl	8010546 <vTCPStateChange>
 8010cec:	e023      	b.n	8010d36 <prvTCPHandleFin+0x11e>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cf2:	1c5a      	adds	r2, r3, #1
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010cfe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010d02:	b2db      	uxtb	r3, r3
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d103      	bne.n	8010d10 <prvTCPHandleFin+0xf8>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	735a      	strb	r2, [r3, #13]
 8010d0e:	e012      	b.n	8010d36 <prvTCPHandleFin+0x11e>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010d16:	f003 0302 	and.w	r3, r3, #2
 8010d1a:	b2db      	uxtb	r3, r3
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d103      	bne.n	8010d28 <prvTCPHandleFin+0x110>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	2210      	movs	r2, #16
 8010d24:	735a      	strb	r2, [r3, #13]
 8010d26:	e002      	b.n	8010d2e <prvTCPHandleFin+0x116>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8010d2e:	2108      	movs	r1, #8
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f7ff fc08 	bl	8010546 <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	6a1a      	ldr	r2, [r3, #32]
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	62da      	str	r2, [r3, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 8010d3e:	697b      	ldr	r3, [r7, #20]
 8010d40:	7b5b      	ldrb	r3, [r3, #13]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d006      	beq.n	8010d54 <prvTCPHandleFin+0x13c>
        {
            ucIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010d4c:	3328      	adds	r3, #40	@ 0x28
 8010d4e:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 8010d50:	7cfb      	ldrb	r3, [r7, #19]
 8010d52:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010d5a:	3314      	adds	r3, #20
 8010d5c:	b2db      	uxtb	r3, r3
 8010d5e:	009b      	lsls	r3, r3, #2
 8010d60:	b2da      	uxtb	r2, r3
 8010d62:	697b      	ldr	r3, [r7, #20]
 8010d64:	731a      	strb	r2, [r3, #12]
                                     pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
                                     pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
                                     pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );
        }

        return xSendLength;
 8010d66:	69fb      	ldr	r3, [r7, #28]
    }
 8010d68:	4618      	mov	r0, r3
 8010d6a:	3720      	adds	r7, #32
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}

08010d70 <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    static BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint8_t ** ppucRecvData )
    {
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b08c      	sub	sp, #48	@ 0x30
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
 8010d78:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	699b      	ldr	r3, [r3, #24]
 8010d7e:	3322      	adds	r3, #34	@ 0x22
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7fe fd45 	bl	800f810 <vCastPointerTo_ProtocolHeaders_t>
 8010d86:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                              &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8010d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d8a:	627b      	str	r3, [r7, #36]	@ 0x24
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */
        const IPHeader_t * pxIPHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPHeader_t, &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	699b      	ldr	r3, [r3, #24]
 8010d90:	330e      	adds	r3, #14
 8010d92:	4618      	mov	r0, r3
 8010d94:	f7fe fd1b 	bl	800f7ce <vCastConstPointerTo_IPHeader_t>
 8010d98:	6238      	str	r0, [r7, #32]
        const size_t xIPHeaderLength = ipSIZE_OF_IPv4_HEADER;
 8010d9a:	2314      	movs	r3, #20
 8010d9c:	61fb      	str	r3, [r7, #28]
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	76fb      	strb	r3, [r7, #27]
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 8010da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010da4:	7b1b      	ldrb	r3, [r3, #12]
 8010da6:	089b      	lsrs	r3, r3, #2
 8010da8:	b2db      	uxtb	r3, r3
 8010daa:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8010dae:	76fb      	strb	r3, [r7, #27]
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 8010db0:	7efb      	ldrb	r3, [r7, #27]
 8010db2:	617b      	str	r3, [r7, #20]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	699a      	ldr	r2, [r3, #24]
 8010db8:	6979      	ldr	r1, [r7, #20]
 8010dba:	69fb      	ldr	r3, [r7, #28]
 8010dbc:	440b      	add	r3, r1
 8010dbe:	330e      	adds	r3, #14
 8010dc0:	441a      	add	r2, r3
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ipNUMERIC_CAST( int32_t, pxNetworkBuffer->xDataLength ) - ( int32_t ) ipSIZE_OF_ETH_HEADER;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	69db      	ldr	r3, [r3, #28]
 8010dca:	3b0e      	subs	r3, #14
 8010dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c

        usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8010dce:	6a3b      	ldr	r3, [r7, #32]
 8010dd0:	885b      	ldrh	r3, [r3, #2]
 8010dd2:	021b      	lsls	r3, r3, #8
 8010dd4:	b21a      	sxth	r2, r3
 8010dd6:	6a3b      	ldr	r3, [r7, #32]
 8010dd8:	885b      	ldrh	r3, [r3, #2]
 8010dda:	0a1b      	lsrs	r3, r3, #8
 8010ddc:	b29b      	uxth	r3, r3
 8010dde:	b21b      	sxth	r3, r3
 8010de0:	4313      	orrs	r3, r2
 8010de2:	b21b      	sxth	r3, r3
 8010de4:	827b      	strh	r3, [r7, #18]
        lLength = ( int32_t ) usLength;
 8010de6:	8a7b      	ldrh	r3, [r7, #18]
 8010de8:	60fb      	str	r3, [r7, #12]

        if( lReceiveLength > lLength )
 8010dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	429a      	cmp	r2, r3
 8010df0:	dd01      	ble.n	8010df6 <prvCheckRxData+0x86>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 8010df6:	69fa      	ldr	r2, [r7, #28]
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	4413      	add	r3, r2
 8010dfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010dfe:	429a      	cmp	r2, r3
 8010e00:	dd06      	ble.n	8010e10 <prvCheckRxData+0xa0>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 8010e02:	69fa      	ldr	r2, [r7, #28]
 8010e04:	697b      	ldr	r3, [r7, #20]
 8010e06:	4413      	add	r3, r2
 8010e08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010e0a:	1ad3      	subs	r3, r2, r3
 8010e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010e0e:	e001      	b.n	8010e14 <prvCheckRxData+0xa4>
        }
        else
        {
            lReceiveLength = 0;
 8010e10:	2300      	movs	r3, #0
 8010e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 8010e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e16:	7b5b      	ldrb	r3, [r3, #13]
 8010e18:	f003 0320 	and.w	r3, r3, #32
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d01a      	beq.n	8010e56 <prvCheckRxData+0xe6>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 8010e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e22:	8a5b      	ldrh	r3, [r3, #18]
 8010e24:	021b      	lsls	r3, r3, #8
 8010e26:	b21a      	sxth	r2, r3
 8010e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e2a:	8a5b      	ldrh	r3, [r3, #18]
 8010e2c:	0a1b      	lsrs	r3, r3, #8
 8010e2e:	b29b      	uxth	r3, r3
 8010e30:	b21b      	sxth	r3, r3
 8010e32:	4313      	orrs	r3, r2
 8010e34:	b21b      	sxth	r3, r3
 8010e36:	b29b      	uxth	r3, r3
 8010e38:	60bb      	str	r3, [r7, #8]
            *ppucRecvData += lUrgentLength;
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	681a      	ldr	r2, [r3, #0]
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	441a      	add	r2, r3
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 8010e46:	68b9      	ldr	r1, [r7, #8]
 8010e48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010e4a:	f7fe fbff 	bl	800f64c <FreeRTOS_min_int32>
 8010e4e:	4602      	mov	r2, r0
 8010e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e52:	1a9b      	subs	r3, r3, r2
 8010e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        return ( BaseType_t ) lReceiveLength;
 8010e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8010e58:	4618      	mov	r0, r3
 8010e5a:	3730      	adds	r7, #48	@ 0x30
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}

08010e60 <prvStoreRxData>:
 */
    static BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                                      const uint8_t * pucRecvData,
                                      NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint32_t ulReceiveLength )
    {
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b08c      	sub	sp, #48	@ 0x30
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	60f8      	str	r0, [r7, #12]
 8010e68:	60b9      	str	r1, [r7, #8]
 8010e6a:	607a      	str	r2, [r7, #4]
 8010e6c:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	699b      	ldr	r3, [r3, #24]
 8010e72:	3322      	adds	r3, #34	@ 0x22
 8010e74:	4618      	mov	r0, r3
 8010e76:	f7fe fcd6 	bl	800f826 <vCastConstPointerTo_ProtocolHeaders_t>
 8010e7a:	6278      	str	r0, [r7, #36]	@ 0x24
                                                                                          &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8010e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e7e:	623b      	str	r3, [r7, #32]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	33e0      	adds	r3, #224	@ 0xe0
 8010e84:	61fb      	str	r3, [r7, #28]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 8010e86:	2300      	movs	r3, #0
 8010e88:	62bb      	str	r3, [r7, #40]	@ 0x28

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8010e8a:	6a3b      	ldr	r3, [r7, #32]
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	061a      	lsls	r2, r3, #24
 8010e90:	6a3b      	ldr	r3, [r7, #32]
 8010e92:	685b      	ldr	r3, [r3, #4]
 8010e94:	021b      	lsls	r3, r3, #8
 8010e96:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010e9a:	431a      	orrs	r2, r3
 8010e9c:	6a3b      	ldr	r3, [r7, #32]
 8010e9e:	685b      	ldr	r3, [r3, #4]
 8010ea0:	0a1b      	lsrs	r3, r3, #8
 8010ea2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010ea6:	431a      	orrs	r2, r3
 8010ea8:	6a3b      	ldr	r3, [r7, #32]
 8010eaa:	685b      	ldr	r3, [r3, #4]
 8010eac:	0e1b      	lsrs	r3, r3, #24
 8010eae:	4313      	orrs	r3, r2
 8010eb0:	61bb      	str	r3, [r7, #24]

        if( ( ulReceiveLength > 0U ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eSYN_RECEIVED ) )
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d03f      	beq.n	8010f38 <prvStoreRxData+0xd8>
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8010ebe:	2b03      	cmp	r3, #3
 8010ec0:	d93a      	bls.n	8010f38 <prvStoreRxData+0xd8>
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d006      	beq.n	8010ed8 <prvStoreRxData+0x78>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7fe fc19 	bl	800f706 <uxStreamBufferGetSpace>
 8010ed4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8010ed6:	e002      	b.n	8010ede <prvStoreRxData+0x7e>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulReceiveLength, ulSpace );
 8010ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ee0:	683a      	ldr	r2, [r7, #0]
 8010ee2:	69b9      	ldr	r1, [r7, #24]
 8010ee4:	69f8      	ldr	r0, [r7, #28]
 8010ee6:	f001 fb43 	bl	8012570 <lTCPWindowRxCheck>
 8010eea:	6178      	str	r0, [r7, #20]

            if( lOffset >= 0 )
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	db10      	blt.n	8010f14 <prvStoreRxData+0xb4>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRecvData, ulReceiveLength );
 8010ef2:	6979      	ldr	r1, [r7, #20]
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	68ba      	ldr	r2, [r7, #8]
 8010ef8:	68f8      	ldr	r0, [r7, #12]
 8010efa:	f7fd ff95 	bl	800ee28 <lTCPAddRxdata>
 8010efe:	6138      	str	r0, [r7, #16]

                if( lStored != ( int32_t ) ulReceiveLength )
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	693a      	ldr	r2, [r7, #16]
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d005      	beq.n	8010f14 <prvStoreRxData+0xb4>
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %ld / %lu bytes? ?\n", lStored, ulReceiveLength ) );

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f000 fc6d 	bl	80117e8 <prvTCPSendReset>
                    xResult = -1;
 8010f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8010f12:	62bb      	str	r3, [r7, #40]	@ 0x28
            #if ( ipconfigUSE_TCP_WIN == 1 )
                {
                    /* Now lTCPAddRxdata() will move the rxHead pointer forward
                     * so data becomes available to the user immediately
                     * In case the low-water mark is reached, bLowWater will be set. */
                    if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 8010f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d113      	bne.n	8010f42 <prvStoreRxData+0xe2>
 8010f1a:	69fb      	ldr	r3, [r7, #28]
 8010f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d00f      	beq.n	8010f42 <prvStoreRxData+0xe2>
                    {
                        ( void ) lTCPAddRxdata( pxSocket, 0UL, NULL, pxTCPWindow->ulUserDataLength );
 8010f22:	69fb      	ldr	r3, [r7, #28]
 8010f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f26:	2200      	movs	r2, #0
 8010f28:	2100      	movs	r1, #0
 8010f2a:	68f8      	ldr	r0, [r7, #12]
 8010f2c:	f7fd ff7c 	bl	800ee28 <lTCPAddRxdata>
                        pxTCPWindow->ulUserDataLength = 0;
 8010f30:	69fb      	ldr	r3, [r7, #28]
 8010f32:	2200      	movs	r2, #0
 8010f34:	631a      	str	r2, [r3, #48]	@ 0x30
                    if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 8010f36:	e004      	b.n	8010f42 <prvStoreRxData+0xe2>
                }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 8010f38:	69fb      	ldr	r3, [r7, #28]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8010f40:	e000      	b.n	8010f44 <prvStoreRxData+0xe4>
                    if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0UL ) )
 8010f42:	bf00      	nop
        }

        return xResult;
 8010f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
 8010f46:	4618      	mov	r0, r3
 8010f48:	3730      	adds	r7, #48	@ 0x30
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}

08010f4e <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    static UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8010f4e:	b580      	push	{r7, lr}
 8010f50:	b088      	sub	sp, #32
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	6078      	str	r0, [r7, #4]
 8010f56:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8010f58:	683b      	ldr	r3, [r7, #0]
 8010f5a:	699b      	ldr	r3, [r3, #24]
 8010f5c:	3322      	adds	r3, #34	@ 0x22
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f7fe fc56 	bl	800f810 <vCastPointerTo_ProtocolHeaders_t>
 8010f64:	61b8      	str	r0, [r7, #24]
                                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8010f66:	69bb      	ldr	r3, [r7, #24]
 8010f68:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	33e0      	adds	r3, #224	@ 0xe0
 8010f6e:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 8010f70:	693b      	ldr	r3, [r7, #16]
 8010f72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010f76:	61fb      	str	r3, [r7, #28]
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            if( uxOptionsLength != 0U )
 8010f78:	69fb      	ldr	r3, [r7, #28]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d013      	beq.n	8010fa6 <prvSetOptions+0x58>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 8010f7e:	693b      	ldr	r3, [r7, #16]
 8010f80:	3380      	adds	r3, #128	@ 0x80
 8010f82:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 8010f84:	697b      	ldr	r3, [r7, #20]
 8010f86:	3314      	adds	r3, #20
 8010f88:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 8010f8a:	69fa      	ldr	r2, [r7, #28]
 8010f8c:	68f9      	ldr	r1, [r7, #12]
 8010f8e:	68b8      	ldr	r0, [r7, #8]
 8010f90:	f004 fed7 	bl	8015d42 <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8010f94:	69fb      	ldr	r3, [r7, #28]
 8010f96:	b2db      	uxtb	r3, r3
 8010f98:	3314      	adds	r3, #20
 8010f9a:	b2db      	uxtb	r3, r3
 8010f9c:	009b      	lsls	r3, r3, #2
 8010f9e:	b2da      	uxtb	r2, r3
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	731a      	strb	r2, [r3, #12]
 8010fa4:	e031      	b.n	801100a <prvSetOptions+0xbc>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.ucTCPState >= ( EventBits_t ) eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8010fac:	2b04      	cmp	r3, #4
 8010fae:	d92c      	bls.n	801100a <prvSetOptions+0xbc>
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010fb6:	f003 0301 	and.w	r3, r3, #1
 8010fba:	b2db      	uxtb	r3, r3
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d024      	beq.n	801100a <prvSetOptions+0xbc>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 8010fc0:	687a      	ldr	r2, [r7, #4]
 8010fc2:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 8010fc6:	f36f 0300 	bfc	r3, #0, #1
 8010fca:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
            if( xTCPWindowLoggingLevel >= 0 )
            {
                FreeRTOS_debug_printf( ( "MSS: sending %d\n", pxSocket->u.xTCP.usCurMSS ) );
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 8010fce:	697b      	ldr	r3, [r7, #20]
 8010fd0:	2202      	movs	r2, #2
 8010fd2:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	2204      	movs	r2, #4
 8010fd8:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) >> 8 );
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010fe0:	0a1b      	lsrs	r3, r3, #8
 8010fe2:	b29b      	uxth	r3, r3
 8010fe4:	b2da      	uxtb	r2, r3
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usCurMSS ) & 0xffU );
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010ff0:	b2da      	uxtb	r2, r3
 8010ff2:	697b      	ldr	r3, [r7, #20]
 8010ff4:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 8010ff6:	2304      	movs	r3, #4
 8010ff8:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8010ffa:	69fb      	ldr	r3, [r7, #28]
 8010ffc:	b2db      	uxtb	r3, r3
 8010ffe:	3314      	adds	r3, #20
 8011000:	b2db      	uxtb	r3, r3
 8011002:	009b      	lsls	r3, r3, #2
 8011004:	b2da      	uxtb	r2, r3
 8011006:	697b      	ldr	r3, [r7, #20]
 8011008:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 801100a:	69fb      	ldr	r3, [r7, #28]
    }
 801100c:	4618      	mov	r0, r3
 801100e:	3720      	adds	r7, #32
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}

08011014 <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8011014:	b580      	push	{r7, lr}
 8011016:	b08e      	sub	sp, #56	@ 0x38
 8011018:	af00      	add	r7, sp, #0
 801101a:	60f8      	str	r0, [r7, #12]
 801101c:	60b9      	str	r1, [r7, #8]
 801101e:	607a      	str	r2, [r7, #4]
 8011020:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	699b      	ldr	r3, [r3, #24]
 8011026:	3322      	adds	r3, #34	@ 0x22
 8011028:	4618      	mov	r0, r3
 801102a:	f7fe fbf1 	bl	800f810 <vCastPointerTo_ProtocolHeaders_t>
 801102e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8011030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011032:	62bb      	str	r3, [r7, #40]	@ 0x28
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	33e0      	adds	r3, #224	@ 0xe0
 8011038:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 801103a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801103c:	7b5b      	ldrb	r3, [r3, #13]
 801103e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8011042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011044:	685b      	ldr	r3, [r3, #4]
 8011046:	061a      	lsls	r2, r3, #24
 8011048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801104a:	685b      	ldr	r3, [r3, #4]
 801104c:	021b      	lsls	r3, r3, #8
 801104e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011052:	431a      	orrs	r2, r3
 8011054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011056:	685b      	ldr	r3, [r3, #4]
 8011058:	0a1b      	lsrs	r3, r3, #8
 801105a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801105e:	431a      	orrs	r2, r3
 8011060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011062:	685b      	ldr	r3, [r3, #4]
 8011064:	0e1b      	lsrs	r3, r3, #24
 8011066:	4313      	orrs	r3, r2
 8011068:	61fb      	str	r3, [r7, #28]
        BaseType_t xSendLength = 0;
 801106a:	2300      	movs	r3, #0
 801106c:	637b      	str	r3, [r7, #52]	@ 0x34
        UBaseType_t uxIntermediateResult = 0U;
 801106e:	2300      	movs	r3, #0
 8011070:	61bb      	str	r3, [r7, #24]

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 8011072:	2310      	movs	r3, #16
 8011074:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 8011078:	2317      	movs	r3, #23
 801107a:	75fb      	strb	r3, [r7, #23]

        if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8011082:	2b02      	cmp	r3, #2
 8011084:	d105      	bne.n	8011092 <prvHandleSynReceived+0x7e>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 8011086:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801108a:	f043 0302 	orr.w	r3, r3, #2
 801108e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 8011092:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8011096:	7dfb      	ldrb	r3, [r7, #23]
 8011098:	4013      	ands	r3, r2
 801109a:	b2db      	uxtb	r3, r3
 801109c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80110a0:	429a      	cmp	r2, r3
 80110a2:	d030      	beq.n	8011106 <prvHandleSynReceived+0xf2>
                                     ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );

            /* In case pxSocket is not yet owned by the application, a closure
             * of the socket will be scheduled for the next cycle. */
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80110a4:	2108      	movs	r1, #8
 80110a6:	68f8      	ldr	r0, [r7, #12]
 80110a8:	f7ff fa4d 	bl	8010546 <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 80110ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110ae:	689b      	ldr	r3, [r3, #8]
 80110b0:	061a      	lsls	r2, r3, #24
 80110b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110b4:	689b      	ldr	r3, [r3, #8]
 80110b6:	021b      	lsls	r3, r3, #8
 80110b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80110bc:	431a      	orrs	r2, r3
 80110be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110c0:	689b      	ldr	r3, [r3, #8]
 80110c2:	0a1b      	lsrs	r3, r3, #8
 80110c4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80110c8:	431a      	orrs	r2, r3
 80110ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110cc:	689b      	ldr	r3, [r3, #8]
 80110ce:	0e1b      	lsrs	r3, r3, #24
 80110d0:	431a      	orrs	r2, r3
 80110d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110d4:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 80110d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110d8:	69fa      	ldr	r2, [r7, #28]
 80110da:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 80110dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110de:	7b5b      	ldrb	r3, [r3, #13]
 80110e0:	f043 0304 	orr.w	r3, r3, #4
 80110e4:	b2da      	uxtb	r2, r3
 80110e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110e8:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	3328      	adds	r3, #40	@ 0x28
 80110ee:	61bb      	str	r3, [r7, #24]
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 80110f0:	69bb      	ldr	r3, [r7, #24]
 80110f2:	637b      	str	r3, [r7, #52]	@ 0x34

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	b2db      	uxtb	r3, r3
 80110f8:	3314      	adds	r3, #20
 80110fa:	b2db      	uxtb	r3, r3
 80110fc:	009b      	lsls	r3, r3, #2
 80110fe:	b2da      	uxtb	r2, r3
 8011100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011102:	731a      	strb	r2, [r3, #12]
 8011104:	e070      	b.n	80111e8 <prvHandleSynReceived+0x1d4>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	8f9a      	ldrh	r2, [r3, #60]	@ 0x3c
 801110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801110c:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8011114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011116:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8

            if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8011120:	2b02      	cmp	r3, #2
 8011122:	d12a      	bne.n	801117a <prvHandleSynReceived+0x166>
            {
                /* Map the Last packet onto the ProtocolHeader_t struct for easy access to the fields. */
                ProtocolHeaders_t * pxLastHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	33a4      	adds	r3, #164	@ 0xa4
 8011128:	4618      	mov	r0, r3
 801112a:	f7fe fb71 	bl	800f810 <vCastPointerTo_ProtocolHeaders_t>
 801112e:	6138      	str	r0, [r7, #16]
                                                                            &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8011130:	693b      	ldr	r3, [r7, #16]
 8011132:	2210      	movs	r2, #16
 8011134:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8011136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011138:	2210      	movs	r2, #16
 801113a:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	f103 00e0 	add.w	r0, r3, #224	@ 0xe0
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usCurMSS );
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 801114e:	69f9      	ldr	r1, [r7, #28]
 8011150:	f001 f964 	bl	801241c <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8011154:	69fb      	ldr	r3, [r7, #28]
 8011156:	1c5a      	adds	r2, r3, #1
 8011158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801115a:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 801115c:	69fb      	ldr	r3, [r7, #28]
 801115e:	1c5a      	adds	r2, r3, #1
 8011160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011162:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 8011164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011166:	6a1b      	ldr	r3, [r3, #32]
 8011168:	1c5a      	adds	r2, r3, #1
 801116a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801116c:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 801116e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011172:	1c5a      	adds	r2, r3, #1
 8011174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011176:	635a      	str	r2, [r3, #52]	@ 0x34
 8011178:	e005      	b.n	8011186 <prvHandleSynReceived+0x172>
            }
            else if( ulReceiveLength == 0U )
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d102      	bne.n	8011186 <prvHandleSynReceived+0x172>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8011180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011182:	69fa      	ldr	r2, [r7, #28]
 8011184:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8011186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011188:	69db      	ldr	r3, [r3, #28]
 801118a:	1c5a      	adds	r2, r3, #1
 801118c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801118e:	62da      	str	r2, [r3, #44]	@ 0x2c
                                             pxSocket->u.xTCP.usRemotePort,
                                             ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
                }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.ucTCPState == ( EventBits_t ) eCONNECT_SYN ) || ( ulReceiveLength != 0UL ) )
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8011196:	2b02      	cmp	r3, #2
 8011198:	d002      	beq.n	80111a0 <prvHandleSynReceived+0x18c>
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d00f      	beq.n	80111c0 <prvHandleSynReceived+0x1ac>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 80111a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111a2:	2210      	movs	r2, #16
 80111a4:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	3328      	adds	r3, #40	@ 0x28
 80111aa:	61bb      	str	r3, [r7, #24]
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 80111ac:	69bb      	ldr	r3, [r7, #24]
 80111ae:	637b      	str	r3, [r7, #52]	@ 0x34
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80111b0:	683b      	ldr	r3, [r7, #0]
 80111b2:	b2db      	uxtb	r3, r3
 80111b4:	3314      	adds	r3, #20
 80111b6:	b2db      	uxtb	r3, r3
 80111b8:	009b      	lsls	r3, r3, #2
 80111ba:	b2da      	uxtb	r2, r3
 80111bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111be:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
                {
                    if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80111c6:	f003 0310 	and.w	r3, r3, #16
 80111ca:	b2db      	uxtb	r3, r3
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d107      	bne.n	80111e0 <prvHandleSynReceived+0x1cc>
                    {
                        /* The other party did not send a scaling factor.
                         * A shifting factor in this side must be canceled. */
                        pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	2200      	movs	r2, #0
 80111d4:	f883 20d1 	strb.w	r2, [r3, #209]	@ 0xd1
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	2200      	movs	r2, #0
 80111dc:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
                }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 80111e0:	2105      	movs	r1, #5
 80111e2:	68f8      	ldr	r0, [r7, #12]
 80111e4:	f7ff f9af 	bl	8010546 <vTCPStateChange>
        }

        return xSendLength;
 80111e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80111ea:	4618      	mov	r0, r3
 80111ec:	3738      	adds	r7, #56	@ 0x38
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}

080111f2 <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 80111f2:	b580      	push	{r7, lr}
 80111f4:	b096      	sub	sp, #88	@ 0x58
 80111f6:	af02      	add	r7, sp, #8
 80111f8:	60f8      	str	r0, [r7, #12]
 80111fa:	60b9      	str	r1, [r7, #8]
 80111fc:	607a      	str	r2, [r7, #4]
 80111fe:	603b      	str	r3, [r7, #0]
        /* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8011200:	68bb      	ldr	r3, [r7, #8]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	699b      	ldr	r3, [r3, #24]
 8011206:	3322      	adds	r3, #34	@ 0x22
 8011208:	4618      	mov	r0, r3
 801120a:	f7fe fb01 	bl	800f810 <vCastPointerTo_ProtocolHeaders_t>
 801120e:	6478      	str	r0, [r7, #68]	@ 0x44
                                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8011210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011212:	643b      	str	r3, [r7, #64]	@ 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	33e0      	adds	r3, #224	@ 0xe0
 8011218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 801121a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801121c:	7b5b      	ldrb	r3, [r3, #13]
 801121e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 8011222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011224:	685b      	ldr	r3, [r3, #4]
 8011226:	061a      	lsls	r2, r3, #24
 8011228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801122a:	685b      	ldr	r3, [r3, #4]
 801122c:	021b      	lsls	r3, r3, #8
 801122e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011232:	431a      	orrs	r2, r3
 8011234:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011236:	685b      	ldr	r3, [r3, #4]
 8011238:	0a1b      	lsrs	r3, r3, #8
 801123a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801123e:	431a      	orrs	r2, r3
 8011240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011242:	685b      	ldr	r3, [r3, #4]
 8011244:	0e1b      	lsrs	r3, r3, #24
 8011246:	4313      	orrs	r3, r2
 8011248:	637b      	str	r3, [r7, #52]	@ 0x34
 801124a:	2300      	movs	r3, #0
 801124c:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 801124e:	2300      	movs	r3, #0
 8011250:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011252:	2300      	movs	r3, #0
 8011254:	64bb      	str	r3, [r7, #72]	@ 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 8011256:	2300      	movs	r3, #0
 8011258:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 801125a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801125c:	89db      	ldrh	r3, [r3, #14]
 801125e:	021b      	lsls	r3, r3, #8
 8011260:	b21a      	sxth	r2, r3
 8011262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011264:	89db      	ldrh	r3, [r3, #14]
 8011266:	0a1b      	lsrs	r3, r3, #8
 8011268:	b29b      	uxth	r3, r3
 801126a:	b21b      	sxth	r3, r3
 801126c:	4313      	orrs	r3, r2
 801126e:	b21b      	sxth	r3, r3
 8011270:	857b      	strh	r3, [r7, #42]	@ 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8011272:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
        #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                pxSocket->u.xTCP.ulWindowSize =
                    ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8011280:	68fa      	ldr	r2, [r7, #12]
 8011282:	f892 20d2 	ldrb.w	r2, [r2, #210]	@ 0xd2
 8011286:	fa03 f202 	lsl.w	r2, r3, r2
                pxSocket->u.xTCP.ulWindowSize =
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
            }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) != 0U )
 8011290:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8011294:	f003 0310 	and.w	r3, r3, #16
 8011298:	2b00      	cmp	r3, #0
 801129a:	d03c      	beq.n	8011316 <prvHandleEstablished+0x124>
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 801129c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801129e:	689b      	ldr	r3, [r3, #8]
 80112a0:	061a      	lsls	r2, r3, #24
 80112a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80112a4:	689b      	ldr	r3, [r3, #8]
 80112a6:	021b      	lsls	r3, r3, #8
 80112a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80112ac:	431a      	orrs	r2, r3
 80112ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80112b0:	689b      	ldr	r3, [r3, #8]
 80112b2:	0a1b      	lsrs	r3, r3, #8
 80112b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80112b8:	431a      	orrs	r2, r3
 80112ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80112bc:	689b      	ldr	r3, [r3, #8]
 80112be:	0e1b      	lsrs	r3, r3, #24
 80112c0:	4313      	orrs	r3, r2
 80112c2:	4619      	mov	r1, r3
 80112c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80112c6:	f001 fdbb 	bl	8012e40 <ulTCPWindowTxAck>
 80112ca:	6278      	str	r0, [r7, #36]	@ 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d020      	beq.n	8011316 <prvHandleEstablished+0x124>
 80112d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d01d      	beq.n	8011316 <prvHandleEstablished+0x124>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80112de:	2300      	movs	r3, #0
 80112e0:	9300      	str	r3, [sp, #0]
 80112e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112e4:	2200      	movs	r2, #0
 80112e6:	2100      	movs	r1, #0
 80112e8:	f7fe f93c 	bl	800f564 <uxStreamBufferGet>
 80112ec:	4603      	mov	r3, r0
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d011      	beq.n	8011316 <prvHandleEstablished+0x124>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	f043 0202 	orr.w	r2, r3, #2
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                        {
                            if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011302:	f003 0302 	and.w	r3, r3, #2
 8011306:	2b00      	cmp	r3, #0
 8011308:	d005      	beq.n	8011316 <prvHandleEstablished+0x124>
                            {
                                pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	601a      	str	r2, [r3, #0]
            }
        }

        /* If this socket has a stream for transmission, add the data to the
         * outgoing segment(s). */
        if( pxSocket->u.xTCP.txStream != NULL )
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801131a:	2b00      	cmp	r3, #0
 801131c:	d002      	beq.n	8011324 <prvHandleEstablished+0x132>
        {
            prvTCPAddTxData( pxSocket );
 801131e:	68f8      	ldr	r0, [r7, #12]
 8011320:	f7ff fc50 	bl	8010bc4 <prvTCPAddTxData>
        }

        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8011324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011326:	6a1a      	ldr	r2, [r3, #32]
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

        if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011334:	f003 0320 	and.w	r3, r3, #32
 8011338:	b2db      	uxtb	r3, r3
 801133a:	2b00      	cmp	r3, #0
 801133c:	d105      	bne.n	801134a <prvHandleEstablished+0x158>
 801133e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8011342:	f003 0301 	and.w	r3, r3, #1
 8011346:	2b00      	cmp	r3, #0
 8011348:	d039      	beq.n	80113be <prvHandleEstablished+0x1cc>
        {
            /* Peer is requesting to stop, see if we're really finished. */
            xMayClose = pdTRUE;
 801134a:	2301      	movs	r3, #1
 801134c:	64bb      	str	r3, [r7, #72]	@ 0x48

            /* Checks are only necessary if we haven't sent a FIN yet. */
            if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011358:	b2db      	uxtb	r3, r3
 801135a:	2b00      	cmp	r3, #0
 801135c:	d11e      	bne.n	801139c <prvHandleEstablished+0x1aa>
            {
                /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 801135e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011360:	f000 ff72 	bl	8012248 <xTCPWindowRxEmpty>
 8011364:	6238      	str	r0, [r7, #32]
                bTxDone = xTCPWindowTxDone( pxTCPWindow );
 8011366:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011368:	f001 fab6 	bl	80128d8 <xTCPWindowTxDone>
 801136c:	61f8      	str	r0, [r7, #28]

                if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 801136e:	6a3b      	ldr	r3, [r7, #32]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d002      	beq.n	801137a <prvHandleEstablished+0x188>
 8011374:	69fb      	ldr	r3, [r7, #28]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d102      	bne.n	8011380 <prvHandleEstablished+0x18e>
                    /* Refusing FIN: Rx incomplete 1 optlen 4 tx done 1. */
                    FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %lu tx done %ld\n",
                                             pxSocket->usLocalPort,
                                             pxSocket->u.xTCP.usRemotePort,
                                             bRxComplete, bTxDone ) );
                    xMayClose = pdFALSE;
 801137a:	2300      	movs	r3, #0
 801137c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801137e:	e00d      	b.n	801139c <prvHandleEstablished+0x1aa>
                }
                else
                {
                    ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8011380:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	441a      	add	r2, r3
 8011386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011388:	691b      	ldr	r3, [r3, #16]
 801138a:	1ad3      	subs	r3, r2, r3
 801138c:	633b      	str	r3, [r7, #48]	@ 0x30
                    lDistance = ( int32_t ) ulIntermediateResult;
 801138e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011390:	61bb      	str	r3, [r7, #24]

                    if( lDistance > 1 )
 8011392:	69bb      	ldr	r3, [r7, #24]
 8011394:	2b01      	cmp	r3, #1
 8011396:	dd01      	ble.n	801139c <prvHandleEstablished+0x1aa>
                    {
                        FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %ld (cur %lu high %lu)\n",
                                                 lDistance, pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber,
                                                 pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) );

                        xMayClose = pdFALSE;
 8011398:	2300      	movs	r3, #0
 801139a:	64bb      	str	r3, [r7, #72]	@ 0x48
                FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %ld (Rx %lu Len %ld, Tx %lu)\n",
                                         xMayClose, ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber, ulReceiveLength,
                                         pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) );
            }

            if( xMayClose != pdFALSE )
 801139c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d00d      	beq.n	80113be <prvHandleEstablished+0x1cc>
            {
                pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 80113a2:	68fa      	ldr	r2, [r7, #12]
 80113a4:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 80113a8:	f043 0320 	orr.w	r3, r3, #32
 80113ac:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
                xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	4619      	mov	r1, r3
 80113b6:	68f8      	ldr	r0, [r7, #12]
 80113b8:	f7ff fc2e 	bl	8010c18 <prvTCPHandleFin>
 80113bc:	64f8      	str	r0, [r7, #76]	@ 0x4c
            }
        }

        if( xMayClose == pdFALSE )
 80113be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d12c      	bne.n	801141e <prvHandleEstablished+0x22c>
        {
            pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 80113c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113c6:	2210      	movs	r2, #16
 80113c8:	735a      	strb	r2, [r3, #13]

            if( ulReceiveLength != 0U )
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d018      	beq.n	8011402 <prvHandleEstablished+0x210>
            {
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	3328      	adds	r3, #40	@ 0x28
 80113d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 80113d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	b2db      	uxtb	r3, r3
 80113de:	3314      	adds	r3, #20
 80113e0:	b2db      	uxtb	r3, r3
 80113e2:	009b      	lsls	r3, r3, #2
 80113e4:	b2da      	uxtb	r2, r3
 80113e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113e8:	731a      	strb	r2, [r3, #12]

                if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80113f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80113f4:	b2db      	uxtb	r3, r3
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d003      	beq.n	8011402 <prvHandleEstablished+0x210>
                {
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 80113fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80113fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011400:	621a      	str	r2, [r3, #32]

            /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
             * can not send-out both TCP options and also a full packet. Sending
             * options (SACK) is always more urgent than sending data, which can be
             * sent later. */
            if( uxOptionsLength == 0U )
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d10a      	bne.n	801141e <prvHandleEstablished+0x22c>
            {
                /* prvTCPPrepareSend might allocate a bigger network buffer, if
                 * necessary. */
                lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8011408:	683a      	ldr	r2, [r7, #0]
 801140a:	68b9      	ldr	r1, [r7, #8]
 801140c:	68f8      	ldr	r0, [r7, #12]
 801140e:	f7ff f9f3 	bl	80107f8 <prvTCPPrepareSend>
 8011412:	6178      	str	r0, [r7, #20]

                if( lSendResult > 0 )
 8011414:	697b      	ldr	r3, [r7, #20]
 8011416:	2b00      	cmp	r3, #0
 8011418:	dd01      	ble.n	801141e <prvHandleEstablished+0x22c>
                {
                    xSendLength = ( BaseType_t ) lSendResult;
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
            }
        }

        return xSendLength;
 801141e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8011420:	4618      	mov	r0, r3
 8011422:	3750      	adds	r7, #80	@ 0x50
 8011424:	46bd      	mov	sp, r7
 8011426:	bd80      	pop	{r7, pc}

08011428 <prvSendData>:
 */
    static BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                   uint32_t ulReceiveLength,
                                   BaseType_t xByteCount )
    {
 8011428:	b580      	push	{r7, lr}
 801142a:	b08c      	sub	sp, #48	@ 0x30
 801142c:	af00      	add	r7, sp, #0
 801142e:	60f8      	str	r0, [r7, #12]
 8011430:	60b9      	str	r1, [r7, #8]
 8011432:	607a      	str	r2, [r7, #4]
 8011434:	603b      	str	r3, [r7, #0]
        /* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	699b      	ldr	r3, [r3, #24]
 801143c:	3322      	adds	r3, #34	@ 0x22
 801143e:	4618      	mov	r0, r3
 8011440:	f7fe f9e6 	bl	800f810 <vCastPointerTo_ProtocolHeaders_t>
 8011444:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                              &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( *ppxNetworkBuffer ) ] ) );
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8011446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011448:	627b      	str	r3, [r7, #36]	@ 0x24
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	33e0      	adds	r3, #224	@ 0xe0
 801144e:	623b      	str	r3, [r7, #32]
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 8011450:	683b      	ldr	r3, [r7, #0]
 8011452:	62fb      	str	r3, [r7, #44]	@ 0x2c
            #endif
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011458:	6a3b      	ldr	r3, [r7, #32]
 801145a:	691b      	ldr	r3, [r3, #16]
 801145c:	1ad3      	subs	r3, r2, r3
 801145e:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 8011460:	69fb      	ldr	r3, [r7, #28]
 8011462:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
            {
                #if ( ipconfigTCP_ACK_EARLIER_PACKET != 0 )
                    {
                        lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usCurMSS );
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801146a:	005b      	lsls	r3, r3, #1
 801146c:	617b      	str	r3, [r7, #20]
                #endif /* ipconfigTCP_ACK_EARLIER_PACKET */

                /* In case we're receiving data continuously, we might postpone sending
                 * an ACK to gain performance. */
                /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
                if( ( ulReceiveLength > 0U ) &&                                                   /* Data was sent to this socket. */
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d04b      	beq.n	801150c <prvSendData+0xe4>
 8011474:	69ba      	ldr	r2, [r7, #24]
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	429a      	cmp	r2, r3
 801147a:	db47      	blt.n	801150c <prvSendData+0xe4>
                    ( lRxSpace >= lMinLength ) &&                                                 /* There is Rx space for more data. */
                    ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&                     /* Not in a closure phase. */
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011486:	b2db      	uxtb	r3, r3
                    ( lRxSpace >= lMinLength ) &&                                                 /* There is Rx space for more data. */
 8011488:	2b00      	cmp	r3, #0
 801148a:	d13f      	bne.n	801150c <prvSendData+0xe4>
                    ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) &&                     /* Not in a closure phase. */
 801148c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801148e:	2b28      	cmp	r3, #40	@ 0x28
 8011490:	d13c      	bne.n	801150c <prvSendData+0xe4>
                    ( xSendLength == uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) && /* No Tx data or options to be sent. */
                    ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) &&                /* Connection established. */
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
                    ( xSendLength == uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) && /* No Tx data or options to be sent. */
 8011498:	2b05      	cmp	r3, #5
 801149a:	d137      	bne.n	801150c <prvSendData+0xe4>
                    ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )                              /* There are no other flags than an ACK. */
 801149c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801149e:	7b5b      	ldrb	r3, [r3, #13]
                    ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eESTABLISHED ) &&                /* Connection established. */
 80114a0:	2b10      	cmp	r3, #16
 80114a2:	d133      	bne.n	801150c <prvSendData+0xe4>
                {
                    if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d00c      	beq.n	80114ca <prvSendData+0xa2>
                    {
                        /* There was still a delayed in queue, delete it. */
                        if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d004      	beq.n	80114c2 <prvSendData+0x9a>
                        {
                            vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80114bc:	4618      	mov	r0, r3
 80114be:	f002 ffb7 	bl	8014430 <vReleaseNetworkBufferAndDescriptor>
                        }

                        pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	681a      	ldr	r2, [r3, #0]
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	67da      	str	r2, [r3, #124]	@ 0x7c
                    }

                    if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||            /* Received a small message. */
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80114d0:	461a      	mov	r2, r3
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	4293      	cmp	r3, r2
 80114d6:	d307      	bcc.n	80114e8 <prvSendData+0xc0>
                        ( lRxSpace < ipNUMERIC_CAST( int32_t, 2U * pxSocket->u.xTCP.usCurMSS ) ) ) /* There are less than 2 x MSS space in the Rx buffer. */
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80114de:	005b      	lsls	r3, r3, #1
 80114e0:	461a      	mov	r2, r3
                    if( ( ulReceiveLength < ( uint32_t ) pxSocket->u.xTCP.usCurMSS ) ||            /* Received a small message. */
 80114e2:	69bb      	ldr	r3, [r7, #24]
 80114e4:	4293      	cmp	r3, r2
 80114e6:	da04      	bge.n	80114f2 <prvSendData+0xca>
                    {
                        pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	2202      	movs	r2, #2
 80114ec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80114f0:	e003      	b.n	80114fa <prvSendData+0xd2>
                    else
                    {
                        /* Normally a delayed ACK should wait 200 ms for a next incoming
                         * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                         * for full-size message. */
                        pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	2214      	movs	r2, #20
 80114f6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                    }

                    if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 80114fa:	4b16      	ldr	r3, [pc, #88]	@ (8011554 <prvSendData+0x12c>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	2b01      	cmp	r3, #1
                                                 pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber,
                                                 xSendLength,
                                                 pxSocket->u.xTCP.usTimeout, lRxSpace ) );
                    }

                    *ppxNetworkBuffer = NULL;
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	2200      	movs	r2, #0
 8011504:	601a      	str	r2, [r3, #0]
                    xSendLength = 0;
 8011506:	2300      	movs	r3, #0
 8011508:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801150a:	e011      	b.n	8011530 <prvSendData+0x108>
                }
                else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011510:	2b00      	cmp	r3, #0
 8011512:	d00d      	beq.n	8011530 <prvSendData+0x108>
                {
                    /* As an ACK is not being delayed, remove any earlier delayed ACK
                     * message. */
                    if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8011518:	68bb      	ldr	r3, [r7, #8]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	429a      	cmp	r2, r3
 801151e:	d004      	beq.n	801152a <prvSendData+0x102>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011524:	4618      	mov	r0, r3
 8011526:	f002 ff83 	bl	8014430 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = NULL;
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	2200      	movs	r2, #0
 801152e:	67da      	str	r2, [r3, #124]	@ 0x7c
                ( void ) pxTCPHeader;
                ( void ) lRxSpace;
            }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 8011530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011532:	2b00      	cmp	r3, #0
 8011534:	d009      	beq.n	801154a <prvSendData+0x122>
        {
            if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8011536:	4b07      	ldr	r3, [pc, #28]	@ (8011554 <prvSendData+0x12c>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	2b01      	cmp	r3, #1
                                         xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	6819      	ldr	r1, [r3, #0]
 8011540:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011542:	2300      	movs	r3, #0
 8011544:	68f8      	ldr	r0, [r7, #12]
 8011546:	f7fe fb11 	bl	800fb6c <prvTCPReturnPacket>
                    *ppxNetworkBuffer = NULL;
                }
            #endif
        }

        return xSendLength;
 801154a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 801154c:	4618      	mov	r0, r3
 801154e:	3730      	adds	r7, #48	@ 0x30
 8011550:	46bd      	mov	sp, r7
 8011552:	bd80      	pop	{r7, pc}
 8011554:	2000a3c8 	.word	0x2000a3c8

08011558 <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    static BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 8011558:	b580      	push	{r7, lr}
 801155a:	b08c      	sub	sp, #48	@ 0x30
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
 8011560:	6039      	str	r1, [r7, #0]
        /* Map the buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        ProtocolHeaders_t * pxProtocolHeaders = ipCAST_PTR_TO_TYPE_PTR( ProtocolHeaders_t,
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	699b      	ldr	r3, [r3, #24]
 8011568:	3322      	adds	r3, #34	@ 0x22
 801156a:	4618      	mov	r0, r3
 801156c:	f7fe f950 	bl	800f810 <vCastPointerTo_ProtocolHeaders_t>
 8011570:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( *ppxNetworkBuffer ) ] ) );
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8011572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011574:	627b      	str	r3, [r7, #36]	@ 0x24
        BaseType_t xSendLength = 0;
 8011576:	2300      	movs	r3, #0
 8011578:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 801157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801157c:	685b      	ldr	r3, [r3, #4]
 801157e:	061a      	lsls	r2, r3, #24
 8011580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	021b      	lsls	r3, r3, #8
 8011586:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801158a:	431a      	orrs	r2, r3
 801158c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801158e:	685b      	ldr	r3, [r3, #4]
 8011590:	0a1b      	lsrs	r3, r3, #8
 8011592:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011596:	431a      	orrs	r2, r3
 8011598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801159a:	685b      	ldr	r3, [r3, #4]
 801159c:	0e1b      	lsrs	r3, r3, #24
 801159e:	4313      	orrs	r3, r2
 80115a0:	623b      	str	r3, [r7, #32]
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 80115a2:	2300      	movs	r3, #0
 80115a4:	61fb      	str	r3, [r7, #28]
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80115a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115a8:	7b5b      	ldrb	r3, [r3, #13]
 80115aa:	76fb      	strb	r3, [r7, #27]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	33e0      	adds	r3, #224	@ 0xe0
 80115b0:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIntermediateResult = 0;
 80115b2:	2300      	movs	r3, #0
 80115b4:	613b      	str	r3, [r7, #16]

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	f107 0208 	add.w	r2, r7, #8
 80115be:	4611      	mov	r1, r2
 80115c0:	4618      	mov	r0, r3
 80115c2:	f7ff fbd5 	bl	8010d70 <prvCheckRxData>
 80115c6:	4603      	mov	r3, r0
 80115c8:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED )
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 80115d0:	2b04      	cmp	r3, #4
 80115d2:	d90c      	bls.n	80115ee <prvTCPHandleState+0x96>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 80115d4:	697b      	ldr	r3, [r7, #20]
 80115d6:	691a      	ldr	r2, [r3, #16]
 80115d8:	6a3b      	ldr	r3, [r7, #32]
 80115da:	3301      	adds	r3, #1
 80115dc:	429a      	cmp	r2, r3
 80115de:	d106      	bne.n	80115ee <prvTCPHandleState+0x96>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 80115e0:	687a      	ldr	r2, [r7, #4]
 80115e2:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 80115e6:	f043 0301 	orr.w	r3, r3, #1
 80115ea:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        if( ( ( int32_t ) ( ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber ) ) > 0L )
 80115ee:	6a3a      	ldr	r2, [r7, #32]
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	441a      	add	r2, r3
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	699b      	ldr	r3, [r3, #24]
 80115f8:	1ad3      	subs	r3, r2, r3
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	dd04      	ble.n	8011608 <prvTCPHandleState+0xb0>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 80115fe:	6a3a      	ldr	r2, [r7, #32]
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	441a      	add	r2, r3
 8011604:	697b      	ldr	r3, [r7, #20]
 8011606:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 8011608:	68b9      	ldr	r1, [r7, #8]
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	681a      	ldr	r2, [r3, #0]
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f7ff fc25 	bl	8010e60 <prvStoreRxData>
 8011616:	4603      	mov	r3, r0
 8011618:	2b00      	cmp	r3, #0
 801161a:	da03      	bge.n	8011624 <prvTCPHandleState+0xcc>
        {
            xSendLength = -1;
 801161c:	f04f 33ff 	mov.w	r3, #4294967295
 8011620:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011622:	e0a3      	b.n	801176c <prvTCPHandleState+0x214>
        }
        else
        {
            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 8011624:	683b      	ldr	r3, [r7, #0]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	4619      	mov	r1, r3
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	f7ff fc8f 	bl	8010f4e <prvSetOptions>
 8011630:	61f8      	str	r0, [r7, #28]

            if( ( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8011638:	2b04      	cmp	r3, #4
 801163a:	d108      	bne.n	801164e <prvTCPHandleState+0xf6>
 801163c:	7efb      	ldrb	r3, [r7, #27]
 801163e:	f003 031f 	and.w	r3, r3, #31
 8011642:	2b02      	cmp	r3, #2
 8011644:	d103      	bne.n	801164e <prvTCPHandleState+0xf6>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 8011646:	2103      	movs	r1, #3
 8011648:	6878      	ldr	r0, [r7, #4]
 801164a:	f7fe ff7c 	bl	8010546 <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 801164e:	7efb      	ldrb	r3, [r7, #27]
 8011650:	f003 0301 	and.w	r3, r3, #1
 8011654:	2b00      	cmp	r3, #0
 8011656:	d022      	beq.n	801169e <prvTCPHandleState+0x146>
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801165e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011662:	b2db      	uxtb	r3, r3
 8011664:	2b00      	cmp	r3, #0
 8011666:	d11a      	bne.n	801169e <prvTCPHandleState+0x146>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8011668:	6a3a      	ldr	r2, [r7, #32]
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	441a      	add	r2, r3
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 8011672:	687a      	ldr	r2, [r7, #4]
 8011674:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 8011678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801167c:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801168a:	b2db      	uxtb	r3, r3
 801168c:	2b00      	cmp	r3, #0
 801168e:	d106      	bne.n	801169e <prvTCPHandleState+0x146>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 8011690:	687a      	ldr	r2, [r7, #4]
 8011692:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 8011696:	f043 0302 	orr.w	r3, r3, #2
 801169a:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
                }
            }

            switch( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) )
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 80116a4:	2b0b      	cmp	r3, #11
 80116a6:	d860      	bhi.n	801176a <prvTCPHandleState+0x212>
 80116a8:	a201      	add	r2, pc, #4	@ (adr r2, 80116b0 <prvTCPHandleState+0x158>)
 80116aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116ae:	bf00      	nop
 80116b0:	0801176b 	.word	0x0801176b
 80116b4:	0801176b 	.word	0x0801176b
 80116b8:	08011739 	.word	0x08011739
 80116bc:	080116e1 	.word	0x080116e1
 80116c0:	08011739 	.word	0x08011739
 80116c4:	0801174b 	.word	0x0801174b
 80116c8:	0801175b 	.word	0x0801175b
 80116cc:	0801175b 	.word	0x0801175b
 80116d0:	0801176b 	.word	0x0801176b
 80116d4:	0801176b 	.word	0x0801176b
 80116d8:	0801175b 	.word	0x0801175b
 80116dc:	0801176b 	.word	0x0801176b
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 80116e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80116e2:	6878      	ldr	r0, [r7, #4]
 80116e4:	f7fe feba 	bl	801045c <prvSetSynAckOptions>
 80116e8:	61f8      	str	r0, [r7, #28]
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 80116ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116ec:	2212      	movs	r2, #18
 80116ee:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80116f0:	69fb      	ldr	r3, [r7, #28]
 80116f2:	3328      	adds	r3, #40	@ 0x28
 80116f4:	613b      	str	r3, [r7, #16]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 80116f6:	693b      	ldr	r3, [r7, #16]
 80116f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80116fa:	69fb      	ldr	r3, [r7, #28]
 80116fc:	b2db      	uxtb	r3, r3
 80116fe:	3314      	adds	r3, #20
 8011700:	b2db      	uxtb	r3, r3
 8011702:	009b      	lsls	r3, r3, #2
 8011704:	b2da      	uxtb	r2, r3
 8011706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011708:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 801170a:	2104      	movs	r1, #4
 801170c:	6878      	ldr	r0, [r7, #4]
 801170e:	f7fe ff1a 	bl	8010546 <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1UL;
 8011712:	6a3b      	ldr	r3, [r7, #32]
 8011714:	1c5a      	adds	r2, r3, #1
 8011716:	697b      	ldr	r3, [r7, #20]
 8011718:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1UL;
 801171a:	6a3b      	ldr	r3, [r7, #32]
 801171c:	1c5a      	adds	r2, r3, #1
 801171e:	697b      	ldr	r3, [r7, #20]
 8011720:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL;
 8011722:	697b      	ldr	r3, [r7, #20]
 8011724:	69db      	ldr	r3, [r3, #28]
 8011726:	1c5a      	adds	r2, r3, #1
 8011728:	697b      	ldr	r3, [r7, #20]
 801172a:	635a      	str	r2, [r3, #52]	@ 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1UL; /* because we send a TCP_SYN. */
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	69db      	ldr	r3, [r3, #28]
 8011730:	1c5a      	adds	r2, r3, #1
 8011732:	697b      	ldr	r3, [r7, #20]
 8011734:	621a      	str	r2, [r3, #32]
                    break;
 8011736:	e019      	b.n	801176c <prvTCPHandleState+0x214>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	6819      	ldr	r1, [r3, #0]
 801173c:	69fb      	ldr	r3, [r7, #28]
 801173e:	68fa      	ldr	r2, [r7, #12]
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f7ff fc67 	bl	8011014 <prvHandleSynReceived>
 8011746:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    break;
 8011748:	e010      	b.n	801176c <prvTCPHandleState+0x214>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 801174a:	69fb      	ldr	r3, [r7, #28]
 801174c:	68fa      	ldr	r2, [r7, #12]
 801174e:	6839      	ldr	r1, [r7, #0]
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f7ff fd4e 	bl	80111f2 <prvHandleEstablished>
 8011756:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    break;
 8011758:	e008      	b.n	801176c <prvTCPHandleState+0x214>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	4619      	mov	r1, r3
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	f7ff fa59 	bl	8010c18 <prvTCPHandleFin>
 8011766:	62f8      	str	r0, [r7, #44]	@ 0x2c
                    break;
 8011768:	e000      	b.n	801176c <prvTCPHandleState+0x214>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 801176a:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 801176c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801176e:	2b00      	cmp	r3, #0
 8011770:	dd06      	ble.n	8011780 <prvTCPHandleState+0x228>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 8011772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011774:	68fa      	ldr	r2, [r7, #12]
 8011776:	6839      	ldr	r1, [r7, #0]
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f7ff fe55 	bl	8011428 <prvSendData>
 801177e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        }

        return xSendLength;
 8011780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8011782:	4618      	mov	r0, r3
 8011784:	3730      	adds	r7, #48	@ 0x30
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}
 801178a:	bf00      	nop

0801178c <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    static BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                     uint8_t ucTCPFlags )
    {
 801178c:	b580      	push	{r7, lr}
 801178e:	b084      	sub	sp, #16
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
 8011794:	460b      	mov	r3, r1
 8011796:	70fb      	strb	r3, [r7, #3]
            ( void ) pxNetworkBuffer;
            ( void ) ucTCPFlags;
        #else
            {
                /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */
                TCPPacket_t * pxTCPPacket = ipCAST_PTR_TO_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	699b      	ldr	r3, [r3, #24]
 801179c:	4618      	mov	r0, r3
 801179e:	f7fe f821 	bl	800f7e4 <vCastPointerTo_TCPPacket_t>
 80117a2:	60f8      	str	r0, [r7, #12]
                const uint32_t ulSendLength =
 80117a4:	2328      	movs	r3, #40	@ 0x28
 80117a6:	60bb      	str	r3, [r7, #8]
                    ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER ); /* Plus 0 options. */

                pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	78fa      	ldrb	r2, [r7, #3]
 80117ac:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
                pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	2250      	movs	r2, #80	@ 0x50
 80117b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

                prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 80117b8:	2300      	movs	r3, #0
 80117ba:	68ba      	ldr	r2, [r7, #8]
 80117bc:	6879      	ldr	r1, [r7, #4]
 80117be:	2000      	movs	r0, #0
 80117c0:	f7fe f9d4 	bl	800fb6c <prvTCPReturnPacket>
            }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return pdFAIL;
 80117c4:	2300      	movs	r3, #0
    }
 80117c6:	4618      	mov	r0, r3
 80117c8:	3710      	adds	r7, #16
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd80      	pop	{r7, pc}

080117ce <prvTCPSendChallengeAck>:
 * @param[in] pxNetworkBuffer: The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    static BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80117ce:	b580      	push	{r7, lr}
 80117d0:	b082      	sub	sp, #8
 80117d2:	af00      	add	r7, sp, #0
 80117d4:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 80117d6:	2110      	movs	r1, #16
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f7ff ffd7 	bl	801178c <prvTCPSendSpecialPacketHelper>
 80117de:	4603      	mov	r3, r0
    }
 80117e0:	4618      	mov	r0, r3
 80117e2:	3708      	adds	r7, #8
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}

080117e8 <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer: The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    static BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 80117f0:	2114      	movs	r1, #20
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f7ff ffca 	bl	801178c <prvTCPSendSpecialPacketHelper>
 80117f8:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 80117fa:	4618      	mov	r0, r3
 80117fc:	3708      	adds	r7, #8
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}
	...

08011804 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket: The socket whose MSS is to be set.
 */
    static void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 8011804:	b580      	push	{r7, lr}
 8011806:	b084      	sub	sp, #16
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
        uint32_t ulMSS = ipconfigTCP_MSS;
 801180c:	f44f 6391 	mov.w	r3, #1160	@ 0x488
 8011810:	60fb      	str	r3, [r7, #12]

        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.ulRemoteIP ) ^ *ipLOCAL_IP_ADDRESS_POINTER ) & xNetworkAddressing.ulNetMask ) != 0UL )
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011816:	061a      	lsls	r2, r3, #24
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801181c:	021b      	lsls	r3, r3, #8
 801181e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011822:	431a      	orrs	r2, r3
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011828:	0a1b      	lsrs	r3, r3, #8
 801182a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801182e:	431a      	orrs	r2, r3
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011834:	0e1b      	lsrs	r3, r3, #24
 8011836:	431a      	orrs	r2, r3
 8011838:	4b0d      	ldr	r3, [pc, #52]	@ (8011870 <prvSocketSetMSS+0x6c>)
 801183a:	695b      	ldr	r3, [r3, #20]
 801183c:	405a      	eors	r2, r3
 801183e:	4b0d      	ldr	r3, [pc, #52]	@ (8011874 <prvSocketSetMSS+0x70>)
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	4013      	ands	r3, r2
 8011844:	2b00      	cmp	r3, #0
 8011846:	d005      	beq.n	8011854 <prvSocketSetMSS+0x50>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 8011848:	68f9      	ldr	r1, [r7, #12]
 801184a:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 801184e:	f7fd ff0d 	bl	800f66c <FreeRTOS_min_uint32>
 8011852:	60f8      	str	r0, [r7, #12]
        }

        FreeRTOS_debug_printf( ( "prvSocketSetMSS: %lu bytes for %lxip:%u\n", ulMSS, pxSocket->u.xTCP.ulRemoteIP, pxSocket->u.xTCP.usRemotePort ) );

        pxSocket->u.xTCP.usInitMSS = ( uint16_t ) ulMSS;
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	b29a      	uxth	r2, r3
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
        pxSocket->u.xTCP.usCurMSS = ( uint16_t ) ulMSS;
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	b29a      	uxth	r2, r3
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }
 8011868:	bf00      	nop
 801186a:	3710      	adds	r7, #16
 801186c:	46bd      	mov	sp, r7
 801186e:	bd80      	pop	{r7, pc}
 8011870:	20000088 	.word	0x20000088
 8011874:	2000a2fc 	.word	0x2000a2fc

08011878 <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 8011878:	b580      	push	{r7, lr}
 801187a:	b092      	sub	sp, #72	@ 0x48
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	60bb      	str	r3, [r7, #8]

        /* Map the buffer onto a ProtocolHeaders_t struct for easy access to the fields. */
        const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	699b      	ldr	r3, [r3, #24]
 8011888:	3322      	adds	r3, #34	@ 0x22
 801188a:	4618      	mov	r0, r3
 801188c:	f7fd ffcb 	bl	800f826 <vCastConstPointerTo_ProtocolHeaders_t>
 8011890:	63f8      	str	r0, [r7, #60]	@ 0x3c
                                                                                          &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );
        FreeRTOS_Socket_t * pxSocket;
        uint16_t ucTCPFlags = pxProtocolHeaders->xTCPHeader.ucTCPFlags;
 8011892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011894:	7b5b      	ldrb	r3, [r3, #13]
 8011896:	877b      	strh	r3, [r7, #58]	@ 0x3a
        uint32_t ulLocalIP;
        uint16_t xLocalPort = FreeRTOS_htons( pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8011898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801189a:	885b      	ldrh	r3, [r3, #2]
 801189c:	021b      	lsls	r3, r3, #8
 801189e:	b21a      	sxth	r2, r3
 80118a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118a2:	885b      	ldrh	r3, [r3, #2]
 80118a4:	0a1b      	lsrs	r3, r3, #8
 80118a6:	b29b      	uxth	r3, r3
 80118a8:	b21b      	sxth	r3, r3
 80118aa:	4313      	orrs	r3, r2
 80118ac:	b21b      	sxth	r3, r3
 80118ae:	873b      	strh	r3, [r7, #56]	@ 0x38
        uint16_t xRemotePort = FreeRTOS_htons( pxProtocolHeaders->xTCPHeader.usSourcePort );
 80118b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118b2:	881b      	ldrh	r3, [r3, #0]
 80118b4:	021b      	lsls	r3, r3, #8
 80118b6:	b21a      	sxth	r2, r3
 80118b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118ba:	881b      	ldrh	r3, [r3, #0]
 80118bc:	0a1b      	lsrs	r3, r3, #8
 80118be:	b29b      	uxth	r3, r3
 80118c0:	b21b      	sxth	r3, r3
 80118c2:	4313      	orrs	r3, r2
 80118c4:	b21b      	sxth	r3, r3
 80118c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        uint32_t ulRemoteIP;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 80118c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118ca:	685b      	ldr	r3, [r3, #4]
 80118cc:	061a      	lsls	r2, r3, #24
 80118ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118d0:	685b      	ldr	r3, [r3, #4]
 80118d2:	021b      	lsls	r3, r3, #8
 80118d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80118d8:	431a      	orrs	r2, r3
 80118da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118dc:	685b      	ldr	r3, [r3, #4]
 80118de:	0a1b      	lsrs	r3, r3, #8
 80118e0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80118e4:	431a      	orrs	r2, r3
 80118e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118e8:	685b      	ldr	r3, [r3, #4]
 80118ea:	0e1b      	lsrs	r3, r3, #24
 80118ec:	4313      	orrs	r3, r2
 80118ee:	633b      	str	r3, [r7, #48]	@ 0x30
        uint32_t ulAckNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulAckNr );
 80118f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118f2:	689b      	ldr	r3, [r3, #8]
 80118f4:	061a      	lsls	r2, r3, #24
 80118f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118f8:	689b      	ldr	r3, [r3, #8]
 80118fa:	021b      	lsls	r3, r3, #8
 80118fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011900:	431a      	orrs	r2, r3
 8011902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011904:	689b      	ldr	r3, [r3, #8]
 8011906:	0a1b      	lsrs	r3, r3, #8
 8011908:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801190c:	431a      	orrs	r2, r3
 801190e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011910:	689b      	ldr	r3, [r3, #8]
 8011912:	0e1b      	lsrs	r3, r3, #24
 8011914:	4313      	orrs	r3, r2
 8011916:	62fb      	str	r3, [r7, #44]	@ 0x2c
        BaseType_t xResult = pdPASS;
 8011918:	2301      	movs	r3, #1
 801191a:	643b      	str	r3, [r7, #64]	@ 0x40

        configASSERT( pxNetworkBuffer != NULL );
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d10d      	bne.n	801193e <xProcessReceivedTCPPacket+0xc6>
	__asm volatile
 8011922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011926:	b672      	cpsid	i
 8011928:	f383 8811 	msr	BASEPRI, r3
 801192c:	f3bf 8f6f 	isb	sy
 8011930:	f3bf 8f4f 	dsb	sy
 8011934:	b662      	cpsie	i
 8011936:	617b      	str	r3, [r7, #20]
}
 8011938:	bf00      	nop
 801193a:	bf00      	nop
 801193c:	e7fd      	b.n	801193a <xProcessReceivedTCPPacket+0xc2>
        configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 801193e:	68bb      	ldr	r3, [r7, #8]
 8011940:	699b      	ldr	r3, [r3, #24]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d10d      	bne.n	8011962 <xProcessReceivedTCPPacket+0xea>
	__asm volatile
 8011946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801194a:	b672      	cpsid	i
 801194c:	f383 8811 	msr	BASEPRI, r3
 8011950:	f3bf 8f6f 	isb	sy
 8011954:	f3bf 8f4f 	dsb	sy
 8011958:	b662      	cpsie	i
 801195a:	613b      	str	r3, [r7, #16]
}
 801195c:	bf00      	nop
 801195e:	bf00      	nop
 8011960:	e7fd      	b.n	801195e <xProcessReceivedTCPPacket+0xe6>
        const IPHeader_t * pxIPHeader;

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER ) )
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	69db      	ldr	r3, [r3, #28]
 8011966:	2b35      	cmp	r3, #53	@ 0x35
 8011968:	d802      	bhi.n	8011970 <xProcessReceivedTCPPacket+0xf8>
        {
            xResult = pdFAIL;
 801196a:	2300      	movs	r3, #0
 801196c:	643b      	str	r3, [r7, #64]	@ 0x40
 801196e:	e12b      	b.n	8011bc8 <xProcessReceivedTCPPacket+0x350>
        }
        else
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            pxIPHeader = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( IPHeader_t, &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	699b      	ldr	r3, [r3, #24]
 8011974:	330e      	adds	r3, #14
 8011976:	4618      	mov	r0, r3
 8011978:	f7fd ff29 	bl	800f7ce <vCastConstPointerTo_IPHeader_t>
 801197c:	62b8      	str	r0, [r7, #40]	@ 0x28
            ulLocalIP = FreeRTOS_htonl( pxIPHeader->ulDestinationIPAddress );
 801197e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011980:	691b      	ldr	r3, [r3, #16]
 8011982:	061a      	lsls	r2, r3, #24
 8011984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011986:	691b      	ldr	r3, [r3, #16]
 8011988:	021b      	lsls	r3, r3, #8
 801198a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801198e:	431a      	orrs	r2, r3
 8011990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011992:	691b      	ldr	r3, [r3, #16]
 8011994:	0a1b      	lsrs	r3, r3, #8
 8011996:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801199a:	431a      	orrs	r2, r3
 801199c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801199e:	691b      	ldr	r3, [r3, #16]
 80119a0:	0e1b      	lsrs	r3, r3, #24
 80119a2:	4313      	orrs	r3, r2
 80119a4:	627b      	str	r3, [r7, #36]	@ 0x24
            ulRemoteIP = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 80119a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119a8:	68db      	ldr	r3, [r3, #12]
 80119aa:	061a      	lsls	r2, r3, #24
 80119ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119ae:	68db      	ldr	r3, [r3, #12]
 80119b0:	021b      	lsls	r3, r3, #8
 80119b2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80119b6:	431a      	orrs	r2, r3
 80119b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119ba:	68db      	ldr	r3, [r3, #12]
 80119bc:	0a1b      	lsrs	r3, r3, #8
 80119be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80119c2:	431a      	orrs	r2, r3
 80119c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119c6:	68db      	ldr	r3, [r3, #12]
 80119c8:	0e1b      	lsrs	r3, r3, #24
 80119ca:	4313      	orrs	r3, r2
 80119cc:	623b      	str	r3, [r7, #32]

            /* Find the destination socket, and if not found: return a socket listing to
             * the destination PORT. */
            pxSocket = ( FreeRTOS_Socket_t * ) pxTCPSocketLookup( ulLocalIP, xLocalPort, ulRemoteIP, xRemotePort );
 80119ce:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 80119d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80119d2:	6a3a      	ldr	r2, [r7, #32]
 80119d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80119d6:	f7fd f975 	bl	800ecc4 <pxTCPSocketLookup>
 80119da:	6478      	str	r0, [r7, #68]	@ 0x44

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( ipNUMERIC_CAST( eIPTCPState_t, pxSocket->u.xTCP.ucTCPState ) ) == pdFALSE ) )
 80119dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d008      	beq.n	80119f4 <xProcessReceivedTCPPacket+0x17c>
 80119e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80119e4:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 80119e8:	4618      	mov	r0, r3
 80119ea:	f7fd ff60 	bl	800f8ae <prvTCPSocketIsActive>
 80119ee:	4603      	mov	r3, r0
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d110      	bne.n	8011a16 <xProcessReceivedTCPPacket+0x19e>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 80119f4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80119f6:	f003 031f 	and.w	r3, r3, #31
 80119fa:	2b10      	cmp	r3, #16
 80119fc:	d008      	beq.n	8011a10 <xProcessReceivedTCPPacket+0x198>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 80119fe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011a00:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d103      	bne.n	8011a10 <xProcessReceivedTCPPacket+0x198>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8011a08:	68bb      	ldr	r3, [r7, #8]
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f7ff feec 	bl	80117e8 <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 8011a10:	2300      	movs	r3, #0
 8011a12:	643b      	str	r3, [r7, #64]	@ 0x40
 8011a14:	e079      	b.n	8011b0a <xProcessReceivedTCPPacket+0x292>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 8011a16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a18:	2200      	movs	r2, #0
 8011a1a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

                if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eTCP_LISTEN )
 8011a1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a20:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8011a24:	2b01      	cmp	r3, #1
 8011a26:	d11c      	bne.n	8011a62 <xProcessReceivedTCPPacket+0x1ea>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 8011a28:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011a2a:	f003 031f 	and.w	r3, r3, #31
 8011a2e:	2b02      	cmp	r3, #2
 8011a30:	d00b      	beq.n	8011a4a <xProcessReceivedTCPPacket+0x1d2>
                                FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %lxip:%u to port %u\n",
                                                         prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), ulRemoteIP, xRemotePort, xLocalPort ) );
                            }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 8011a32:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011a34:	f003 0304 	and.w	r3, r3, #4
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d103      	bne.n	8011a44 <xProcessReceivedTCPPacket+0x1cc>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f7ff fed2 	bl	80117e8 <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 8011a44:	2300      	movs	r3, #0
 8011a46:	643b      	str	r3, [r7, #64]	@ 0x40
 8011a48:	e05f      	b.n	8011b0a <xProcessReceivedTCPPacket+0x292>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	4619      	mov	r1, r3
 8011a4e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011a50:	f000 f8c0 	bl	8011bd4 <prvHandleListen>
 8011a54:	6478      	str	r0, [r7, #68]	@ 0x44

                        if( pxSocket == NULL )
 8011a56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d156      	bne.n	8011b0a <xProcessReceivedTCPPacket+0x292>
                        {
                            xResult = pdFAIL;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8011a60:	e053      	b.n	8011b0a <xProcessReceivedTCPPacket+0x292>
                } /* if( pxSocket->u.xTCP.ucTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 8011a62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011a64:	f003 0304 	and.w	r3, r3, #4
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d032      	beq.n	8011ad2 <xProcessReceivedTCPPacket+0x25a>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %lxip:%u for %u\n", ulRemoteIP, xRemotePort, xLocalPort ) );

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.ucTCPState == ( uint8_t ) eCONNECT_SYN )
 8011a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a6e:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8011a72:	2b02      	cmp	r3, #2
 8011a74:	d10b      	bne.n	8011a8e <xProcessReceivedTCPPacket+0x216>
                        {
                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1UL ) )
 8011a76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a78:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8011a7c:	3301      	adds	r3, #1
 8011a7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a80:	429a      	cmp	r2, r3
 8011a82:	d123      	bne.n	8011acc <xProcessReceivedTCPPacket+0x254>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 8011a84:	2100      	movs	r1, #0
 8011a86:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011a88:	f7fe fd5d 	bl	8010546 <vTCPStateChange>
 8011a8c:	e01e      	b.n	8011acc <xProcessReceivedTCPPacket+0x254>
                            }
                        }
                        else
                        {
                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 8011a8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a96:	429a      	cmp	r2, r3
 8011a98:	d104      	bne.n	8011aa4 <xProcessReceivedTCPPacket+0x22c>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 8011a9a:	2100      	movs	r1, #0
 8011a9c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011a9e:	f7fe fd52 	bl	8010546 <vTCPStateChange>
 8011aa2:	e013      	b.n	8011acc <xProcessReceivedTCPPacket+0x254>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( ulSequenceNumber > pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) &&
 8011aa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011aa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8011aaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011aac:	429a      	cmp	r2, r3
 8011aae:	d90d      	bls.n	8011acc <xProcessReceivedTCPPacket+0x254>
                                     ( ulSequenceNumber < ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8011ab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ab2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
                                                            pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) ) )
 8011ab6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ab8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
                                     ( ulSequenceNumber < ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8011abc:	4413      	add	r3, r2
                            else if( ( ulSequenceNumber > pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) &&
 8011abe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011ac0:	429a      	cmp	r2, r3
 8011ac2:	d203      	bcs.n	8011acc <xProcessReceivedTCPPacket+0x254>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 8011ac4:	68bb      	ldr	r3, [r7, #8]
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7ff fe81 	bl	80117ce <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 8011acc:	2300      	movs	r3, #0
 8011ace:	643b      	str	r3, [r7, #64]	@ 0x40
 8011ad0:	e01b      	b.n	8011b0a <xProcessReceivedTCPPacket+0x292>
                    }
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.ucTCPState >= ( uint8_t ) eESTABLISHED ) )
 8011ad2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011ad4:	f003 031f 	and.w	r3, r3, #31
 8011ad8:	2b02      	cmp	r3, #2
 8011ada:	d107      	bne.n	8011aec <xProcessReceivedTCPPacket+0x274>
 8011adc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ade:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8011ae2:	2b04      	cmp	r3, #4
 8011ae4:	d902      	bls.n	8011aec <xProcessReceivedTCPPacket+0x274>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %lxip:%u\n", ulRemoteIP, xRemotePort ) );

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8011aea:	e00e      	b.n	8011b0a <xProcessReceivedTCPPacket+0x292>
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t uxOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 8011aec:	2322      	movs	r3, #34	@ 0x22
 8011aee:	61fb      	str	r3, [r7, #28]
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 8011af0:	69fb      	ldr	r3, [r7, #28]
 8011af2:	3380      	adds	r3, #128	@ 0x80
 8011af4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011af6:	4413      	add	r3, r2
 8011af8:	1c98      	adds	r0, r3, #2
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ uxOffset ] ) ),
 8011afa:	68bb      	ldr	r3, [r7, #8]
 8011afc:	699a      	ldr	r2, [r3, #24]
 8011afe:	69fb      	ldr	r3, [r7, #28]
 8011b00:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 8011b02:	2214      	movs	r2, #20
 8011b04:	4619      	mov	r1, r3
 8011b06:	f004 f91c 	bl	8015d42 <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                    }
                }
            }

            if( xResult != pdFAIL )
 8011b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d05b      	beq.n	8011bc8 <xProcessReceivedTCPPacket+0x350>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL );
 8011b10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d10d      	bne.n	8011b32 <xProcessReceivedTCPPacket+0x2ba>
	__asm volatile
 8011b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b1a:	b672      	cpsid	i
 8011b1c:	f383 8811 	msr	BASEPRI, r3
 8011b20:	f3bf 8f6f 	isb	sy
 8011b24:	f3bf 8f4f 	dsb	sy
 8011b28:	b662      	cpsie	i
 8011b2a:	60fb      	str	r3, [r7, #12]
}
 8011b2c:	bf00      	nop
 8011b2e:	bf00      	nop
 8011b30:	e7fd      	b.n	8011b2e <xProcessReceivedTCPPacket+0x2b6>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 8011b32:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011b34:	f7fe fce3 	bl	80104fe <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxProtocolHeaders->xTCPHeader.ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 8011b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b3a:	7b1b      	ldrb	r3, [r3, #12]
 8011b3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011b40:	2b50      	cmp	r3, #80	@ 0x50
 8011b42:	d904      	bls.n	8011b4e <xProcessReceivedTCPPacket+0x2d6>
                {
                    prvCheckOptions( pxSocket, pxNetworkBuffer );
 8011b44:	68bb      	ldr	r3, [r7, #8]
 8011b46:	4619      	mov	r1, r3
 8011b48:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011b4a:	f7fe fae7 	bl	801011c <prvCheckOptions>
                }

                usWindow = FreeRTOS_ntohs( pxProtocolHeaders->xTCPHeader.usWindow );
 8011b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b50:	89db      	ldrh	r3, [r3, #14]
 8011b52:	021b      	lsls	r3, r3, #8
 8011b54:	b21a      	sxth	r2, r3
 8011b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b58:	89db      	ldrh	r3, [r3, #14]
 8011b5a:	0a1b      	lsrs	r3, r3, #8
 8011b5c:	b29b      	uxth	r3, r3
 8011b5e:	b21b      	sxth	r3, r3
 8011b60:	4313      	orrs	r3, r2
 8011b62:	b21b      	sxth	r3, r3
 8011b64:	837b      	strh	r3, [r7, #26]
                pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8011b66:	8b7a      	ldrh	r2, [r7, #26]
 8011b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b6a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
                #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 8011b6e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011b70:	f003 0302 	and.w	r3, r3, #2
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d10a      	bne.n	8011b8e <xProcessReceivedTCPPacket+0x316>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8011b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b7a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8011b7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011b80:	f892 20d2 	ldrb.w	r2, [r2, #210]	@ 0xd2
 8011b84:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 8011b88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b8a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
                    }
                #endif /* ipconfigUSE_TCP_WIN */

                /* In prvTCPHandleState() the incoming messages will be handled
                 * depending on the current state of the connection. */
                if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 8011b8e:	f107 0308 	add.w	r3, r7, #8
 8011b92:	4619      	mov	r1, r3
 8011b94:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011b96:	f7ff fcdf 	bl	8011558 <prvTCPHandleState>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	dd05      	ble.n	8011bac <xProcessReceivedTCPPacket+0x334>
                {
                    /* prvTCPHandleState() has sent a message, see if there are more to
                     * be transmitted. */
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8011ba0:	f107 0308 	add.w	r3, r7, #8
 8011ba4:	4619      	mov	r1, r3
 8011ba6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011ba8:	f7fd ffb2 	bl	800fb10 <prvTCPSendRepeated>
                        }
                    #endif /* ipconfigUSE_TCP_WIN */
                }

                if( pxNetworkBuffer != NULL )
 8011bac:	68bb      	ldr	r3, [r7, #8]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d005      	beq.n	8011bbe <xProcessReceivedTCPPacket+0x346>
                {
                    /* We must check if the buffer is unequal to NULL, because the
                     * socket might keep a reference to it in case a delayed ACK must be
                     * sent. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8011bb2:	68bb      	ldr	r3, [r7, #8]
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f002 fc3b 	bl	8014430 <vReleaseNetworkBufferAndDescriptor>
                    #ifndef _lint
                        /* Clear pointers that are freed. */
                        pxNetworkBuffer = NULL;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	60bb      	str	r3, [r7, #8]
                    #endif
                }

                /* And finally, calculate when this socket wants to be woken up. */
                ( void ) prvTCPNextTimeout( pxSocket );
 8011bbe:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011bc0:	f7fe ff80 	bl	8010ac4 <prvTCPNextTimeout>
                /* Return pdPASS to tell that the network buffer is 'consumed'. */
                xResult = pdPASS;
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	643b      	str	r3, [r7, #64]	@ 0x40
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 8011bc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    }
 8011bca:	4618      	mov	r0, r3
 8011bcc:	3748      	adds	r7, #72	@ 0x48
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}
	...

08011bd4 <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    static FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                                NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b088      	sub	sp, #32
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	6039      	str	r1, [r7, #0]
        /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */
        const TCPPacket_t * pxTCPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( TCPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	699b      	ldr	r3, [r3, #24]
 8011be2:	4618      	mov	r0, r3
 8011be4:	f7fd fe09 	bl	800f7fa <vCastConstPointerTo_TCPPacket_t>
 8011be8:	61b8      	str	r0, [r7, #24]
        FreeRTOS_Socket_t * pxReturn = NULL;
 8011bea:	2300      	movs	r3, #0
 8011bec:	61fb      	str	r3, [r7, #28]
        uint32_t ulInitialSequenceNumber;

        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
 8011bee:	4b56      	ldr	r3, [pc, #344]	@ (8011d48 <prvHandleListen+0x174>)
 8011bf0:	6958      	ldr	r0, [r3, #20]
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
                                                                      pxSocket->usLocalPort,
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
 8011bf6:	69bb      	ldr	r3, [r7, #24]
 8011bf8:	69da      	ldr	r2, [r3, #28]
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );
 8011bfa:	69bb      	ldr	r3, [r7, #24]
 8011bfc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( *ipLOCAL_IP_ADDRESS_POINTER,
 8011bfe:	f7f0 fca6 	bl	800254e <ulApplicationGetNextSequenceNumber>
 8011c02:	6178      	str	r0, [r7, #20]

        /* A pure SYN (without ACK) has come in, create a new socket to answer
         * it. */
        if( ulInitialSequenceNumber != 0UL )
 8011c04:	697b      	ldr	r3, [r7, #20]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d03c      	beq.n	8011c84 <prvHandleListen+0xb0>
        {
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011c10:	f003 0308 	and.w	r3, r3, #8
 8011c14:	b2db      	uxtb	r3, r3
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d00c      	beq.n	8011c34 <prvHandleListen+0x60>
            {
                /* The flag bReuseSocket indicates that the same instance of the
                 * listening socket should be used for the connection. */
                pxReturn = pxSocket;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	61fb      	str	r3, [r7, #28]
                pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8011c1e:	687a      	ldr	r2, [r7, #4]
 8011c20:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 8011c24:	f043 0304 	orr.w	r3, r3, #4
 8011c28:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
                pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	687a      	ldr	r2, [r7, #4]
 8011c30:	655a      	str	r2, [r3, #84]	@ 0x54
 8011c32:	e027      	b.n	8011c84 <prvHandleListen+0xb0>
            }
            else
            {
                /* The socket does not have the bReuseSocket flag set meaning create a
                 * new socket when a connection comes in. */
                pxReturn = NULL;
 8011c34:	2300      	movs	r3, #0
 8011c36:	61fb      	str	r3, [r7, #28]

                if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011c44:	429a      	cmp	r2, r3
 8011c46:	d303      	bcc.n	8011c50 <prvHandleListen+0x7c>
                    FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
                                       pxSocket->usLocalPort,
                                       pxSocket->u.xTCP.usChildCount,
                                       pxSocket->u.xTCP.usBacklog,
                                       ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8011c48:	6838      	ldr	r0, [r7, #0]
 8011c4a:	f7ff fdcd 	bl	80117e8 <prvTCPSendReset>
 8011c4e:	e019      	b.n	8011c84 <prvHandleListen+0xb0>
                }
                else
                {
                    FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                      FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 8011c50:	2206      	movs	r2, #6
 8011c52:	2101      	movs	r1, #1
 8011c54:	2002      	movs	r0, #2
 8011c56:	f7fc f91b 	bl	800de90 <FreeRTOS_socket>
 8011c5a:	6138      	str	r0, [r7, #16]

                    if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8011c5c:	693b      	ldr	r3, [r7, #16]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d003      	beq.n	8011c6a <prvHandleListen+0x96>
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c68:	d103      	bne.n	8011c72 <prvHandleListen+0x9e>
                    {
                        FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
                        ( void ) prvTCPSendReset( pxNetworkBuffer );
 8011c6a:	6838      	ldr	r0, [r7, #0]
 8011c6c:	f7ff fdbc 	bl	80117e8 <prvTCPSendReset>
 8011c70:	e008      	b.n	8011c84 <prvHandleListen+0xb0>
                    }
                    else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 8011c72:	6879      	ldr	r1, [r7, #4]
 8011c74:	6938      	ldr	r0, [r7, #16]
 8011c76:	f000 f869 	bl	8011d4c <prvTCPSocketCopy>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d001      	beq.n	8011c84 <prvHandleListen+0xb0>
                    {
                        /* The socket will be connected immediately, no time for the
                         * owner to setsockopt's, therefore copy properties of the server
                         * socket to the new socket.  Only the binding might fail (due to
                         * lack of resources). */
                        pxReturn = pxNewSocket;
 8011c80:	693b      	ldr	r3, [r7, #16]
 8011c82:	61fb      	str	r3, [r7, #28]
                    }
                }
            }
        }

        if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 8011c84:	697b      	ldr	r3, [r7, #20]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d059      	beq.n	8011d3e <prvHandleListen+0x16a>
 8011c8a:	69fb      	ldr	r3, [r7, #28]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d056      	beq.n	8011d3e <prvHandleListen+0x16a>
        {
            /* Map the byte stream onto the ProtocolHeaders_t for easy access to the fields. */
            const ProtocolHeaders_t * pxProtocolHeaders = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( ProtocolHeaders_t,
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	699b      	ldr	r3, [r3, #24]
 8011c94:	3322      	adds	r3, #34	@ 0x22
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7fd fdc5 	bl	800f826 <vCastConstPointerTo_ProtocolHeaders_t>
 8011c9c:	60f8      	str	r0, [r7, #12]
                                                                                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + xIPHeaderSize( pxNetworkBuffer ) ] ) );

            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 8011c9e:	69bb      	ldr	r3, [r7, #24]
 8011ca0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011ca2:	021b      	lsls	r3, r3, #8
 8011ca4:	b21a      	sxth	r2, r3
 8011ca6:	69bb      	ldr	r3, [r7, #24]
 8011ca8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011caa:	0a1b      	lsrs	r3, r3, #8
 8011cac:	b29b      	uxth	r3, r3
 8011cae:	b21b      	sxth	r3, r3
 8011cb0:	4313      	orrs	r3, r2
 8011cb2:	b21b      	sxth	r3, r3
 8011cb4:	b29a      	uxth	r2, r3
 8011cb6:	69fb      	ldr	r3, [r7, #28]
 8011cb8:	879a      	strh	r2, [r3, #60]	@ 0x3c
            pxReturn->u.xTCP.ulRemoteIP = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 8011cba:	69bb      	ldr	r3, [r7, #24]
 8011cbc:	69db      	ldr	r3, [r3, #28]
 8011cbe:	061a      	lsls	r2, r3, #24
 8011cc0:	69bb      	ldr	r3, [r7, #24]
 8011cc2:	69db      	ldr	r3, [r3, #28]
 8011cc4:	021b      	lsls	r3, r3, #8
 8011cc6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011cca:	431a      	orrs	r2, r3
 8011ccc:	69bb      	ldr	r3, [r7, #24]
 8011cce:	69db      	ldr	r3, [r3, #28]
 8011cd0:	0a1b      	lsrs	r3, r3, #8
 8011cd2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011cd6:	431a      	orrs	r2, r3
 8011cd8:	69bb      	ldr	r3, [r7, #24]
 8011cda:	69db      	ldr	r3, [r3, #28]
 8011cdc:	0e1b      	lsrs	r3, r3, #24
 8011cde:	431a      	orrs	r2, r3
 8011ce0:	69fb      	ldr	r3, [r7, #28]
 8011ce2:	639a      	str	r2, [r3, #56]	@ 0x38
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8011ce4:	69fb      	ldr	r3, [r7, #28]
 8011ce6:	697a      	ldr	r2, [r7, #20]
 8011ce8:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	685b      	ldr	r3, [r3, #4]
 8011cf0:	061a      	lsls	r2, r3, #24
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	685b      	ldr	r3, [r3, #4]
 8011cf6:	021b      	lsls	r3, r3, #8
 8011cf8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011cfc:	431a      	orrs	r2, r3
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	685b      	ldr	r3, [r3, #4]
 8011d02:	0a1b      	lsrs	r3, r3, #8
 8011d04:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011d08:	431a      	orrs	r2, r3
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	685b      	ldr	r3, [r3, #4]
 8011d0e:	0e1b      	lsrs	r3, r3, #24
 8011d10:	431a      	orrs	r2, r3
 8011d12:	69fb      	ldr	r3, [r7, #28]
 8011d14:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
            prvSocketSetMSS( pxReturn );
 8011d18:	69f8      	ldr	r0, [r7, #28]
 8011d1a:	f7ff fd73 	bl	8011804 <prvSocketSetMSS>

            prvTCPCreateWindow( pxReturn );
 8011d1e:	69f8      	ldr	r0, [r7, #28]
 8011d20:	f7fe f8ea 	bl	800fef8 <prvTCPCreateWindow>

            vTCPStateChange( pxReturn, eSYN_FIRST );
 8011d24:	2103      	movs	r1, #3
 8011d26:	69f8      	ldr	r0, [r7, #28]
 8011d28:	f7fe fc0d 	bl	8010546 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8011d2c:	69fb      	ldr	r3, [r7, #28]
 8011d2e:	f103 0082 	add.w	r0, r3, #130	@ 0x82
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	699b      	ldr	r3, [r3, #24]
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8011d36:	2248      	movs	r2, #72	@ 0x48
 8011d38:	4619      	mov	r1, r3
 8011d3a:	f004 f802 	bl	8015d42 <memcpy>
                             sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) );
        }

        return pxReturn;
 8011d3e:	69fb      	ldr	r3, [r7, #28]
    }
 8011d40:	4618      	mov	r0, r3
 8011d42:	3720      	adds	r7, #32
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}
 8011d48:	20000088 	.word	0x20000088

08011d4c <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    static BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                        FreeRTOS_Socket_t * pxSocket )
    {
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b086      	sub	sp, #24
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
 8011d54:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	69da      	ldr	r2, [r3, #28]
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	61da      	str	r2, [r3, #28]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	6a1a      	ldr	r2, [r3, #32]
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	621a      	str	r2, [r3, #32]
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	66da      	str	r2, [r3, #108]	@ 0x6c
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 8011d7a:	683b      	ldr	r3, [r7, #0]
 8011d7c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	671a      	str	r2, [r3, #112]	@ 0x70
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	665a      	str	r2, [r3, #100]	@ 0x64
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	669a      	str	r2, [r3, #104]	@ 0x68
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 8011d92:	683b      	ldr	r3, [r7, #0]
 8011d94:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                /* Child socket of listening sockets will inherit the Socket Set
                 * Otherwise the owner has no chance of including it into the set. */
                if( pxSocket->pxSocketSet != NULL )
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d009      	beq.n	8011dc6 <prvTCPSocketCopy+0x7a>
                {
                    pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	62da      	str	r2, [r3, #44]	@ 0x2c
                    pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011dbe:	f043 0205 	orr.w	r2, r3, #5
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	631a      	str	r2, [r3, #48]	@ 0x30
                }
            }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        xAddress.sin_addr = *ipLOCAL_IP_ADDRESS_POINTER;
 8011dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8011e38 <prvTCPSocketCopy+0xec>)
 8011dc8:	695b      	ldr	r3, [r3, #20]
 8011dca:	613b      	str	r3, [r7, #16]
        xAddress.sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011dd0:	021b      	lsls	r3, r3, #8
 8011dd2:	b21a      	sxth	r2, r3
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011dd8:	0a1b      	lsrs	r3, r3, #8
 8011dda:	b29b      	uxth	r3, r3
 8011ddc:	b21b      	sxth	r3, r3
 8011dde:	4313      	orrs	r3, r2
 8011de0:	b21b      	sxth	r3, r3
 8011de2:	b29b      	uxth	r3, r3
 8011de4:	81fb      	strh	r3, [r7, #14]
                 * orphan temporarily.  Once this socket is really connected, the owner of
                 * the server socket will be notified. */

                /* When bPassQueued is true, the socket is an orphan until it gets
                 * connected. */
                pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8011de6:	687a      	ldr	r2, [r7, #4]
 8011de8:	f892 3040 	ldrb.w	r3, [r2, #64]	@ 0x40
 8011dec:	f043 0304 	orr.w	r3, r3, #4
 8011df0:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
                pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	683a      	ldr	r2, [r7, #0]
 8011df8:	655a      	str	r2, [r3, #84]	@ 0x54
                    pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
                }
            }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8011e00:	3301      	adds	r3, #1
 8011e02:	b29a      	uxth	r2, r3
 8011e04:	683b      	ldr	r3, [r7, #0]
 8011e06:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
                                 pxSocket->u.xTCP.usChildCount,
                                 pxSocket->u.xTCP.usBacklog,
                                 ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 8011e0a:	f107 010c 	add.w	r1, r7, #12
 8011e0e:	2301      	movs	r3, #1
 8011e10:	2208      	movs	r2, #8
 8011e12:	6878      	ldr	r0, [r7, #4]
 8011e14:	f7fc fa9e 	bl	800e354 <vSocketBind>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d005      	beq.n	8011e2a <prvTCPSocketCopy+0xde>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
            ( void ) FreeRTOS_closesocket( pxNewSocket );
 8011e1e:	6878      	ldr	r0, [r7, #4]
 8011e20:	f7fc fb38 	bl	800e494 <FreeRTOS_closesocket>
            xResult = pdFALSE;
 8011e24:	2300      	movs	r3, #0
 8011e26:	617b      	str	r3, [r7, #20]
 8011e28:	e001      	b.n	8011e2e <prvTCPSocketCopy+0xe2>
        }
        else
        {
            xResult = pdTRUE;
 8011e2a:	2301      	movs	r3, #1
 8011e2c:	617b      	str	r3, [r7, #20]
        }

        return xResult;
 8011e2e:	697b      	ldr	r3, [r7, #20]
    }
 8011e30:	4618      	mov	r0, r3
 8011e32:	3718      	adds	r7, #24
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}
 8011e38:	20000088 	.word	0x20000088

08011e3c <xTCPCheckNewClient>:
 * @param[in] pxSocket: The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b088      	sub	sp, #32
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011e48:	021b      	lsls	r3, r3, #8
 8011e4a:	b21a      	sxth	r2, r3
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011e50:	0a1b      	lsrs	r3, r3, #8
 8011e52:	b29b      	uxth	r3, r3
 8011e54:	b21b      	sxth	r3, r3
 8011e56:	4313      	orrs	r3, r2
 8011e58:	b21b      	sxth	r3, r3
 8011e5a:	b29b      	uxth	r3, r3
 8011e5c:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 8011e5e:	2300      	movs	r3, #0
 8011e60:	61bb      	str	r3, [r7, #24]
        const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 8011e62:	4b18      	ldr	r3, [pc, #96]	@ (8011ec4 <xTCPCheckNewClient+0x88>)
 8011e64:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8011e66:	4b18      	ldr	r3, [pc, #96]	@ (8011ec8 <xTCPCheckNewClient+0x8c>)
 8011e68:	68db      	ldr	r3, [r3, #12]
 8011e6a:	61fb      	str	r3, [r7, #28]
 8011e6c:	e020      	b.n	8011eb0 <xTCPCheckNewClient+0x74>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 8011e6e:	69fb      	ldr	r3, [r7, #28]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	697a      	ldr	r2, [r7, #20]
 8011e74:	429a      	cmp	r2, r3
 8011e76:	d118      	bne.n	8011eaa <xTCPCheckNewClient+0x6e>
            {
                pxFound = ipCAST_PTR_TO_TYPE_PTR( FreeRTOS_Socket_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8011e78:	69fb      	ldr	r3, [r7, #28]
 8011e7a:	68db      	ldr	r3, [r3, #12]
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f7fd fcdd 	bl	800f83c <vCastPointerTo_FreeRTOS_Socket_t>
 8011e82:	60f8      	str	r0, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8011e8a:	2b06      	cmp	r3, #6
 8011e8c:	d10d      	bne.n	8011eaa <xTCPCheckNewClient+0x6e>
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011e94:	f003 0302 	and.w	r3, r3, #2
 8011e98:	b2db      	uxtb	r3, r3
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d005      	beq.n	8011eaa <xTCPCheckNewClient+0x6e>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	68fa      	ldr	r2, [r7, #12]
 8011ea2:	655a      	str	r2, [r3, #84]	@ 0x54
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
                    xResult = pdTRUE;
 8011ea4:	2301      	movs	r3, #1
 8011ea6:	61bb      	str	r3, [r7, #24]
                    break;
 8011ea8:	e006      	b.n	8011eb8 <xTCPCheckNewClient+0x7c>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8011eaa:	69fb      	ldr	r3, [r7, #28]
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEndTCP;
 8011eb0:	69fa      	ldr	r2, [r7, #28]
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d1da      	bne.n	8011e6e <xTCPCheckNewClient+0x32>
                }
            }
        }

        return xResult;
 8011eb8:	69bb      	ldr	r3, [r7, #24]
    }
 8011eba:	4618      	mov	r0, r3
 8011ebc:	3720      	adds	r7, #32
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	bd80      	pop	{r7, pc}
 8011ec2:	bf00      	nop
 8011ec4:	2000a3a0 	.word	0x2000a3a0
 8011ec8:	2000a398 	.word	0x2000a398

08011ecc <FreeRTOS_min_int32>:
        {
 8011ecc:	b480      	push	{r7}
 8011ece:	b083      	sub	sp, #12
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
 8011ed4:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 8011ed6:	687a      	ldr	r2, [r7, #4]
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	4293      	cmp	r3, r2
 8011edc:	bfa8      	it	ge
 8011ede:	4613      	movge	r3, r2
        }
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	370c      	adds	r7, #12
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eea:	4770      	bx	lr

08011eec <FreeRTOS_min_uint32>:
        {
 8011eec:	b480      	push	{r7}
 8011eee:	b083      	sub	sp, #12
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
 8011ef4:	6039      	str	r1, [r7, #0]
            return ( a <= b ) ? a : b;
 8011ef6:	687a      	ldr	r2, [r7, #4]
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	4293      	cmp	r3, r2
 8011efc:	bf28      	it	cs
 8011efe:	4613      	movcs	r3, r2
        }
 8011f00:	4618      	mov	r0, r3
 8011f02:	370c      	adds	r7, #12
 8011f04:	46bd      	mov	sp, r7
 8011f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0a:	4770      	bx	lr

08011f0c <vCastPointerTo_TCPSegment_t>:
 * @brief Utility function to cast pointer of a type to pointer of type TCPSegment_t.
 *
 * @return The casted pointer.
 */
    static portINLINE ipDECL_CAST_PTR_FUNC_FOR_TYPE( TCPSegment_t )
    {
 8011f0c:	b480      	push	{r7}
 8011f0e:	b083      	sub	sp, #12
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
        return ( TCPSegment_t * ) pvArgument;
 8011f14:	687b      	ldr	r3, [r7, #4]
    }
 8011f16:	4618      	mov	r0, r3
 8011f18:	370c      	adds	r7, #12
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f20:	4770      	bx	lr

08011f22 <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 8011f22:	b480      	push	{r7}
 8011f24:	b085      	sub	sp, #20
 8011f26:	af00      	add	r7, sp, #0
 8011f28:	6078      	str	r0, [r7, #4]
 8011f2a:	6039      	str	r1, [r7, #0]
            BaseType_t xResult;

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000UL ) == 0UL )
 8011f2c:	683a      	ldr	r2, [r7, #0]
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	1ad3      	subs	r3, r2, r3
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	db02      	blt.n	8011f3c <xSequenceLessThanOrEqual+0x1a>
            {
                xResult = pdTRUE;
 8011f36:	2301      	movs	r3, #1
 8011f38:	60fb      	str	r3, [r7, #12]
 8011f3a:	e001      	b.n	8011f40 <xSequenceLessThanOrEqual+0x1e>
            }
            else
            {
                xResult = pdFALSE;
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 8011f40:	68fb      	ldr	r3, [r7, #12]
        }
 8011f42:	4618      	mov	r0, r3
 8011f44:	3714      	adds	r7, #20
 8011f46:	46bd      	mov	sp, r7
 8011f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4c:	4770      	bx	lr

08011f4e <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThan( uint32_t a,
                                                        uint32_t b )
        {
 8011f4e:	b480      	push	{r7}
 8011f50:	b085      	sub	sp, #20
 8011f52:	af00      	add	r7, sp, #0
 8011f54:	6078      	str	r0, [r7, #4]
 8011f56:	6039      	str	r1, [r7, #0]
            BaseType_t xResult;

            /* Test if a < b */
            if( ( ( b - ( a + 1UL ) ) & 0x80000000UL ) == 0UL )
 8011f58:	683a      	ldr	r2, [r7, #0]
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	1ad3      	subs	r3, r2, r3
 8011f5e:	3b01      	subs	r3, #1
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	db02      	blt.n	8011f6a <xSequenceLessThan+0x1c>
            {
                xResult = pdTRUE;
 8011f64:	2301      	movs	r3, #1
 8011f66:	60fb      	str	r3, [r7, #12]
 8011f68:	e001      	b.n	8011f6e <xSequenceLessThan+0x20>
            }
            else
            {
                xResult = pdFALSE;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 8011f6e:	68fb      	ldr	r3, [r7, #12]
        }
 8011f70:	4618      	mov	r0, r3
 8011f72:	3714      	adds	r7, #20
 8011f74:	46bd      	mov	sp, r7
 8011f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7a:	4770      	bx	lr

08011f7c <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
        static portINLINE BaseType_t xSequenceGreaterThan( uint32_t a,
                                                           uint32_t b )
        {
 8011f7c:	b480      	push	{r7}
 8011f7e:	b085      	sub	sp, #20
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
 8011f84:	6039      	str	r1, [r7, #0]
            BaseType_t xResult;

            /* Test if a > b */
            if( ( ( a - ( b + 1UL ) ) & 0x80000000UL ) == 0UL )
 8011f86:	687a      	ldr	r2, [r7, #4]
 8011f88:	683b      	ldr	r3, [r7, #0]
 8011f8a:	1ad3      	subs	r3, r2, r3
 8011f8c:	3b01      	subs	r3, #1
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	db02      	blt.n	8011f98 <xSequenceGreaterThan+0x1c>
            {
                xResult = pdTRUE;
 8011f92:	2301      	movs	r3, #1
 8011f94:	60fb      	str	r3, [r7, #12]
 8011f96:	e001      	b.n	8011f9c <xSequenceGreaterThan+0x20>
            }
            else
            {
                xResult = pdFALSE;
 8011f98:	2300      	movs	r3, #0
 8011f9a:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 8011f9c:	68fb      	ldr	r3, [r7, #12]
        }
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	3714      	adds	r7, #20
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa8:	4770      	bx	lr

08011faa <xSequenceGreaterThanOrEqual>:
 * @return pdTRUE if a>=b, else pdFALSE.
 */

    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 8011faa:	b480      	push	{r7}
 8011fac:	b085      	sub	sp, #20
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	6078      	str	r0, [r7, #4]
 8011fb2:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000UL ) == 0UL )
 8011fb4:	687a      	ldr	r2, [r7, #4]
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	1ad3      	subs	r3, r2, r3
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	db02      	blt.n	8011fc4 <xSequenceGreaterThanOrEqual+0x1a>
        {
            xResult = pdTRUE;
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	60fb      	str	r3, [r7, #12]
 8011fc2:	e001      	b.n	8011fc8 <xSequenceGreaterThanOrEqual+0x1e>
        }
        else
        {
            xResult = pdFALSE;
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
    }
 8011fca:	4618      	mov	r0, r3
 8011fcc:	3714      	adds	r7, #20
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd4:	4770      	bx	lr

08011fd6 <vListInsertFifo>:
 * @param[in] pxList: The list in which the item is to inserted.
 * @param[in] pxNewListItem: The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 8011fd6:	b580      	push	{r7, lr}
 8011fd8:	b082      	sub	sp, #8
 8011fda:	af00      	add	r7, sp, #0
 8011fdc:	6078      	str	r0, [r7, #4]
 8011fde:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	3308      	adds	r3, #8
 8011fe4:	461a      	mov	r2, r3
 8011fe6:	6839      	ldr	r1, [r7, #0]
 8011fe8:	6878      	ldr	r0, [r7, #4]
 8011fea:	f000 f81f 	bl	801202c <vListInsertGeneric>
        }
 8011fee:	bf00      	nop
 8011ff0:	3708      	adds	r7, #8
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	bd80      	pop	{r7, pc}

08011ff6 <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer: The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 8011ff6:	b580      	push	{r7, lr}
 8011ff8:	b082      	sub	sp, #8
 8011ffa:	af00      	add	r7, sp, #0
 8011ffc:	6078      	str	r0, [r7, #4]
        pxTimer->ulBorn = xTaskGetTickCount();
 8011ffe:	f7f7 fbf3 	bl	80097e8 <xTaskGetTickCount>
 8012002:	4602      	mov	r2, r0
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	601a      	str	r2, [r3, #0]
    }
 8012008:	bf00      	nop
 801200a:	3708      	adds	r7, #8
 801200c:	46bd      	mov	sp, r7
 801200e:	bd80      	pop	{r7, pc}

08012010 <ulTimerGetAge>:
 * @param[in] pxTimer: The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 8012010:	b580      	push	{r7, lr}
 8012012:	b082      	sub	sp, #8
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
        return( ( xTaskGetTickCount() - ( ( TickType_t ) pxTimer->ulBorn ) ) * portTICK_PERIOD_MS );
 8012018:	f7f7 fbe6 	bl	80097e8 <xTaskGetTickCount>
 801201c:	4602      	mov	r2, r0
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	1ad3      	subs	r3, r2, r3
    }
 8012024:	4618      	mov	r0, r3
 8012026:	3708      	adds	r7, #8
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}

0801202c <vListInsertGeneric>:
 * @param[in] pxWhere: Where should the item be inserted.
 */
    static void vListInsertGeneric( List_t * const pxList,
                                    ListItem_t * const pxNewListItem,
                                    MiniListItem_t * const pxWhere )
    {
 801202c:	b480      	push	{r7}
 801202e:	b085      	sub	sp, #20
 8012030:	af00      	add	r7, sp, #0
 8012032:	60f8      	str	r0, [r7, #12]
 8012034:	60b9      	str	r1, [r7, #8]
 8012036:	607a      	str	r2, [r7, #4]
        /* Insert a new list item into pxList, it does not sort the list,
         * but it puts the item just before xListEnd, so it will be the last item
         * returned by listGET_HEAD_ENTRY() */
        pxNewListItem->pxNext = ( struct xLIST_ITEM * configLIST_VOLATILE ) pxWhere;
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	687a      	ldr	r2, [r7, #4]
 801203c:	605a      	str	r2, [r3, #4]
        pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	689a      	ldr	r2, [r3, #8]
 8012042:	68bb      	ldr	r3, [r7, #8]
 8012044:	609a      	str	r2, [r3, #8]
        pxWhere->pxPrevious->pxNext = pxNewListItem;
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	689b      	ldr	r3, [r3, #8]
 801204a:	68ba      	ldr	r2, [r7, #8]
 801204c:	605a      	str	r2, [r3, #4]
        pxWhere->pxPrevious = pxNewListItem;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	68ba      	ldr	r2, [r7, #8]
 8012052:	609a      	str	r2, [r3, #8]

        /* Remember which list the item is in. */
        listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8012054:	68bb      	ldr	r3, [r7, #8]
 8012056:	68fa      	ldr	r2, [r7, #12]
 8012058:	611a      	str	r2, [r3, #16]

        ( pxList->uxNumberOfItems )++;
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	1c5a      	adds	r2, r3, #1
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	601a      	str	r2, [r3, #0]
    }
 8012064:	bf00      	nop
 8012066:	3714      	adds	r7, #20
 8012068:	46bd      	mov	sp, r7
 801206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206e:	4770      	bx	lr

08012070 <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 8012070:	b580      	push	{r7, lr}
 8012072:	b082      	sub	sp, #8
 8012074:	af00      	add	r7, sp, #0
            BaseType_t xIndex, xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 8012076:	4826      	ldr	r0, [pc, #152]	@ (8012110 <prvCreateSectors+0xa0>)
 8012078:	f7f6 f853 	bl	8008122 <vListInitialise>
            xTCPSegments = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 801207c:	f44f 5070 	mov.w	r0, #15360	@ 0x3c00
 8012080:	f7f9 f892 	bl	800b1a8 <pvPortMalloc>
 8012084:	4603      	mov	r3, r0
 8012086:	4618      	mov	r0, r3
 8012088:	f7ff ff40 	bl	8011f0c <vCastPointerTo_TCPSegment_t>
 801208c:	4603      	mov	r3, r0
 801208e:	4a21      	ldr	r2, [pc, #132]	@ (8012114 <prvCreateSectors+0xa4>)
 8012090:	6013      	str	r3, [r2, #0]

            if( xTCPSegments == NULL )
 8012092:	4b20      	ldr	r3, [pc, #128]	@ (8012114 <prvCreateSectors+0xa4>)
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d102      	bne.n	80120a0 <prvCreateSectors+0x30>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
                                         ( unsigned ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );

                xReturn = pdFAIL;
 801209a:	2300      	movs	r3, #0
 801209c:	603b      	str	r3, [r7, #0]
 801209e:	e032      	b.n	8012106 <prvCreateSectors+0x96>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 80120a0:	4b1c      	ldr	r3, [pc, #112]	@ (8012114 <prvCreateSectors+0xa4>)
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	f44f 5270 	mov.w	r2, #15360	@ 0x3c00
 80120a8:	2100      	movs	r1, #0
 80120aa:	4618      	mov	r0, r3
 80120ac:	f003 fdcd 	bl	8015c4a <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 80120b0:	2300      	movs	r3, #0
 80120b2:	607b      	str	r3, [r7, #4]
 80120b4:	e022      	b.n	80120fc <prvCreateSectors+0x8c>
                {
                    /* Could call vListInitialiseItem here but all data has been
                    * nulled already.  Set the owner to a segment descriptor. */
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 80120b6:	4b17      	ldr	r3, [pc, #92]	@ (8012114 <prvCreateSectors+0xa4>)
 80120b8:	6819      	ldr	r1, [r3, #0]
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	019a      	lsls	r2, r3, #6
 80120be:	4b15      	ldr	r3, [pc, #84]	@ (8012114 <prvCreateSectors+0xa4>)
 80120c0:	6818      	ldr	r0, [r3, #0]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	019b      	lsls	r3, r3, #6
 80120c6:	4403      	add	r3, r0
 80120c8:	440a      	add	r2, r1
 80120ca:	639a      	str	r2, [r3, #56]	@ 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 80120cc:	4b11      	ldr	r3, [pc, #68]	@ (8012114 <prvCreateSectors+0xa4>)
 80120ce:	6819      	ldr	r1, [r3, #0]
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	019a      	lsls	r2, r3, #6
 80120d4:	4b0f      	ldr	r3, [pc, #60]	@ (8012114 <prvCreateSectors+0xa4>)
 80120d6:	6818      	ldr	r0, [r3, #0]
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	019b      	lsls	r3, r3, #6
 80120dc:	4403      	add	r3, r0
 80120de:	440a      	add	r2, r1
 80120e0:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 80120e2:	4b0c      	ldr	r3, [pc, #48]	@ (8012114 <prvCreateSectors+0xa4>)
 80120e4:	681a      	ldr	r2, [r3, #0]
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	019b      	lsls	r3, r3, #6
 80120ea:	4413      	add	r3, r2
 80120ec:	332c      	adds	r3, #44	@ 0x2c
 80120ee:	4619      	mov	r1, r3
 80120f0:	4807      	ldr	r0, [pc, #28]	@ (8012110 <prvCreateSectors+0xa0>)
 80120f2:	f7ff ff70 	bl	8011fd6 <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	3301      	adds	r3, #1
 80120fa:	607b      	str	r3, [r7, #4]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2bef      	cmp	r3, #239	@ 0xef
 8012100:	ddd9      	ble.n	80120b6 <prvCreateSectors+0x46>
                }

                xReturn = pdPASS;
 8012102:	2301      	movs	r3, #1
 8012104:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 8012106:	683b      	ldr	r3, [r7, #0]
        }
 8012108:	4618      	mov	r0, r3
 801210a:	3708      	adds	r7, #8
 801210c:	46bd      	mov	sp, r7
 801210e:	bd80      	pop	{r7, pc}
 8012110:	2000a3b4 	.word	0x2000a3b4
 8012114:	2000a3b0 	.word	0x2000a3b0

08012118 <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 8012118:	b580      	push	{r7, lr}
 801211a:	b086      	sub	sp, #24
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
 8012120:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 8012122:	2300      	movs	r3, #0
 8012124:	613b      	str	r3, [r7, #16]

            /* Find a segment with a given sequence number in the list of received
             * segments. */
            pxEnd = listGET_END_MARKER( &pxWindow->xRxSegments );
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	33ac      	adds	r3, #172	@ 0xac
 801212a:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	685b      	ldr	r3, [r3, #4]
 8012130:	617b      	str	r3, [r7, #20]
 8012132:	e010      	b.n	8012156 <xTCPWindowRxFind+0x3e>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8012134:	697b      	ldr	r3, [r7, #20]
 8012136:	68db      	ldr	r3, [r3, #12]
 8012138:	4618      	mov	r0, r3
 801213a:	f7ff fee7 	bl	8011f0c <vCastPointerTo_TCPSegment_t>
 801213e:	60b8      	str	r0, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 8012140:	68bb      	ldr	r3, [r7, #8]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	683a      	ldr	r2, [r7, #0]
 8012146:	429a      	cmp	r2, r3
 8012148:	d102      	bne.n	8012150 <xTCPWindowRxFind+0x38>
                {
                    pxReturn = pxSegment;
 801214a:	68bb      	ldr	r3, [r7, #8]
 801214c:	613b      	str	r3, [r7, #16]
                    break;
 801214e:	e006      	b.n	801215e <xTCPWindowRxFind+0x46>
                 pxIterator = listGET_NEXT( pxIterator ) )
 8012150:	697b      	ldr	r3, [r7, #20]
 8012152:	685b      	ldr	r3, [r3, #4]
 8012154:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 8012156:	697a      	ldr	r2, [r7, #20]
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	429a      	cmp	r2, r3
 801215c:	d1ea      	bne.n	8012134 <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 801215e:	693b      	ldr	r3, [r7, #16]
        }
 8012160:	4618      	mov	r0, r3
 8012162:	3718      	adds	r7, #24
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}

08012168 <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 8012168:	b580      	push	{r7, lr}
 801216a:	b088      	sub	sp, #32
 801216c:	af00      	add	r7, sp, #0
 801216e:	60f8      	str	r0, [r7, #12]
 8012170:	60b9      	str	r1, [r7, #8]
 8012172:	607a      	str	r2, [r7, #4]
 8012174:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 8012176:	4b33      	ldr	r3, [pc, #204]	@ (8012244 <xTCPWindowNew+0xdc>)
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d102      	bne.n	8012184 <xTCPWindowNew+0x1c>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
                pxSegment = NULL;
 801217e:	2300      	movs	r3, #0
 8012180:	61fb      	str	r3, [r7, #28]
 8012182:	e059      	b.n	8012238 <xTCPWindowNew+0xd0>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 8012184:	4b2f      	ldr	r3, [pc, #188]	@ (8012244 <xTCPWindowNew+0xdc>)
 8012186:	68db      	ldr	r3, [r3, #12]
 8012188:	61bb      	str	r3, [r7, #24]
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 801218a:	69bb      	ldr	r3, [r7, #24]
 801218c:	68db      	ldr	r3, [r3, #12]
 801218e:	4618      	mov	r0, r3
 8012190:	f7ff febc 	bl	8011f0c <vCastPointerTo_TCPSegment_t>
 8012194:	61f8      	str	r0, [r7, #28]

                configASSERT( pxItem != NULL );
 8012196:	69bb      	ldr	r3, [r7, #24]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d10d      	bne.n	80121b8 <xTCPWindowNew+0x50>
	__asm volatile
 801219c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121a0:	b672      	cpsid	i
 80121a2:	f383 8811 	msr	BASEPRI, r3
 80121a6:	f3bf 8f6f 	isb	sy
 80121aa:	f3bf 8f4f 	dsb	sy
 80121ae:	b662      	cpsie	i
 80121b0:	617b      	str	r3, [r7, #20]
}
 80121b2:	bf00      	nop
 80121b4:	bf00      	nop
 80121b6:	e7fd      	b.n	80121b4 <xTCPWindowNew+0x4c>
                configASSERT( pxSegment != NULL );
 80121b8:	69fb      	ldr	r3, [r7, #28]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d10d      	bne.n	80121da <xTCPWindowNew+0x72>
	__asm volatile
 80121be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121c2:	b672      	cpsid	i
 80121c4:	f383 8811 	msr	BASEPRI, r3
 80121c8:	f3bf 8f6f 	isb	sy
 80121cc:	f3bf 8f4f 	dsb	sy
 80121d0:	b662      	cpsie	i
 80121d2:	613b      	str	r3, [r7, #16]
}
 80121d4:	bf00      	nop
 80121d6:	bf00      	nop
 80121d8:	e7fd      	b.n	80121d6 <xTCPWindowNew+0x6e>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 80121da:	69b8      	ldr	r0, [r7, #24]
 80121dc:	f7f6 f82b 	bl	8008236 <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d006      	beq.n	80121f4 <xTCPWindowNew+0x8c>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	33a4      	adds	r3, #164	@ 0xa4
 80121ea:	69b9      	ldr	r1, [r7, #24]
 80121ec:	4618      	mov	r0, r3
 80121ee:	f7ff fef2 	bl	8011fd6 <vListInsertFifo>
 80121f2:	e005      	b.n	8012200 <xTCPWindowNew+0x98>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	3390      	adds	r3, #144	@ 0x90
 80121f8:	69b9      	ldr	r1, [r7, #24]
 80121fa:	4618      	mov	r0, r3
 80121fc:	f7ff feeb 	bl	8011fd6 <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 8012200:	69fb      	ldr	r3, [r7, #28]
 8012202:	3310      	adds	r3, #16
 8012204:	4618      	mov	r0, r3
 8012206:	f7ff fef6 	bl	8011ff6 <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 801220a:	69fb      	ldr	r3, [r7, #28]
 801220c:	2200      	movs	r2, #0
 801220e:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8012210:	683b      	ldr	r3, [r7, #0]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d001      	beq.n	801221a <xTCPWindowNew+0xb2>
 8012216:	2101      	movs	r1, #1
 8012218:	e000      	b.n	801221c <xTCPWindowNew+0xb4>
 801221a:	2100      	movs	r1, #0
 801221c:	69fa      	ldr	r2, [r7, #28]
 801221e:	7d93      	ldrb	r3, [r2, #22]
 8012220:	f361 0382 	bfi	r3, r1, #2, #1
 8012224:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 8012226:	69fb      	ldr	r3, [r7, #28]
 8012228:	687a      	ldr	r2, [r7, #4]
 801222a:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 801222c:	69fb      	ldr	r3, [r7, #28]
 801222e:	687a      	ldr	r2, [r7, #4]
 8012230:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 8012232:	69fb      	ldr	r3, [r7, #28]
 8012234:	68ba      	ldr	r2, [r7, #8]
 8012236:	601a      	str	r2, [r3, #0]
                        }
                    }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 8012238:	69fb      	ldr	r3, [r7, #28]
        }
 801223a:	4618      	mov	r0, r3
 801223c:	3720      	adds	r7, #32
 801223e:	46bd      	mov	sp, r7
 8012240:	bd80      	pop	{r7, pc}
 8012242:	bf00      	nop
 8012244:	2000a3b4 	.word	0x2000a3b4

08012248 <xTCPWindowRxEmpty>:
 * @param[in] pxWindow: The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 8012248:	b580      	push	{r7, lr}
 801224a:	b084      	sub	sp, #16
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012256:	2b00      	cmp	r3, #0
 8012258:	d002      	beq.n	8012260 <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 801225a:	2300      	movs	r3, #0
 801225c:	60fb      	str	r3, [r7, #12]
 801225e:	e00f      	b.n	8012280 <xTCPWindowRxEmpty+0x38>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	691a      	ldr	r2, [r3, #16]
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	699b      	ldr	r3, [r3, #24]
 8012268:	4619      	mov	r1, r3
 801226a:	4610      	mov	r0, r2
 801226c:	f7ff fe9d 	bl	8011faa <xSequenceGreaterThanOrEqual>
 8012270:	4603      	mov	r3, r0
 8012272:	2b00      	cmp	r3, #0
 8012274:	d002      	beq.n	801227c <xTCPWindowRxEmpty+0x34>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 8012276:	2301      	movs	r3, #1
 8012278:	60fb      	str	r3, [r7, #12]
 801227a:	e001      	b.n	8012280 <xTCPWindowRxEmpty+0x38>
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %lu highest %lu (empty)\n",
                                         ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 801227c:	2300      	movs	r3, #0
 801227e:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 8012280:	68fb      	ldr	r3, [r7, #12]
        }
 8012282:	4618      	mov	r0, r3
 8012284:	3710      	adds	r7, #16
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}

0801228a <xTCPWindowGetHead>:
 * @param[in] pxList: The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 801228a:	b580      	push	{r7, lr}
 801228c:	b084      	sub	sp, #16
 801228e:	af00      	add	r7, sp, #0
 8012290:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d102      	bne.n	80122a0 <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 801229a:	2300      	movs	r3, #0
 801229c:	60fb      	str	r3, [r7, #12]
 801229e:	e00b      	b.n	80122b8 <xTCPWindowGetHead+0x2e>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	68db      	ldr	r3, [r3, #12]
 80122a4:	60bb      	str	r3, [r7, #8]
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 80122a6:	68bb      	ldr	r3, [r7, #8]
 80122a8:	68db      	ldr	r3, [r3, #12]
 80122aa:	4618      	mov	r0, r3
 80122ac:	f7ff fe2e 	bl	8011f0c <vCastPointerTo_TCPSegment_t>
 80122b0:	60f8      	str	r0, [r7, #12]

                ( void ) uxListRemove( pxItem );
 80122b2:	68b8      	ldr	r0, [r7, #8]
 80122b4:	f7f5 ffbf 	bl	8008236 <uxListRemove>
            }

            return pxSegment;
 80122b8:	68fb      	ldr	r3, [r7, #12]
        }
 80122ba:	4618      	mov	r0, r3
 80122bc:	3710      	adds	r7, #16
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}

080122c2 <xTCPWindowPeekHead>:
 * @param[in] pxList: The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 80122c2:	b580      	push	{r7, lr}
 80122c4:	b084      	sub	sp, #16
 80122c6:	af00      	add	r7, sp, #0
 80122c8:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d102      	bne.n	80122d8 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 80122d2:	2300      	movs	r3, #0
 80122d4:	60fb      	str	r3, [r7, #12]
 80122d6:	e008      	b.n	80122ea <xTCPWindowPeekHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	68db      	ldr	r3, [r3, #12]
 80122dc:	60bb      	str	r3, [r7, #8]
                pxReturn = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxItem ) );
 80122de:	68bb      	ldr	r3, [r7, #8]
 80122e0:	68db      	ldr	r3, [r3, #12]
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7ff fe12 	bl	8011f0c <vCastPointerTo_TCPSegment_t>
 80122e8:	60f8      	str	r0, [r7, #12]
            }

            return pxReturn;
 80122ea:	68fb      	ldr	r3, [r7, #12]
        }
 80122ec:	4618      	mov	r0, r3
 80122ee:	3710      	adds	r7, #16
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}

080122f4 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment: The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b082      	sub	sp, #8
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012300:	2b00      	cmp	r3, #0
 8012302:	d004      	beq.n	801230e <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	3318      	adds	r3, #24
 8012308:	4618      	mov	r0, r3
 801230a:	f7f5 ff94 	bl	8008236 <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0UL;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	2200      	movs	r2, #0
 8012312:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0L;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2200      	movs	r2, #0
 8012318:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0UL;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2200      	movs	r2, #0
 801231e:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012324:	2b00      	cmp	r3, #0
 8012326:	d004      	beq.n	8012332 <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	332c      	adds	r3, #44	@ 0x2c
 801232c:	4618      	mov	r0, r3
 801232e:	f7f5 ff82 	bl	8008236 <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	332c      	adds	r3, #44	@ 0x2c
 8012336:	4619      	mov	r1, r3
 8012338:	4803      	ldr	r0, [pc, #12]	@ (8012348 <vTCPWindowFree+0x54>)
 801233a:	f7ff fe4c 	bl	8011fd6 <vListInsertFifo>
        }
 801233e:	bf00      	nop
 8012340:	3708      	adds	r7, #8
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}
 8012346:	bf00      	nop
 8012348:	2000a3b4 	.word	0x2000a3b4

0801234c <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow: The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 801234c:	b580      	push	{r7, lr}
 801234e:	b086      	sub	sp, #24
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 8012354:	2300      	movs	r3, #0
 8012356:	613b      	str	r3, [r7, #16]
 8012358:	e020      	b.n	801239c <vTCPWindowDestroy+0x50>
            {
                if( xRound != 0 )
 801235a:	693b      	ldr	r3, [r7, #16]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d003      	beq.n	8012368 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	33a4      	adds	r3, #164	@ 0xa4
 8012364:	617b      	str	r3, [r7, #20]
 8012366:	e002      	b.n	801236e <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	3390      	adds	r3, #144	@ 0x90
 801236c:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 801236e:	697b      	ldr	r3, [r7, #20]
 8012370:	689b      	ldr	r3, [r3, #8]
 8012372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012376:	d10e      	bne.n	8012396 <vTCPWindowDestroy+0x4a>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8012378:	e009      	b.n	801238e <vTCPWindowDestroy+0x42>
                    {
                        pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 801237a:	697b      	ldr	r3, [r7, #20]
 801237c:	68db      	ldr	r3, [r3, #12]
 801237e:	68db      	ldr	r3, [r3, #12]
 8012380:	4618      	mov	r0, r3
 8012382:	f7ff fdc3 	bl	8011f0c <vCastPointerTo_TCPSegment_t>
 8012386:	60f8      	str	r0, [r7, #12]
                        vTCPWindowFree( pxSegment );
 8012388:	68f8      	ldr	r0, [r7, #12]
 801238a:	f7ff ffb3 	bl	80122f4 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 801238e:	697b      	ldr	r3, [r7, #20]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d1f1      	bne.n	801237a <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 8012396:	693b      	ldr	r3, [r7, #16]
 8012398:	3301      	adds	r3, #1
 801239a:	613b      	str	r3, [r7, #16]
 801239c:	693b      	ldr	r3, [r7, #16]
 801239e:	2b01      	cmp	r3, #1
 80123a0:	dddb      	ble.n	801235a <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 80123a2:	bf00      	nop
 80123a4:	bf00      	nop
 80123a6:	3718      	adds	r7, #24
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd80      	pop	{r7, pc}

080123ac <vTCPWindowCreate>:
                           uint32_t ulRxWindowLength,
                           uint32_t ulTxWindowLength,
                           uint32_t ulAckNumber,
                           uint32_t ulSequenceNumber,
                           uint32_t ulMSS )
    {
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b084      	sub	sp, #16
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	60f8      	str	r0, [r7, #12]
 80123b4:	60b9      	str	r1, [r7, #8]
 80123b6:	607a      	str	r2, [r7, #4]
 80123b8:	603b      	str	r3, [r7, #0]
        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( xTCPSegments == NULL )
 80123ba:	4b17      	ldr	r3, [pc, #92]	@ (8012418 <vTCPWindowCreate+0x6c>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d101      	bne.n	80123c6 <vTCPWindowCreate+0x1a>
                {
                    ( void ) prvCreateSectors();
 80123c2:	f7ff fe55 	bl	8012070 <prvCreateSectors>
                }

                vListInitialise( &( pxWindow->xTxSegments ) );
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	3390      	adds	r3, #144	@ 0x90
 80123ca:	4618      	mov	r0, r3
 80123cc:	f7f5 fea9 	bl	8008122 <vListInitialise>
                vListInitialise( &( pxWindow->xRxSegments ) );
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	33a4      	adds	r3, #164	@ 0xa4
 80123d4:	4618      	mov	r0, r3
 80123d6:	f7f5 fea4 	bl	8008122 <vListInitialise>

                vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	3340      	adds	r3, #64	@ 0x40
 80123de:	4618      	mov	r0, r3
 80123e0:	f7f5 fe9f 	bl	8008122 <vListInitialise>
                vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	3354      	adds	r3, #84	@ 0x54
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7f5 fe9a 	bl	8008122 <vListInitialise>
                vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	3368      	adds	r3, #104	@ 0x68
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7f5 fe95 	bl	8008122 <vListInitialise>
        {
            FreeRTOS_debug_printf( ( "vTCPWindowCreate: for WinLen = Rx/Tx: %lu/%lu\n",
                                     ulRxWindowLength, ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	68ba      	ldr	r2, [r7, #8]
 80123fc:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	687a      	ldr	r2, [r7, #4]
 8012402:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 8012404:	69fb      	ldr	r3, [r7, #28]
 8012406:	69ba      	ldr	r2, [r7, #24]
 8012408:	6839      	ldr	r1, [r7, #0]
 801240a:	68f8      	ldr	r0, [r7, #12]
 801240c:	f000 f806 	bl	801241c <vTCPWindowInit>
    }
 8012410:	bf00      	nop
 8012412:	3710      	adds	r7, #16
 8012414:	46bd      	mov	sp, r7
 8012416:	bd80      	pop	{r7, pc}
 8012418:	2000a3b0 	.word	0x2000a3b0

0801241c <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 801241c:	b480      	push	{r7}
 801241e:	b087      	sub	sp, #28
 8012420:	af00      	add	r7, sp, #0
 8012422:	60f8      	str	r0, [r7, #12]
 8012424:	60b9      	str	r1, [r7, #8]
 8012426:	607a      	str	r2, [r7, #4]
 8012428:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 801242a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801242e:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0UL;
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	2200      	movs	r2, #0
 8012434:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 8012436:	68fa      	ldr	r2, [r7, #12]
 8012438:	7813      	ldrb	r3, [r2, #0]
 801243a:	f043 0301 	orr.w	r3, r3, #1
 801243e:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0UL )
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d024      	beq.n	8012490 <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 801244c:	2b00      	cmp	r3, #0
 801244e:	d004      	beq.n	801245a <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	b29a      	uxth	r2, r3
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8012460:	461a      	mov	r2, r3
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	4293      	cmp	r3, r2
 8012466:	d304      	bcc.n	8012472 <vTCPWindowInit+0x56>
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 801246e:	2b00      	cmp	r3, #0
 8012470:	d10e      	bne.n	8012490 <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	685a      	ldr	r2, [r3, #4]
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	fbb2 f3f3 	udiv	r3, r2, r3
 801247c:	683a      	ldr	r2, [r7, #0]
 801247e:	fb03 f202 	mul.w	r2, r3, r2
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	b29a      	uxth	r2, r3
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
                pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
            }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	697a      	ldr	r2, [r7, #20]
 8012494:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	68ba      	ldr	r2, [r7, #8]
 801249a:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	68ba      	ldr	r2, [r7, #8]
 80124a0:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	68ba      	ldr	r2, [r7, #8]
 80124a6:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	687a      	ldr	r2, [r7, #4]
 80124ac:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	687a      	ldr	r2, [r7, #4]
 80124b2:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	687a      	ldr	r2, [r7, #4]
 80124b8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	687a      	ldr	r2, [r7, #4]
 80124be:	629a      	str	r2, [r3, #40]	@ 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	687a      	ldr	r2, [r7, #4]
 80124c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 80124c6:	bf00      	nop
 80124c8:	371c      	adds	r7, #28
 80124ca:	46bd      	mov	sp, r7
 80124cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d0:	4770      	bx	lr

080124d2 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 80124d2:	b580      	push	{r7, lr}
 80124d4:	b08a      	sub	sp, #40	@ 0x28
 80124d6:	af00      	add	r7, sp, #0
 80124d8:	60f8      	str	r0, [r7, #12]
 80124da:	60b9      	str	r1, [r7, #8]
 80124dc:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 80124de:	2300      	movs	r3, #0
 80124e0:	627b      	str	r3, [r7, #36]	@ 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 80124e2:	68ba      	ldr	r2, [r7, #8]
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	4413      	add	r3, r2
 80124e8:	61fb      	str	r3, [r7, #28]
            const ListItem_t * pxEnd = listGET_END_MARKER( &pxWindow->xRxSegments );
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	33ac      	adds	r3, #172	@ 0xac
 80124ee:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 80124f0:	69bb      	ldr	r3, [r7, #24]
 80124f2:	685b      	ldr	r3, [r3, #4]
 80124f4:	623b      	str	r3, [r7, #32]
 80124f6:	e02a      	b.n	801254e <xTCPWindowRxConfirm+0x7c>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 80124f8:	6a3b      	ldr	r3, [r7, #32]
 80124fa:	68db      	ldr	r3, [r3, #12]
 80124fc:	4618      	mov	r0, r3
 80124fe:	f7ff fd05 	bl	8011f0c <vCastPointerTo_TCPSegment_t>
 8012502:	6178      	str	r0, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8012504:	697b      	ldr	r3, [r7, #20]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	68b9      	ldr	r1, [r7, #8]
 801250a:	4618      	mov	r0, r3
 801250c:	f7ff fd4d 	bl	8011faa <xSequenceGreaterThanOrEqual>
 8012510:	4603      	mov	r3, r0
 8012512:	2b00      	cmp	r3, #0
 8012514:	d018      	beq.n	8012548 <xTCPWindowRxConfirm+0x76>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 8012516:	697b      	ldr	r3, [r7, #20]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	69f9      	ldr	r1, [r7, #28]
 801251c:	4618      	mov	r0, r3
 801251e:	f7ff fd16 	bl	8011f4e <xSequenceLessThan>
 8012522:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8012524:	2b00      	cmp	r3, #0
 8012526:	d00f      	beq.n	8012548 <xTCPWindowRxConfirm+0x76>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 8012528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801252a:	2b00      	cmp	r3, #0
 801252c:	d00a      	beq.n	8012544 <xTCPWindowRxConfirm+0x72>
 801252e:	697b      	ldr	r3, [r7, #20]
 8012530:	681a      	ldr	r2, [r3, #0]
 8012532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	4619      	mov	r1, r3
 8012538:	4610      	mov	r0, r2
 801253a:	f7ff fd08 	bl	8011f4e <xSequenceLessThan>
 801253e:	4603      	mov	r3, r0
 8012540:	2b00      	cmp	r3, #0
 8012542:	d001      	beq.n	8012548 <xTCPWindowRxConfirm+0x76>
                    {
                        pxBest = pxSegment;
 8012544:	697b      	ldr	r3, [r7, #20]
 8012546:	627b      	str	r3, [r7, #36]	@ 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 8012548:	6a3b      	ldr	r3, [r7, #32]
 801254a:	685b      	ldr	r3, [r3, #4]
 801254c:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 801254e:	6a3a      	ldr	r2, [r7, #32]
 8012550:	69bb      	ldr	r3, [r7, #24]
 8012552:	429a      	cmp	r2, r3
 8012554:	d1d0      	bne.n	80124f8 <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 8012556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012558:	2b00      	cmp	r3, #0
 801255a:	d003      	beq.n	8012564 <xTCPWindowRxConfirm+0x92>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 801255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801255e:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 8012560:	68ba      	ldr	r2, [r7, #8]
 8012562:	429a      	cmp	r2, r3
                                         pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber,
                                         pxBest->lDataLength,
                                         pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) );
            }

            return pxBest;
 8012564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8012566:	4618      	mov	r0, r3
 8012568:	3728      	adds	r7, #40	@ 0x28
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}
	...

08012570 <lTCPWindowRxCheck>:
 */
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace )
        {
 8012570:	b580      	push	{r7, lr}
 8012572:	b08c      	sub	sp, #48	@ 0x30
 8012574:	af00      	add	r7, sp, #0
 8012576:	60f8      	str	r0, [r7, #12]
 8012578:	60b9      	str	r1, [r7, #8]
 801257a:	607a      	str	r2, [r7, #4]
 801257c:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber, ulLast, ulSavedSequenceNumber, ulIntermediateResult = 0;
 801257e:	2300      	movs	r3, #0
 8012580:	623b      	str	r3, [r7, #32]
             * or there is not enough space.
             *
             * As a side-effect, pxWindow->ulUserDataLength will get set to non-zero,
             * if more Rx data may be passed to the user after this packet. */

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	691b      	ldr	r3, [r3, #16]
 8012586:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	2200      	movs	r2, #0
 801258c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0UL;
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	2200      	movs	r2, #0
 8012594:	631a      	str	r2, [r3, #48]	@ 0x30

            if( ulCurrentSequenceNumber == ulSequenceNumber )
 8012596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012598:	68bb      	ldr	r3, [r7, #8]
 801259a:	429a      	cmp	r2, r3
 801259c:	d143      	bne.n	8012626 <lTCPWindowRxCheck+0xb6>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulLength > ulSpace )
 801259e:	687a      	ldr	r2, [r7, #4]
 80125a0:	683b      	ldr	r3, [r7, #0]
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d903      	bls.n	80125ae <lTCPWindowRxCheck+0x3e>
                {
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu bytes, due to lack of space (%lu)\n", ulLength, ulSpace ) );
                    lReturn = -1;
 80125a6:	f04f 33ff 	mov.w	r3, #4294967295
 80125aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80125ac:	e0bd      	b.n	801272a <lTCPWindowRxCheck+0x1ba>
                }
                else
                {
                    ulCurrentSequenceNumber += ulLength;
 80125ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	4413      	add	r3, r2
 80125b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d02c      	beq.n	801261a <lTCPWindowRxCheck+0xaa>
                    {
                        ulSavedSequenceNumber = ulCurrentSequenceNumber;
 80125c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125c2:	617b      	str	r3, [r7, #20]
                         * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                         * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                         * clean them out. */
                        do
                        {
                            pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 80125c4:	687a      	ldr	r2, [r7, #4]
 80125c6:	68b9      	ldr	r1, [r7, #8]
 80125c8:	68f8      	ldr	r0, [r7, #12]
 80125ca:	f7ff ff82 	bl	80124d2 <xTCPWindowRxConfirm>
 80125ce:	61b8      	str	r0, [r7, #24]

                            if( pxFound != NULL )
 80125d0:	69bb      	ldr	r3, [r7, #24]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d002      	beq.n	80125dc <lTCPWindowRxCheck+0x6c>
                            {
                                /* Remove it because it will be passed to user directly. */
                                vTCPWindowFree( pxFound );
 80125d6:	69b8      	ldr	r0, [r7, #24]
 80125d8:	f7ff fe8c 	bl	80122f4 <vTCPWindowFree>
                            }
                        } while( pxFound != NULL );
 80125dc:	69bb      	ldr	r3, [r7, #24]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d1f0      	bne.n	80125c4 <lTCPWindowRxCheck+0x54>

                        /*  Check for following segments that are already in the
                         * queue and increment ulCurrentSequenceNumber. */
                        for( ; ; )
                        {
                            pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 80125e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80125e4:	68f8      	ldr	r0, [r7, #12]
 80125e6:	f7ff fd97 	bl	8012118 <xTCPWindowRxFind>
 80125ea:	61b8      	str	r0, [r7, #24]

                            if( pxFound == NULL )
 80125ec:	69bb      	ldr	r3, [r7, #24]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d009      	beq.n	8012606 <lTCPWindowRxCheck+0x96>
                            {
                                break;
                            }

                            ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 80125f2:	69bb      	ldr	r3, [r7, #24]
 80125f4:	689b      	ldr	r3, [r3, #8]
 80125f6:	461a      	mov	r2, r3
 80125f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125fa:	4413      	add	r3, r2
 80125fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

                            /* As all packet below this one have been passed to the
                             * user it can be discarded. */
                            vTCPWindowFree( pxFound );
 80125fe:	69b8      	ldr	r0, [r7, #24]
 8012600:	f7ff fe78 	bl	80122f4 <vTCPWindowFree>
                            pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8012604:	e7ed      	b.n	80125e2 <lTCPWindowRxCheck+0x72>
                                break;
 8012606:	bf00      	nop
                        }

                        if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 8012608:	697a      	ldr	r2, [r7, #20]
 801260a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801260c:	429a      	cmp	r2, r3
 801260e:	d004      	beq.n	801261a <lTCPWindowRxCheck+0xaa>
                        {
                            /*  After the current data-package, there is more data
                             * to be popped. */
                            pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 8012610:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	1ad2      	subs	r2, r2, r3
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	631a      	str	r2, [r3, #48]	@ 0x30
                                                         listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                            }
                        }
                    }

                    pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801261e:	611a      	str	r2, [r3, #16]

                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    lReturn = 0;
 8012620:	2300      	movs	r3, #0
 8012622:	627b      	str	r3, [r7, #36]	@ 0x24
 8012624:	e081      	b.n	801272a <lTCPWindowRxCheck+0x1ba>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulSequenceNumber + 1UL ) )
 8012626:	68bb      	ldr	r3, [r7, #8]
 8012628:	3301      	adds	r3, #1
 801262a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801262c:	429a      	cmp	r2, r3
 801262e:	d103      	bne.n	8012638 <lTCPWindowRxCheck+0xc8>
            {
                /* Looks like a TCP keep-alive message.  Do not accept/store Rx data
                 * ulUserDataLength = 0. Not packet out-of-sync.  Just reply to it. */
                lReturn = -1;
 8012630:	f04f 33ff 	mov.w	r3, #4294967295
 8012634:	627b      	str	r3, [r7, #36]	@ 0x24
 8012636:	e078      	b.n	801272a <lTCPWindowRxCheck+0x1ba>
                /* The packet is not the one expected.  See if it falls within the Rx
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */
                ulLast = ulSequenceNumber + ulLength;
 8012638:	68ba      	ldr	r2, [r7, #8]
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	4413      	add	r3, r2
 801263e:	62bb      	str	r3, [r7, #40]	@ 0x28

                ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 8012640:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012644:	1ad3      	subs	r3, r2, r3
 8012646:	623b      	str	r3, [r7, #32]
                /* The cast from unsigned long to signed long is on purpose. */
                lDistance = ( int32_t ) ulIntermediateResult;
 8012648:	6a3b      	ldr	r3, [r7, #32]
 801264a:	61fb      	str	r3, [r7, #28]

                if( lDistance <= 0 )
 801264c:	69fb      	ldr	r3, [r7, #28]
 801264e:	2b00      	cmp	r3, #0
 8012650:	dc03      	bgt.n	801265a <lTCPWindowRxCheck+0xea>
                {
                    /* An earlier has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                    lReturn = -1;
 8012652:	f04f 33ff 	mov.w	r3, #4294967295
 8012656:	627b      	str	r3, [r7, #36]	@ 0x24
 8012658:	e067      	b.n	801272a <lTCPWindowRxCheck+0x1ba>
                }
                else if( lDistance > ( int32_t ) ulSpace )
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	69fa      	ldr	r2, [r7, #28]
 801265e:	429a      	cmp	r2, r3
 8012660:	dd03      	ble.n	801266a <lTCPWindowRxCheck+0xfa>
                {
                    /* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
                     * sequence number of this packet is too far ahead, ignore it. */
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %lu+%lu bytes, due to lack of space (%lu)\n", lDistance, ulLength, ulSpace ) );
                    lReturn = -1;
 8012662:	f04f 33ff 	mov.w	r3, #4294967295
 8012666:	627b      	str	r3, [r7, #36]	@ 0x24
 8012668:	e05f      	b.n	801272a <lTCPWindowRxCheck+0x1ba>
                     * This is useful because subsequent packets will be SACK'd with
                     * single one message
                     */
                    for( ; ; )
                    {
                        pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 801266a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801266c:	68f8      	ldr	r0, [r7, #12]
 801266e:	f7ff fd53 	bl	8012118 <xTCPWindowRxFind>
 8012672:	61b8      	str	r0, [r7, #24]

                        if( pxFound == NULL )
 8012674:	69bb      	ldr	r3, [r7, #24]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d006      	beq.n	8012688 <lTCPWindowRxCheck+0x118>
                        {
                            break;
                        }

                        ulLast += ( uint32_t ) pxFound->lDataLength;
 801267a:	69bb      	ldr	r3, [r7, #24]
 801267c:	689b      	ldr	r3, [r3, #8]
 801267e:	461a      	mov	r2, r3
 8012680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012682:	4413      	add	r3, r2
 8012684:	62bb      	str	r3, [r7, #40]	@ 0x28
                        pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 8012686:	e7f0      	b.n	801266a <lTCPWindowRxCheck+0xfa>
                            break;
 8012688:	bf00      	nop
                                                 ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
                    }

                    /* Now prepare the SACK message.
                     * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
                    pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	4a29      	ldr	r2, [pc, #164]	@ (8012734 <lTCPWindowRxCheck+0x1c4>)
 801268e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

                    /* First sequence number that we received. */
                    pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 8012692:	68bb      	ldr	r3, [r7, #8]
 8012694:	061a      	lsls	r2, r3, #24
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	021b      	lsls	r3, r3, #8
 801269a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801269e:	431a      	orrs	r2, r3
 80126a0:	68bb      	ldr	r3, [r7, #8]
 80126a2:	0a1b      	lsrs	r3, r3, #8
 80126a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80126a8:	431a      	orrs	r2, r3
 80126aa:	68bb      	ldr	r3, [r7, #8]
 80126ac:	0e1b      	lsrs	r3, r3, #24
 80126ae:	431a      	orrs	r2, r3
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

                    /* Last + 1 */
                    pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 80126b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126b8:	061a      	lsls	r2, r3, #24
 80126ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126bc:	021b      	lsls	r3, r3, #8
 80126be:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80126c2:	431a      	orrs	r2, r3
 80126c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126c6:	0a1b      	lsrs	r3, r3, #8
 80126c8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80126cc:	431a      	orrs	r2, r3
 80126ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126d0:	0e1b      	lsrs	r3, r3, #24
 80126d2:	431a      	orrs	r2, r3
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

                    /* Which make 12 (3*4) option bytes. */
                    pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	220c      	movs	r2, #12
 80126de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                    pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 80126e2:	68b9      	ldr	r1, [r7, #8]
 80126e4:	68f8      	ldr	r0, [r7, #12]
 80126e6:	f7ff fd17 	bl	8012118 <xTCPWindowRxFind>
 80126ea:	61b8      	str	r0, [r7, #24]

                    if( pxFound != NULL )
 80126ec:	69bb      	ldr	r3, [r7, #24]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d003      	beq.n	80126fa <lTCPWindowRxCheck+0x18a>
                    {
                        /* This out-of-sequence packet has been received for a
                         * second time.  It is already stored but do send a SACK
                         * again. */
                        lReturn = -1;
 80126f2:	f04f 33ff 	mov.w	r3, #4294967295
 80126f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80126f8:	e017      	b.n	801272a <lTCPWindowRxCheck+0x1ba>
                    }
                    else
                    {
                        pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 80126fa:	687a      	ldr	r2, [r7, #4]
 80126fc:	2301      	movs	r3, #1
 80126fe:	68b9      	ldr	r1, [r7, #8]
 8012700:	68f8      	ldr	r0, [r7, #12]
 8012702:	f7ff fd31 	bl	8012168 <xTCPWindowNew>
 8012706:	61b8      	str	r0, [r7, #24]

                        if( pxFound == NULL )
 8012708:	69bb      	ldr	r3, [r7, #24]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d107      	bne.n	801271e <lTCPWindowRxCheck+0x1ae>
                        {
                            /* Can not send a SACK, because the segment cannot be
                             * stored. */
                            pxWindow->ucOptionLength = 0U;
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	2200      	movs	r2, #0
 8012712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

                            /* Needs to be stored but there is no segment
                             * available. */
                            lReturn = -1;
 8012716:	f04f 33ff 	mov.w	r3, #4294967295
 801271a:	627b      	str	r3, [r7, #36]	@ 0x24
 801271c:	e005      	b.n	801272a <lTCPWindowRxCheck+0x1ba>
                                FreeRTOS_flush_logging();
                            }

                            /* Return a positive value.  The packet may be accepted
                            * and stored but an earlier packet is still missing. */
                            ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 801271e:	68ba      	ldr	r2, [r7, #8]
 8012720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012722:	1ad3      	subs	r3, r2, r3
 8012724:	623b      	str	r3, [r7, #32]
                            lReturn = ( int32_t ) ulIntermediateResult;
 8012726:	6a3b      	ldr	r3, [r7, #32]
 8012728:	627b      	str	r3, [r7, #36]	@ 0x24
                        }
                    }
                }
            }

            return lReturn;
 801272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 801272c:	4618      	mov	r0, r3
 801272e:	3730      	adds	r7, #48	@ 0x30
 8012730:	46bd      	mov	sp, r7
 8012732:	bd80      	pop	{r7, pc}
 8012734:	0a050101 	.word	0x0a050101

08012738 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 8012738:	b480      	push	{r7}
 801273a:	b087      	sub	sp, #28
 801273c:	af00      	add	r7, sp, #0
 801273e:	60f8      	str	r0, [r7, #12]
 8012740:	60b9      	str	r1, [r7, #8]
 8012742:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 8012744:	68fa      	ldr	r2, [r7, #12]
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	4413      	add	r3, r2
 801274a:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 801274c:	697a      	ldr	r2, [r7, #20]
 801274e:	68bb      	ldr	r3, [r7, #8]
 8012750:	429a      	cmp	r2, r3
 8012752:	db03      	blt.n	801275c <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 8012754:	697a      	ldr	r2, [r7, #20]
 8012756:	68bb      	ldr	r3, [r7, #8]
 8012758:	1ad3      	subs	r3, r2, r3
 801275a:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 801275c:	697b      	ldr	r3, [r7, #20]
        }
 801275e:	4618      	mov	r0, r3
 8012760:	371c      	adds	r7, #28
 8012762:	46bd      	mov	sp, r7
 8012764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012768:	4770      	bx	lr
	...

0801276c <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 801276c:	b580      	push	{r7, lr}
 801276e:	b08a      	sub	sp, #40	@ 0x28
 8012770:	af00      	add	r7, sp, #0
 8012772:	60f8      	str	r0, [r7, #12]
 8012774:	60b9      	str	r1, [r7, #8]
 8012776:	607a      	str	r2, [r7, #4]
 8012778:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength, lToWrite;
 801277a:	68bb      	ldr	r3, [r7, #8]
 801277c:	627b      	str	r3, [r7, #36]	@ 0x24
            int32_t lDone = 0;
 801277e:	2300      	movs	r3, #0
 8012780:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801278a:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( pxSegment != NULL )
 801278c:	69bb      	ldr	r3, [r7, #24]
 801278e:	2b00      	cmp	r3, #0
 8012790:	f000 8096 	beq.w	80128c0 <lTCPWindowTxAdd+0x154>
            {
                if( pxSegment->lDataLength < pxSegment->lMaxLength )
 8012794:	69bb      	ldr	r3, [r7, #24]
 8012796:	689a      	ldr	r2, [r3, #8]
 8012798:	69bb      	ldr	r3, [r7, #24]
 801279a:	685b      	ldr	r3, [r3, #4]
 801279c:	429a      	cmp	r2, r3
 801279e:	f280 808f 	bge.w	80128c0 <lTCPWindowTxAdd+0x154>
                {
                    if( ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength != 0 ) )
 80127a2:	69bb      	ldr	r3, [r7, #24]
 80127a4:	7d9b      	ldrb	r3, [r3, #22]
 80127a6:	f003 0301 	and.w	r3, r3, #1
 80127aa:	b2db      	uxtb	r3, r3
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	f040 8087 	bne.w	80128c0 <lTCPWindowTxAdd+0x154>
 80127b2:	69bb      	ldr	r3, [r7, #24]
 80127b4:	689b      	ldr	r3, [r3, #8]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	f000 8082 	beq.w	80128c0 <lTCPWindowTxAdd+0x154>
                    {
                        /* Adding data to a segment that was already in the TX queue.  It
                         * will be filled-up to a maximum of MSS (maximum segment size). */
                        lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 80127bc:	69bb      	ldr	r3, [r7, #24]
 80127be:	685a      	ldr	r2, [r3, #4]
 80127c0:	69bb      	ldr	r3, [r7, #24]
 80127c2:	689b      	ldr	r3, [r3, #8]
 80127c4:	1ad3      	subs	r3, r2, r3
 80127c6:	4619      	mov	r1, r3
 80127c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80127ca:	f7ff fb7f 	bl	8011ecc <FreeRTOS_min_int32>
 80127ce:	6178      	str	r0, [r7, #20]

                        pxSegment->lDataLength += lToWrite;
 80127d0:	69bb      	ldr	r3, [r7, #24]
 80127d2:	689a      	ldr	r2, [r3, #8]
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	441a      	add	r2, r3
 80127d8:	69bb      	ldr	r3, [r7, #24]
 80127da:	609a      	str	r2, [r3, #8]

                        if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 80127dc:	69bb      	ldr	r3, [r7, #24]
 80127de:	689a      	ldr	r2, [r3, #8]
 80127e0:	69bb      	ldr	r3, [r7, #24]
 80127e2:	685b      	ldr	r3, [r3, #4]
 80127e4:	429a      	cmp	r2, r3
 80127e6:	db02      	blt.n	80127ee <lTCPWindowTxAdd+0x82>
                        {
                            /* This segment is full, don't add more bytes. */
                            pxWindow->pxHeadSegment = NULL;
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	2200      	movs	r2, #0
 80127ec:	67da      	str	r2, [r3, #124]	@ 0x7c
                        }

                        lBytesLeft -= lToWrite;
 80127ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127f0:	697b      	ldr	r3, [r7, #20]
 80127f2:	1ad3      	subs	r3, r2, r3
 80127f4:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* ulNextTxSequenceNumber is the sequence number of the next byte to
                         * be stored for transmission. */
                        pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80127fa:	697b      	ldr	r3, [r7, #20]
 80127fc:	441a      	add	r2, r3
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	635a      	str	r2, [r3, #52]	@ 0x34

                        /* Increased the return value. */
                        lDone += lToWrite;
 8012802:	6a3a      	ldr	r2, [r7, #32]
 8012804:	697b      	ldr	r3, [r7, #20]
 8012806:	4413      	add	r3, r2
 8012808:	623b      	str	r3, [r7, #32]

                        /* Some detailed logging, for those who're interested. */
                        if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 801280a:	4b32      	ldr	r3, [pc, #200]	@ (80128d4 <lTCPWindowTxAdd+0x168>)
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	2b01      	cmp	r3, #1
                            FreeRTOS_flush_logging();
                        }

                        /* Calculate the next position in the circular data buffer, knowing
                         * its maximum length 'lMax'. */
                        lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8012810:	697a      	ldr	r2, [r7, #20]
 8012812:	6839      	ldr	r1, [r7, #0]
 8012814:	69f8      	ldr	r0, [r7, #28]
 8012816:	f7ff ff8f 	bl	8012738 <lTCPIncrementTxPosition>
 801281a:	61f8      	str	r0, [r7, #28]
                    }
                }
            }

            while( lBytesLeft > 0 )
 801281c:	e050      	b.n	80128c0 <lTCPWindowTxAdd+0x154>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8012828:	461a      	mov	r2, r3
 801282a:	2300      	movs	r3, #0
 801282c:	68f8      	ldr	r0, [r7, #12]
 801282e:	f7ff fc9b 	bl	8012168 <xTCPWindowNew>
 8012832:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 8012834:	69bb      	ldr	r3, [r7, #24]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d046      	beq.n	80128c8 <lTCPWindowTxAdd+0x15c>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 801283a:	69bb      	ldr	r3, [r7, #24]
 801283c:	685b      	ldr	r3, [r3, #4]
 801283e:	4619      	mov	r1, r3
 8012840:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012842:	f7ff fb43 	bl	8011ecc <FreeRTOS_min_int32>
 8012846:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 8012848:	69bb      	ldr	r3, [r7, #24]
 801284a:	697a      	ldr	r2, [r7, #20]
 801284c:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 801284e:	69bb      	ldr	r3, [r7, #24]
 8012850:	69fa      	ldr	r2, [r7, #28]
 8012852:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 8012854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	1ad3      	subs	r3, r2, r3
 801285a:	627b      	str	r3, [r7, #36]	@ 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 801285c:	697a      	ldr	r2, [r7, #20]
 801285e:	6839      	ldr	r1, [r7, #0]
 8012860:	69f8      	ldr	r0, [r7, #28]
 8012862:	f7ff ff69 	bl	8012738 <lTCPIncrementTxPosition>
 8012866:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	441a      	add	r2, r3
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	635a      	str	r2, [r3, #52]	@ 0x34
                    lDone += lToWrite;
 8012874:	6a3a      	ldr	r2, [r7, #32]
 8012876:	697b      	ldr	r3, [r7, #20]
 8012878:	4413      	add	r3, r2
 801287a:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8012882:	69bb      	ldr	r3, [r7, #24]
 8012884:	3318      	adds	r3, #24
 8012886:	4619      	mov	r1, r3
 8012888:	4610      	mov	r0, r2
 801288a:	f7ff fba4 	bl	8011fd6 <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 801288e:	69bb      	ldr	r3, [r7, #24]
 8012890:	689a      	ldr	r2, [r3, #8]
 8012892:	69bb      	ldr	r3, [r7, #24]
 8012894:	685b      	ldr	r3, [r3, #4]
 8012896:	429a      	cmp	r2, r3
 8012898:	da03      	bge.n	80128a2 <lTCPWindowTxAdd+0x136>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	69ba      	ldr	r2, [r7, #24]
 801289e:	67da      	str	r2, [r3, #124]	@ 0x7c
 80128a0:	e002      	b.n	80128a8 <lTCPWindowTxAdd+0x13c>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	2200      	movs	r2, #0
 80128a6:	67da      	str	r2, [r3, #124]	@ 0x7c
                    }

                    if( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80128ae:	2b17      	cmp	r3, #23
 80128b0:	d006      	beq.n	80128c0 <lTCPWindowTxAdd+0x154>
                    {
                        if( ( xTCPWindowLoggingLevel >= 3 ) ||
 80128b2:	4b08      	ldr	r3, [pc, #32]	@ (80128d4 <lTCPWindowTxAdd+0x168>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	2b02      	cmp	r3, #2
 80128b8:	dc02      	bgt.n	80128c0 <lTCPWindowTxAdd+0x154>
                            ( ( xTCPWindowLoggingLevel >= 2 ) && ( pxWindow->pxHeadSegment != NULL ) ) )
 80128ba:	4b06      	ldr	r3, [pc, #24]	@ (80128d4 <lTCPWindowTxAdd+0x168>)
 80128bc:	681b      	ldr	r3, [r3, #0]
                        if( ( xTCPWindowLoggingLevel >= 3 ) ||
 80128be:	2b01      	cmp	r3, #1
            while( lBytesLeft > 0 )
 80128c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	dcab      	bgt.n	801281e <lTCPWindowTxAdd+0xb2>
 80128c6:	e000      	b.n	80128ca <lTCPWindowTxAdd+0x15e>
                    if( lDone != 0 )
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %ld bytes)\n", lBytesLeft ) );
                    }

                    break;
 80128c8:	bf00      	nop
                }
            }

            return lDone;
 80128ca:	6a3b      	ldr	r3, [r7, #32]
        }
 80128cc:	4618      	mov	r0, r3
 80128ce:	3728      	adds	r7, #40	@ 0x28
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}
 80128d4:	2000a3c8 	.word	0x2000a3c8

080128d8 <xTCPWindowTxDone>:
 * @param[in] pxWindow: The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 80128d8:	b480      	push	{r7}
 80128da:	b083      	sub	sp, #12
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d101      	bne.n	80128ee <xTCPWindowTxDone+0x16>
 80128ea:	2301      	movs	r3, #1
 80128ec:	e000      	b.n	80128f0 <xTCPWindowTxDone+0x18>
 80128ee:	2300      	movs	r3, #0
        }
 80128f0:	4618      	mov	r0, r3
 80128f2:	370c      	adds	r7, #12
 80128f4:	46bd      	mov	sp, r7
 80128f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fa:	4770      	bx	lr

080128fc <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b086      	sub	sp, #24
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	3354      	adds	r3, #84	@ 0x54
 801290a:	4618      	mov	r0, r3
 801290c:	f7ff fcd9 	bl	80122c2 <xTCPWindowPeekHead>
 8012910:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d102      	bne.n	801291e <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 8012918:	2300      	movs	r3, #0
 801291a:	613b      	str	r3, [r7, #16]
 801291c:	e02f      	b.n	801297e <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	6a1b      	ldr	r3, [r3, #32]
 8012926:	429a      	cmp	r2, r3
 8012928:	d306      	bcc.n	8012938 <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	6a1b      	ldr	r3, [r3, #32]
 8012932:	1ad3      	subs	r3, r2, r3
 8012934:	617b      	str	r3, [r7, #20]
 8012936:	e001      	b.n	801293c <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0UL;
 8012938:	2300      	movs	r3, #0
 801293a:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 801293c:	6979      	ldr	r1, [r7, #20]
 801293e:	6838      	ldr	r0, [r7, #0]
 8012940:	f7ff fad4 	bl	8011eec <FreeRTOS_min_uint32>
 8012944:	4602      	mov	r2, r0
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	1a9b      	subs	r3, r3, r2
 801294a:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	689b      	ldr	r3, [r3, #8]
 8012950:	461a      	mov	r2, r3
 8012952:	68bb      	ldr	r3, [r7, #8]
 8012954:	4293      	cmp	r3, r2
 8012956:	d302      	bcc.n	801295e <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 8012958:	2301      	movs	r3, #1
 801295a:	613b      	str	r3, [r7, #16]
 801295c:	e001      	b.n	8012962 <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 801295e:	2300      	movs	r3, #0
 8012960:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0UL ) && ( pxWindow->xSize.ulTxWindowLength < ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d00a      	beq.n	801297e <prvTCPWindowTxHasSpace+0x82>
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	689a      	ldr	r2, [r3, #8]
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	689b      	ldr	r3, [r3, #8]
 8012970:	4619      	mov	r1, r3
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	440b      	add	r3, r1
 8012976:	429a      	cmp	r2, r3
 8012978:	d201      	bcs.n	801297e <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 801297a:	2300      	movs	r3, #0
 801297c:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 801297e:	693b      	ldr	r3, [r7, #16]
        }
 8012980:	4618      	mov	r0, r3
 8012982:	3718      	adds	r7, #24
 8012984:	46bd      	mov	sp, r7
 8012986:	bd80      	pop	{r7, pc}

08012988 <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 8012988:	b580      	push	{r7, lr}
 801298a:	b088      	sub	sp, #32
 801298c:	af00      	add	r7, sp, #0
 801298e:	60f8      	str	r0, [r7, #12]
 8012990:	60b9      	str	r1, [r7, #8]
 8012992:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2200      	movs	r2, #0
 8012998:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d002      	beq.n	80129a8 <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 80129a2:	2301      	movs	r3, #1
 80129a4:	61fb      	str	r3, [r7, #28]
 80129a6:	e04a      	b.n	8012a3e <xTCPWindowTxHasData+0xb6>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	3368      	adds	r3, #104	@ 0x68
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7ff fc88 	bl	80122c2 <xTCPWindowPeekHead>
 80129b2:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 80129b4:	69bb      	ldr	r3, [r7, #24]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d019      	beq.n	80129ee <xTCPWindowTxHasData+0x66>
                {
                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 80129ba:	69bb      	ldr	r3, [r7, #24]
 80129bc:	3310      	adds	r3, #16
 80129be:	4618      	mov	r0, r3
 80129c0:	f7ff fb26 	bl	8012010 <ulTimerGetAge>
 80129c4:	6178      	str	r0, [r7, #20]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * lSRTT' ms for an ACK. A second time it will wait '2 * lSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80129ca:	461a      	mov	r2, r3
 80129cc:	69bb      	ldr	r3, [r7, #24]
 80129ce:	7d1b      	ldrb	r3, [r3, #20]
 80129d0:	fa02 f303 	lsl.w	r3, r2, r3
 80129d4:	613b      	str	r3, [r7, #16]

                    if( ulMaxAge > ulAge )
 80129d6:	693a      	ldr	r2, [r7, #16]
 80129d8:	697b      	ldr	r3, [r7, #20]
 80129da:	429a      	cmp	r2, r3
 80129dc:	d904      	bls.n	80129e8 <xTCPWindowTxHasData+0x60>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 80129de:	693a      	ldr	r2, [r7, #16]
 80129e0:	697b      	ldr	r3, [r7, #20]
 80129e2:	1ad2      	subs	r2, r2, r3
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 80129e8:	2301      	movs	r3, #1
 80129ea:	61fb      	str	r3, [r7, #28]
 80129ec:	e027      	b.n	8012a3e <xTCPWindowTxHasData+0xb6>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	3354      	adds	r3, #84	@ 0x54
 80129f2:	4618      	mov	r0, r3
 80129f4:	f7ff fc65 	bl	80122c2 <xTCPWindowPeekHead>
 80129f8:	61b8      	str	r0, [r7, #24]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 80129fa:	69bb      	ldr	r3, [r7, #24]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d102      	bne.n	8012a06 <xTCPWindowTxHasData+0x7e>
                    {
                        xReturn = pdFALSE;
 8012a00:	2300      	movs	r3, #0
 8012a02:	61fb      	str	r3, [r7, #28]
 8012a04:	e01b      	b.n	8012a3e <xTCPWindowTxHasData+0xb6>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8012a06:	68b9      	ldr	r1, [r7, #8]
 8012a08:	68f8      	ldr	r0, [r7, #12]
 8012a0a:	f7ff ff77 	bl	80128fc <prvTCPWindowTxHasSpace>
 8012a0e:	4603      	mov	r3, r0
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d102      	bne.n	8012a1a <xTCPWindowTxHasData+0x92>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 8012a14:	2300      	movs	r3, #0
 8012a16:	61fb      	str	r3, [r7, #28]
 8012a18:	e011      	b.n	8012a3e <xTCPWindowTxHasData+0xb6>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	781b      	ldrb	r3, [r3, #0]
 8012a1e:	f003 0302 	and.w	r3, r3, #2
 8012a22:	b2db      	uxtb	r3, r3
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d008      	beq.n	8012a3a <xTCPWindowTxHasData+0xb2>
 8012a28:	69bb      	ldr	r3, [r7, #24]
 8012a2a:	689a      	ldr	r2, [r3, #8]
 8012a2c:	69bb      	ldr	r3, [r7, #24]
 8012a2e:	685b      	ldr	r3, [r3, #4]
 8012a30:	429a      	cmp	r2, r3
 8012a32:	da02      	bge.n	8012a3a <xTCPWindowTxHasData+0xb2>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 8012a34:	2300      	movs	r3, #0
 8012a36:	61fb      	str	r3, [r7, #28]
 8012a38:	e001      	b.n	8012a3e <xTCPWindowTxHasData+0xb6>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 8012a3a:	2301      	movs	r3, #1
 8012a3c:	61fb      	str	r3, [r7, #28]
                    }
                }
            }

            return xReturn;
 8012a3e:	69fb      	ldr	r3, [r7, #28]
        }
 8012a40:	4618      	mov	r0, r3
 8012a42:	3720      	adds	r7, #32
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}

08012a48 <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b08a      	sub	sp, #40	@ 0x28
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	60f8      	str	r0, [r7, #12]
 8012a50:	60b9      	str	r1, [r7, #8]
 8012a52:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulMaxTime;
            uint32_t ulReturn = ~0UL;
 8012a54:	f04f 33ff 	mov.w	r3, #4294967295
 8012a58:	623b      	str	r3, [r7, #32]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	3340      	adds	r3, #64	@ 0x40
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f7ff fc13 	bl	801228a <xTCPWindowGetHead>
 8012a64:	6278      	str	r0, [r7, #36]	@ 0x24
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	62da      	str	r2, [r3, #44]	@ 0x2c

            if( pxSegment == NULL )
 8012a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d169      	bne.n	8012b48 <ulTCPWindowTxGet+0x100>
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	3368      	adds	r3, #104	@ 0x68
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f7ff fc22 	bl	80122c2 <xTCPWindowPeekHead>
 8012a7e:	6278      	str	r0, [r7, #36]	@ 0x24

                if( pxSegment != NULL )
 8012a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d01f      	beq.n	8012ac6 <ulTCPWindowTxGet+0x7e>
                {
                    /* Do check the timing. */
                    ulMaxTime = ( 1UL << pxSegment->u.bits.ucTransmitCount ) * ( ( uint32_t ) pxWindow->lSRTT );
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a8a:	461a      	mov	r2, r3
 8012a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a8e:	7d1b      	ldrb	r3, [r3, #20]
 8012a90:	fa02 f303 	lsl.w	r3, r2, r3
 8012a94:	61fb      	str	r3, [r7, #28]

                    if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 8012a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a98:	3310      	adds	r3, #16
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f7ff fab8 	bl	8012010 <ulTimerGetAge>
 8012aa0:	4602      	mov	r2, r0
 8012aa2:	69fb      	ldr	r3, [r7, #28]
 8012aa4:	4293      	cmp	r3, r2
 8012aa6:	d20c      	bcs.n	8012ac2 <ulTCPWindowTxGet+0x7a>
                    {
                        /* A normal (non-fast) retransmission.  Move it from the
                         * head of the waiting queue. */
                        pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	3368      	adds	r3, #104	@ 0x68
 8012aac:	4618      	mov	r0, r3
 8012aae:	f7ff fbec 	bl	801228a <xTCPWindowGetHead>
 8012ab2:	6278      	str	r0, [r7, #36]	@ 0x24
                        pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 8012ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	755a      	strb	r2, [r3, #21]

                        /* Some detailed logging. */
                        if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8012aba:	4b54      	ldr	r3, [pc, #336]	@ (8012c0c <ulTCPWindowTxGet+0x1c4>)
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	e001      	b.n	8012ac6 <ulTCPWindowTxGet+0x7e>
                            FreeRTOS_flush_logging();
                        }
                    }
                    else
                    {
                        pxSegment = NULL;
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	627b      	str	r3, [r7, #36]	@ 0x24
                    }
                }

                if( pxSegment == NULL )
 8012ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d13d      	bne.n	8012b48 <ulTCPWindowTxGet+0x100>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	3354      	adds	r3, #84	@ 0x54
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f7ff fbf6 	bl	80122c2 <xTCPWindowPeekHead>
 8012ad6:	6278      	str	r0, [r7, #36]	@ 0x24

                    if( pxSegment == NULL )
 8012ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d102      	bne.n	8012ae4 <ulTCPWindowTxGet+0x9c>
                    {
                        /* No segments queued. */
                        ulReturn = 0UL;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	623b      	str	r3, [r7, #32]
 8012ae2:	e031      	b.n	8012b48 <ulTCPWindowTxGet+0x100>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) && ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	781b      	ldrb	r3, [r3, #0]
 8012ae8:	f003 0302 	and.w	r3, r3, #2
 8012aec:	b2db      	uxtb	r3, r3
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d008      	beq.n	8012b04 <ulTCPWindowTxGet+0xbc>
 8012af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012af4:	689a      	ldr	r2, [r3, #8]
 8012af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012af8:	685b      	ldr	r3, [r3, #4]
 8012afa:	429a      	cmp	r2, r3
 8012afc:	da02      	bge.n	8012b04 <ulTCPWindowTxGet+0xbc>
                    {
                        /* A segment has been queued but the driver waits until it
                         * has a full size of MSS. */
                        ulReturn = 0;
 8012afe:	2300      	movs	r3, #0
 8012b00:	623b      	str	r3, [r7, #32]
 8012b02:	e021      	b.n	8012b48 <ulTCPWindowTxGet+0x100>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8012b04:	68b9      	ldr	r1, [r7, #8]
 8012b06:	68f8      	ldr	r0, [r7, #12]
 8012b08:	f7ff fef8 	bl	80128fc <prvTCPWindowTxHasSpace>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d102      	bne.n	8012b18 <ulTCPWindowTxGet+0xd0>
                    {
                        /* Peer has no more space at this moment. */
                        ulReturn = 0;
 8012b12:	2300      	movs	r3, #0
 8012b14:	623b      	str	r3, [r7, #32]
 8012b16:	e017      	b.n	8012b48 <ulTCPWindowTxGet+0x100>
                    }
                    else
                    {
                        /* Move it out of the Tx queue. */
                        pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	3354      	adds	r3, #84	@ 0x54
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	f7ff fbb4 	bl	801228a <xTCPWindowGetHead>
 8012b22:	6278      	str	r0, [r7, #36]	@ 0x24

                        /* Don't let pxHeadSegment point to this segment any more,
                         * so no more data will be added. */
                        if( pxWindow->pxHeadSegment == pxSegment )
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b2a:	429a      	cmp	r2, r3
 8012b2c:	d102      	bne.n	8012b34 <ulTCPWindowTxGet+0xec>
                        {
                            pxWindow->pxHeadSegment = NULL;
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	2200      	movs	r2, #0
 8012b32:	67da      	str	r2, [r3, #124]	@ 0x7c
                        }

                        /* pxWindow->tx.highest registers the highest sequence
                         * number in our transmission window. */
                        pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 8012b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b3a:	6892      	ldr	r2, [r2, #8]
 8012b3c:	441a      	add	r2, r3
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* ...and more detailed logging */
                        if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8012b42:	4b32      	ldr	r3, [pc, #200]	@ (8012c0c <ulTCPWindowTxGet+0x1c4>)
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	2b01      	cmp	r3, #1
                    FreeRTOS_flush_logging();
                }
            }

            /* See if it has already been determined to return 0. */
            if( ulReturn != 0UL )
 8012b48:	6a3b      	ldr	r3, [r7, #32]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d058      	beq.n	8012c00 <ulTCPWindowTxGet+0x1b8>
            {
                /* pxSegment is not NULL when ulReturn != 0UL. */
                configASSERT( pxSegment != NULL );
 8012b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d10d      	bne.n	8012b70 <ulTCPWindowTxGet+0x128>
	__asm volatile
 8012b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b58:	b672      	cpsid	i
 8012b5a:	f383 8811 	msr	BASEPRI, r3
 8012b5e:	f3bf 8f6f 	isb	sy
 8012b62:	f3bf 8f4f 	dsb	sy
 8012b66:	b662      	cpsie	i
 8012b68:	61bb      	str	r3, [r7, #24]
}
 8012b6a:	bf00      	nop
 8012b6c:	bf00      	nop
 8012b6e:	e7fd      	b.n	8012b6c <ulTCPWindowTxGet+0x124>
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 8012b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d00d      	beq.n	8012b94 <ulTCPWindowTxGet+0x14c>
	__asm volatile
 8012b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b7c:	b672      	cpsid	i
 8012b7e:	f383 8811 	msr	BASEPRI, r3
 8012b82:	f3bf 8f6f 	isb	sy
 8012b86:	f3bf 8f4f 	dsb	sy
 8012b8a:	b662      	cpsie	i
 8012b8c:	617b      	str	r3, [r7, #20]
}
 8012b8e:	bf00      	nop
 8012b90:	bf00      	nop
 8012b92:	e7fd      	b.n	8012b90 <ulTCPWindowTxGet+0x148>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b9c:	3318      	adds	r3, #24
 8012b9e:	4619      	mov	r1, r3
 8012ba0:	4610      	mov	r0, r2
 8012ba2:	f7ff fa18 	bl	8011fd6 <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 8012ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012ba8:	7d93      	ldrb	r3, [r2, #22]
 8012baa:	f043 0301 	orr.w	r3, r3, #1
 8012bae:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 8012bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bb2:	7d1b      	ldrb	r3, [r3, #20]
 8012bb4:	3301      	adds	r3, #1
 8012bb6:	b2da      	uxtb	r2, r3
 8012bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bba:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW )
 8012bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bbe:	7d1b      	ldrb	r3, [r3, #20]
 8012bc0:	2b04      	cmp	r3, #4
 8012bc2:	d10d      	bne.n	8012be0 <ulTCPWindowTxGet+0x198>
                {
                    if( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) )
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	689a      	ldr	r2, [r3, #8]
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8012bce:	005b      	lsls	r3, r3, #1
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d905      	bls.n	8012be0 <ulTCPWindowTxGet+0x198>
                        FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %d]: Change Tx window: %lu -> %u\n",
                                                 pxWindow->usPeerPortNumber,
                                                 pxWindow->usOurPortNumber,
                                                 pxWindow->xSize.ulTxWindowLength,
                                                 2U * pxWindow->usMSS ) );
                        pxWindow->xSize.ulTxWindowLength = ( 2UL * pxWindow->usMSS );
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8012bda:	005a      	lsls	r2, r3, #1
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	609a      	str	r2, [r3, #8]
                    }
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 8012be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012be2:	3310      	adds	r3, #16
 8012be4:	4618      	mov	r0, r3
 8012be6:	f7ff fa06 	bl	8011ff6 <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 8012bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bec:	681a      	ldr	r2, [r3, #0]
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 8012bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bf4:	68da      	ldr	r2, [r3, #12]
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 8012bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bfc:	689b      	ldr	r3, [r3, #8]
 8012bfe:	623b      	str	r3, [r7, #32]
            }

            return ulReturn;
 8012c00:	6a3b      	ldr	r3, [r7, #32]
        }
 8012c02:	4618      	mov	r0, r3
 8012c04:	3728      	adds	r7, #40	@ 0x28
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}
 8012c0a:	bf00      	nop
 8012c0c:	2000a3c8 	.word	0x2000a3c8

08012c10 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b08c      	sub	sp, #48	@ 0x30
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	60f8      	str	r0, [r7, #12]
 8012c18:	60b9      	str	r1, [r7, #8]
 8012c1a:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint32_t ulSequenceNumber = ulFirst, ulDataLength;
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	62bb      	str	r3, [r7, #40]	@ 0x28
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd = listGET_END_MARKER( &pxWindow->xTxSegments );
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	3398      	adds	r3, #152	@ 0x98
 8012c28:	61fb      	str	r3, [r7, #28]
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 8012c2a:	69fb      	ldr	r3, [r7, #28]
 8012c2c:	685b      	ldr	r3, [r3, #4]
 8012c2e:	627b      	str	r3, [r7, #36]	@ 0x24

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8012c30:	e09a      	b.n	8012d68 <prvTCPWindowTxCheckAck+0x158>
            {
                xDoUnlink = pdFALSE;
 8012c32:	2300      	movs	r3, #0
 8012c34:	623b      	str	r3, [r7, #32]
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8012c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c38:	68db      	ldr	r3, [r3, #12]
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f7ff f966 	bl	8011f0c <vCastPointerTo_TCPSegment_t>
 8012c40:	61b8      	str	r0, [r7, #24]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8012c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c44:	685b      	ldr	r3, [r3, #4]
 8012c46:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 8012c48:	69bb      	ldr	r3, [r7, #24]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	4619      	mov	r1, r3
 8012c4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012c50:	f7ff f994 	bl	8011f7c <xSequenceGreaterThan>
 8012c54:	4603      	mov	r3, r0
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	f040 8085 	bne.w	8012d66 <prvTCPWindowTxCheckAck+0x156>
                {
                    continue;
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 8012c5c:	69bb      	ldr	r3, [r7, #24]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012c62:	429a      	cmp	r2, r3
 8012c64:	f040 808d 	bne.w	8012d82 <prvTCPWindowTxCheckAck+0x172>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 8012c68:	69bb      	ldr	r3, [r7, #24]
 8012c6a:	689b      	ldr	r3, [r3, #8]
 8012c6c:	617b      	str	r3, [r7, #20]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8012c6e:	69bb      	ldr	r3, [r7, #24]
 8012c70:	7d9b      	ldrb	r3, [r3, #22]
 8012c72:	f003 0302 	and.w	r3, r3, #2
 8012c76:	b2db      	uxtb	r3, r3
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d14c      	bne.n	8012d16 <prvTCPWindowTxCheckAck+0x106>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 8012c7c:	69bb      	ldr	r3, [r7, #24]
 8012c7e:	681a      	ldr	r2, [r3, #0]
 8012c80:	697b      	ldr	r3, [r7, #20]
 8012c82:	4413      	add	r3, r2
 8012c84:	6879      	ldr	r1, [r7, #4]
 8012c86:	4618      	mov	r0, r3
 8012c88:	f7ff f978 	bl	8011f7c <xSequenceGreaterThan>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d179      	bne.n	8012d86 <prvTCPWindowTxCheckAck+0x176>
                        #endif /* ipconfigHAS_DEBUG_PRINTF */
                        break;
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 8012c92:	69ba      	ldr	r2, [r7, #24]
 8012c94:	7d93      	ldrb	r3, [r2, #22]
 8012c96:	f043 0302 	orr.w	r3, r3, #2
 8012c9a:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) && ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 8012c9c:	69bb      	ldr	r3, [r7, #24]
 8012c9e:	7d1b      	ldrb	r3, [r3, #20]
 8012ca0:	2b01      	cmp	r3, #1
 8012ca2:	d136      	bne.n	8012d12 <prvTCPWindowTxCheckAck+0x102>
 8012ca4:	69bb      	ldr	r3, [r7, #24]
 8012ca6:	681a      	ldr	r2, [r3, #0]
 8012ca8:	697b      	ldr	r3, [r7, #20]
 8012caa:	4413      	add	r3, r2
 8012cac:	687a      	ldr	r2, [r7, #4]
 8012cae:	429a      	cmp	r2, r3
 8012cb0:	d12f      	bne.n	8012d12 <prvTCPWindowTxCheckAck+0x102>
                    {
                        int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 8012cb2:	69bb      	ldr	r3, [r7, #24]
 8012cb4:	3310      	adds	r3, #16
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f7ff f9aa 	bl	8012010 <ulTimerGetAge>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	613b      	str	r3, [r7, #16]

                        if( pxWindow->lSRTT >= mS )
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012cc4:	693a      	ldr	r2, [r7, #16]
 8012cc6:	429a      	cmp	r2, r3
 8012cc8:	dc0e      	bgt.n	8012ce8 <prvTCPWindowTxCheckAck+0xd8>
                        {
                            /* RTT becomes smaller: adapt slowly. */
                            pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012cce:	4613      	mov	r3, r2
 8012cd0:	00db      	lsls	r3, r3, #3
 8012cd2:	1a9a      	subs	r2, r3, r2
 8012cd4:	693b      	ldr	r3, [r7, #16]
 8012cd6:	4413      	add	r3, r2
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	da00      	bge.n	8012cde <prvTCPWindowTxCheckAck+0xce>
 8012cdc:	3307      	adds	r3, #7
 8012cde:	10db      	asrs	r3, r3, #3
 8012ce0:	461a      	mov	r2, r3
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	639a      	str	r2, [r3, #56]	@ 0x38
 8012ce6:	e00d      	b.n	8012d04 <prvTCPWindowTxCheckAck+0xf4>
                        }
                        else
                        {
                            /* RTT becomes larger: adapt quicker */
                            pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012cec:	4613      	mov	r3, r2
 8012cee:	005b      	lsls	r3, r3, #1
 8012cf0:	441a      	add	r2, r3
 8012cf2:	693b      	ldr	r3, [r7, #16]
 8012cf4:	4413      	add	r3, r2
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	da00      	bge.n	8012cfc <prvTCPWindowTxCheckAck+0xec>
 8012cfa:	3303      	adds	r3, #3
 8012cfc:	109b      	asrs	r3, r3, #2
 8012cfe:	461a      	mov	r2, r3
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	639a      	str	r2, [r3, #56]	@ 0x38
                        }

                        /* Cap to the minimum of 50ms. */
                        if( pxWindow->lSRTT < winSRTT_CAP_mS )
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d08:	2b31      	cmp	r3, #49	@ 0x31
 8012d0a:	dc02      	bgt.n	8012d12 <prvTCPWindowTxCheckAck+0x102>
                        {
                            pxWindow->lSRTT = winSRTT_CAP_mS;
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	2232      	movs	r2, #50	@ 0x32
 8012d10:	639a      	str	r2, [r3, #56]	@ 0x38
                        }
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 8012d12:	2301      	movs	r3, #1
 8012d14:	623b      	str	r3, [r7, #32]
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	6a1b      	ldr	r3, [r3, #32]
 8012d1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	d111      	bne.n	8012d44 <prvTCPWindowTxCheckAck+0x134>
                {
                    if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8012d20:	4b1c      	ldr	r3, [pc, #112]	@ (8012d94 <prvTCPWindowTxCheckAck+0x184>)
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	2b01      	cmp	r3, #1
                                                 ulLast - pxWindow->tx.ulFirstSequenceNumber,
                                                 pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	6a1a      	ldr	r2, [r3, #32]
 8012d2a:	697b      	ldr	r3, [r7, #20]
 8012d2c:	441a      	add	r2, r3
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 8012d32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012d34:	697b      	ldr	r3, [r7, #20]
 8012d36:	4413      	add	r3, r2
 8012d38:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 8012d3a:	69b8      	ldr	r0, [r7, #24]
 8012d3c:	f7ff fada 	bl	80122f4 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 8012d40:	2300      	movs	r3, #0
 8012d42:	623b      	str	r3, [r7, #32]
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 8012d44:	6a3b      	ldr	r3, [r7, #32]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d008      	beq.n	8012d5c <prvTCPWindowTxCheckAck+0x14c>
 8012d4a:	69bb      	ldr	r3, [r7, #24]
 8012d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d004      	beq.n	8012d5c <prvTCPWindowTxCheckAck+0x14c>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 8012d52:	69bb      	ldr	r3, [r7, #24]
 8012d54:	3318      	adds	r3, #24
 8012d56:	4618      	mov	r0, r3
 8012d58:	f7f5 fa6d 	bl	8008236 <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 8012d5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	4413      	add	r3, r2
 8012d62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012d64:	e000      	b.n	8012d68 <prvTCPWindowTxCheckAck+0x158>
                    continue;
 8012d66:	bf00      	nop
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8012d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d6a:	69fb      	ldr	r3, [r7, #28]
 8012d6c:	429a      	cmp	r2, r3
 8012d6e:	d00b      	beq.n	8012d88 <prvTCPWindowTxCheckAck+0x178>
 8012d70:	6879      	ldr	r1, [r7, #4]
 8012d72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012d74:	f7ff f8eb 	bl	8011f4e <xSequenceLessThan>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	f47f af59 	bne.w	8012c32 <prvTCPWindowTxCheckAck+0x22>
 8012d80:	e002      	b.n	8012d88 <prvTCPWindowTxCheckAck+0x178>
                    break;
 8012d82:	bf00      	nop
 8012d84:	e000      	b.n	8012d88 <prvTCPWindowTxCheckAck+0x178>
                        break;
 8012d86:	bf00      	nop
            }

            return ulBytesConfirmed;
 8012d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	3730      	adds	r7, #48	@ 0x30
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd80      	pop	{r7, pc}
 8012d92:	bf00      	nop
 8012d94:	2000a3c8 	.word	0x2000a3c8

08012d98 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b086      	sub	sp, #24
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
 8012da0:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0UL;
 8012da2:	2300      	movs	r3, #0
 8012da4:	613b      	str	r3, [r7, #16]

            /* A higher Tx block has been acknowledged.  Now iterate through the
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            pxEnd = listGET_END_MARKER( &( pxWindow->xWaitQueue ) );
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	3370      	adds	r3, #112	@ 0x70
 8012daa:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	685b      	ldr	r3, [r3, #4]
 8012db0:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 8012db2:	e039      	b.n	8012e28 <prvTCPWindowFastRetransmit+0x90>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ipCAST_PTR_TO_TYPE_PTR( TCPSegment_t, listGET_LIST_ITEM_OWNER( pxIterator ) );
 8012db4:	697b      	ldr	r3, [r7, #20]
 8012db6:	68db      	ldr	r3, [r3, #12]
 8012db8:	4618      	mov	r0, r3
 8012dba:	f7ff f8a7 	bl	8011f0c <vCastPointerTo_TCPSegment_t>
 8012dbe:	60b8      	str	r0, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 8012dc0:	697b      	ldr	r3, [r7, #20]
 8012dc2:	685b      	ldr	r3, [r3, #4]
 8012dc4:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	7d9b      	ldrb	r3, [r3, #22]
 8012dca:	f003 0302 	and.w	r3, r3, #2
 8012dce:	b2db      	uxtb	r3, r3
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d129      	bne.n	8012e28 <prvTCPWindowFastRetransmit+0x90>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 8012dd4:	68bb      	ldr	r3, [r7, #8]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	6839      	ldr	r1, [r7, #0]
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f7ff f8b7 	bl	8011f4e <xSequenceLessThan>
 8012de0:	4603      	mov	r3, r0
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d020      	beq.n	8012e28 <prvTCPWindowFastRetransmit+0x90>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 8012de6:	68bb      	ldr	r3, [r7, #8]
 8012de8:	7d5b      	ldrb	r3, [r3, #21]
 8012dea:	3301      	adds	r3, #1
 8012dec:	b2da      	uxtb	r2, r3
 8012dee:	68bb      	ldr	r3, [r7, #8]
 8012df0:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	7d5b      	ldrb	r3, [r3, #21]
 8012df6:	2b03      	cmp	r3, #3
 8012df8:	d116      	bne.n	8012e28 <prvTCPWindowFastRetransmit+0x90>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 8012dfa:	68bb      	ldr	r3, [r7, #8]
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	751a      	strb	r2, [r3, #20]

                            /* Not clearing 'ucDupAckCount' yet as more SACK's might come in
                             * which might lead to a second fast rexmit. */
                            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8012e00:	4b0e      	ldr	r3, [pc, #56]	@ (8012e3c <prvTCPWindowFastRetransmit+0xa4>)
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	2b00      	cmp	r3, #0
                                                         ulFirst - pxWindow->tx.ulFirstSequenceNumber ) );
                                FreeRTOS_flush_logging();
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 8012e06:	68bb      	ldr	r3, [r7, #8]
 8012e08:	3318      	adds	r3, #24
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f7f5 fa13 	bl	8008236 <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	3318      	adds	r3, #24
 8012e1a:	4619      	mov	r1, r3
 8012e1c:	4610      	mov	r0, r2
 8012e1e:	f7ff f8da 	bl	8011fd6 <vListInsertFifo>
                            ulCount++;
 8012e22:	693b      	ldr	r3, [r7, #16]
 8012e24:	3301      	adds	r3, #1
 8012e26:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 8012e28:	697a      	ldr	r2, [r7, #20]
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	d1c1      	bne.n	8012db4 <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 8012e30:	693b      	ldr	r3, [r7, #16]
        }
 8012e32:	4618      	mov	r0, r3
 8012e34:	3718      	adds	r7, #24
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bd80      	pop	{r7, pc}
 8012e3a:	bf00      	nop
 8012e3c:	2000a3c8 	.word	0x2000a3c8

08012e40 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b084      	sub	sp, #16
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence, ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	6a1b      	ldr	r3, [r3, #32]
 8012e4e:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 8012e50:	68b9      	ldr	r1, [r7, #8]
 8012e52:	6838      	ldr	r0, [r7, #0]
 8012e54:	f7ff f865 	bl	8011f22 <xSequenceLessThanOrEqual>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d002      	beq.n	8012e64 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0UL;
 8012e5e:	2300      	movs	r3, #0
 8012e60:	60fb      	str	r3, [r7, #12]
 8012e62:	e005      	b.n	8012e70 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 8012e64:	683a      	ldr	r2, [r7, #0]
 8012e66:	68b9      	ldr	r1, [r7, #8]
 8012e68:	6878      	ldr	r0, [r7, #4]
 8012e6a:	f7ff fed1 	bl	8012c10 <prvTCPWindowTxCheckAck>
 8012e6e:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 8012e70:	68fb      	ldr	r3, [r7, #12]
        }
 8012e72:	4618      	mov	r0, r3
 8012e74:	3710      	adds	r7, #16
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bd80      	pop	{r7, pc}
	...

08012e7c <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b086      	sub	sp, #24
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	60f8      	str	r0, [r7, #12]
 8012e84:	60b9      	str	r1, [r7, #8]
 8012e86:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	6a1b      	ldr	r3, [r3, #32]
 8012e8c:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8012e8e:	687a      	ldr	r2, [r7, #4]
 8012e90:	68b9      	ldr	r1, [r7, #8]
 8012e92:	68f8      	ldr	r0, [r7, #12]
 8012e94:	f7ff febc 	bl	8012c10 <prvTCPWindowTxCheckAck>
 8012e98:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 8012e9a:	68b9      	ldr	r1, [r7, #8]
 8012e9c:	68f8      	ldr	r0, [r7, #12]
 8012e9e:	f7ff ff7b 	bl	8012d98 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 8012ea2:	4b06      	ldr	r3, [pc, #24]	@ (8012ebc <ulTCPWindowTxSack+0x40>)
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	dd03      	ble.n	8012eb2 <ulTCPWindowTxSack+0x36>
 8012eaa:	6979      	ldr	r1, [r7, #20]
 8012eac:	68b8      	ldr	r0, [r7, #8]
 8012eae:	f7ff f865 	bl	8011f7c <xSequenceGreaterThan>
                                         ulLast - pxWindow->tx.ulFirstSequenceNumber,
                                         pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) );
                FreeRTOS_flush_logging();
            }

            return ulAckCount;
 8012eb2:	693b      	ldr	r3, [r7, #16]
        }
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	3718      	adds	r7, #24
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}
 8012ebc:	2000a3c8 	.word	0x2000a3c8

08012ec0 <vCastPointerTo_UDPPacket_t>:
    {
 8012ec0:	b480      	push	{r7}
 8012ec2:	b083      	sub	sp, #12
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
        return ( UDPPacket_t * ) pvArgument;
 8012ec8:	687b      	ldr	r3, [r7, #4]
    }
 8012eca:	4618      	mov	r0, r3
 8012ecc:	370c      	adds	r7, #12
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed4:	4770      	bx	lr

08012ed6 <vCastConstPointerTo_UDPPacket_t>:
    {
 8012ed6:	b480      	push	{r7}
 8012ed8:	b083      	sub	sp, #12
 8012eda:	af00      	add	r7, sp, #0
 8012edc:	6078      	str	r0, [r7, #4]
        return ( const UDPPacket_t * ) pvArgument;
 8012ede:	687b      	ldr	r3, [r7, #4]
    }
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	370c      	adds	r7, #12
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eea:	4770      	bx	lr

08012eec <vProcessGeneratedUDPPacket>:
// *        packet such as ARP cache check and address resolution.
// *
// * @param[in] pxNetworkBuffer: The network buffer carrying the packet.
// */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b08c      	sub	sp, #48	@ 0x30
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->ulIPAddress;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	695b      	ldr	r3, [r3, #20]
 8012ef8:	60fb      	str	r3, [r7, #12]
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    const void * pvCopySource;
    void * pvCopyDest;

    /* Map the UDP packet onto the start of the frame. */
    pxUDPPacket = ipCAST_PTR_TO_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	699b      	ldr	r3, [r3, #24]
 8012efe:	4618      	mov	r0, r3
 8012f00:	f7ff ffde 	bl	8012ec0 <vCastPointerTo_UDPPacket_t>
 8012f04:	62b8      	str	r0, [r7, #40]	@ 0x28
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	69db      	ldr	r3, [r3, #28]
 8012f0a:	3b2c      	subs	r3, #44	@ 0x2c
 8012f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ) );
 8012f0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012f10:	f107 030c 	add.w	r3, r7, #12
 8012f14:	4611      	mov	r1, r2
 8012f16:	4618      	mov	r0, r3
 8012f18:	f7f8 fcc6 	bl	800b8a8 <eARPGetCacheEntry>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( eReturned != eCantSendPacket )
 8012f22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012f26:	2b02      	cmp	r3, #2
 8012f28:	f000 8091 	beq.w	801304e <vProcessGeneratedUDPPacket+0x162>
    {
        if( eReturned == eARPCacheHit )
 8012f2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012f30:	2b01      	cmp	r3, #1
 8012f32:	d179      	bne.n	8013028 <vProcessGeneratedUDPPacket+0x13c>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->ulIPAddress );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 8012f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f36:	3310      	adds	r3, #16
 8012f38:	623b      	str	r3, [r7, #32]
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8012f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f3c:	3324      	adds	r3, #36	@ 0x24
 8012f3e:	61fb      	str	r3, [r7, #28]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	8c1a      	ldrh	r2, [r3, #32]
 8012f44:	69fb      	ldr	r3, [r7, #28]
 8012f46:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8012f4c:	69fb      	ldr	r3, [r7, #28]
 8012f4e:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 8012f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f52:	b29b      	uxth	r3, r3
 8012f54:	3308      	adds	r3, #8
 8012f56:	b29a      	uxth	r2, r3
 8012f58:	69fb      	ldr	r3, [r7, #28]
 8012f5a:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 8012f5c:	69fb      	ldr	r3, [r7, #28]
 8012f5e:	889b      	ldrh	r3, [r3, #4]
 8012f60:	021b      	lsls	r3, r3, #8
 8012f62:	b21a      	sxth	r2, r3
 8012f64:	69fb      	ldr	r3, [r7, #28]
 8012f66:	889b      	ldrh	r3, [r3, #4]
 8012f68:	0a1b      	lsrs	r3, r3, #8
 8012f6a:	b29b      	uxth	r3, r3
 8012f6c:	b21b      	sxth	r3, r3
 8012f6e:	4313      	orrs	r3, r2
 8012f70:	b21b      	sxth	r3, r3
 8012f72:	b29a      	uxth	r2, r3
 8012f74:	69fb      	ldr	r3, [r7, #28]
 8012f76:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 8012f78:	69fb      	ldr	r3, [r7, #28]
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	80da      	strh	r2, [r3, #6]
             */

            /* Save options now, as they will be overwritten by memcpy */
            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                {
                    ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	699b      	ldr	r3, [r3, #24]
 8012f82:	799b      	ldrb	r3, [r3, #6]
 8012f84:	76fb      	strb	r3, [r7, #27]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = xDefaultPartUDPPacketHeader.ucBytes;
 8012f86:	4b3a      	ldr	r3, [pc, #232]	@ (8013070 <vProcessGeneratedUDPPacket+0x184>)
 8012f88:	617b      	str	r3, [r7, #20]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	699b      	ldr	r3, [r3, #24]
 8012f8e:	3306      	adds	r3, #6
 8012f90:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartUDPPacketHeader ) );
 8012f92:	2218      	movs	r2, #24
 8012f94:	6979      	ldr	r1, [r7, #20]
 8012f96:	6938      	ldr	r0, [r7, #16]
 8012f98:	f002 fed3 	bl	8015d42 <memcpy>
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 8012f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f9e:	b29b      	uxth	r3, r3
 8012fa0:	331c      	adds	r3, #28
 8012fa2:	b29a      	uxth	r2, r3
 8012fa4:	6a3b      	ldr	r3, [r7, #32]
 8012fa6:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8012fa8:	6a3b      	ldr	r3, [r7, #32]
 8012faa:	885b      	ldrh	r3, [r3, #2]
 8012fac:	021b      	lsls	r3, r3, #8
 8012fae:	b21a      	sxth	r2, r3
 8012fb0:	6a3b      	ldr	r3, [r7, #32]
 8012fb2:	885b      	ldrh	r3, [r3, #2]
 8012fb4:	0a1b      	lsrs	r3, r3, #8
 8012fb6:	b29b      	uxth	r3, r3
 8012fb8:	b21b      	sxth	r3, r3
 8012fba:	4313      	orrs	r3, r2
 8012fbc:	b21b      	sxth	r3, r3
 8012fbe:	b29a      	uxth	r2, r3
 8012fc0:	6a3b      	ldr	r3, [r7, #32]
 8012fc2:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->ulIPAddress;
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	695a      	ldr	r2, [r3, #20]
 8012fc8:	6a3b      	ldr	r3, [r7, #32]
 8012fca:	611a      	str	r2, [r3, #16]
                }
            #endif

            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                {
                    pxIPHeader->usHeaderChecksum = 0U;
 8012fcc:	6a3b      	ldr	r3, [r7, #32]
 8012fce:	2200      	movs	r2, #0
 8012fd0:	815a      	strh	r2, [r3, #10]
                    pxIPHeader->usHeaderChecksum = usGenerateChecksum( 0U, ( uint8_t * ) &( pxIPHeader->ucVersionHeaderLength ), ipSIZE_OF_IPv4_HEADER );
 8012fd2:	6a3b      	ldr	r3, [r7, #32]
 8012fd4:	2214      	movs	r2, #20
 8012fd6:	4619      	mov	r1, r3
 8012fd8:	2000      	movs	r0, #0
 8012fda:	f7fa fc23 	bl	800d824 <usGenerateChecksum>
 8012fde:	4603      	mov	r3, r0
 8012fe0:	461a      	mov	r2, r3
 8012fe2:	6a3b      	ldr	r3, [r7, #32]
 8012fe4:	815a      	strh	r2, [r3, #10]
                    pxIPHeader->usHeaderChecksum = ~FreeRTOS_htons( pxIPHeader->usHeaderChecksum );
 8012fe6:	6a3b      	ldr	r3, [r7, #32]
 8012fe8:	895b      	ldrh	r3, [r3, #10]
 8012fea:	021b      	lsls	r3, r3, #8
 8012fec:	b21a      	sxth	r2, r3
 8012fee:	6a3b      	ldr	r3, [r7, #32]
 8012ff0:	895b      	ldrh	r3, [r3, #10]
 8012ff2:	0a1b      	lsrs	r3, r3, #8
 8012ff4:	b29b      	uxth	r3, r3
 8012ff6:	b21b      	sxth	r3, r3
 8012ff8:	4313      	orrs	r3, r2
 8012ffa:	b21b      	sxth	r3, r3
 8012ffc:	b29b      	uxth	r3, r3
 8012ffe:	43db      	mvns	r3, r3
 8013000:	b29a      	uxth	r2, r3
 8013002:	6a3b      	ldr	r3, [r7, #32]
 8013004:	815a      	strh	r2, [r3, #10]

                    if( ( ucSocketOptions & ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) != 0U )
 8013006:	7efb      	ldrb	r3, [r7, #27]
 8013008:	f003 0302 	and.w	r3, r3, #2
 801300c:	2b00      	cmp	r3, #0
 801300e:	d007      	beq.n	8013020 <vProcessGeneratedUDPPacket+0x134>
                    {
                        ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	69db      	ldr	r3, [r3, #28]
 8013014:	2201      	movs	r2, #1
 8013016:	4619      	mov	r1, r3
 8013018:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801301a:	f7fa faeb 	bl	800d5f4 <usGenerateProtocolChecksum>
 801301e:	e016      	b.n	801304e <vProcessGeneratedUDPPacket+0x162>
                    }
                    else
                    {
                        pxUDPPacket->xUDPHeader.usChecksum = 0U;
 8013020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013022:	2200      	movs	r2, #0
 8013024:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013026:	e012      	b.n	801304e <vProcessGeneratedUDPPacket+0x162>
                    }
                }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 8013028:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801302c:	2b00      	cmp	r3, #0
 801302e:	d10b      	bne.n	8013048 <vProcessGeneratedUDPPacket+0x15c>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress );
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	4619      	mov	r1, r3
 8013034:	2000      	movs	r0, #0
 8013036:	f7f8 fb3f 	bl	800b6b8 <vARPRefreshCacheEntry>

            /* Generate an ARP for the required IP address. */
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->ulIPAddress );
            pxNetworkBuffer->ulIPAddress = ulIPAddress;
 801303a:	68fa      	ldr	r2, [r7, #12]
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	615a      	str	r2, [r3, #20]
            vARPGenerateRequestPacket( pxNetworkBuffer );
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	f7f8 fda5 	bl	800bb90 <vARPGenerateRequestPacket>
 8013046:	e002      	b.n	801304e <vProcessGeneratedUDPPacket+0x162>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 8013048:	2302      	movs	r3, #2
 801304a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }
    }

    if( eReturned != eCantSendPacket )
 801304e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013052:	2b02      	cmp	r3, #2
 8013054:	d004      	beq.n	8013060 <vProcessGeneratedUDPPacket+0x174>
                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
                }
            }
        #endif /* if defined( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) */
        iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
        ( void ) xNetworkInterfaceOutput( pxNetworkBuffer, pdTRUE );
 8013056:	2101      	movs	r1, #1
 8013058:	6878      	ldr	r0, [r7, #4]
 801305a:	f000 f9f5 	bl	8013448 <xNetworkInterfaceOutput>
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 801305e:	e002      	b.n	8013066 <vProcessGeneratedUDPPacket+0x17a>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8013060:	6878      	ldr	r0, [r7, #4]
 8013062:	f001 f9e5 	bl	8014430 <vReleaseNetworkBufferAndDescriptor>
}
 8013066:	bf00      	nop
 8013068:	3730      	adds	r7, #48	@ 0x30
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}
 801306e:	bf00      	nop
 8013070:	20000088 	.word	0x20000088

08013074 <xProcessReceivedUDPPacket>:
// *
// * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
// */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort )
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b088      	sub	sp, #32
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
 801307c:	460b      	mov	r3, r1
 801307e:	807b      	strh	r3, [r7, #2]
    BaseType_t xReturn = pdPASS;
 8013080:	2301      	movs	r3, #1
 8013082:	61fb      	str	r3, [r7, #28]
    FreeRTOS_Socket_t * pxSocket;

    configASSERT( pxNetworkBuffer != NULL );
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d10d      	bne.n	80130a6 <xProcessReceivedUDPPacket+0x32>
	__asm volatile
 801308a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801308e:	b672      	cpsid	i
 8013090:	f383 8811 	msr	BASEPRI, r3
 8013094:	f3bf 8f6f 	isb	sy
 8013098:	f3bf 8f4f 	dsb	sy
 801309c:	b662      	cpsie	i
 801309e:	613b      	str	r3, [r7, #16]
}
 80130a0:	bf00      	nop
 80130a2:	bf00      	nop
 80130a4:	e7fd      	b.n	80130a2 <xProcessReceivedUDPPacket+0x2e>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	699b      	ldr	r3, [r3, #24]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d10d      	bne.n	80130ca <xProcessReceivedUDPPacket+0x56>
	__asm volatile
 80130ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130b2:	b672      	cpsid	i
 80130b4:	f383 8811 	msr	BASEPRI, r3
 80130b8:	f3bf 8f6f 	isb	sy
 80130bc:	f3bf 8f4f 	dsb	sy
 80130c0:	b662      	cpsie	i
 80130c2:	60fb      	str	r3, [r7, #12]
}
 80130c4:	bf00      	nop
 80130c6:	bf00      	nop
 80130c8:	e7fd      	b.n	80130c6 <xProcessReceivedUDPPacket+0x52>

    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */
    const UDPPacket_t * pxUDPPacket = ipCAST_CONST_PTR_TO_CONST_TYPE_PTR( UDPPacket_t, pxNetworkBuffer->pucEthernetBuffer );
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	699b      	ldr	r3, [r3, #24]
 80130ce:	4618      	mov	r0, r3
 80130d0:	f7ff ff01 	bl	8012ed6 <vCastConstPointerTo_UDPPacket_t>
 80130d4:	61b8      	str	r0, [r7, #24]

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 80130d6:	887b      	ldrh	r3, [r7, #2]
 80130d8:	4618      	mov	r0, r3
 80130da:	f7fb fd0b 	bl	800eaf4 <pxUDPSocketLookup>
 80130de:	6178      	str	r0, [r7, #20]

    if( pxSocket != NULL )
 80130e0:	697b      	ldr	r3, [r7, #20]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d03a      	beq.n	801315c <xProcessReceivedUDPPacket+0xe8>
    {
        /* When refreshing the ARP cache with received UDP packets we must be
         * careful;  hundreds of broadcast messages may pass and if we're not
         * handling them, no use to fill the ARP cache with those IP addresses. */
        vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 80130e6:	69bb      	ldr	r3, [r7, #24]
 80130e8:	1d9a      	adds	r2, r3, #6
 80130ea:	69bb      	ldr	r3, [r7, #24]
 80130ec:	69db      	ldr	r3, [r3, #28]
 80130ee:	4619      	mov	r1, r3
 80130f0:	4610      	mov	r0, r2
 80130f2:	f7f8 fae1 	bl	800b6b8 <vARPRefreshCacheEntry>
            if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
        #else
            /* xReturn is still pdPASS. */
        #endif
        {
            vTaskSuspendAll();
 80130f6:	f7f6 fac9 	bl	800968c <vTaskSuspendAll>
            {
                taskENTER_CRITICAL();
 80130fa:	f7f7 ff27 	bl	800af4c <vPortEnterCritical>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 80130fe:	697b      	ldr	r3, [r7, #20]
 8013100:	3338      	adds	r3, #56	@ 0x38
 8013102:	687a      	ldr	r2, [r7, #4]
 8013104:	4611      	mov	r1, r2
 8013106:	4618      	mov	r0, r3
 8013108:	f7f5 f838 	bl	800817c <vListInsertEnd>
                }
                taskEXIT_CRITICAL();
 801310c:	f7f7 ff54 	bl	800afb8 <vPortExitCritical>
            }
            ( void ) xTaskResumeAll();
 8013110:	f7f6 faca 	bl	80096a8 <xTaskResumeAll>

            /* Set the socket's receive event */
            if( pxSocket->xEventGroup != NULL )
 8013114:	697b      	ldr	r3, [r7, #20]
 8013116:	685b      	ldr	r3, [r3, #4]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d005      	beq.n	8013128 <xProcessReceivedUDPPacket+0xb4>
            {
                ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	685b      	ldr	r3, [r3, #4]
 8013120:	2101      	movs	r1, #1
 8013122:	4618      	mov	r0, r3
 8013124:	f7f4 ff13 	bl	8007f4e <xEventGroupSetBits>
            }

            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801312c:	2b00      	cmp	r3, #0
 801312e:	d00c      	beq.n	801314a <xProcessReceivedUDPPacket+0xd6>
 8013130:	697b      	ldr	r3, [r7, #20]
 8013132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013134:	f003 0301 	and.w	r3, r3, #1
 8013138:	2b00      	cmp	r3, #0
 801313a:	d006      	beq.n	801314a <xProcessReceivedUDPPacket+0xd6>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 801313c:	697b      	ldr	r3, [r7, #20]
 801313e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	2101      	movs	r1, #1
 8013144:	4618      	mov	r0, r3
 8013146:	f7f4 ff02 	bl	8007f4e <xEventGroupSetBits>
                }
            #endif

            #if ( ipconfigUSE_DHCP == 1 )
                {
                    if( xIsDHCPSocket( pxSocket ) != 0 )
 801314a:	6978      	ldr	r0, [r7, #20]
 801314c:	f7f8 fda8 	bl	800bca0 <xIsDHCPSocket>
 8013150:	4603      	mov	r3, r0
 8013152:	2b00      	cmp	r3, #0
 8013154:	d004      	beq.n	8013160 <xProcessReceivedUDPPacket+0xec>
                    {
                        ( void ) xSendDHCPEvent();
 8013156:	f7f9 fe85 	bl	800ce64 <xSendDHCPEvent>
 801315a:	e001      	b.n	8013160 <xProcessReceivedUDPPacket+0xec>
                xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
            }
            else
        #endif /* ipconfigUSE_NBNS */
        {
            xReturn = pdFAIL;
 801315c:	2300      	movs	r3, #0
 801315e:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 8013160:	69fb      	ldr	r3, [r7, #28]
}
 8013162:	4618      	mov	r0, r3
 8013164:	3720      	adds	r7, #32
 8013166:	46bd      	mov	sp, r7
 8013168:	bd80      	pop	{r7, pc}
	...

0801316c <vClearTXBuffers>:
//    }
//}
///*-----------------------------------------------------------*/
//
static void vClearTXBuffers()
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b082      	sub	sp, #8
 8013170:	af00      	add	r7, sp, #0
    __IO ETH_DMADescTypeDef * txLastDescriptor = xETH.TxDesc;
 8013172:	4b19      	ldr	r3, [pc, #100]	@ (80131d8 <vClearTXBuffers+0x6c>)
 8013174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013176:	603b      	str	r3, [r7, #0]
    size_t uxCount = ( ( UBaseType_t ) ETH_TXBUFNB ) - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 8013178:	4b18      	ldr	r3, [pc, #96]	@ (80131dc <vClearTXBuffers+0x70>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	4618      	mov	r0, r3
 801317e:	f7f5 fdc5 	bl	8008d0c <uxQueueMessagesWaiting>
 8013182:	4603      	mov	r3, r0
 8013184:	f1c3 0304 	rsb	r3, r3, #4
 8013188:	607b      	str	r3, [r7, #4]

    /* This function is called after a TX-completion interrupt.
     * It will release each Network Buffer used in xNetworkInterfaceOutput().
     * 'uxCount' represents the number of descriptors given to DMA for transmission.
     * After sending a packet, the DMA will clear the 'ETH_DMATXDESC_OWN' bit. */
    while( ( uxCount > 0 ) && ( ( DMATxDescToClear->Status & ETH_DMATXDESC_OWN ) == 0 ) )
 801318a:	e017      	b.n	80131bc <vClearTXBuffers+0x50>
    {
        if( ( DMATxDescToClear == txLastDescriptor ) && ( uxCount != ETH_TXBUFNB ) )
 801318c:	4b14      	ldr	r3, [pc, #80]	@ (80131e0 <vClearTXBuffers+0x74>)
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	683a      	ldr	r2, [r7, #0]
 8013192:	429a      	cmp	r2, r3
 8013194:	d102      	bne.n	801319c <vClearTXBuffers+0x30>
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	2b04      	cmp	r3, #4
 801319a:	d118      	bne.n	80131ce <vClearTXBuffers+0x62>
                    DMATxDescToClear->Buffer1Addr = ( uint32_t ) 0u;
                }
            }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        DMATxDescToClear = ( ETH_DMADescTypeDef * ) ( DMATxDescToClear->Buffer2NextDescAddr );
 801319c:	4b10      	ldr	r3, [pc, #64]	@ (80131e0 <vClearTXBuffers+0x74>)
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	68db      	ldr	r3, [r3, #12]
 80131a2:	461a      	mov	r2, r3
 80131a4:	4b0e      	ldr	r3, [pc, #56]	@ (80131e0 <vClearTXBuffers+0x74>)
 80131a6:	601a      	str	r2, [r3, #0]

        uxCount--;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	3b01      	subs	r3, #1
 80131ac:	607b      	str	r3, [r7, #4]
        /* Tell the counting semaphore that one more TX descriptor is available. */
        xSemaphoreGive( xTXDescriptorSemaphore );
 80131ae:	4b0b      	ldr	r3, [pc, #44]	@ (80131dc <vClearTXBuffers+0x70>)
 80131b0:	6818      	ldr	r0, [r3, #0]
 80131b2:	2300      	movs	r3, #0
 80131b4:	2200      	movs	r2, #0
 80131b6:	2100      	movs	r1, #0
 80131b8:	f7f5 f9fa 	bl	80085b0 <xQueueGenericSend>
    while( ( uxCount > 0 ) && ( ( DMATxDescToClear->Status & ETH_DMATXDESC_OWN ) == 0 ) )
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d006      	beq.n	80131d0 <vClearTXBuffers+0x64>
 80131c2:	4b07      	ldr	r3, [pc, #28]	@ (80131e0 <vClearTXBuffers+0x74>)
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	dadf      	bge.n	801318c <vClearTXBuffers+0x20>
    }
}
 80131cc:	e000      	b.n	80131d0 <vClearTXBuffers+0x64>
            break;
 80131ce:	bf00      	nop
}
 80131d0:	bf00      	nop
 80131d2:	3708      	adds	r7, #8
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bd80      	pop	{r7, pc}
 80131d8:	2000a414 	.word	0x2000a414
 80131dc:	2000a45c 	.word	0x2000a45c
 80131e0:	2000d510 	.word	0x2000d510

080131e4 <xNetworkInterfaceInitialise>:
///*-----------------------------------------------------------*/
//
BaseType_t xNetworkInterfaceInitialise( void )
{
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b084      	sub	sp, #16
 80131e8:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef hal_eth_init_status;
    BaseType_t xResult;

    if( xMacInitStatus == eMACInit )
 80131ea:	4b43      	ldr	r3, [pc, #268]	@ (80132f8 <xNetworkInterfaceInitialise+0x114>)
 80131ec:	781b      	ldrb	r3, [r3, #0]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d161      	bne.n	80132b6 <xNetworkInterfaceInitialise+0xd2>
    {
        xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TXBUFNB, ( UBaseType_t ) ETH_TXBUFNB );
 80131f2:	2104      	movs	r1, #4
 80131f4:	2004      	movs	r0, #4
 80131f6:	f7f5 f9a2 	bl	800853e <xQueueCreateCountingSemaphore>
 80131fa:	4603      	mov	r3, r0
 80131fc:	4a3f      	ldr	r2, [pc, #252]	@ (80132fc <xNetworkInterfaceInitialise+0x118>)
 80131fe:	6013      	str	r3, [r2, #0]

        if( xTXDescriptorSemaphore == NULL )
 8013200:	4b3e      	ldr	r3, [pc, #248]	@ (80132fc <xNetworkInterfaceInitialise+0x118>)
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d103      	bne.n	8013210 <xNetworkInterfaceInitialise+0x2c>
        {
            xMacInitStatus = eMACFailed;
 8013208:	4b3b      	ldr	r3, [pc, #236]	@ (80132f8 <xNetworkInterfaceInitialise+0x114>)
 801320a:	2202      	movs	r2, #2
 801320c:	701a      	strb	r2, [r3, #0]
 801320e:	e052      	b.n	80132b6 <xNetworkInterfaceInitialise+0xd2>
        }
        else
        {
            /* Initialise ETH */

            xETH.Instance = ETH;
 8013210:	4b3b      	ldr	r3, [pc, #236]	@ (8013300 <xNetworkInterfaceInitialise+0x11c>)
 8013212:	4a3c      	ldr	r2, [pc, #240]	@ (8013304 <xNetworkInterfaceInitialise+0x120>)
 8013214:	601a      	str	r2, [r3, #0]
            xETH.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8013216:	4b3a      	ldr	r3, [pc, #232]	@ (8013300 <xNetworkInterfaceInitialise+0x11c>)
 8013218:	2201      	movs	r2, #1
 801321a:	605a      	str	r2, [r3, #4]
            xETH.Init.Speed = ETH_SPEED_100M;
 801321c:	4b38      	ldr	r3, [pc, #224]	@ (8013300 <xNetworkInterfaceInitialise+0x11c>)
 801321e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8013222:	609a      	str	r2, [r3, #8]
            xETH.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8013224:	4b36      	ldr	r3, [pc, #216]	@ (8013300 <xNetworkInterfaceInitialise+0x11c>)
 8013226:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801322a:	60da      	str	r2, [r3, #12]
            /* Value of PhyAddress doesn't matter, will be probed for. */
            xETH.Init.PhyAddress = 0;
 801322c:	4b34      	ldr	r3, [pc, #208]	@ (8013300 <xNetworkInterfaceInitialise+0x11c>)
 801322e:	2200      	movs	r2, #0
 8013230:	821a      	strh	r2, [r3, #16]

            xETH.Init.MACAddr = ( uint8_t * ) FreeRTOS_GetMACAddress();
 8013232:	f7fa fc3b 	bl	800daac <FreeRTOS_GetMACAddress>
 8013236:	4603      	mov	r3, r0
 8013238:	4a31      	ldr	r2, [pc, #196]	@ (8013300 <xNetworkInterfaceInitialise+0x11c>)
 801323a:	6153      	str	r3, [r2, #20]
            xETH.Init.RxMode = ETH_RXINTERRUPT_MODE;
 801323c:	4b30      	ldr	r3, [pc, #192]	@ (8013300 <xNetworkInterfaceInitialise+0x11c>)
 801323e:	2201      	movs	r2, #1
 8013240:	619a      	str	r2, [r3, #24]
                     * by the peripheral. */
                    xETH.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
                }
            #else
                {
                    xETH.Init.ChecksumMode = ETH_CHECKSUM_BY_SOFTWARE;
 8013242:	4b2f      	ldr	r3, [pc, #188]	@ (8013300 <xNetworkInterfaceInitialise+0x11c>)
 8013244:	2201      	movs	r2, #1
 8013246:	61da      	str	r2, [r3, #28]
                {
                    xETH.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
                }
            #else
                {
                    xETH.Init.MediaInterface = ETH_MEDIA_INTERFACE_MII;
 8013248:	4b2d      	ldr	r3, [pc, #180]	@ (8013300 <xNetworkInterfaceInitialise+0x11c>)
 801324a:	2200      	movs	r2, #0
 801324c:	621a      	str	r2, [r3, #32]
                }
            #endif /* ipconfigUSE_RMII */

            hal_eth_init_status = HAL_ETH_Init(&xETH );
 801324e:	482c      	ldr	r0, [pc, #176]	@ (8013300 <xNetworkInterfaceInitialise+0x11c>)
 8013250:	f7ed feba 	bl	8000fc8 <HAL_ETH_Init>
 8013254:	4603      	mov	r3, r0
 8013256:	70fb      	strb	r3, [r7, #3]

            /* Only for inspection by debugger. */
            ( void ) hal_eth_init_status;

            /* Set the TxDesc and RxDesc pointers. */
            xETH.TxDesc = DMATxDscrTab;
 8013258:	4b29      	ldr	r3, [pc, #164]	@ (8013300 <xNetworkInterfaceInitialise+0x11c>)
 801325a:	4a2b      	ldr	r2, [pc, #172]	@ (8013308 <xNetworkInterfaceInitialise+0x124>)
 801325c:	62da      	str	r2, [r3, #44]	@ 0x2c
            xETH.RxDesc = DMARxDscrTab;
 801325e:	4b28      	ldr	r3, [pc, #160]	@ (8013300 <xNetworkInterfaceInitialise+0x11c>)
 8013260:	4a2a      	ldr	r2, [pc, #168]	@ (801330c <xNetworkInterfaceInitialise+0x128>)
 8013262:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Make sure that all unused fields are cleared. */
            memset( &DMATxDscrTab, '\0', sizeof( DMATxDscrTab ) );
 8013264:	2280      	movs	r2, #128	@ 0x80
 8013266:	2100      	movs	r1, #0
 8013268:	4827      	ldr	r0, [pc, #156]	@ (8013308 <xNetworkInterfaceInitialise+0x124>)
 801326a:	f002 fcee 	bl	8015c4a <memset>
            memset( &DMARxDscrTab, '\0', sizeof( DMARxDscrTab ) );
 801326e:	2280      	movs	r2, #128	@ 0x80
 8013270:	2100      	movs	r1, #0
 8013272:	4826      	ldr	r0, [pc, #152]	@ (801330c <xNetworkInterfaceInitialise+0x128>)
 8013274:	f002 fce9 	bl	8015c4a <memset>

            /* Initialize Tx Descriptors list: Chain Mode */
            DMATxDescToClear = DMATxDscrTab;
 8013278:	4b25      	ldr	r3, [pc, #148]	@ (8013310 <xNetworkInterfaceInitialise+0x12c>)
 801327a:	4a23      	ldr	r2, [pc, #140]	@ (8013308 <xNetworkInterfaceInitialise+0x124>)
 801327c:	601a      	str	r2, [r3, #0]

            /* Initialise TX-descriptors. */
            prvDMATxDescListInit();
 801327e:	f000 f853 	bl	8013328 <prvDMATxDescListInit>

            /* Initialise RX-descriptors. */
            prvDMARxDescListInit();
 8013282:	f000 f89f 	bl	80133c4 <prvDMARxDescListInit>
                    prvMACAddressConfig( &xETH, ETH_MAC_ADDRESS1, ( uint8_t * ) xLLMNR_MACAddress );
                }
            #endif

            /* Force a negotiation with the Switch or Router and wait for LS. */
            prvEthernetUpdateConfig( pdTRUE );
 8013286:	2001      	movs	r0, #1
 8013288:	f000 fa96 	bl	80137b8 <prvEthernetUpdateConfig>

            /* The deferred interrupt handler task is created at the highest
             * possible priority to ensure the interrupt handler can return directly
             * to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
             * notify the task when there is something to process. */
            if( xTaskCreate( prvEMACHandlerTask, "EMAC", configEMAC_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &xEMACTaskHandle ) == pdPASS )
 801328c:	4b21      	ldr	r3, [pc, #132]	@ (8013314 <xNetworkInterfaceInitialise+0x130>)
 801328e:	9301      	str	r3, [sp, #4]
 8013290:	2337      	movs	r3, #55	@ 0x37
 8013292:	9300      	str	r3, [sp, #0]
 8013294:	2300      	movs	r3, #0
 8013296:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801329a:	491f      	ldr	r1, [pc, #124]	@ (8013318 <xNetworkInterfaceInitialise+0x134>)
 801329c:	481f      	ldr	r0, [pc, #124]	@ (801331c <xNetworkInterfaceInitialise+0x138>)
 801329e:	f7f5 ff93 	bl	80091c8 <xTaskCreate>
 80132a2:	4603      	mov	r3, r0
 80132a4:	2b01      	cmp	r3, #1
 80132a6:	d103      	bne.n	80132b0 <xNetworkInterfaceInitialise+0xcc>
            {
                /* The xTXDescriptorSemaphore and the task are created successfully. */
                xMacInitStatus = eMACPass;
 80132a8:	4b13      	ldr	r3, [pc, #76]	@ (80132f8 <xNetworkInterfaceInitialise+0x114>)
 80132aa:	2201      	movs	r2, #1
 80132ac:	701a      	strb	r2, [r3, #0]
 80132ae:	e002      	b.n	80132b6 <xNetworkInterfaceInitialise+0xd2>
            }
            else
            {
                xMacInitStatus = eMACFailed;
 80132b0:	4b11      	ldr	r3, [pc, #68]	@ (80132f8 <xNetworkInterfaceInitialise+0x114>)
 80132b2:	2202      	movs	r2, #2
 80132b4:	701a      	strb	r2, [r3, #0]
            }
        }
    } /* if( xEMACTaskHandle == NULL ) */

    if( xMacInitStatus != eMACPass )
 80132b6:	4b10      	ldr	r3, [pc, #64]	@ (80132f8 <xNetworkInterfaceInitialise+0x114>)
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	2b01      	cmp	r3, #1
 80132bc:	d002      	beq.n	80132c4 <xNetworkInterfaceInitialise+0xe0>
    {
        /* EMAC initialisation failed, return pdFAIL. */
        xResult = pdFAIL;
 80132be:	2300      	movs	r3, #0
 80132c0:	607b      	str	r3, [r7, #4]
 80132c2:	e014      	b.n	80132ee <xNetworkInterfaceInitialise+0x10a>
    }
    else
    {
        if( xPhyObject.ulLinkStatusMask != 0uL )
 80132c4:	4b16      	ldr	r3, [pc, #88]	@ (8013320 <xNetworkInterfaceInitialise+0x13c>)
 80132c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d00e      	beq.n	80132ea <xNetworkInterfaceInitialise+0x106>
        {
            xETH.Instance->DMAIER |= ETH_DMA_ALL_INTS;
 80132cc:	4b0c      	ldr	r3, [pc, #48]	@ (8013300 <xNetworkInterfaceInitialise+0x11c>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80132d4:	69d9      	ldr	r1, [r3, #28]
 80132d6:	4b0a      	ldr	r3, [pc, #40]	@ (8013300 <xNetworkInterfaceInitialise+0x11c>)
 80132d8:	681a      	ldr	r2, [r3, #0]
 80132da:	4b12      	ldr	r3, [pc, #72]	@ (8013324 <xNetworkInterfaceInitialise+0x140>)
 80132dc:	430b      	orrs	r3, r1
 80132de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80132e2:	61d3      	str	r3, [r2, #28]
            xResult = pdPASS;
 80132e4:	2301      	movs	r3, #1
 80132e6:	607b      	str	r3, [r7, #4]
 80132e8:	e001      	b.n	80132ee <xNetworkInterfaceInitialise+0x10a>
        }
        else
        {
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
             * and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
            xResult = pdFAIL;
 80132ea:	2300      	movs	r3, #0
 80132ec:	607b      	str	r3, [r7, #4]
        }
    }

    /* When returning non-zero, the stack will become active and
     * start DHCP (in configured) */
    return xResult;
 80132ee:	687b      	ldr	r3, [r7, #4]
}
 80132f0:	4618      	mov	r0, r3
 80132f2:	3708      	adds	r7, #8
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}
 80132f8:	2000a3cc 	.word	0x2000a3cc
 80132fc:	2000a45c 	.word	0x2000a45c
 8013300:	2000a414 	.word	0x2000a414
 8013304:	40028000 	.word	0x40028000
 8013308:	2000bcc0 	.word	0x2000bcc0
 801330c:	2000a460 	.word	0x2000a460
 8013310:	2000d510 	.word	0x2000d510
 8013314:	2000d514 	.word	0x2000d514
 8013318:	08016df4 	.word	0x08016df4
 801331c:	08013901 	.word	0x08013901
 8013320:	2000a3d4 	.word	0x2000a3d4
 8013324:	380163fb 	.word	0x380163fb

08013328 <prvDMATxDescListInit>:
///*-----------------------------------------------------------*/
//
static void prvDMATxDescListInit()
{
 8013328:	b480      	push	{r7}
 801332a:	b083      	sub	sp, #12
 801332c:	af00      	add	r7, sp, #0
    ETH_DMADescTypeDef * pxDMADescriptor;
    BaseType_t xIndex;

    /* Get the pointer on the first member of the descriptor list */
    pxDMADescriptor = DMATxDscrTab;
 801332e:	4b22      	ldr	r3, [pc, #136]	@ (80133b8 <prvDMATxDescListInit+0x90>)
 8013330:	607b      	str	r3, [r7, #4]

    /* Fill each DMA descriptor with the right values */
    for( xIndex = 0; xIndex < ETH_TXBUFNB; xIndex++, pxDMADescriptor++ )
 8013332:	2300      	movs	r3, #0
 8013334:	603b      	str	r3, [r7, #0]
 8013336:	e030      	b.n	801339a <prvDMATxDescListInit+0x72>
    {
        /* Set Second Address Chained bit */
        pxDMADescriptor->Status = ETH_DMATXDESC_TCH;
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801333e:	601a      	str	r2, [r3, #0]

        #if ( ipconfigZERO_COPY_TX_DRIVER == 0 )
            {
                /* Set Buffer1 address pointer */
                pxDMADescriptor->Buffer1Addr = ( uint32_t ) ( Tx_Buff[ xIndex ] );
 8013340:	683b      	ldr	r3, [r7, #0]
 8013342:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8013346:	fb02 f303 	mul.w	r3, r2, r3
 801334a:	4a1c      	ldr	r2, [pc, #112]	@ (80133bc <prvDMATxDescListInit+0x94>)
 801334c:	4413      	add	r3, r2
 801334e:	461a      	mov	r2, r3
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	609a      	str	r2, [r3, #8]
            }
        #endif

        if( xETH.Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE )
 8013354:	4b1a      	ldr	r3, [pc, #104]	@ (80133c0 <prvDMATxDescListInit+0x98>)
 8013356:	69db      	ldr	r3, [r3, #28]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d106      	bne.n	801336a <prvDMATxDescListInit+0x42>
        {
            /* Set the DMA Tx descriptors checksum insertion for TCP, UDP, and ICMP */
            pxDMADescriptor->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	601a      	str	r2, [r3, #0]
 8013368:	e005      	b.n	8013376 <prvDMATxDescListInit+0x4e>
        }
        else
        {
            pxDMADescriptor->Status &= ~( ( uint32_t ) ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL );
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	601a      	str	r2, [r3, #0]
        }

        /* Initialize the next descriptor with the Next Descriptor Polling Enable */
        if( xIndex < ETH_TXBUFNB - 1 )
 8013376:	683b      	ldr	r3, [r7, #0]
 8013378:	2b02      	cmp	r3, #2
 801337a:	d805      	bhi.n	8013388 <prvDMATxDescListInit+0x60>
        {
            /* Set next descriptor address register with next descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) ( pxDMADescriptor + 1 );
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	3320      	adds	r3, #32
 8013380:	461a      	mov	r2, r3
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	60da      	str	r2, [r3, #12]
 8013386:	e002      	b.n	801338e <prvDMATxDescListInit+0x66>
        }
        else
        {
            /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) DMATxDscrTab;
 8013388:	4a0b      	ldr	r2, [pc, #44]	@ (80133b8 <prvDMATxDescListInit+0x90>)
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	60da      	str	r2, [r3, #12]
    for( xIndex = 0; xIndex < ETH_TXBUFNB; xIndex++, pxDMADescriptor++ )
 801338e:	683b      	ldr	r3, [r7, #0]
 8013390:	3301      	adds	r3, #1
 8013392:	603b      	str	r3, [r7, #0]
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	3320      	adds	r3, #32
 8013398:	607b      	str	r3, [r7, #4]
 801339a:	683b      	ldr	r3, [r7, #0]
 801339c:	2b03      	cmp	r3, #3
 801339e:	d9cb      	bls.n	8013338 <prvDMATxDescListInit+0x10>
        }
    }

    /* Set Transmit Descriptor List Address Register */
    xETH.Instance->DMATDLAR = ( uint32_t ) DMATxDscrTab;
 80133a0:	4b07      	ldr	r3, [pc, #28]	@ (80133c0 <prvDMATxDescListInit+0x98>)
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	4a04      	ldr	r2, [pc, #16]	@ (80133b8 <prvDMATxDescListInit+0x90>)
 80133a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80133aa:	611a      	str	r2, [r3, #16]
}
 80133ac:	bf00      	nop
 80133ae:	370c      	adds	r7, #12
 80133b0:	46bd      	mov	sp, r7
 80133b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b6:	4770      	bx	lr
 80133b8:	2000bcc0 	.word	0x2000bcc0
 80133bc:	2000bd40 	.word	0x2000bd40
 80133c0:	2000a414 	.word	0x2000a414

080133c4 <prvDMARxDescListInit>:
///*-----------------------------------------------------------*/
//
static void prvDMARxDescListInit()
{
 80133c4:	b480      	push	{r7}
 80133c6:	b083      	sub	sp, #12
 80133c8:	af00      	add	r7, sp, #0
    /*
     * RX-descriptors.
     */

    /* Get the pointer on the first member of the descriptor list */
    pxDMADescriptor = DMARxDscrTab;
 80133ca:	4b1c      	ldr	r3, [pc, #112]	@ (801343c <prvDMARxDescListInit+0x78>)
 80133cc:	607b      	str	r3, [r7, #4]

    /* Fill each DMA descriptor with the right values */
    for( xIndex = 0; xIndex < ETH_RXBUFNB; xIndex++, pxDMADescriptor++ )
 80133ce:	2300      	movs	r3, #0
 80133d0:	603b      	str	r3, [r7, #0]
 80133d2:	e023      	b.n	801341c <prvDMARxDescListInit+0x58>
    {
        /* Set Buffer1 size and Second Address Chained bit */
        pxDMADescriptor->ControlBufferSize = ETH_DMARXDESC_RCH | ( uint32_t ) ETH_RX_BUF_SIZE;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 80133da:	605a      	str	r2, [r3, #4]
                }
            }
        #else /* if ( ipconfigZERO_COPY_RX_DRIVER != 0 ) */
            {
                /* Set Buffer1 address pointer */
                pxDMADescriptor->Buffer1Addr = ( uint32_t ) ( Rx_Buff[ xIndex ] );
 80133dc:	683b      	ldr	r3, [r7, #0]
 80133de:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80133e2:	fb02 f303 	mul.w	r3, r2, r3
 80133e6:	4a16      	ldr	r2, [pc, #88]	@ (8013440 <prvDMARxDescListInit+0x7c>)
 80133e8:	4413      	add	r3, r2
 80133ea:	461a      	mov	r2, r3
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	609a      	str	r2, [r3, #8]
                /* Set Own bit of the Rx descriptor Status */
                pxDMADescriptor->Status = ETH_DMARXDESC_OWN;
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80133f6:	601a      	str	r2, [r3, #0]
            }
        #endif /* if ( ipconfigZERO_COPY_RX_DRIVER != 0 ) */

        /* Initialize the next descriptor with the Next Descriptor Polling Enable */
        if( xIndex < ETH_RXBUFNB - 1 )
 80133f8:	683b      	ldr	r3, [r7, #0]
 80133fa:	2b02      	cmp	r3, #2
 80133fc:	d805      	bhi.n	801340a <prvDMARxDescListInit+0x46>
        {
            /* Set next descriptor address register with next descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) ( pxDMADescriptor + 1 );
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	3320      	adds	r3, #32
 8013402:	461a      	mov	r2, r3
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	60da      	str	r2, [r3, #12]
 8013408:	e002      	b.n	8013410 <prvDMARxDescListInit+0x4c>
        }
        else
        {
            /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
            pxDMADescriptor->Buffer2NextDescAddr = ( uint32_t ) DMARxDscrTab;
 801340a:	4a0c      	ldr	r2, [pc, #48]	@ (801343c <prvDMARxDescListInit+0x78>)
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	60da      	str	r2, [r3, #12]
    for( xIndex = 0; xIndex < ETH_RXBUFNB; xIndex++, pxDMADescriptor++ )
 8013410:	683b      	ldr	r3, [r7, #0]
 8013412:	3301      	adds	r3, #1
 8013414:	603b      	str	r3, [r7, #0]
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	3320      	adds	r3, #32
 801341a:	607b      	str	r3, [r7, #4]
 801341c:	683b      	ldr	r3, [r7, #0]
 801341e:	2b03      	cmp	r3, #3
 8013420:	d9d8      	bls.n	80133d4 <prvDMARxDescListInit+0x10>
        }
    }

    /* Set Receive Descriptor List Address Register */
    xETH.Instance->DMARDLAR = ( uint32_t ) DMARxDscrTab;
 8013422:	4b08      	ldr	r3, [pc, #32]	@ (8013444 <prvDMARxDescListInit+0x80>)
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	4a05      	ldr	r2, [pc, #20]	@ (801343c <prvDMARxDescListInit+0x78>)
 8013428:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801342c:	60da      	str	r2, [r3, #12]
}
 801342e:	bf00      	nop
 8013430:	370c      	adds	r7, #12
 8013432:	46bd      	mov	sp, r7
 8013434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013438:	4770      	bx	lr
 801343a:	bf00      	nop
 801343c:	2000a460 	.word	0x2000a460
 8013440:	2000a4e0 	.word	0x2000a4e0
 8013444:	2000a414 	.word	0x2000a414

08013448 <xNetworkInterfaceOutput>:
}
///*-----------------------------------------------------------*/
//
BaseType_t xNetworkInterfaceOutput( NetworkBufferDescriptor_t * const pxDescriptor,
                                    BaseType_t bReleaseAfterSend )
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b088      	sub	sp, #32
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
 8013450:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdFAIL;
 8013452:	2300      	movs	r3, #0
 8013454:	61fb      	str	r3, [r7, #28]
    uint32_t ulTransmitSize = 0;
 8013456:	2300      	movs	r3, #0
 8013458:	61bb      	str	r3, [r7, #24]
    __IO ETH_DMADescTypeDef * pxDmaTxDesc;
/* Do not wait too long for a free TX DMA buffer. */
    const TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 50u );
 801345a:	2332      	movs	r3, #50	@ 0x32
 801345c:	617b      	str	r3, [r7, #20]
                    pxPacket->xICMPPacket.xICMPHeader.usChecksum = ( uint16_t ) 0u;
                }
            }
        #endif /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM */

        if( xPhyObject.ulLinkStatusMask != 0 )
 801345e:	4b39      	ldr	r3, [pc, #228]	@ (8013544 <xNetworkInterfaceOutput+0xfc>)
 8013460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013462:	2b00      	cmp	r3, #0
 8013464:	d062      	beq.n	801352c <xNetworkInterfaceOutput+0xe4>
        {
            if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 8013466:	4b38      	ldr	r3, [pc, #224]	@ (8013548 <xNetworkInterfaceOutput+0x100>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	6979      	ldr	r1, [r7, #20]
 801346c:	4618      	mov	r0, r3
 801346e:	f7f5 fb35 	bl	8008adc <xQueueSemaphoreTake>
 8013472:	4603      	mov	r3, r0
 8013474:	2b01      	cmp	r3, #1
 8013476:	d158      	bne.n	801352a <xNetworkInterfaceOutput+0xe2>
                break;
            }

            /* This function does the actual transmission of the packet. The packet is
             * contained in 'pxDescriptor' that is passed to the function. */
            pxDmaTxDesc = xETH.TxDesc;
 8013478:	4b34      	ldr	r3, [pc, #208]	@ (801354c <xNetworkInterfaceOutput+0x104>)
 801347a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801347c:	613b      	str	r3, [r7, #16]

            /* Is this buffer available? */
            configASSERT( ( pxDmaTxDesc->Status & ETH_DMATXDESC_OWN ) == 0 );
 801347e:	693b      	ldr	r3, [r7, #16]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	2b00      	cmp	r3, #0
 8013484:	da0d      	bge.n	80134a2 <xNetworkInterfaceOutput+0x5a>
	__asm volatile
 8013486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801348a:	b672      	cpsid	i
 801348c:	f383 8811 	msr	BASEPRI, r3
 8013490:	f3bf 8f6f 	isb	sy
 8013494:	f3bf 8f4f 	dsb	sy
 8013498:	b662      	cpsie	i
 801349a:	60fb      	str	r3, [r7, #12]
}
 801349c:	bf00      	nop
 801349e:	bf00      	nop
 80134a0:	e7fd      	b.n	801349e <xNetworkInterfaceOutput+0x56>

            {
                /* Is this buffer available? */
                /* Get bytes in current buffer. */
                ulTransmitSize = pxDescriptor->xDataLength;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	69db      	ldr	r3, [r3, #28]
 80134a6:	61bb      	str	r3, [r7, #24]

                if( ulTransmitSize > ETH_TX_BUF_SIZE )
 80134a8:	69bb      	ldr	r3, [r7, #24]
 80134aa:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80134ae:	4293      	cmp	r3, r2
 80134b0:	d902      	bls.n	80134b8 <xNetworkInterfaceOutput+0x70>
                {
                    ulTransmitSize = ETH_TX_BUF_SIZE;
 80134b2:	f240 53f4 	movw	r3, #1524	@ 0x5f4
 80134b6:	61bb      	str	r3, [r7, #24]
                }

                #if ( ipconfigZERO_COPY_TX_DRIVER == 0 )
                    {
                        /* Copy the bytes. */
                        memcpy( ( void * ) pxDmaTxDesc->Buffer1Addr, pxDescriptor->pucEthernetBuffer, ulTransmitSize );
 80134b8:	693b      	ldr	r3, [r7, #16]
 80134ba:	689b      	ldr	r3, [r3, #8]
 80134bc:	4618      	mov	r0, r3
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	699b      	ldr	r3, [r3, #24]
 80134c2:	69ba      	ldr	r2, [r7, #24]
 80134c4:	4619      	mov	r1, r3
 80134c6:	f002 fc3c 	bl	8015d42 <memcpy>
                    {
                        pxDmaTxDesc->Status |= ETH_DMATXDESC_CIC_TCPUDPICMP_FULL | ETH_DMATXDESC_IC;
                    }
                #else
                    {
                        pxDmaTxDesc->Status &= ~( ( uint32_t ) ETH_DMATXDESC_CIC );
 80134ca:	693b      	ldr	r3, [r7, #16]
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80134d2:	693b      	ldr	r3, [r7, #16]
 80134d4:	601a      	str	r2, [r3, #0]
                        pxDmaTxDesc->Status |= ETH_DMATXDESC_IC;
 80134d6:	693b      	ldr	r3, [r7, #16]
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80134de:	693b      	ldr	r3, [r7, #16]
 80134e0:	601a      	str	r2, [r3, #0]


                /* Prepare transmit descriptors to give to DMA. */

                /* Set LAST and FIRST segment */
                pxDmaTxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 80134e2:	693b      	ldr	r3, [r7, #16]
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	f043 5240 	orr.w	r2, r3, #805306368	@ 0x30000000
 80134ea:	693b      	ldr	r3, [r7, #16]
 80134ec:	601a      	str	r2, [r3, #0]
                /* Set frame size */
                pxDmaTxDesc->ControlBufferSize = ( ulTransmitSize & ETH_DMATXDESC_TBS1 );
 80134ee:	69bb      	ldr	r3, [r7, #24]
 80134f0:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80134f4:	693b      	ldr	r3, [r7, #16]
 80134f6:	605a      	str	r2, [r3, #4]
                        cache_clean_invalidate_by_addr( pulBuffer, xlength );
                    }
                #endif

                /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
                pxDmaTxDesc->Status |= ETH_DMATXDESC_OWN;
 80134f8:	693b      	ldr	r3, [r7, #16]
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8013500:	693b      	ldr	r3, [r7, #16]
 8013502:	601a      	str	r2, [r3, #0]

                /* Point to next descriptor */
                xETH.TxDesc = ( ETH_DMADescTypeDef * ) ( xETH.TxDesc->Buffer2NextDescAddr );
 8013504:	4b11      	ldr	r3, [pc, #68]	@ (801354c <xNetworkInterfaceOutput+0x104>)
 8013506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013508:	68db      	ldr	r3, [r3, #12]
 801350a:	461a      	mov	r2, r3
 801350c:	4b0f      	ldr	r3, [pc, #60]	@ (801354c <xNetworkInterfaceOutput+0x104>)
 801350e:	62da      	str	r2, [r3, #44]	@ 0x2c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8013510:	f3bf 8f4f 	dsb	sy
}
 8013514:	bf00      	nop
                /* Ensure completion of memory access */
                __DSB();
                /* Resume DMA transmission*/
                xETH.Instance->DMATPDR = 0;
 8013516:	4b0d      	ldr	r3, [pc, #52]	@ (801354c <xNetworkInterfaceOutput+0x104>)
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801351e:	461a      	mov	r2, r3
 8013520:	2300      	movs	r3, #0
 8013522:	6053      	str	r3, [r2, #4]
                iptraceNETWORK_INTERFACE_TRANSMIT();
                xReturn = pdPASS;
 8013524:	2301      	movs	r3, #1
 8013526:	61fb      	str	r3, [r7, #28]
 8013528:	e000      	b.n	801352c <xNetworkInterfaceOutput+0xe4>
                break;
 801352a:	bf00      	nop
            /* The PHY has no Link Status, packet shall be dropped. */
        }
    } while( 0 );

    /* The buffer has been sent so can be released. */
    if( bReleaseAfterSend != pdFALSE )
 801352c:	683b      	ldr	r3, [r7, #0]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d002      	beq.n	8013538 <xNetworkInterfaceOutput+0xf0>
    {
        vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f000 ff7c 	bl	8014430 <vReleaseNetworkBufferAndDescriptor>
    }

    return xReturn;
 8013538:	69fb      	ldr	r3, [r7, #28]
}
 801353a:	4618      	mov	r0, r3
 801353c:	3720      	adds	r7, #32
 801353e:	46bd      	mov	sp, r7
 8013540:	bd80      	pop	{r7, pc}
 8013542:	bf00      	nop
 8013544:	2000a3d4 	.word	0x2000a3d4
 8013548:	2000a45c 	.word	0x2000a45c
 801354c:	2000a414 	.word	0x2000a414

08013550 <xMayAcceptPacket>:
///*-----------------------------------------------------------*/
//
static BaseType_t xMayAcceptPacket( uint8_t * pcBuffer )
{
 8013550:	b480      	push	{r7}
 8013552:	b085      	sub	sp, #20
 8013554:	af00      	add	r7, sp, #0
 8013556:	6078      	str	r0, [r7, #4]
    const ProtocolPacket_t * pxProtPacket = ( const ProtocolPacket_t * ) pcBuffer;
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	60fb      	str	r3, [r7, #12]

    switch( pxProtPacket->xTCPPacket.xEthernetHeader.usFrameType )
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	899b      	ldrh	r3, [r3, #12]
 8013560:	2b08      	cmp	r3, #8
 8013562:	d006      	beq.n	8013572 <xMayAcceptPacket+0x22>
 8013564:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8013568:	d101      	bne.n	801356e <xMayAcceptPacket+0x1e>
    {
        case ipARP_FRAME_TYPE:
            /* Check it later. */
            return pdTRUE;
 801356a:	2301      	movs	r3, #1
 801356c:	e003      	b.n	8013576 <xMayAcceptPacket+0x26>
            /* Check it here. */
            break;

        default:
            /* Refuse the packet. */
            return pdFALSE;
 801356e:	2300      	movs	r3, #0
 8013570:	e001      	b.n	8013576 <xMayAcceptPacket+0x26>
            break;
 8013572:	bf00      	nop
                    return pdFALSE;
                }
            }
        }
    #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    return pdTRUE;
 8013574:	2301      	movs	r3, #1
}
 8013576:	4618      	mov	r0, r3
 8013578:	3714      	adds	r7, #20
 801357a:	46bd      	mov	sp, r7
 801357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013580:	4770      	bx	lr

08013582 <prvPassEthMessages>:
///*-----------------------------------------------------------*/
//
static void prvPassEthMessages( NetworkBufferDescriptor_t * pxDescriptor )
{
 8013582:	b580      	push	{r7, lr}
 8013584:	b084      	sub	sp, #16
 8013586:	af00      	add	r7, sp, #0
 8013588:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xRxEvent;

    xRxEvent.eEventType = eNetworkRxEvent;
 801358a:	2301      	movs	r3, #1
 801358c:	723b      	strb	r3, [r7, #8]
    xRxEvent.pvData = ( void * ) pxDescriptor;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	60fb      	str	r3, [r7, #12]

    if( xSendEventStructToIPTask( &xRxEvent, ( TickType_t ) 1000 ) != pdPASS )
 8013592:	f107 0308 	add.w	r3, r7, #8
 8013596:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801359a:	4618      	mov	r0, r3
 801359c:	f7f9 fc16 	bl	800cdcc <xSendEventStructToIPTask>
 80135a0:	4603      	mov	r3, r0
 80135a2:	2b01      	cmp	r3, #1
 80135a4:	d002      	beq.n	80135ac <prvPassEthMessages+0x2a>
                    pxDescriptor = pxNext;
                } while( pxDescriptor != NULL );
            }
        #else
            {
                vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 80135a6:	6878      	ldr	r0, [r7, #4]
 80135a8:	f000 ff42 	bl	8014430 <vReleaseNetworkBufferAndDescriptor>
    }
    else
    {
        iptraceNETWORK_INTERFACE_RECEIVE();
    }
}
 80135ac:	bf00      	nop
 80135ae:	3710      	adds	r7, #16
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}

080135b4 <prvNetworkInterfaceInput>:
//
static BaseType_t prvNetworkInterfaceInput( void )
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b088      	sub	sp, #32
 80135b8:	af00      	add	r7, sp, #0
    NetworkBufferDescriptor_t * pxCurDescriptor;
    NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 80135ba:	2300      	movs	r3, #0
 80135bc:	61fb      	str	r3, [r7, #28]

    #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
        NetworkBufferDescriptor_t * pxFirstDescriptor = NULL;
        NetworkBufferDescriptor_t * pxLastDescriptor = NULL;
    #endif
    BaseType_t xReceivedLength = 0;
 80135be:	2300      	movs	r3, #0
 80135c0:	61bb      	str	r3, [r7, #24]
    __IO ETH_DMADescTypeDef * pxDMARxDescriptor;
    const TickType_t xDescriptorWaitTime = pdMS_TO_TICKS( niDESCRIPTOR_WAIT_TIME_MS );
 80135c2:	23fa      	movs	r3, #250	@ 0xfa
 80135c4:	60fb      	str	r3, [r7, #12]
    uint8_t * pucBuffer;

    pxDMARxDescriptor = xETH.RxDesc;
 80135c6:	4b45      	ldr	r3, [pc, #276]	@ (80136dc <prvNetworkInterfaceInput+0x128>)
 80135c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135ca:	617b      	str	r3, [r7, #20]

    while( ( pxDMARxDescriptor->Status & ETH_DMARXDESC_OWN ) == 0u )
 80135cc:	e078      	b.n	80136c0 <prvNetworkInterfaceInput+0x10c>
    {
        BaseType_t xAccepted = pdTRUE;
 80135ce:	2301      	movs	r3, #1
 80135d0:	613b      	str	r3, [r7, #16]
        /* Get the Frame Length of the received packet: subtract 4 bytes of the CRC */
        xReceivedLength = ( ( pxDMARxDescriptor->Status & ETH_DMARXDESC_FL ) >> ETH_DMARXDESC_FRAMELENGTHSHIFT ) - 4;
 80135d2:	697b      	ldr	r3, [r7, #20]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	0c1b      	lsrs	r3, r3, #16
 80135d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80135dc:	3b04      	subs	r3, #4
 80135de:	61bb      	str	r3, [r7, #24]

        pucBuffer = ( uint8_t * ) pxDMARxDescriptor->Buffer1Addr;
 80135e0:	697b      	ldr	r3, [r7, #20]
 80135e2:	689b      	ldr	r3, [r3, #8]
 80135e4:	60bb      	str	r3, [r7, #8]

        /* Update the ETHERNET DMA global Rx descriptor with next Rx descriptor */
        /* Chained Mode */
        /* Selects the next DMA Rx descriptor list for next buffer to read */
        xETH.RxDesc = ( ETH_DMADescTypeDef * ) pxDMARxDescriptor->Buffer2NextDescAddr;
 80135e6:	697b      	ldr	r3, [r7, #20]
 80135e8:	68db      	ldr	r3, [r3, #12]
 80135ea:	461a      	mov	r2, r3
 80135ec:	4b3b      	ldr	r3, [pc, #236]	@ (80136dc <prvNetworkInterfaceInput+0x128>)
 80135ee:	629a      	str	r2, [r3, #40]	@ 0x28

        /* In order to make the code easier and faster, only packets in a single buffer
         * will be accepted.  This can be done by making the buffers large enough to
         * hold a complete Ethernet packet (1536 bytes).
         * Therefore, two sanity checks: */
        configASSERT( xReceivedLength <= ETH_RX_BUF_SIZE );
 80135f0:	69bb      	ldr	r3, [r7, #24]
 80135f2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80135f6:	4293      	cmp	r3, r2
 80135f8:	dd0d      	ble.n	8013616 <prvNetworkInterfaceInput+0x62>
	__asm volatile
 80135fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135fe:	b672      	cpsid	i
 8013600:	f383 8811 	msr	BASEPRI, r3
 8013604:	f3bf 8f6f 	isb	sy
 8013608:	f3bf 8f4f 	dsb	sy
 801360c:	b662      	cpsie	i
 801360e:	603b      	str	r3, [r7, #0]
}
 8013610:	bf00      	nop
 8013612:	bf00      	nop
 8013614:	e7fd      	b.n	8013612 <prvNetworkInterfaceInput+0x5e>

        if( ( pxDMARxDescriptor->Status & ( ETH_DMARXDESC_CE | ETH_DMARXDESC_IPV4HCE | ETH_DMARXDESC_FT ) ) != ETH_DMARXDESC_FT )
 8013616:	697b      	ldr	r3, [r7, #20]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	f003 03a2 	and.w	r3, r3, #162	@ 0xa2
 801361e:	2b20      	cmp	r3, #32
 8013620:	d002      	beq.n	8013628 <prvNetworkInterfaceInput+0x74>
        {
            /* Not an Ethernet frame-type or a checksum error. */
            xAccepted = pdFALSE;
 8013622:	2300      	movs	r3, #0
 8013624:	613b      	str	r3, [r7, #16]
 8013626:	e003      	b.n	8013630 <prvNetworkInterfaceInput+0x7c>
        }
        else
        {
            /* See if this packet must be handled. */
            xAccepted = xMayAcceptPacket( pucBuffer );
 8013628:	68b8      	ldr	r0, [r7, #8]
 801362a:	f7ff ff91 	bl	8013550 <xMayAcceptPacket>
 801362e:	6138      	str	r0, [r7, #16]
        }

        if( xAccepted != pdFALSE )
 8013630:	693b      	ldr	r3, [r7, #16]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d00a      	beq.n	801364c <prvNetworkInterfaceInput+0x98>
        {
            /* The packet will be accepted, but check first if a new Network Buffer can
             * be obtained. If not, the packet will still be dropped. */
            pxNewDescriptor = pxGetNetworkBufferWithDescriptor( ETH_RX_BUF_SIZE, xDescriptorWaitTime );
 8013636:	68f9      	ldr	r1, [r7, #12]
 8013638:	f240 50f4 	movw	r0, #1524	@ 0x5f4
 801363c:	f000 fea8 	bl	8014390 <pxGetNetworkBufferWithDescriptor>
 8013640:	61f8      	str	r0, [r7, #28]

            if( pxNewDescriptor == NULL )
 8013642:	69fb      	ldr	r3, [r7, #28]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d101      	bne.n	801364c <prvNetworkInterfaceInput+0x98>
            {
                /* A new descriptor can not be allocated now. This packet will be dropped. */
                xAccepted = pdFALSE;
 8013648:	2300      	movs	r3, #0
 801364a:	613b      	str	r3, [r7, #16]
                configASSERT( pxCurDescriptor != NULL );
            }
        #else
            {
                /* In this mode, the two descriptors are the same. */
                pxCurDescriptor = pxNewDescriptor;
 801364c:	69fb      	ldr	r3, [r7, #28]
 801364e:	607b      	str	r3, [r7, #4]

                if( pxNewDescriptor != NULL )
 8013650:	69fb      	ldr	r3, [r7, #28]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d006      	beq.n	8013664 <prvNetworkInterfaceInput+0xb0>
                {
                    /* The packet is accepted and a new Network Buffer was created,
                     * copy data to the Network Buffer. */
                    memcpy( pxNewDescriptor->pucEthernetBuffer, pucBuffer, xReceivedLength );
 8013656:	69fb      	ldr	r3, [r7, #28]
 8013658:	699b      	ldr	r3, [r3, #24]
 801365a:	69ba      	ldr	r2, [r7, #24]
 801365c:	68b9      	ldr	r1, [r7, #8]
 801365e:	4618      	mov	r0, r3
 8013660:	f002 fb6f 	bl	8015d42 <memcpy>
                }
            }
        #endif /* if ( ipconfigZERO_COPY_RX_DRIVER != 0 ) */

        if( xAccepted != pdFALSE )
 8013664:	693b      	ldr	r3, [r7, #16]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d005      	beq.n	8013676 <prvNetworkInterfaceInput+0xc2>
        {
            pxCurDescriptor->xDataLength = xReceivedLength;
 801366a:	69ba      	ldr	r2, [r7, #24]
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	61da      	str	r2, [r3, #28]

                    pxLastDescriptor = pxCurDescriptor;
                }
            #else /* if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 ) */
                {
                    prvPassEthMessages( pxCurDescriptor );
 8013670:	6878      	ldr	r0, [r7, #4]
 8013672:	f7ff ff86 	bl	8013582 <prvPassEthMessages>
                }
            }
        #endif /* ipconfigZERO_COPY_RX_DRIVER */

        /* Set Buffer1 size and Second Address Chained bit */
        pxDMARxDescriptor->ControlBufferSize = ETH_DMARXDESC_RCH | ( uint32_t ) ETH_RX_BUF_SIZE;
 8013676:	697b      	ldr	r3, [r7, #20]
 8013678:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 801367c:	605a      	str	r2, [r3, #4]
        pxDMARxDescriptor->Status = ETH_DMARXDESC_OWN;
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8013684:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8013686:	f3bf 8f4f 	dsb	sy
}
 801368a:	bf00      	nop
        /* Ensure completion of memory access */
        __DSB();

        /* When Rx Buffer unavailable flag is set clear it and resume
         * reception. */
        if( ( xETH.Instance->DMASR & ETH_DMASR_RBUS ) != 0 )
 801368c:	4b13      	ldr	r3, [pc, #76]	@ (80136dc <prvNetworkInterfaceInput+0x128>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8013694:	695b      	ldr	r3, [r3, #20]
 8013696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801369a:	2b00      	cmp	r3, #0
 801369c:	d00d      	beq.n	80136ba <prvNetworkInterfaceInput+0x106>
        {
            /* Clear RBUS ETHERNET DMA flag. */
            xETH.Instance->DMASR = ETH_DMASR_RBUS;
 801369e:	4b0f      	ldr	r3, [pc, #60]	@ (80136dc <prvNetworkInterfaceInput+0x128>)
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80136a6:	461a      	mov	r2, r3
 80136a8:	2380      	movs	r3, #128	@ 0x80
 80136aa:	6153      	str	r3, [r2, #20]

            /* Resume DMA reception. */
            xETH.Instance->DMARPDR = 0;
 80136ac:	4b0b      	ldr	r3, [pc, #44]	@ (80136dc <prvNetworkInterfaceInput+0x128>)
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80136b4:	461a      	mov	r2, r3
 80136b6:	2300      	movs	r3, #0
 80136b8:	6093      	str	r3, [r2, #8]
        }

        pxDMARxDescriptor = xETH.RxDesc;
 80136ba:	4b08      	ldr	r3, [pc, #32]	@ (80136dc <prvNetworkInterfaceInput+0x128>)
 80136bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80136be:	617b      	str	r3, [r7, #20]
    while( ( pxDMARxDescriptor->Status & ETH_DMARXDESC_OWN ) == 0u )
 80136c0:	697b      	ldr	r3, [r7, #20]
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	da82      	bge.n	80135ce <prvNetworkInterfaceInput+0x1a>
                prvPassEthMessages( pxFirstDescriptor );
            }
        }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */

    return( xReceivedLength > 0 );
 80136c8:	69bb      	ldr	r3, [r7, #24]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	bfcc      	ite	gt
 80136ce:	2301      	movgt	r3, #1
 80136d0:	2300      	movle	r3, #0
 80136d2:	b2db      	uxtb	r3, r3
}
 80136d4:	4618      	mov	r0, r3
 80136d6:	3720      	adds	r7, #32
 80136d8:	46bd      	mov	sp, r7
 80136da:	bd80      	pop	{r7, pc}
 80136dc:	2000a414 	.word	0x2000a414

080136e0 <xSTM32_PhyRead>:
//
//
BaseType_t xSTM32_PhyRead( BaseType_t xAddress,
                           BaseType_t xRegister,
                           uint32_t * pulValue )
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b086      	sub	sp, #24
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	60f8      	str	r0, [r7, #12]
 80136e8:	60b9      	str	r1, [r7, #8]
 80136ea:	607a      	str	r2, [r7, #4]
    uint16_t usPrevAddress = xETH.Init.PhyAddress;
 80136ec:	4b10      	ldr	r3, [pc, #64]	@ (8013730 <xSTM32_PhyRead+0x50>)
 80136ee:	8a1b      	ldrh	r3, [r3, #16]
 80136f0:	827b      	strh	r3, [r7, #18]
    BaseType_t xResult;
    HAL_StatusTypeDef xHALResult;

    xETH.Init.PhyAddress = xAddress;
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	b29a      	uxth	r2, r3
 80136f6:	4b0e      	ldr	r3, [pc, #56]	@ (8013730 <xSTM32_PhyRead+0x50>)
 80136f8:	821a      	strh	r2, [r3, #16]
    xHALResult = HAL_ETH_ReadPHYRegister( &xETH, ( uint16_t ) xRegister, pulValue );
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	b29b      	uxth	r3, r3
 80136fe:	687a      	ldr	r2, [r7, #4]
 8013700:	4619      	mov	r1, r3
 8013702:	480b      	ldr	r0, [pc, #44]	@ (8013730 <xSTM32_PhyRead+0x50>)
 8013704:	f7ed fd12 	bl	800112c <HAL_ETH_ReadPHYRegister>
 8013708:	4603      	mov	r3, r0
 801370a:	747b      	strb	r3, [r7, #17]
    xETH.Init.PhyAddress = usPrevAddress;
 801370c:	4a08      	ldr	r2, [pc, #32]	@ (8013730 <xSTM32_PhyRead+0x50>)
 801370e:	8a7b      	ldrh	r3, [r7, #18]
 8013710:	8213      	strh	r3, [r2, #16]

    if( xHALResult == HAL_OK )
 8013712:	7c7b      	ldrb	r3, [r7, #17]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d102      	bne.n	801371e <xSTM32_PhyRead+0x3e>
    {
        xResult = 0;
 8013718:	2300      	movs	r3, #0
 801371a:	617b      	str	r3, [r7, #20]
 801371c:	e002      	b.n	8013724 <xSTM32_PhyRead+0x44>
    }
    else
    {
        xResult = -1;
 801371e:	f04f 33ff 	mov.w	r3, #4294967295
 8013722:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 8013724:	697b      	ldr	r3, [r7, #20]
}
 8013726:	4618      	mov	r0, r3
 8013728:	3718      	adds	r7, #24
 801372a:	46bd      	mov	sp, r7
 801372c:	bd80      	pop	{r7, pc}
 801372e:	bf00      	nop
 8013730:	2000a414 	.word	0x2000a414

08013734 <xSTM32_PhyWrite>:
///*-----------------------------------------------------------*/
//
BaseType_t xSTM32_PhyWrite( BaseType_t xAddress,
                            BaseType_t xRegister,
                            uint32_t ulValue )
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b086      	sub	sp, #24
 8013738:	af00      	add	r7, sp, #0
 801373a:	60f8      	str	r0, [r7, #12]
 801373c:	60b9      	str	r1, [r7, #8]
 801373e:	607a      	str	r2, [r7, #4]
    uint16_t usPrevAddress = xETH.Init.PhyAddress;
 8013740:	4b10      	ldr	r3, [pc, #64]	@ (8013784 <xSTM32_PhyWrite+0x50>)
 8013742:	8a1b      	ldrh	r3, [r3, #16]
 8013744:	827b      	strh	r3, [r7, #18]
    BaseType_t xResult;
    HAL_StatusTypeDef xHALResult;

    xETH.Init.PhyAddress = xAddress;
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	b29a      	uxth	r2, r3
 801374a:	4b0e      	ldr	r3, [pc, #56]	@ (8013784 <xSTM32_PhyWrite+0x50>)
 801374c:	821a      	strh	r2, [r3, #16]
    xHALResult = HAL_ETH_WritePHYRegister( &xETH, ( uint16_t ) xRegister, ulValue );
 801374e:	68bb      	ldr	r3, [r7, #8]
 8013750:	b29b      	uxth	r3, r3
 8013752:	687a      	ldr	r2, [r7, #4]
 8013754:	4619      	mov	r1, r3
 8013756:	480b      	ldr	r0, [pc, #44]	@ (8013784 <xSTM32_PhyWrite+0x50>)
 8013758:	f7ed fd58 	bl	800120c <HAL_ETH_WritePHYRegister>
 801375c:	4603      	mov	r3, r0
 801375e:	747b      	strb	r3, [r7, #17]
    xETH.Init.PhyAddress = usPrevAddress;
 8013760:	4a08      	ldr	r2, [pc, #32]	@ (8013784 <xSTM32_PhyWrite+0x50>)
 8013762:	8a7b      	ldrh	r3, [r7, #18]
 8013764:	8213      	strh	r3, [r2, #16]

    if( xHALResult == HAL_OK )
 8013766:	7c7b      	ldrb	r3, [r7, #17]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d102      	bne.n	8013772 <xSTM32_PhyWrite+0x3e>
    {
        xResult = 0;
 801376c:	2300      	movs	r3, #0
 801376e:	617b      	str	r3, [r7, #20]
 8013770:	e002      	b.n	8013778 <xSTM32_PhyWrite+0x44>
    }
    else
    {
        xResult = -1;
 8013772:	f04f 33ff 	mov.w	r3, #4294967295
 8013776:	617b      	str	r3, [r7, #20]
    }

    return xResult;
 8013778:	697b      	ldr	r3, [r7, #20]
}
 801377a:	4618      	mov	r0, r3
 801377c:	3718      	adds	r7, #24
 801377e:	46bd      	mov	sp, r7
 8013780:	bd80      	pop	{r7, pc}
 8013782:	bf00      	nop
 8013784:	2000a414 	.word	0x2000a414

08013788 <vMACBProbePhy>:
///*-----------------------------------------------------------*/
//
void vMACBProbePhy( void )
{
 8013788:	b580      	push	{r7, lr}
 801378a:	af00      	add	r7, sp, #0
    vPhyInitialise( &xPhyObject, xSTM32_PhyRead, xSTM32_PhyWrite );
 801378c:	4a06      	ldr	r2, [pc, #24]	@ (80137a8 <vMACBProbePhy+0x20>)
 801378e:	4907      	ldr	r1, [pc, #28]	@ (80137ac <vMACBProbePhy+0x24>)
 8013790:	4807      	ldr	r0, [pc, #28]	@ (80137b0 <vMACBProbePhy+0x28>)
 8013792:	f000 f94d 	bl	8013a30 <vPhyInitialise>
    xPhyDiscover( &xPhyObject );
 8013796:	4806      	ldr	r0, [pc, #24]	@ (80137b0 <vMACBProbePhy+0x28>)
 8013798:	f000 f95f 	bl	8013a5a <xPhyDiscover>
    xPhyConfigure( &xPhyObject, &xPHYProperties );
 801379c:	4905      	ldr	r1, [pc, #20]	@ (80137b4 <vMACBProbePhy+0x2c>)
 801379e:	4804      	ldr	r0, [pc, #16]	@ (80137b0 <vMACBProbePhy+0x28>)
 80137a0:	f000 fa40 	bl	8013c24 <xPhyConfigure>
}
 80137a4:	bf00      	nop
 80137a6:	bd80      	pop	{r7, pc}
 80137a8:	08013735 	.word	0x08013735
 80137ac:	080136e1 	.word	0x080136e1
 80137b0:	2000a3d4 	.word	0x2000a3d4
 80137b4:	08016f5c 	.word	0x08016f5c

080137b8 <prvEthernetUpdateConfig>:
///*-----------------------------------------------------------*/
//
static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b082      	sub	sp, #8
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
                       xPhyObject.ulLinkStatusMask,
                       ( int ) xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d103      	bne.n	80137ce <prvEthernetUpdateConfig+0x16>
 80137c6:	4b33      	ldr	r3, [pc, #204]	@ (8013894 <prvEthernetUpdateConfig+0xdc>)
 80137c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d059      	beq.n	8013882 <prvEthernetUpdateConfig+0xca>
    {
        /* Restart the auto-negotiation. */
        if( xETH.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE )
 80137ce:	4b32      	ldr	r3, [pc, #200]	@ (8013898 <prvEthernetUpdateConfig+0xe0>)
 80137d0:	685b      	ldr	r3, [r3, #4]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d024      	beq.n	8013820 <prvEthernetUpdateConfig+0x68>
        {
            xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &xPhyObject ) );
 80137d6:	4b2f      	ldr	r3, [pc, #188]	@ (8013894 <prvEthernetUpdateConfig+0xdc>)
 80137d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137da:	2201      	movs	r2, #1
 80137dc:	fa02 f303 	lsl.w	r3, r2, r3
 80137e0:	3b01      	subs	r3, #1
 80137e2:	4619      	mov	r1, r3
 80137e4:	482b      	ldr	r0, [pc, #172]	@ (8013894 <prvEthernetUpdateConfig+0xdc>)
 80137e6:	f000 fb55 	bl	8013e94 <xPhyStartAutoNegotiation>

            /* Configure the MAC with the Duplex Mode fixed by the
             * auto-negotiation process. */
            if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 80137ea:	4b2a      	ldr	r3, [pc, #168]	@ (8013894 <prvEthernetUpdateConfig+0xdc>)
 80137ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80137f0:	2b02      	cmp	r3, #2
 80137f2:	d104      	bne.n	80137fe <prvEthernetUpdateConfig+0x46>
            {
                xETH.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80137f4:	4b28      	ldr	r3, [pc, #160]	@ (8013898 <prvEthernetUpdateConfig+0xe0>)
 80137f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80137fa:	60da      	str	r2, [r3, #12]
 80137fc:	e002      	b.n	8013804 <prvEthernetUpdateConfig+0x4c>
            }
            else
            {
                xETH.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80137fe:	4b26      	ldr	r3, [pc, #152]	@ (8013898 <prvEthernetUpdateConfig+0xe0>)
 8013800:	2200      	movs	r2, #0
 8013802:	60da      	str	r2, [r3, #12]
            }

            /* Configure the MAC with the speed fixed by the
             * auto-negotiation process. */
            if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 8013804:	4b23      	ldr	r3, [pc, #140]	@ (8013894 <prvEthernetUpdateConfig+0xdc>)
 8013806:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801380a:	2b01      	cmp	r3, #1
 801380c:	d103      	bne.n	8013816 <prvEthernetUpdateConfig+0x5e>
            {
                xETH.Init.Speed = ETH_SPEED_10M;
 801380e:	4b22      	ldr	r3, [pc, #136]	@ (8013898 <prvEthernetUpdateConfig+0xe0>)
 8013810:	2200      	movs	r2, #0
 8013812:	609a      	str	r2, [r3, #8]
 8013814:	e02d      	b.n	8013872 <prvEthernetUpdateConfig+0xba>
            }
            else
            {
                xETH.Init.Speed = ETH_SPEED_100M;
 8013816:	4b20      	ldr	r3, [pc, #128]	@ (8013898 <prvEthernetUpdateConfig+0xe0>)
 8013818:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 801381c:	609a      	str	r2, [r3, #8]
 801381e:	e028      	b.n	8013872 <prvEthernetUpdateConfig+0xba>
        {
            /* Check parameters */
            assert_param( IS_ETH_SPEED( xETH.Init.Speed ) );
            assert_param( IS_ETH_DUPLEX_MODE( xETH.Init.DuplexMode ) );

            if( xETH.Init.DuplexMode == ETH_MODE_FULLDUPLEX )
 8013820:	4b1d      	ldr	r3, [pc, #116]	@ (8013898 <prvEthernetUpdateConfig+0xe0>)
 8013822:	68db      	ldr	r3, [r3, #12]
 8013824:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013828:	d104      	bne.n	8013834 <prvEthernetUpdateConfig+0x7c>
            {
                xPhyObject.xPhyPreferences.ucDuplex = PHY_DUPLEX_HALF;
 801382a:	4b1a      	ldr	r3, [pc, #104]	@ (8013894 <prvEthernetUpdateConfig+0xdc>)
 801382c:	2201      	movs	r2, #1
 801382e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8013832:	e003      	b.n	801383c <prvEthernetUpdateConfig+0x84>
            }
            else
            {
                xPhyObject.xPhyPreferences.ucDuplex = PHY_DUPLEX_FULL;
 8013834:	4b17      	ldr	r3, [pc, #92]	@ (8013894 <prvEthernetUpdateConfig+0xdc>)
 8013836:	2202      	movs	r2, #2
 8013838:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            }

            if( xETH.Init.Speed == ETH_SPEED_10M )
 801383c:	4b16      	ldr	r3, [pc, #88]	@ (8013898 <prvEthernetUpdateConfig+0xe0>)
 801383e:	689b      	ldr	r3, [r3, #8]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d104      	bne.n	801384e <prvEthernetUpdateConfig+0x96>
            {
                xPhyObject.xPhyPreferences.ucSpeed = PHY_SPEED_10;
 8013844:	4b13      	ldr	r3, [pc, #76]	@ (8013894 <prvEthernetUpdateConfig+0xdc>)
 8013846:	2201      	movs	r2, #1
 8013848:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 801384c:	e003      	b.n	8013856 <prvEthernetUpdateConfig+0x9e>
            }
            else
            {
                xPhyObject.xPhyPreferences.ucSpeed = PHY_SPEED_100;
 801384e:	4b11      	ldr	r3, [pc, #68]	@ (8013894 <prvEthernetUpdateConfig+0xdc>)
 8013850:	2202      	movs	r2, #2
 8013852:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }

            xPhyObject.xPhyPreferences.ucMDI_X = PHY_MDIX_AUTO;
 8013856:	4b0f      	ldr	r3, [pc, #60]	@ (8013894 <prvEthernetUpdateConfig+0xdc>)
 8013858:	2203      	movs	r2, #3
 801385a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

            /* Use predefined (fixed) configuration. */
            xPhyFixedValue( &xPhyObject, xPhyGetMask( &xPhyObject ) );
 801385e:	4b0d      	ldr	r3, [pc, #52]	@ (8013894 <prvEthernetUpdateConfig+0xdc>)
 8013860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013862:	2201      	movs	r2, #1
 8013864:	fa02 f303 	lsl.w	r3, r2, r3
 8013868:	3b01      	subs	r3, #1
 801386a:	4619      	mov	r1, r3
 801386c:	4809      	ldr	r0, [pc, #36]	@ (8013894 <prvEthernetUpdateConfig+0xdc>)
 801386e:	f000 fad1 	bl	8013e14 <xPhyFixedValue>
        }

        /* ETHERNET MAC Re-Configuration */
        HAL_ETH_ConfigMAC( &xETH, ( ETH_MACInitTypeDef * ) NULL );
 8013872:	2100      	movs	r1, #0
 8013874:	4808      	ldr	r0, [pc, #32]	@ (8013898 <prvEthernetUpdateConfig+0xe0>)
 8013876:	f7ed fe0b 	bl	8001490 <HAL_ETH_ConfigMAC>

        /* Restart MAC interface */
        HAL_ETH_Start( &xETH );
 801387a:	4807      	ldr	r0, [pc, #28]	@ (8013898 <prvEthernetUpdateConfig+0xe0>)
 801387c:	f7ed fd36 	bl	80012ec <HAL_ETH_Start>
 8013880:	e003      	b.n	801388a <prvEthernetUpdateConfig+0xd2>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop( &xETH );
 8013882:	4805      	ldr	r0, [pc, #20]	@ (8013898 <prvEthernetUpdateConfig+0xe0>)
 8013884:	f7ed fd61 	bl	800134a <HAL_ETH_Stop>
    }
}
 8013888:	bf00      	nop
 801388a:	bf00      	nop
 801388c:	3708      	adds	r7, #8
 801388e:	46bd      	mov	sp, r7
 8013890:	bd80      	pop	{r7, pc}
 8013892:	bf00      	nop
 8013894:	2000a3d4 	.word	0x2000a3d4
 8013898:	2000a414 	.word	0x2000a414

0801389c <vNetworkInterfaceAllocateRAMToBuffers>:
///*-----------------------------------------------------------*/
//
///* Uncomment this in case BufferAllocation_1.c is used. */
//
void vNetworkInterfaceAllocateRAMToBuffers( NetworkBufferDescriptor_t pxNetworkBuffers[ ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ] )
{
 801389c:	b480      	push	{r7}
 801389e:	b085      	sub	sp, #20
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
    static
    #if defined( STM32F7xx )
        __attribute__( ( section( ".first_data" ) ) )
    #endif
    uint8_t ucNetworkPackets[ ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS * ETH_MAX_PACKET_SIZE ] __attribute__( ( aligned( 32 ) ) );
    uint8_t * ucRAMBuffer = ucNetworkPackets;
 80138a4:	4b15      	ldr	r3, [pc, #84]	@ (80138fc <vNetworkInterfaceAllocateRAMToBuffers+0x60>)
 80138a6:	60fb      	str	r3, [r7, #12]
    uint32_t ul;

    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 80138a8:	2300      	movs	r3, #0
 80138aa:	60bb      	str	r3, [r7, #8]
 80138ac:	e01c      	b.n	80138e8 <vNetworkInterfaceAllocateRAMToBuffers+0x4c>
    {
        pxNetworkBuffers[ ul ].pucEthernetBuffer = ucRAMBuffer + ipBUFFER_PADDING;
 80138ae:	68ba      	ldr	r2, [r7, #8]
 80138b0:	4613      	mov	r3, r2
 80138b2:	00db      	lsls	r3, r3, #3
 80138b4:	4413      	add	r3, r2
 80138b6:	009b      	lsls	r3, r3, #2
 80138b8:	461a      	mov	r2, r3
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	4413      	add	r3, r2
 80138be:	68fa      	ldr	r2, [r7, #12]
 80138c0:	320a      	adds	r2, #10
 80138c2:	619a      	str	r2, [r3, #24]
        *( ( unsigned * ) ucRAMBuffer ) = ( unsigned ) ( &( pxNetworkBuffers[ ul ] ) );
 80138c4:	68ba      	ldr	r2, [r7, #8]
 80138c6:	4613      	mov	r3, r2
 80138c8:	00db      	lsls	r3, r3, #3
 80138ca:	4413      	add	r3, r2
 80138cc:	009b      	lsls	r3, r3, #2
 80138ce:	461a      	mov	r2, r3
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	4413      	add	r3, r2
 80138d4:	461a      	mov	r2, r3
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	601a      	str	r2, [r3, #0]
        ucRAMBuffer += ETH_MAX_PACKET_SIZE;
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 80138e0:	60fb      	str	r3, [r7, #12]
    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 80138e2:	68bb      	ldr	r3, [r7, #8]
 80138e4:	3301      	adds	r3, #1
 80138e6:	60bb      	str	r3, [r7, #8]
 80138e8:	68bb      	ldr	r3, [r7, #8]
 80138ea:	2b3b      	cmp	r3, #59	@ 0x3b
 80138ec:	d9df      	bls.n	80138ae <vNetworkInterfaceAllocateRAMToBuffers+0x12>
    }
}
 80138ee:	bf00      	nop
 80138f0:	bf00      	nop
 80138f2:	3714      	adds	r7, #20
 80138f4:	46bd      	mov	sp, r7
 80138f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fa:	4770      	bx	lr
 80138fc:	2000d520 	.word	0x2000d520

08013900 <prvEMACHandlerTask>:
///*-----------------------------------------------------------*/
//
static void prvEMACHandlerTask( void * pvParameters )
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b086      	sub	sp, #24
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
    UBaseType_t uxCurrentCount;
    BaseType_t xResult;
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100UL );
 8013908:	2364      	movs	r3, #100	@ 0x64
 801390a:	613b      	str	r3, [r7, #16]
    /* Remove compiler warnings about unused parameters. */
    ( void ) pvParameters;

    for( ; ; )
    {
        xResult = 0;
 801390c:	2300      	movs	r3, #0
 801390e:	617b      	str	r3, [r7, #20]
        #if ( ipconfigHAS_PRINTF != 0 )
            {
                /* Call a function that monitors resources: the amount of free network
                 * buffers and the amount of free space on the heap.  See FreeRTOS_IP.c
                 * for more detailed comments. */
                vPrintResourceStats();
 8013910:	f7fa f898 	bl	800da44 <vPrintResourceStats>
            }
        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

        if( xTXDescriptorSemaphore != NULL )
 8013914:	4b27      	ldr	r3, [pc, #156]	@ (80139b4 <prvEMACHandlerTask+0xb4>)
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d00d      	beq.n	8013938 <prvEMACHandlerTask+0x38>
        {
            static UBaseType_t uxLowestSemCount = ( UBaseType_t ) ETH_TXBUFNB - 1;

            uxCurrentCount = uxSemaphoreGetCount( xTXDescriptorSemaphore );
 801391c:	4b25      	ldr	r3, [pc, #148]	@ (80139b4 <prvEMACHandlerTask+0xb4>)
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	4618      	mov	r0, r3
 8013922:	f7f5 f9f3 	bl	8008d0c <uxQueueMessagesWaiting>
 8013926:	60f8      	str	r0, [r7, #12]

            if( uxLowestSemCount > uxCurrentCount )
 8013928:	4b23      	ldr	r3, [pc, #140]	@ (80139b8 <prvEMACHandlerTask+0xb8>)
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	68fa      	ldr	r2, [r7, #12]
 801392e:	429a      	cmp	r2, r3
 8013930:	d202      	bcs.n	8013938 <prvEMACHandlerTask+0x38>
            {
                uxLowestSemCount = uxCurrentCount;
 8013932:	4a21      	ldr	r2, [pc, #132]	@ (80139b8 <prvEMACHandlerTask+0xb8>)
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	6013      	str	r3, [r2, #0]
                FreeRTOS_printf( ( "TX DMA buffers: lowest %lu\n", uxLowestSemCount ) );
            }
        }

        if( ( ulISREvents & EMAC_IF_ALL_EVENT ) == 0 )
 8013938:	4b20      	ldr	r3, [pc, #128]	@ (80139bc <prvEMACHandlerTask+0xbc>)
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	f003 0307 	and.w	r3, r3, #7
 8013940:	2b00      	cmp	r3, #0
 8013942:	d103      	bne.n	801394c <prvEMACHandlerTask+0x4c>
        {
            /* No events to process now, wait for the next. */
            ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 8013944:	6939      	ldr	r1, [r7, #16]
 8013946:	2000      	movs	r0, #0
 8013948:	f7f6 fd2a 	bl	800a3a0 <ulTaskNotifyTake>
        }

        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0 )
 801394c:	4b1b      	ldr	r3, [pc, #108]	@ (80139bc <prvEMACHandlerTask+0xbc>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	f003 0301 	and.w	r3, r3, #1
 8013954:	2b00      	cmp	r3, #0
 8013956:	d008      	beq.n	801396a <prvEMACHandlerTask+0x6a>
        {
            ulISREvents &= ~EMAC_IF_RX_EVENT;
 8013958:	4b18      	ldr	r3, [pc, #96]	@ (80139bc <prvEMACHandlerTask+0xbc>)
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	f023 0301 	bic.w	r3, r3, #1
 8013960:	4a16      	ldr	r2, [pc, #88]	@ (80139bc <prvEMACHandlerTask+0xbc>)
 8013962:	6013      	str	r3, [r2, #0]

            xResult = prvNetworkInterfaceInput();
 8013964:	f7ff fe26 	bl	80135b4 <prvNetworkInterfaceInput>
 8013968:	6178      	str	r0, [r7, #20]
        }

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0 )
 801396a:	4b14      	ldr	r3, [pc, #80]	@ (80139bc <prvEMACHandlerTask+0xbc>)
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	f003 0302 	and.w	r3, r3, #2
 8013972:	2b00      	cmp	r3, #0
 8013974:	d007      	beq.n	8013986 <prvEMACHandlerTask+0x86>
        {
            /* Code to release TX buffers if zero-copy is used. */
            ulISREvents &= ~EMAC_IF_TX_EVENT;
 8013976:	4b11      	ldr	r3, [pc, #68]	@ (80139bc <prvEMACHandlerTask+0xbc>)
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	f023 0302 	bic.w	r3, r3, #2
 801397e:	4a0f      	ldr	r2, [pc, #60]	@ (80139bc <prvEMACHandlerTask+0xbc>)
 8013980:	6013      	str	r3, [r2, #0]
            /* Check if DMA packets have been delivered. */
            vClearTXBuffers();
 8013982:	f7ff fbf3 	bl	801316c <vClearTXBuffers>
        }

        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0 )
 8013986:	4b0d      	ldr	r3, [pc, #52]	@ (80139bc <prvEMACHandlerTask+0xbc>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	f003 0304 	and.w	r3, r3, #4
 801398e:	2b00      	cmp	r3, #0
 8013990:	d005      	beq.n	801399e <prvEMACHandlerTask+0x9e>
        {
            /* Future extension: logging about errors that occurred. */
            ulISREvents &= ~EMAC_IF_ERR_EVENT;
 8013992:	4b0a      	ldr	r3, [pc, #40]	@ (80139bc <prvEMACHandlerTask+0xbc>)
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	f023 0304 	bic.w	r3, r3, #4
 801399a:	4a08      	ldr	r2, [pc, #32]	@ (80139bc <prvEMACHandlerTask+0xbc>)
 801399c:	6013      	str	r3, [r2, #0]
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != 0 )
 801399e:	6979      	ldr	r1, [r7, #20]
 80139a0:	4807      	ldr	r0, [pc, #28]	@ (80139c0 <prvEMACHandlerTask+0xc0>)
 80139a2:	f000 fbd1 	bl	8014148 <xPhyCheckLinkStatus>
 80139a6:	4603      	mov	r3, r0
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d0af      	beq.n	801390c <prvEMACHandlerTask+0xc>
        {
            /* Something has changed to a Link Status, need re-check. */
            prvEthernetUpdateConfig( pdFALSE );
 80139ac:	2000      	movs	r0, #0
 80139ae:	f7ff ff03 	bl	80137b8 <prvEthernetUpdateConfig>
        xResult = 0;
 80139b2:	e7ab      	b.n	801390c <prvEMACHandlerTask+0xc>
 80139b4:	2000a45c 	.word	0x2000a45c
 80139b8:	200000a0 	.word	0x200000a0
 80139bc:	2000a3d0 	.word	0x2000a3d0
 80139c0:	2000a3d4 	.word	0x2000a3d4

080139c4 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 80139c4:	b480      	push	{r7}
 80139c6:	b085      	sub	sp, #20
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    switch( ulPhyID )
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	4a08      	ldr	r2, [pc, #32]	@ (80139f0 <xHas_1F_PHYSPCS+0x2c>)
 80139d0:	4293      	cmp	r3, r2
 80139d2:	d002      	beq.n	80139da <xHas_1F_PHYSPCS+0x16>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 80139d4:	2301      	movs	r3, #1
 80139d6:	60fb      	str	r3, [r7, #12]
            break;
 80139d8:	e002      	b.n	80139e0 <xHas_1F_PHYSPCS+0x1c>

        case PHY_ID_DP83848I:
            xResult = pdFALSE;
 80139da:	2300      	movs	r3, #0
 80139dc:	60fb      	str	r3, [r7, #12]
            break;
 80139de:	bf00      	nop
    }

    return xResult;
 80139e0:	68fb      	ldr	r3, [r7, #12]
}
 80139e2:	4618      	mov	r0, r3
 80139e4:	3714      	adds	r7, #20
 80139e6:	46bd      	mov	sp, r7
 80139e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ec:	4770      	bx	lr
 80139ee:	bf00      	nop
 80139f0:	20005c90 	.word	0x20005c90

080139f4 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 80139f4:	b480      	push	{r7}
 80139f6:	b085      	sub	sp, #20
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    switch( ulPhyID )
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	4a0a      	ldr	r2, [pc, #40]	@ (8013a28 <xHas_19_PHYCR+0x34>)
 8013a00:	4293      	cmp	r3, r2
 8013a02:	d003      	beq.n	8013a0c <xHas_19_PHYCR+0x18>
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	4a09      	ldr	r2, [pc, #36]	@ (8013a2c <xHas_19_PHYCR+0x38>)
 8013a08:	4293      	cmp	r3, r2
 8013a0a:	d102      	bne.n	8013a12 <xHas_19_PHYCR+0x1e>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
            xResult = pdTRUE;
 8013a0c:	2301      	movs	r3, #1
 8013a0e:	60fb      	str	r3, [r7, #12]
            break;
 8013a10:	e002      	b.n	8013a18 <xHas_19_PHYCR+0x24>

        default:
            /* Most PHY's do not have a 19_PHYCR */
            xResult = pdFALSE;
 8013a12:	2300      	movs	r3, #0
 8013a14:	60fb      	str	r3, [r7, #12]
            break;
 8013a16:	bf00      	nop
    }

    return xResult;
 8013a18:	68fb      	ldr	r3, [r7, #12]
}
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	3714      	adds	r7, #20
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a24:	4770      	bx	lr
 8013a26:	bf00      	nop
 8013a28:	0007c130 	.word	0x0007c130
 8013a2c:	20005c90 	.word	0x20005c90

08013a30 <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b084      	sub	sp, #16
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	60f8      	str	r0, [r7, #12]
 8013a38:	60b9      	str	r1, [r7, #8]
 8013a3a:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 8013a3c:	2240      	movs	r2, #64	@ 0x40
 8013a3e:	2100      	movs	r1, #0
 8013a40:	68f8      	ldr	r0, [r7, #12]
 8013a42:	f002 f902 	bl	8015c4a <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	68ba      	ldr	r2, [r7, #8]
 8013a4a:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	687a      	ldr	r2, [r7, #4]
 8013a50:	605a      	str	r2, [r3, #4]
}
 8013a52:	bf00      	nop
 8013a54:	3710      	adds	r7, #16
 8013a56:	46bd      	mov	sp, r7
 8013a58:	bd80      	pop	{r7, pc}

08013a5a <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 8013a5a:	b580      	push	{r7, lr}
 8013a5c:	b086      	sub	sp, #24
 8013a5e:	af00      	add	r7, sp, #0
 8013a60:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	2200      	movs	r2, #0
 8013a66:	629a      	str	r2, [r3, #40]	@ 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8013a68:	2300      	movs	r3, #0
 8013a6a:	617b      	str	r3, [r7, #20]
 8013a6c:	e038      	b.n	8013ae0 <xPhyDiscover+0x86>
    {
        uint32_t ulLowerID;

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	f107 020c 	add.w	r2, r7, #12
 8013a76:	2103      	movs	r1, #3
 8013a78:	6978      	ldr	r0, [r7, #20]
 8013a7a:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013a82:	4293      	cmp	r3, r2
 8013a84:	d029      	beq.n	8013ada <xPhyDiscover+0x80>
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d026      	beq.n	8013ada <xPhyDiscover+0x80>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	f107 0208 	add.w	r2, r7, #8
 8013a94:	2102      	movs	r1, #2
 8013a96:	6978      	ldr	r0, [r7, #20]
 8013a98:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0 );
 8013a9a:	68bb      	ldr	r3, [r7, #8]
 8013a9c:	041a      	lsls	r2, r3, #16
 8013a9e:	68f9      	ldr	r1, [r7, #12]
 8013aa0:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8013aa4:	400b      	ands	r3, r1
 8013aa6:	4313      	orrs	r3, r2
 8013aa8:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = xPhyAddress;
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013aae:	697a      	ldr	r2, [r7, #20]
 8013ab0:	b2d1      	uxtb	r1, r2
 8013ab2:	687a      	ldr	r2, [r7, #4]
 8013ab4:	4413      	add	r3, r2
 8013ab6:	460a      	mov	r2, r1
 8013ab8:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	3202      	adds	r2, #2
 8013ac2:	6939      	ldr	r1, [r7, #16]
 8013ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013acc:	1c5a      	adds	r2, r3, #1
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	629a      	str	r2, [r3, #40]	@ 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ad6:	2b04      	cmp	r3, #4
 8013ad8:	d005      	beq.n	8013ae6 <xPhyDiscover+0x8c>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8013ada:	697b      	ldr	r3, [r7, #20]
 8013adc:	3301      	adds	r3, #1
 8013ade:	617b      	str	r3, [r7, #20]
 8013ae0:	697b      	ldr	r3, [r7, #20]
 8013ae2:	2b1f      	cmp	r3, #31
 8013ae4:	ddc3      	ble.n	8013a6e <xPhyDiscover+0x14>
    if( pxPhyObject->xPortCount > 0 )
    {
        FreeRTOS_printf( ( "PHY ID %lX\n", pxPhyObject->ulPhyIDs[ 0 ] ) );
    }

    return pxPhyObject->xPortCount;
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8013aea:	4618      	mov	r0, r3
 8013aec:	3718      	adds	r7, #24
 8013aee:	46bd      	mov	sp, r7
 8013af0:	bd80      	pop	{r7, pc}

08013af2 <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 8013af2:	b580      	push	{r7, lr}
 8013af4:	b08c      	sub	sp, #48	@ 0x30
 8013af6:	af00      	add	r7, sp, #0
 8013af8:	6078      	str	r0, [r7, #4]
 8013afa:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0UL;
 8013afc:	2300      	movs	r3, #0
 8013afe:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8013b00:	2300      	movs	r3, #0
 8013b02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013b04:	e017      	b.n	8013b36 <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8013b06:	687a      	ldr	r2, [r7, #4]
 8013b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b0a:	4413      	add	r3, r2
 8013b0c:	3318      	adds	r3, #24
 8013b0e:	781b      	ldrb	r3, [r3, #0]
 8013b10:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	f107 0218 	add.w	r2, r7, #24
 8013b1a:	2100      	movs	r1, #0
 8013b1c:	69f8      	ldr	r0, [r7, #28]
 8013b1e:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	685b      	ldr	r3, [r3, #4]
 8013b24:	69ba      	ldr	r2, [r7, #24]
 8013b26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8013b2a:	2100      	movs	r1, #0
 8013b2c:	69f8      	ldr	r0, [r7, #28]
 8013b2e:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8013b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b32:	3301      	adds	r3, #1
 8013b34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013b3c:	429a      	cmp	r2, r3
 8013b3e:	dbe2      	blt.n	8013b06 <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8013b40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013b44:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 8013b46:	f107 030c 	add.w	r3, r7, #12
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f7f6 f8de 	bl	8009d0c <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8013b50:	2300      	movs	r3, #0
 8013b52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013b54:	e01b      	b.n	8013b8e <xPhyReset+0x9c>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8013b56:	687a      	ldr	r2, [r7, #4]
 8013b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b5a:	4413      	add	r3, r2
 8013b5c:	3318      	adds	r3, #24
 8013b5e:	781b      	ldrb	r3, [r3, #0]
 8013b60:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	f107 0218 	add.w	r2, r7, #24
 8013b6a:	2100      	movs	r1, #0
 8013b6c:	6a38      	ldr	r0, [r7, #32]
 8013b6e:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8013b70:	69bb      	ldr	r3, [r7, #24]
 8013b72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d106      	bne.n	8013b88 <xPhyReset+0x96>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
                ulDoneMask |= ( 1UL << xPhyIndex );
 8013b7a:	2201      	movs	r2, #1
 8013b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8013b82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013b84:	4313      	orrs	r3, r2
 8013b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8013b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b8a:	3301      	adds	r3, #1
 8013b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013b94:	429a      	cmp	r2, r3
 8013b96:	dbde      	blt.n	8013b56 <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 8013b98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013b9a:	683b      	ldr	r3, [r7, #0]
 8013b9c:	429a      	cmp	r2, r3
 8013b9e:	d00e      	beq.n	8013bbe <xPhyReset+0xcc>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8013ba0:	f107 0214 	add.w	r2, r7, #20
 8013ba4:	f107 030c 	add.w	r3, r7, #12
 8013ba8:	4611      	mov	r1, r2
 8013baa:	4618      	mov	r0, r3
 8013bac:	f7f6 f8ee 	bl	8009d8c <xTaskCheckForTimeOut>
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d105      	bne.n	8013bc2 <xPhyReset+0xd0>
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02lX )\n", ulDoneMask ) );
            break;
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8013bb6:	2032      	movs	r0, #50	@ 0x32
 8013bb8:	f7f5 fcc4 	bl	8009544 <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8013bbc:	e7c8      	b.n	8013b50 <xPhyReset+0x5e>
            break;
 8013bbe:	bf00      	nop
 8013bc0:	e000      	b.n	8013bc4 <xPhyReset+0xd2>
            break;
 8013bc2:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013bc8:	e01f      	b.n	8013c0a <xPhyReset+0x118>
    {
        if( ( ulDoneMask & ( 1UL << xPhyIndex ) ) == 0UL )
 8013bca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bce:	fa22 f303 	lsr.w	r3, r2, r3
 8013bd2:	f003 0301 	and.w	r3, r3, #1
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d114      	bne.n	8013c04 <xPhyReset+0x112>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8013bda:	687a      	ldr	r2, [r7, #4]
 8013bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bde:	4413      	add	r3, r2
 8013be0:	3318      	adds	r3, #24
 8013be2:	781b      	ldrb	r3, [r3, #0]
 8013be4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	f107 0218 	add.w	r2, r7, #24
 8013bee:	2100      	movs	r1, #0
 8013bf0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013bf2:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	685b      	ldr	r3, [r3, #4]
 8013bf8:	69ba      	ldr	r2, [r7, #24]
 8013bfa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8013bfe:	2100      	movs	r1, #0
 8013c00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013c02:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8013c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c06:	3301      	adds	r3, #1
 8013c08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013c10:	429a      	cmp	r2, r3
 8013c12:	dbda      	blt.n	8013bca <xPhyReset+0xd8>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8013c14:	2032      	movs	r0, #50	@ 0x32
 8013c16:	f7f5 fc95 	bl	8009544 <vTaskDelay>

    return ulDoneMask;
 8013c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	3730      	adds	r7, #48	@ 0x30
 8013c20:	46bd      	mov	sp, r7
 8013c22:	bd80      	pop	{r7, pc}

08013c24 <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b088      	sub	sp, #32
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
 8013c2c:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	dc02      	bgt.n	8013c3c <xPhyConfigure+0x18>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
        return -1;
 8013c36:	f04f 33ff 	mov.w	r3, #4294967295
 8013c3a:	e0e7      	b.n	8013e0c <xPhyConfigure+0x1e8>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	781b      	ldrb	r3, [r3, #0]
 8013c40:	2b03      	cmp	r3, #3
 8013c42:	d107      	bne.n	8013c54 <xPhyConfigure+0x30>
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	789b      	ldrb	r3, [r3, #2]
 8013c48:	2b03      	cmp	r3, #3
 8013c4a:	d103      	bne.n	8013c54 <xPhyConfigure+0x30>
    {
        ulAdvertise = phyADVERTISE_ALL;
 8013c4c:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8013c50:	61fb      	str	r3, [r7, #28]
 8013c52:	e044      	b.n	8013cde <xPhyConfigure+0xba>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 8013c54:	2301      	movs	r3, #1
 8013c56:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 8013c58:	683b      	ldr	r3, [r7, #0]
 8013c5a:	781b      	ldrb	r3, [r3, #0]
 8013c5c:	2b03      	cmp	r3, #3
 8013c5e:	d10d      	bne.n	8013c7c <xPhyConfigure+0x58>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8013c60:	683b      	ldr	r3, [r7, #0]
 8013c62:	789b      	ldrb	r3, [r3, #2]
 8013c64:	2b02      	cmp	r3, #2
 8013c66:	d104      	bne.n	8013c72 <xPhyConfigure+0x4e>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 8013c68:	69fb      	ldr	r3, [r7, #28]
 8013c6a:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8013c6e:	61fb      	str	r3, [r7, #28]
 8013c70:	e035      	b.n	8013cde <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 8013c72:	69fb      	ldr	r3, [r7, #28]
 8013c74:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8013c78:	61fb      	str	r3, [r7, #28]
 8013c7a:	e030      	b.n	8013cde <xPhyConfigure+0xba>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 8013c7c:	683b      	ldr	r3, [r7, #0]
 8013c7e:	789b      	ldrb	r3, [r3, #2]
 8013c80:	2b03      	cmp	r3, #3
 8013c82:	d10d      	bne.n	8013ca0 <xPhyConfigure+0x7c>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	781b      	ldrb	r3, [r3, #0]
 8013c88:	2b01      	cmp	r3, #1
 8013c8a:	d104      	bne.n	8013c96 <xPhyConfigure+0x72>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 8013c8c:	69fb      	ldr	r3, [r7, #28]
 8013c8e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8013c92:	61fb      	str	r3, [r7, #28]
 8013c94:	e023      	b.n	8013cde <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 8013c96:	69fb      	ldr	r3, [r7, #28]
 8013c98:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8013c9c:	61fb      	str	r3, [r7, #28]
 8013c9e:	e01e      	b.n	8013cde <xPhyConfigure+0xba>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 8013ca0:	683b      	ldr	r3, [r7, #0]
 8013ca2:	781b      	ldrb	r3, [r3, #0]
 8013ca4:	2b02      	cmp	r3, #2
 8013ca6:	d10d      	bne.n	8013cc4 <xPhyConfigure+0xa0>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8013ca8:	683b      	ldr	r3, [r7, #0]
 8013caa:	789b      	ldrb	r3, [r3, #2]
 8013cac:	2b02      	cmp	r3, #2
 8013cae:	d104      	bne.n	8013cba <xPhyConfigure+0x96>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 8013cb0:	69fb      	ldr	r3, [r7, #28]
 8013cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013cb6:	61fb      	str	r3, [r7, #28]
 8013cb8:	e011      	b.n	8013cde <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 8013cba:	69fb      	ldr	r3, [r7, #28]
 8013cbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013cc0:	61fb      	str	r3, [r7, #28]
 8013cc2:	e00c      	b.n	8013cde <xPhyConfigure+0xba>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8013cc4:	683b      	ldr	r3, [r7, #0]
 8013cc6:	789b      	ldrb	r3, [r3, #2]
 8013cc8:	2b02      	cmp	r3, #2
 8013cca:	d104      	bne.n	8013cd6 <xPhyConfigure+0xb2>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 8013ccc:	69fb      	ldr	r3, [r7, #28]
 8013cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013cd2:	61fb      	str	r3, [r7, #28]
 8013cd4:	e003      	b.n	8013cde <xPhyConfigure+0xba>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 8013cd6:	69fb      	ldr	r3, [r7, #28]
 8013cd8:	f043 0320 	orr.w	r3, r3, #32
 8013cdc:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ce2:	2201      	movs	r2, #1
 8013ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8013ce8:	3b01      	subs	r3, #1
 8013cea:	4619      	mov	r1, r3
 8013cec:	6878      	ldr	r0, [r7, #4]
 8013cee:	f7ff ff00 	bl	8013af2 <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	61bb      	str	r3, [r7, #24]
 8013cf6:	e07a      	b.n	8013dee <xPhyConfigure+0x1ca>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8013cf8:	687a      	ldr	r2, [r7, #4]
 8013cfa:	69bb      	ldr	r3, [r7, #24]
 8013cfc:	4413      	add	r3, r2
 8013cfe:	3318      	adds	r3, #24
 8013d00:	781b      	ldrb	r3, [r3, #0]
 8013d02:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	69ba      	ldr	r2, [r7, #24]
 8013d08:	3202      	adds	r2, #2
 8013d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d0e:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	685b      	ldr	r3, [r3, #4]
 8013d14:	69fa      	ldr	r2, [r7, #28]
 8013d16:	2104      	movs	r1, #4
 8013d18:	6978      	ldr	r0, [r7, #20]
 8013d1a:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	f107 020c 	add.w	r2, r7, #12
 8013d24:	2100      	movs	r1, #0
 8013d26:	6978      	ldr	r0, [r7, #20]
 8013d28:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	f423 5304 	bic.w	r3, r3, #8448	@ 0x2100
 8013d30:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8013d38:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	781b      	ldrb	r3, [r3, #0]
 8013d3e:	2b02      	cmp	r3, #2
 8013d40:	d003      	beq.n	8013d4a <xPhyConfigure+0x126>
 8013d42:	683b      	ldr	r3, [r7, #0]
 8013d44:	781b      	ldrb	r3, [r3, #0]
 8013d46:	2b03      	cmp	r3, #3
 8013d48:	d104      	bne.n	8013d54 <xPhyConfigure+0x130>
        {
            ulConfig |= phyBMCR_SPEED_100;
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013d50:	60fb      	str	r3, [r7, #12]
 8013d52:	e007      	b.n	8013d64 <xPhyConfigure+0x140>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	781b      	ldrb	r3, [r3, #0]
 8013d58:	2b01      	cmp	r3, #1
 8013d5a:	d103      	bne.n	8013d64 <xPhyConfigure+0x140>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013d62:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	789b      	ldrb	r3, [r3, #2]
 8013d68:	2b02      	cmp	r3, #2
 8013d6a:	d003      	beq.n	8013d74 <xPhyConfigure+0x150>
 8013d6c:	683b      	ldr	r3, [r7, #0]
 8013d6e:	789b      	ldrb	r3, [r3, #2]
 8013d70:	2b03      	cmp	r3, #3
 8013d72:	d104      	bne.n	8013d7e <xPhyConfigure+0x15a>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013d7a:	60fb      	str	r3, [r7, #12]
 8013d7c:	e007      	b.n	8013d8e <xPhyConfigure+0x16a>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 8013d7e:	683b      	ldr	r3, [r7, #0]
 8013d80:	789b      	ldrb	r3, [r3, #2]
 8013d82:	2b01      	cmp	r3, #1
 8013d84:	d103      	bne.n	8013d8e <xPhyConfigure+0x16a>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013d8c:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 8013d8e:	6938      	ldr	r0, [r7, #16]
 8013d90:	f7ff fe30 	bl	80139f4 <xHas_19_PHYCR>
 8013d94:	4603      	mov	r3, r0
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d026      	beq.n	8013de8 <xPhyConfigure+0x1c4>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	f107 0208 	add.w	r2, r7, #8
 8013da2:	2119      	movs	r1, #25
 8013da4:	6978      	ldr	r0, [r7, #20]
 8013da6:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 8013da8:	68bb      	ldr	r3, [r7, #8]
 8013daa:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8013dae:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8013db0:	683b      	ldr	r3, [r7, #0]
 8013db2:	785b      	ldrb	r3, [r3, #1]
 8013db4:	2b03      	cmp	r3, #3
 8013db6:	d104      	bne.n	8013dc2 <xPhyConfigure+0x19e>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8013dbe:	60bb      	str	r3, [r7, #8]
 8013dc0:	e00c      	b.n	8013ddc <xPhyConfigure+0x1b8>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 8013dc2:	683b      	ldr	r3, [r7, #0]
 8013dc4:	785b      	ldrb	r3, [r3, #1]
 8013dc6:	2b02      	cmp	r3, #2
 8013dc8:	d104      	bne.n	8013dd4 <xPhyConfigure+0x1b0>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 8013dca:	68bb      	ldr	r3, [r7, #8]
 8013dcc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8013dd0:	60bb      	str	r3, [r7, #8]
 8013dd2:	e003      	b.n	8013ddc <xPhyConfigure+0x1b8>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 8013dd4:	68bb      	ldr	r3, [r7, #8]
 8013dd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8013dda:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	685b      	ldr	r3, [r3, #4]
 8013de0:	68ba      	ldr	r2, [r7, #8]
 8013de2:	2119      	movs	r1, #25
 8013de4:	6978      	ldr	r0, [r7, #20]
 8013de6:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8013de8:	69bb      	ldr	r3, [r7, #24]
 8013dea:	3301      	adds	r3, #1
 8013dec:	61bb      	str	r3, [r7, #24]
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013df2:	69ba      	ldr	r2, [r7, #24]
 8013df4:	429a      	cmp	r2, r3
 8013df6:	f6ff af7f 	blt.w	8013cf8 <xPhyConfigure+0xd4>

        FreeRTOS_printf( ( "+TCP: advertise: %04lX config %04lX\n", ulAdvertise, ulConfig ) );
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	62da      	str	r2, [r3, #44]	@ 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	69fa      	ldr	r2, [r7, #28]
 8013e08:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8013e0a:	2300      	movs	r3, #0
}
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	3720      	adds	r7, #32
 8013e10:	46bd      	mov	sp, r7
 8013e12:	bd80      	pop	{r7, pc}

08013e14 <xPhyFixedValue>:
 * The caller has set the values in 'xPhyPreferences' (ucDuplex and ucSpeed).
 * The PHY register phyREG_00_BMCR will be set for every connected PHY that matches
 * with ulPhyMask. */
BaseType_t xPhyFixedValue( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b086      	sub	sp, #24
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
 8013e1c:	6039      	str	r1, [r7, #0]
    BaseType_t xPhyIndex;
    uint32_t ulValue, ulBitMask = ( uint32_t ) 1U;
 8013e1e:	2301      	movs	r3, #1
 8013e20:	60fb      	str	r3, [r7, #12]

    ulValue = ( uint32_t ) 0U;
 8013e22:	2300      	movs	r3, #0
 8013e24:	613b      	str	r3, [r7, #16]

    if( pxPhyObject->xPhyPreferences.ucDuplex == PHY_DUPLEX_FULL )
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8013e2c:	2b02      	cmp	r3, #2
 8013e2e:	d103      	bne.n	8013e38 <xPhyFixedValue+0x24>
    {
        ulValue |= phyBMCR_FULL_DUPLEX;
 8013e30:	693b      	ldr	r3, [r7, #16]
 8013e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013e36:	613b      	str	r3, [r7, #16]
    }

    if( pxPhyObject->xPhyPreferences.ucSpeed == PHY_SPEED_100 )
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013e3e:	2b02      	cmp	r3, #2
 8013e40:	d103      	bne.n	8013e4a <xPhyFixedValue+0x36>
    {
        ulValue |= phyBMCR_SPEED_100;
 8013e42:	693b      	ldr	r3, [r7, #16]
 8013e44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013e48:	613b      	str	r3, [r7, #16]
    }

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	617b      	str	r3, [r7, #20]
 8013e4e:	e016      	b.n	8013e7e <xPhyFixedValue+0x6a>
    {
        if( ( ulPhyMask & ulBitMask ) != 0lu )
 8013e50:	683a      	ldr	r2, [r7, #0]
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	4013      	ands	r3, r2
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d00b      	beq.n	8013e72 <xPhyFixedValue+0x5e>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8013e5a:	687a      	ldr	r2, [r7, #4]
 8013e5c:	697b      	ldr	r3, [r7, #20]
 8013e5e:	4413      	add	r3, r2
 8013e60:	3318      	adds	r3, #24
 8013e62:	781b      	ldrb	r3, [r3, #0]
 8013e64:	60bb      	str	r3, [r7, #8]

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulValue );
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	685b      	ldr	r3, [r3, #4]
 8013e6a:	693a      	ldr	r2, [r7, #16]
 8013e6c:	2100      	movs	r1, #0
 8013e6e:	68b8      	ldr	r0, [r7, #8]
 8013e70:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8013e72:	697b      	ldr	r3, [r7, #20]
 8013e74:	3301      	adds	r3, #1
 8013e76:	617b      	str	r3, [r7, #20]
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	005b      	lsls	r3, r3, #1
 8013e7c:	60fb      	str	r3, [r7, #12]
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e82:	697a      	ldr	r2, [r7, #20]
 8013e84:	429a      	cmp	r2, r3
 8013e86:	dbe3      	blt.n	8013e50 <xPhyFixedValue+0x3c>
        }
    }

    return 0;
 8013e88:	2300      	movs	r3, #0
}
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	3718      	adds	r7, #24
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	bd80      	pop	{r7, pc}
	...

08013e94 <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b090      	sub	sp, #64	@ 0x40
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
 8013e9c:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulPHYLinkStatus, ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 8013e9e:	683b      	ldr	r3, [r7, #0]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d101      	bne.n	8013ea8 <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 8013ea4:	2300      	movs	r3, #0
 8013ea6:	e148      	b.n	801413a <xPhyStartAutoNegotiation+0x2a6>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013eac:	e020      	b.n	8013ef0 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 8013eae:	683a      	ldr	r2, [r7, #0]
 8013eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8013eb6:	f003 0301 	and.w	r3, r3, #1
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d015      	beq.n	8013eea <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8013ebe:	687a      	ldr	r2, [r7, #4]
 8013ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ec2:	4413      	add	r3, r2
 8013ec4:	3318      	adds	r3, #24
 8013ec6:	781b      	ldrb	r3, [r3, #0]
 8013ec8:	623b      	str	r3, [r7, #32]

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	685b      	ldr	r3, [r3, #4]
 8013ece:	687a      	ldr	r2, [r7, #4]
 8013ed0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8013ed2:	2104      	movs	r1, #4
 8013ed4:	6a38      	ldr	r0, [r7, #32]
 8013ed6:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	685b      	ldr	r3, [r3, #4]
 8013edc:	687a      	ldr	r2, [r7, #4]
 8013ede:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8013ee0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8013ee4:	2100      	movs	r1, #0
 8013ee6:	6a38      	ldr	r0, [r7, #32]
 8013ee8:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8013eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013eec:	3301      	adds	r3, #1
 8013eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ef4:	461a      	mov	r2, r3
 8013ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ef8:	4293      	cmp	r3, r2
 8013efa:	d3d8      	bcc.n	8013eae <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 8013efc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8013f00:	61bb      	str	r3, [r7, #24]
    vTaskSetTimeOutState( &xTimer );
 8013f02:	f107 0310 	add.w	r3, r7, #16
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7f5 ff00 	bl	8009d0c <vTaskSetTimeOutState>
    ulDoneMask = 0;
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 8013f10:	2301      	movs	r3, #1
 8013f12:	637b      	str	r3, [r7, #52]	@ 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8013f14:	2300      	movs	r3, #0
 8013f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013f18:	e025      	b.n	8013f66 <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 8013f1a:	683a      	ldr	r2, [r7, #0]
 8013f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f1e:	4013      	ands	r3, r2
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d01a      	beq.n	8013f5a <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 8013f24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f28:	4013      	ands	r3, r2
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d115      	bne.n	8013f5a <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8013f2e:	687a      	ldr	r2, [r7, #4]
 8013f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f32:	4413      	add	r3, r2
 8013f34:	3318      	adds	r3, #24
 8013f36:	781b      	ldrb	r3, [r3, #0]
 8013f38:	627b      	str	r3, [r7, #36]	@ 0x24

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	f107 021c 	add.w	r2, r7, #28
 8013f42:	2101      	movs	r1, #1
 8013f44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013f46:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 8013f48:	69fb      	ldr	r3, [r7, #28]
 8013f4a:	f003 0320 	and.w	r3, r3, #32
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d003      	beq.n	8013f5a <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 8013f52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f56:	4313      	orrs	r3, r2
 8013f58:	63bb      	str	r3, [r7, #56]	@ 0x38
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8013f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f5c:	3301      	adds	r3, #1
 8013f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f62:	005b      	lsls	r3, r3, #1
 8013f64:	637b      	str	r3, [r7, #52]	@ 0x34
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f6a:	461a      	mov	r2, r3
 8013f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f6e:	4293      	cmp	r3, r2
 8013f70:	d3d3      	bcc.n	8013f1a <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 8013f72:	683a      	ldr	r2, [r7, #0]
 8013f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f76:	429a      	cmp	r2, r3
 8013f78:	d00e      	beq.n	8013f98 <xPhyStartAutoNegotiation+0x104>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8013f7a:	f107 0218 	add.w	r2, r7, #24
 8013f7e:	f107 0310 	add.w	r3, r7, #16
 8013f82:	4611      	mov	r1, r2
 8013f84:	4618      	mov	r0, r3
 8013f86:	f7f5 ff01 	bl	8009d8c <xTaskCheckForTimeOut>
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d105      	bne.n	8013f9c <xPhyStartAutoNegotiation+0x108>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMCR_RESET timed out ( done 0x%02lX )\n", ulDoneMask ) );
            break;
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8013f90:	2032      	movs	r0, #50	@ 0x32
 8013f92:	f7f5 fad7 	bl	8009544 <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 8013f96:	e7bb      	b.n	8013f10 <xPhyStartAutoNegotiation+0x7c>
            break;
 8013f98:	bf00      	nop
 8013f9a:	e000      	b.n	8013f9e <xPhyStartAutoNegotiation+0x10a>
            break;
 8013f9c:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 8013f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	f000 80c9 	beq.w	8014138 <xPhyStartAutoNegotiation+0x2a4>
    {
        ulBitMask = ( uint32_t ) 1U;
 8013fa6:	2301      	movs	r3, #1
 8013fa8:	637b      	str	r3, [r7, #52]	@ 0x34
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fb0:	43db      	mvns	r3, r3
 8013fb2:	401a      	ands	r2, r3
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	635a      	str	r2, [r3, #52]	@ 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8013fb8:	2300      	movs	r3, #0
 8013fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013fbc:	e0b5      	b.n	801412a <xPhyStartAutoNegotiation+0x296>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8013fbe:	687a      	ldr	r2, [r7, #4]
 8013fc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013fc2:	4413      	add	r3, r2
 8013fc4:	3318      	adds	r3, #24
 8013fc6:	781b      	ldrb	r3, [r3, #0]
 8013fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013fce:	3202      	adds	r2, #2
 8013fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fd4:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 8013fd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013fda:	4013      	ands	r3, r2
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	f000 809d 	beq.w	801411c <xPhyStartAutoNegotiation+0x288>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	685b      	ldr	r3, [r3, #4]
 8013fe6:	687a      	ldr	r2, [r7, #4]
 8013fe8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8013fea:	2100      	movs	r1, #0
 8013fec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013fee:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	f107 021c 	add.w	r2, r7, #28
 8013ff8:	2101      	movs	r1, #1
 8013ffa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013ffc:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0 )
 8013ffe:	69fb      	ldr	r3, [r7, #28]
 8014000:	f003 0304 	and.w	r3, r3, #4
 8014004:	2b00      	cmp	r3, #0
 8014006:	d00a      	beq.n	801401e <xPhyStartAutoNegotiation+0x18a>
            {
                ulPHYLinkStatus |= phyBMSR_LINK_STATUS;
 8014008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801400a:	f043 0304 	orr.w	r3, r3, #4
 801400e:	633b      	str	r3, [r7, #48]	@ 0x30
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014016:	431a      	orrs	r2, r3
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	635a      	str	r2, [r3, #52]	@ 0x34
 801401c:	e003      	b.n	8014026 <xPhyStartAutoNegotiation+0x192>
            }
            else
            {
                ulPHYLinkStatus &= ~( phyBMSR_LINK_STATUS );
 801401e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014020:	f023 0304 	bic.w	r3, r3, #4
 8014024:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 8014026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014028:	4a46      	ldr	r2, [pc, #280]	@ (8014144 <xPhyStartAutoNegotiation+0x2b0>)
 801402a:	4293      	cmp	r3, r2
 801402c:	d130      	bne.n	8014090 <xPhyStartAutoNegotiation+0x1fc>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	f107 020c 	add.w	r2, r7, #12
 8014036:	211e      	movs	r1, #30
 8014038:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801403a:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	f003 0307 	and.w	r3, r3, #7
 8014042:	3b01      	subs	r3, #1
 8014044:	2b05      	cmp	r3, #5
 8014046:	d814      	bhi.n	8014072 <xPhyStartAutoNegotiation+0x1de>
 8014048:	a201      	add	r2, pc, #4	@ (adr r2, 8014050 <xPhyStartAutoNegotiation+0x1bc>)
 801404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801404e:	bf00      	nop
 8014050:	08014069 	.word	0x08014069
 8014054:	08014073 	.word	0x08014073
 8014058:	08014073 	.word	0x08014073
 801405c:	08014073 	.word	0x08014073
 8014060:	08014069 	.word	0x08014069
 8014064:	08014073 	.word	0x08014073
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8014068:	69fb      	ldr	r3, [r7, #28]
 801406a:	f043 0302 	orr.w	r3, r3, #2
 801406e:	61fb      	str	r3, [r7, #28]
                        break;
 8014070:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	f003 0307 	and.w	r3, r3, #7
 8014078:	2b02      	cmp	r3, #2
 801407a:	d801      	bhi.n	8014080 <xPhyStartAutoNegotiation+0x1ec>
 801407c:	2b00      	cmp	r3, #0

                    case 0x01:
                    case 0x02:
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
 801407e:	e030      	b.n	80140e2 <xPhyStartAutoNegotiation+0x24e>
 8014080:	3b05      	subs	r3, #5
                switch( ulControlStatus & 0x07 )
 8014082:	2b01      	cmp	r3, #1
 8014084:	d82d      	bhi.n	80140e2 <xPhyStartAutoNegotiation+0x24e>
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8014086:	69fb      	ldr	r3, [r7, #28]
 8014088:	f043 0304 	orr.w	r3, r3, #4
 801408c:	61fb      	str	r3, [r7, #28]
                        break;
 801408e:	e028      	b.n	80140e2 <xPhyStartAutoNegotiation+0x24e>
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 8014090:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014092:	f7ff fc97 	bl	80139c4 <xHas_1F_PHYSPCS>
 8014096:	4603      	mov	r3, r0
 8014098:	2b00      	cmp	r3, #0
 801409a:	d01b      	beq.n	80140d4 <xPhyStartAutoNegotiation+0x240>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	f107 0208 	add.w	r2, r7, #8
 80140a4:	211f      	movs	r1, #31
 80140a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80140a8:	4798      	blx	r3
                ulRegValue = 0;
 80140aa:	2300      	movs	r3, #0
 80140ac:	61fb      	str	r3, [r7, #28]

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	f003 0310 	and.w	r3, r3, #16
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d003      	beq.n	80140c0 <xPhyStartAutoNegotiation+0x22c>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 80140b8:	69fb      	ldr	r3, [r7, #28]
 80140ba:	f043 0304 	orr.w	r3, r3, #4
 80140be:	61fb      	str	r3, [r7, #28]
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 80140c0:	68bb      	ldr	r3, [r7, #8]
 80140c2:	f003 030c 	and.w	r3, r3, #12
 80140c6:	2b04      	cmp	r3, #4
 80140c8:	d10b      	bne.n	80140e2 <xPhyStartAutoNegotiation+0x24e>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 80140ca:	69fb      	ldr	r3, [r7, #28]
 80140cc:	f043 0302 	orr.w	r3, r3, #2
 80140d0:	61fb      	str	r3, [r7, #28]
 80140d2:	e006      	b.n	80140e2 <xPhyStartAutoNegotiation+0x24e>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	f107 021c 	add.w	r2, r7, #28
 80140dc:	2110      	movs	r1, #16
 80140de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80140e0:	4798      	blx	r3
                               ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( ulPHYLinkStatus |= phyBMSR_LINK_STATUS ) != 0 ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 80140e2:	69fb      	ldr	r3, [r7, #28]
 80140e4:	f003 0304 	and.w	r3, r3, #4
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d004      	beq.n	80140f6 <xPhyStartAutoNegotiation+0x262>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	2202      	movs	r2, #2
 80140f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80140f4:	e003      	b.n	80140fe <xPhyStartAutoNegotiation+0x26a>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	2201      	movs	r2, #1
 80140fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 80140fe:	69fb      	ldr	r3, [r7, #28]
 8014100:	f003 0302 	and.w	r3, r3, #2
 8014104:	2b00      	cmp	r3, #0
 8014106:	d004      	beq.n	8014112 <xPhyStartAutoNegotiation+0x27e>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	2201      	movs	r2, #1
 801410c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8014110:	e005      	b.n	801411e <xPhyStartAutoNegotiation+0x28a>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	2202      	movs	r2, #2
 8014116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801411a:	e000      	b.n	801411e <xPhyStartAutoNegotiation+0x28a>
                continue;
 801411c:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801411e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014120:	3301      	adds	r3, #1
 8014122:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014126:	005b      	lsls	r3, r3, #1
 8014128:	637b      	str	r3, [r7, #52]	@ 0x34
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801412e:	461a      	mov	r2, r3
 8014130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014132:	4293      	cmp	r3, r2
 8014134:	f4ff af43 	bcc.w	8013fbe <xPhyStartAutoNegotiation+0x12a>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 8014138:	2300      	movs	r3, #0
}
 801413a:	4618      	mov	r0, r3
 801413c:	3740      	adds	r7, #64	@ 0x40
 801413e:	46bd      	mov	sp, r7
 8014140:	bd80      	pop	{r7, pc}
 8014142:	bf00      	nop
 8014144:	00221560 	.word	0x00221560

08014148 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b088      	sub	sp, #32
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
 8014150:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 8014152:	2301      	movs	r3, #1
 8014154:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 8014156:	2300      	movs	r3, #0
 8014158:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 801415a:	683b      	ldr	r3, [r7, #0]
 801415c:	2b00      	cmp	r3, #0
 801415e:	dd25      	ble.n	80141ac <xPhyCheckLinkStatus+0x64>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	331c      	adds	r3, #28
 8014164:	4618      	mov	r0, r3
 8014166:	f7f5 fdd1 	bl	8009d0c <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8014170:	625a      	str	r2, [r3, #36]	@ 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8014172:	2300      	movs	r3, #0
 8014174:	61bb      	str	r3, [r7, #24]
 8014176:	e013      	b.n	80141a0 <xPhyCheckLinkStatus+0x58>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801417c:	69fb      	ldr	r3, [r7, #28]
 801417e:	4013      	ands	r3, r2
 8014180:	2b00      	cmp	r3, #0
 8014182:	d107      	bne.n	8014194 <xPhyCheckLinkStatus+0x4c>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014188:	69fb      	ldr	r3, [r7, #28]
 801418a:	431a      	orrs	r2, r3
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	635a      	str	r2, [r3, #52]	@ 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
                xNeedCheck = pdTRUE;
 8014190:	2301      	movs	r3, #1
 8014192:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8014194:	69bb      	ldr	r3, [r7, #24]
 8014196:	3301      	adds	r3, #1
 8014198:	61bb      	str	r3, [r7, #24]
 801419a:	69fb      	ldr	r3, [r7, #28]
 801419c:	005b      	lsls	r3, r3, #1
 801419e:	61fb      	str	r3, [r7, #28]
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80141a4:	69ba      	ldr	r2, [r7, #24]
 80141a6:	429a      	cmp	r2, r3
 80141a8:	dbe6      	blt.n	8014178 <xPhyCheckLinkStatus+0x30>
 80141aa:	e068      	b.n	801427e <xPhyCheckLinkStatus+0x136>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	f103 021c 	add.w	r2, r3, #28
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	3324      	adds	r3, #36	@ 0x24
 80141b6:	4619      	mov	r1, r3
 80141b8:	4610      	mov	r0, r2
 80141ba:	f7f5 fde7 	bl	8009d8c <xTaskCheckForTimeOut>
 80141be:	4603      	mov	r3, r0
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d05c      	beq.n	801427e <xPhyCheckLinkStatus+0x136>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80141c4:	2300      	movs	r3, #0
 80141c6:	61bb      	str	r3, [r7, #24]
 80141c8:	e03f      	b.n	801424a <xPhyCheckLinkStatus+0x102>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80141ca:	687a      	ldr	r2, [r7, #4]
 80141cc:	69bb      	ldr	r3, [r7, #24]
 80141ce:	4413      	add	r3, r2
 80141d0:	3318      	adds	r3, #24
 80141d2:	781b      	ldrb	r3, [r3, #0]
 80141d4:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	f107 020c 	add.w	r2, r7, #12
 80141de:	2101      	movs	r1, #1
 80141e0:	6938      	ldr	r0, [r7, #16]
 80141e2:	4798      	blx	r3
 80141e4:	4603      	mov	r3, r0
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d129      	bne.n	801423e <xPhyCheckLinkStatus+0xf6>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80141ee:	69fb      	ldr	r3, [r7, #28]
 80141f0:	4013      	ands	r3, r2
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	bf14      	ite	ne
 80141f6:	2301      	movne	r3, #1
 80141f8:	2300      	moveq	r3, #0
 80141fa:	b2da      	uxtb	r2, r3
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	f003 0304 	and.w	r3, r3, #4
 8014202:	2b00      	cmp	r3, #0
 8014204:	bf14      	ite	ne
 8014206:	2301      	movne	r3, #1
 8014208:	2300      	moveq	r3, #0
 801420a:	b2db      	uxtb	r3, r3
 801420c:	4053      	eors	r3, r2
 801420e:	b2db      	uxtb	r3, r3
 8014210:	2b00      	cmp	r3, #0
 8014212:	d014      	beq.n	801423e <xPhyCheckLinkStatus+0xf6>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 8014214:	68fb      	ldr	r3, [r7, #12]
 8014216:	f003 0304 	and.w	r3, r3, #4
 801421a:	2b00      	cmp	r3, #0
 801421c:	d006      	beq.n	801422c <xPhyCheckLinkStatus+0xe4>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014222:	69fb      	ldr	r3, [r7, #28]
 8014224:	431a      	orrs	r2, r3
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	635a      	str	r2, [r3, #52]	@ 0x34
 801422a:	e006      	b.n	801423a <xPhyCheckLinkStatus+0xf2>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014230:	69fb      	ldr	r3, [r7, #28]
 8014232:	43db      	mvns	r3, r3
 8014234:	401a      	ands	r2, r3
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	635a      	str	r2, [r3, #52]	@ 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02lX\n", pxPhyObject->ulLinkStatusMask ) );
                    xNeedCheck = pdTRUE;
 801423a:	2301      	movs	r3, #1
 801423c:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801423e:	69bb      	ldr	r3, [r7, #24]
 8014240:	3301      	adds	r3, #1
 8014242:	61bb      	str	r3, [r7, #24]
 8014244:	69fb      	ldr	r3, [r7, #28]
 8014246:	005b      	lsls	r3, r3, #1
 8014248:	61fb      	str	r3, [r7, #28]
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801424e:	69ba      	ldr	r2, [r7, #24]
 8014250:	429a      	cmp	r2, r3
 8014252:	dbba      	blt.n	80141ca <xPhyCheckLinkStatus+0x82>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	331c      	adds	r3, #28
 8014258:	4618      	mov	r0, r3
 801425a:	f7f5 fd57 	bl	8009d0c <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014262:	69fb      	ldr	r3, [r7, #28]
 8014264:	085b      	lsrs	r3, r3, #1
 8014266:	4013      	ands	r3, r2
 8014268:	2b00      	cmp	r3, #0
 801426a:	d004      	beq.n	8014276 <xPhyCheckLinkStatus+0x12e>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8014272:	625a      	str	r2, [r3, #36]	@ 0x24
 8014274:	e003      	b.n	801427e <xPhyCheckLinkStatus+0x136>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801427c:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return xNeedCheck;
 801427e:	697b      	ldr	r3, [r7, #20]
}
 8014280:	4618      	mov	r0, r3
 8014282:	3720      	adds	r7, #32
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}

08014288 <bIsValidNetworkDescriptor>:
    }
    /*-----------------------------------------------------------*/

#else /* if ( ipconfigTCP_IP_SANITY != 0 ) */
    static UBaseType_t bIsValidNetworkDescriptor( const NetworkBufferDescriptor_t * pxDesc )
    {
 8014288:	b480      	push	{r7}
 801428a:	b083      	sub	sp, #12
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
        ( void ) pxDesc;
        return ( UBaseType_t ) pdTRUE;
 8014290:	2301      	movs	r3, #1
    }
 8014292:	4618      	mov	r0, r3
 8014294:	370c      	adds	r7, #12
 8014296:	46bd      	mov	sp, r7
 8014298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429c:	4770      	bx	lr

0801429e <prvShowWarnings>:
    /*-----------------------------------------------------------*/

    static void prvShowWarnings( void )
    {
 801429e:	b480      	push	{r7}
 80142a0:	af00      	add	r7, sp, #0
    }
 80142a2:	bf00      	nop
 80142a4:	46bd      	mov	sp, r7
 80142a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142aa:	4770      	bx	lr

080142ac <xNetworkBuffersInitialise>:
    /*-----------------------------------------------------------*/

#endif /* ipconfigTCP_IP_SANITY */

BaseType_t xNetworkBuffersInitialise( void )
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b084      	sub	sp, #16
 80142b0:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 80142b2:	4b33      	ldr	r3, [pc, #204]	@ (8014380 <xNetworkBuffersInitialise+0xd4>)
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d153      	bne.n	8014362 <xNetworkBuffersInitialise+0xb6>
    {
        /* In case alternative locking is used, the mutexes can be initialised
         * here */
        ipconfigBUFFER_ALLOC_INIT();

        xNetworkBufferSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 80142ba:	213c      	movs	r1, #60	@ 0x3c
 80142bc:	203c      	movs	r0, #60	@ 0x3c
 80142be:	f7f4 f93e 	bl	800853e <xQueueCreateCountingSemaphore>
 80142c2:	4603      	mov	r3, r0
 80142c4:	4a2e      	ldr	r2, [pc, #184]	@ (8014380 <xNetworkBuffersInitialise+0xd4>)
 80142c6:	6013      	str	r3, [r2, #0]
        configASSERT( xNetworkBufferSemaphore != NULL );
 80142c8:	4b2d      	ldr	r3, [pc, #180]	@ (8014380 <xNetworkBuffersInitialise+0xd4>)
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d10d      	bne.n	80142ec <xNetworkBuffersInitialise+0x40>
	__asm volatile
 80142d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142d4:	b672      	cpsid	i
 80142d6:	f383 8811 	msr	BASEPRI, r3
 80142da:	f3bf 8f6f 	isb	sy
 80142de:	f3bf 8f4f 	dsb	sy
 80142e2:	b662      	cpsie	i
 80142e4:	607b      	str	r3, [r7, #4]
}
 80142e6:	bf00      	nop
 80142e8:	bf00      	nop
 80142ea:	e7fd      	b.n	80142e8 <xNetworkBuffersInitialise+0x3c>

        if( xNetworkBufferSemaphore != NULL )
 80142ec:	4b24      	ldr	r3, [pc, #144]	@ (8014380 <xNetworkBuffersInitialise+0xd4>)
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d036      	beq.n	8014362 <xNetworkBuffersInitialise+0xb6>
        {
            vListInitialise( &xFreeBuffersList );
 80142f4:	4823      	ldr	r0, [pc, #140]	@ (8014384 <xNetworkBuffersInitialise+0xd8>)
 80142f6:	f7f3 ff14 	bl	8008122 <vListInitialise>

            /* Initialise all the network buffers.  The buffer storage comes
             * from the network interface, and different hardware has different
             * requirements. */
            vNetworkInterfaceAllocateRAMToBuffers( xNetworkBuffers );
 80142fa:	4823      	ldr	r0, [pc, #140]	@ (8014388 <xNetworkBuffersInitialise+0xdc>)
 80142fc:	f7ff face 	bl	801389c <vNetworkInterfaceAllocateRAMToBuffers>

            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8014300:	2300      	movs	r3, #0
 8014302:	60bb      	str	r3, [r7, #8]
 8014304:	e027      	b.n	8014356 <xNetworkBuffersInitialise+0xaa>
            {
                /* Initialise and set the owner of the buffer list items. */
                vListInitialiseItem( &( xNetworkBuffers[ x ].xBufferListItem ) );
 8014306:	68ba      	ldr	r2, [r7, #8]
 8014308:	4613      	mov	r3, r2
 801430a:	00db      	lsls	r3, r3, #3
 801430c:	4413      	add	r3, r2
 801430e:	009b      	lsls	r3, r3, #2
 8014310:	4a1d      	ldr	r2, [pc, #116]	@ (8014388 <xNetworkBuffersInitialise+0xdc>)
 8014312:	4413      	add	r3, r2
 8014314:	4618      	mov	r0, r3
 8014316:	f7f3 ff24 	bl	8008162 <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBuffers[ x ].xBufferListItem ), &xNetworkBuffers[ x ] );
 801431a:	68ba      	ldr	r2, [r7, #8]
 801431c:	4613      	mov	r3, r2
 801431e:	00db      	lsls	r3, r3, #3
 8014320:	4413      	add	r3, r2
 8014322:	009b      	lsls	r3, r3, #2
 8014324:	4a18      	ldr	r2, [pc, #96]	@ (8014388 <xNetworkBuffersInitialise+0xdc>)
 8014326:	1899      	adds	r1, r3, r2
 8014328:	4817      	ldr	r0, [pc, #92]	@ (8014388 <xNetworkBuffersInitialise+0xdc>)
 801432a:	68ba      	ldr	r2, [r7, #8]
 801432c:	4613      	mov	r3, r2
 801432e:	00db      	lsls	r3, r3, #3
 8014330:	4413      	add	r3, r2
 8014332:	009b      	lsls	r3, r3, #2
 8014334:	4403      	add	r3, r0
 8014336:	330c      	adds	r3, #12
 8014338:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBuffers[ x ].xBufferListItem ) );
 801433a:	68ba      	ldr	r2, [r7, #8]
 801433c:	4613      	mov	r3, r2
 801433e:	00db      	lsls	r3, r3, #3
 8014340:	4413      	add	r3, r2
 8014342:	009b      	lsls	r3, r3, #2
 8014344:	4a10      	ldr	r2, [pc, #64]	@ (8014388 <xNetworkBuffersInitialise+0xdc>)
 8014346:	4413      	add	r3, r2
 8014348:	4619      	mov	r1, r3
 801434a:	480e      	ldr	r0, [pc, #56]	@ (8014384 <xNetworkBuffersInitialise+0xd8>)
 801434c:	f7f3 ff3a 	bl	80081c4 <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8014350:	68bb      	ldr	r3, [r7, #8]
 8014352:	3301      	adds	r3, #1
 8014354:	60bb      	str	r3, [r7, #8]
 8014356:	68bb      	ldr	r3, [r7, #8]
 8014358:	2b3b      	cmp	r3, #59	@ 0x3b
 801435a:	d9d4      	bls.n	8014306 <xNetworkBuffersInitialise+0x5a>
            }

            uxMinimumFreeNetworkBuffers = ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 801435c:	4b0b      	ldr	r3, [pc, #44]	@ (801438c <xNetworkBuffersInitialise+0xe0>)
 801435e:	223c      	movs	r2, #60	@ 0x3c
 8014360:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 8014362:	4b07      	ldr	r3, [pc, #28]	@ (8014380 <xNetworkBuffersInitialise+0xd4>)
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d102      	bne.n	8014370 <xNetworkBuffersInitialise+0xc4>
    {
        xReturn = pdFAIL;
 801436a:	2300      	movs	r3, #0
 801436c:	60fb      	str	r3, [r7, #12]
 801436e:	e001      	b.n	8014374 <xNetworkBuffersInitialise+0xc8>
    }
    else
    {
        xReturn = pdPASS;
 8014370:	2301      	movs	r3, #1
 8014372:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8014374:	68fb      	ldr	r3, [r7, #12]
}
 8014376:	4618      	mov	r0, r3
 8014378:	3710      	adds	r7, #16
 801437a:	46bd      	mov	sp, r7
 801437c:	bd80      	pop	{r7, pc}
 801437e:	bf00      	nop
 8014380:	200242d8 	.word	0x200242d8
 8014384:	20023a50 	.word	0x20023a50
 8014388:	20023a68 	.word	0x20023a68
 801438c:	20023a64 	.word	0x20023a64

08014390 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b086      	sub	sp, #24
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
 8014398:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 801439a:	2300      	movs	r3, #0
 801439c:	617b      	str	r3, [r7, #20]
    BaseType_t xInvalid = pdFALSE;
 801439e:	2300      	movs	r3, #0
 80143a0:	613b      	str	r3, [r7, #16]

    /* The current implementation only has a single size memory block, so
     * the requested size parameter is not used (yet). */
    ( void ) xRequestedSizeBytes;

    if( xNetworkBufferSemaphore != NULL )
 80143a2:	4b20      	ldr	r3, [pc, #128]	@ (8014424 <pxGetNetworkBufferWithDescriptor+0x94>)
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d036      	beq.n	8014418 <pxGetNetworkBufferWithDescriptor+0x88>
    {
        /* If there is a semaphore available, there is a network buffer
         * available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 80143aa:	4b1e      	ldr	r3, [pc, #120]	@ (8014424 <pxGetNetworkBufferWithDescriptor+0x94>)
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	6839      	ldr	r1, [r7, #0]
 80143b0:	4618      	mov	r0, r3
 80143b2:	f7f4 fb93 	bl	8008adc <xQueueSemaphoreTake>
 80143b6:	4603      	mov	r3, r0
 80143b8:	2b01      	cmp	r3, #1
 80143ba:	d12d      	bne.n	8014418 <pxGetNetworkBufferWithDescriptor+0x88>
        {
            /* Protect the structure as it is accessed from tasks and
             * interrupts. */
            ipconfigBUFFER_ALLOC_LOCK();
 80143bc:	f7f6 fdc6 	bl	800af4c <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 80143c0:	4b19      	ldr	r3, [pc, #100]	@ (8014428 <pxGetNetworkBufferWithDescriptor+0x98>)
 80143c2:	68db      	ldr	r3, [r3, #12]
 80143c4:	68db      	ldr	r3, [r3, #12]
 80143c6:	617b      	str	r3, [r7, #20]

                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 80143c8:	6978      	ldr	r0, [r7, #20]
 80143ca:	f7ff ff5d 	bl	8014288 <bIsValidNetworkDescriptor>
 80143ce:	4603      	mov	r3, r0
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d009      	beq.n	80143e8 <pxGetNetworkBufferWithDescriptor+0x58>
                    listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxReturn->xBufferListItem ) ) )
 80143d4:	697b      	ldr	r3, [r7, #20]
 80143d6:	691b      	ldr	r3, [r3, #16]
                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 80143d8:	4a13      	ldr	r2, [pc, #76]	@ (8014428 <pxGetNetworkBufferWithDescriptor+0x98>)
 80143da:	4293      	cmp	r3, r2
 80143dc:	d104      	bne.n	80143e8 <pxGetNetworkBufferWithDescriptor+0x58>
                {
                    ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 80143de:	697b      	ldr	r3, [r7, #20]
 80143e0:	4618      	mov	r0, r3
 80143e2:	f7f3 ff28 	bl	8008236 <uxListRemove>
 80143e6:	e001      	b.n	80143ec <pxGetNetworkBufferWithDescriptor+0x5c>
                }
                else
                {
                    xInvalid = pdTRUE;
 80143e8:	2301      	movs	r3, #1
 80143ea:	613b      	str	r3, [r7, #16]
                }
            }
            ipconfigBUFFER_ALLOC_UNLOCK();
 80143ec:	f7f6 fde4 	bl	800afb8 <vPortExitCritical>

            if( xInvalid == pdTRUE )
 80143f0:	693b      	ldr	r3, [r7, #16]
 80143f2:	2b01      	cmp	r3, #1
 80143f4:	d102      	bne.n	80143fc <pxGetNetworkBufferWithDescriptor+0x6c>
                /* _HT_ The function shall not be called from an ISR. Comment
                 * was indeed misleading. Hopefully clear now?
                 * So the printf()is OK here. */
                FreeRTOS_debug_printf( ( "pxGetNetworkBufferWithDescriptor: INVALID BUFFER: %p (valid %lu)\n",
                                         pxReturn, bIsValidNetworkDescriptor( pxReturn ) ) );
                pxReturn = NULL;
 80143f6:	2300      	movs	r3, #0
 80143f8:	617b      	str	r3, [r7, #20]
 80143fa:	e00d      	b.n	8014418 <pxGetNetworkBufferWithDescriptor+0x88>
            }
            else
            {
                /* Reading UBaseType_t, no critical section needed. */
                uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 80143fc:	4b0a      	ldr	r3, [pc, #40]	@ (8014428 <pxGetNetworkBufferWithDescriptor+0x98>)
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	60fb      	str	r3, [r7, #12]

                /* For stats, latch the lowest number of network buffers since
                 * booting. */
                if( uxMinimumFreeNetworkBuffers > uxCount )
 8014402:	4b0a      	ldr	r3, [pc, #40]	@ (801442c <pxGetNetworkBufferWithDescriptor+0x9c>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	68fa      	ldr	r2, [r7, #12]
 8014408:	429a      	cmp	r2, r3
 801440a:	d202      	bcs.n	8014412 <pxGetNetworkBufferWithDescriptor+0x82>
                {
                    uxMinimumFreeNetworkBuffers = uxCount;
 801440c:	4a07      	ldr	r2, [pc, #28]	@ (801442c <pxGetNetworkBufferWithDescriptor+0x9c>)
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	6013      	str	r3, [r2, #0]
                }

                pxReturn->xDataLength = xRequestedSizeBytes;
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	687a      	ldr	r2, [r7, #4]
 8014416:	61da      	str	r2, [r3, #28]
            /* lint wants to see at least a comment. */
            iptraceFAILED_TO_OBTAIN_NETWORK_BUFFER();
        }
    }

    return pxReturn;
 8014418:	697b      	ldr	r3, [r7, #20]
}
 801441a:	4618      	mov	r0, r3
 801441c:	3718      	adds	r7, #24
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}
 8014422:	bf00      	nop
 8014424:	200242d8 	.word	0x200242d8
 8014428:	20023a50 	.word	0x20023a50
 801442c:	20023a64 	.word	0x20023a64

08014430 <vReleaseNetworkBufferAndDescriptor>:
    return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b084      	sub	sp, #16
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
    BaseType_t xListItemAlreadyInFreeList;

    if( bIsValidNetworkDescriptor( pxNetworkBuffer ) == pdFALSE_UNSIGNED )
 8014438:	6878      	ldr	r0, [r7, #4]
 801443a:	f7ff ff25 	bl	8014288 <bIsValidNetworkDescriptor>
 801443e:	4603      	mov	r3, r0
 8014440:	2b00      	cmp	r3, #0
 8014442:	d020      	beq.n	8014486 <vReleaseNetworkBufferAndDescriptor+0x56>
    }
    else
    {
        /* Ensure the buffer is returned to the list of free buffers before the
         * counting semaphore is 'given' to say a buffer is available. */
        ipconfigBUFFER_ALLOC_LOCK();
 8014444:	f7f6 fd82 	bl	800af4c <vPortEnterCritical>
        {
            {
                xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	691b      	ldr	r3, [r3, #16]
 801444c:	4a10      	ldr	r2, [pc, #64]	@ (8014490 <vReleaseNetworkBufferAndDescriptor+0x60>)
 801444e:	4293      	cmp	r3, r2
 8014450:	d101      	bne.n	8014456 <vReleaseNetworkBufferAndDescriptor+0x26>
 8014452:	2301      	movs	r3, #1
 8014454:	e000      	b.n	8014458 <vReleaseNetworkBufferAndDescriptor+0x28>
 8014456:	2300      	movs	r3, #0
 8014458:	60fb      	str	r3, [r7, #12]

                if( xListItemAlreadyInFreeList == pdFALSE )
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d104      	bne.n	801446a <vReleaseNetworkBufferAndDescriptor+0x3a>
                {
                    vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	4619      	mov	r1, r3
 8014464:	480a      	ldr	r0, [pc, #40]	@ (8014490 <vReleaseNetworkBufferAndDescriptor+0x60>)
 8014466:	f7f3 fe89 	bl	800817c <vListInsertEnd>
                }
            }
        }
        ipconfigBUFFER_ALLOC_UNLOCK();
 801446a:	f7f6 fda5 	bl	800afb8 <vPortExitCritical>

        if( xListItemAlreadyInFreeList )
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d108      	bne.n	8014486 <vReleaseNetworkBufferAndDescriptor+0x56>
            FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: %p ALREADY RELEASED (now %lu)\n",
                                     pxNetworkBuffer, uxGetNumberOfFreeNetworkBuffers() ) );
        }
        else
        {
            ( void ) xSemaphoreGive( xNetworkBufferSemaphore );
 8014474:	4b07      	ldr	r3, [pc, #28]	@ (8014494 <vReleaseNetworkBufferAndDescriptor+0x64>)
 8014476:	6818      	ldr	r0, [r3, #0]
 8014478:	2300      	movs	r3, #0
 801447a:	2200      	movs	r2, #0
 801447c:	2100      	movs	r1, #0
 801447e:	f7f4 f897 	bl	80085b0 <xQueueGenericSend>
            prvShowWarnings();
 8014482:	f7ff ff0c 	bl	801429e <prvShowWarnings>
        }

        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 8014486:	bf00      	nop
 8014488:	3710      	adds	r7, #16
 801448a:	46bd      	mov	sp, r7
 801448c:	bd80      	pop	{r7, pc}
 801448e:	bf00      	nop
 8014490:	20023a50 	.word	0x20023a50
 8014494:	200242d8 	.word	0x200242d8

08014498 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 8014498:	b480      	push	{r7}
 801449a:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 801449c:	4b03      	ldr	r3, [pc, #12]	@ (80144ac <uxGetMinimumFreeNetworkBuffers+0x14>)
 801449e:	681b      	ldr	r3, [r3, #0]
}
 80144a0:	4618      	mov	r0, r3
 80144a2:	46bd      	mov	sp, r7
 80144a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a8:	4770      	bx	lr
 80144aa:	bf00      	nop
 80144ac:	20023a64 	.word	0x20023a64

080144b0 <uxGetNumberOfFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 80144b0:	b480      	push	{r7}
 80144b2:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 80144b4:	4b03      	ldr	r3, [pc, #12]	@ (80144c4 <uxGetNumberOfFreeNetworkBuffers+0x14>)
 80144b6:	681b      	ldr	r3, [r3, #0]
}
 80144b8:	4618      	mov	r0, r3
 80144ba:	46bd      	mov	sp, r7
 80144bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c0:	4770      	bx	lr
 80144c2:	bf00      	nop
 80144c4:	20023a50 	.word	0x20023a50

080144c8 <USBD_RNDIS_getClass>:
///
/// \param     none
///
/// \return    USBD_ClassTypeDef*
USBD_ClassTypeDef* USBD_RNDIS_getClass( void )
{
 80144c8:	b480      	push	{r7}
 80144ca:	af00      	add	r7, sp, #0
   return &USBD_RDNIS;
 80144cc:	4b02      	ldr	r3, [pc, #8]	@ (80144d8 <USBD_RNDIS_getClass+0x10>)
}
 80144ce:	4618      	mov	r0, r3
 80144d0:	46bd      	mov	sp, r7
 80144d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d6:	4770      	bx	lr
 80144d8:	20000108 	.word	0x20000108

080144dc <USBD_RNDIS_Init>:
/// \param     [in/out] USBD_HandleTypeDef *pdev
/// \param     [in]     uint8_t cfgidx (unused)
///
/// \return    init status
static uint8_t USBD_RNDIS_Init( USBD_HandleTypeDef *pdev, uint8_t cfgidx )
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b082      	sub	sp, #8
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	6078      	str	r0, [r7, #4]
 80144e4:	460b      	mov	r3, r1
 80144e6:	70fb      	strb	r3, [r7, #3]
   UNUSED(cfgidx);
   (void)rndis_state; // opress unsued compiler warning
   
   // Open Command IN EP, this is the interrupt in endpoint used for communication
   // on the control endpoints. The control endpoints are initialized not here.
   USBD_LL_OpenEP( pdev, RNDIS_NOTIFICATION_IN_EP, USBD_EP_TYPE_INTR, RNDIS_NOTIFICATION_IN_SZ );
 80144e8:	2308      	movs	r3, #8
 80144ea:	2203      	movs	r2, #3
 80144ec:	2181      	movs	r1, #129	@ 0x81
 80144ee:	6878      	ldr	r0, [r7, #4]
 80144f0:	f001 f89b 	bl	801562a <USBD_LL_OpenEP>
  
   // Open EP IN 
   USBD_LL_OpenEP( pdev, RNDIS_DATA_IN_EP, USBD_EP_TYPE_BULK, RNDIS_DATA_IN_SZ );
 80144f4:	2340      	movs	r3, #64	@ 0x40
 80144f6:	2202      	movs	r2, #2
 80144f8:	2182      	movs	r1, #130	@ 0x82
 80144fa:	6878      	ldr	r0, [r7, #4]
 80144fc:	f001 f895 	bl	801562a <USBD_LL_OpenEP>
   
   // Open EP OUT
   USBD_LL_OpenEP( pdev, RNDIS_DATA_OUT_EP, USBD_EP_TYPE_BULK, RNDIS_DATA_OUT_SZ );
 8014500:	2340      	movs	r3, #64	@ 0x40
 8014502:	2202      	movs	r2, #2
 8014504:	2103      	movs	r1, #3
 8014506:	6878      	ldr	r0, [r7, #4]
 8014508:	f001 f88f 	bl	801562a <USBD_LL_OpenEP>
   
   // Set the data receive pointer.
   rndis_rx_buffer = (char*)queue_getHeadBuffer( &usbQueue );
 801450c:	480c      	ldr	r0, [pc, #48]	@ (8014540 <USBD_RNDIS_Init+0x64>)
 801450e:	f7ed fdff 	bl	8002110 <queue_getHeadBuffer>
 8014512:	4603      	mov	r3, r0
 8014514:	4a0b      	ldr	r2, [pc, #44]	@ (8014544 <USBD_RNDIS_Init+0x68>)
 8014516:	6013      	str	r3, [r2, #0]
   
   // Prepare Out endpoint to receive next packet
   USBD_LL_PrepareReceive( pdev, RNDIS_DATA_OUT_EP, (uint8_t*)rndis_rx_buffer, QUEUEBUFFERLENGTH );
 8014518:	4b0a      	ldr	r3, [pc, #40]	@ (8014544 <USBD_RNDIS_Init+0x68>)
 801451a:	681a      	ldr	r2, [r3, #0]
 801451c:	f240 631a 	movw	r3, #1562	@ 0x61a
 8014520:	2103      	movs	r1, #3
 8014522:	6878      	ldr	r0, [r7, #4]
 8014524:	f001 f975 	bl	8015812 <USBD_LL_PrepareReceive>
   
   // set rndis state to ready
   tx.state = TX_STATE_READY;
 8014528:	4b07      	ldr	r3, [pc, #28]	@ (8014548 <USBD_RNDIS_Init+0x6c>)
 801452a:	2200      	movs	r2, #0
 801452c:	80da      	strh	r2, [r3, #6]
   
   // init the queue
   queue_init(&tcpQueue);
 801452e:	4807      	ldr	r0, [pc, #28]	@ (801454c <USBD_RNDIS_Init+0x70>)
 8014530:	f7ed fbda 	bl	8001ce8 <queue_init>

   return USBD_OK;
 8014534:	2300      	movs	r3, #0
}
 8014536:	4618      	mov	r0, r3
 8014538:	3708      	adds	r7, #8
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}
 801453e:	bf00      	nop
 8014540:	20002d7c 	.word	0x20002d7c
 8014544:	200242f0 	.word	0x200242f0
 8014548:	200000a4 	.word	0x200000a4
 801454c:	20000244 	.word	0x20000244

08014550 <USBD_RNDIS_DeInit>:
/// \param     [in/out] USBD_HandleTypeDef *pdev
/// \param     [in]     uint8_t cfgidx (unused)
///
/// \return    status
static uint8_t USBD_RNDIS_DeInit( USBD_HandleTypeDef *pdev, uint8_t cfgidx )
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b082      	sub	sp, #8
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
 8014558:	460b      	mov	r3, r1
 801455a:	70fb      	strb	r3, [r7, #3]
   // Close notification endpoint
   USBD_LL_CloseEP( pdev, RNDIS_NOTIFICATION_IN_EP );
 801455c:	2181      	movs	r1, #129	@ 0x81
 801455e:	6878      	ldr	r0, [r7, #4]
 8014560:	f001 f88e 	bl	8015680 <USBD_LL_CloseEP>
   
   // Close data in endpoint
   USBD_LL_CloseEP( pdev, RNDIS_DATA_IN_EP );
 8014564:	2182      	movs	r1, #130	@ 0x82
 8014566:	6878      	ldr	r0, [r7, #4]
 8014568:	f001 f88a 	bl	8015680 <USBD_LL_CloseEP>
   
   // close data out endpoint
   USBD_LL_CloseEP( pdev, RNDIS_DATA_OUT_EP );
 801456c:	2103      	movs	r1, #3
 801456e:	6878      	ldr	r0, [r7, #4]
 8014570:	f001 f886 	bl	8015680 <USBD_LL_CloseEP>
   
   // set transmission state to reset
   tx.state = TX_STATE_RESET;
 8014574:	4b03      	ldr	r3, [pc, #12]	@ (8014584 <USBD_RNDIS_DeInit+0x34>)
 8014576:	2205      	movs	r2, #5
 8014578:	80da      	strh	r2, [r3, #6]
   
   return USBD_OK;
 801457a:	2300      	movs	r3, #0
}
 801457c:	4618      	mov	r0, r3
 801457e:	3708      	adds	r7, #8
 8014580:	46bd      	mov	sp, r7
 8014582:	bd80      	pop	{r7, pc}
 8014584:	200000a4 	.word	0x200000a4

08014588 <USBD_RNDIS_Setup>:
/// \param     [in/out] USBD_HandleTypeDef *pdev
/// \param     [in]     uint8_t cfgidx (unused)
///
/// \return    status
static uint8_t USBD_RNDIS_Setup( USBD_HandleTypeDef  *pdev, USBD_SetupReqTypedef *req )
{
 8014588:	b580      	push	{r7, lr}
 801458a:	b082      	sub	sp, #8
 801458c:	af00      	add	r7, sp, #0
 801458e:	6078      	str	r0, [r7, #4]
 8014590:	6039      	str	r1, [r7, #0]
   switch ( req->bmRequest & USB_REQ_TYPE_MASK )
 8014592:	683b      	ldr	r3, [r7, #0]
 8014594:	781b      	ldrb	r3, [r3, #0]
 8014596:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801459a:	2b20      	cmp	r3, #32
 801459c:	d119      	bne.n	80145d2 <USBD_RNDIS_Setup+0x4a>
   {
      case USB_REQ_TYPE_CLASS :
         if (req->wLength != 0) // Is it a data setup packet?
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	88db      	ldrh	r3, [r3, #6]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d013      	beq.n	80145ce <USBD_RNDIS_Setup+0x46>
         {
            // Check if the request is Device-to-Host
            if (req->bmRequest & 0x80)
 80145a6:	683b      	ldr	r3, [r7, #0]
 80145a8:	781b      	ldrb	r3, [r3, #0]
 80145aa:	b25b      	sxtb	r3, r3
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	da07      	bge.n	80145c0 <USBD_RNDIS_Setup+0x38>
            {
               USBD_CtlSendData( pdev, encapsulated_buffer, ((rndis_generic_msg_t *)encapsulated_buffer)->MessageLength );
 80145b0:	4b0a      	ldr	r3, [pc, #40]	@ (80145dc <USBD_RNDIS_Setup+0x54>)
 80145b2:	685b      	ldr	r3, [r3, #4]
 80145b4:	461a      	mov	r2, r3
 80145b6:	4909      	ldr	r1, [pc, #36]	@ (80145dc <USBD_RNDIS_Setup+0x54>)
 80145b8:	6878      	ldr	r0, [r7, #4]
 80145ba:	f7f3 f9cc 	bl	8007956 <USBD_CtlSendData>
 80145be:	e006      	b.n	80145ce <USBD_RNDIS_Setup+0x46>
            }
            else // Host-to-Device requeset
            {
               USBD_CtlPrepareRx( pdev, encapsulated_buffer, req->wLength );          
 80145c0:	683b      	ldr	r3, [r7, #0]
 80145c2:	88db      	ldrh	r3, [r3, #6]
 80145c4:	461a      	mov	r2, r3
 80145c6:	4905      	ldr	r1, [pc, #20]	@ (80145dc <USBD_RNDIS_Setup+0x54>)
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f7f3 f9f0 	bl	80079ae <USBD_CtlPrepareRx>
            }
         }  
         return USBD_OK;
 80145ce:	2300      	movs	r3, #0
 80145d0:	e000      	b.n	80145d4 <USBD_RNDIS_Setup+0x4c>
      default:
         return USBD_OK;
 80145d2:	2300      	movs	r3, #0
   }
}
 80145d4:	4618      	mov	r0, r3
 80145d6:	3708      	adds	r7, #8
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}
 80145dc:	200242f8 	.word	0x200242f8

080145e0 <USBD_RNDIS_EP0_RxReady>:
///
/// \param     [in/out] USBD_HandleTypeDef *pdev
///
/// \return    status
static uint8_t USBD_RNDIS_EP0_RxReady( USBD_HandleTypeDef *pdev )
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b086      	sub	sp, #24
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
   switch (((rndis_generic_msg_t *)encapsulated_buffer)->MessageType)
 80145e8:	4b3f      	ldr	r3, [pc, #252]	@ (80146e8 <USBD_RNDIS_EP0_RxReady+0x108>)
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	3b02      	subs	r3, #2
 80145ee:	2b06      	cmp	r3, #6
 80145f0:	d873      	bhi.n	80146da <USBD_RNDIS_EP0_RxReady+0xfa>
 80145f2:	a201      	add	r2, pc, #4	@ (adr r2, 80145f8 <USBD_RNDIS_EP0_RxReady+0x18>)
 80145f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145f8:	08014615 	.word	0x08014615
 80145fc:	080146db 	.word	0x080146db
 8014600:	08014677 	.word	0x08014677
 8014604:	0801467f 	.word	0x0801467f
 8014608:	08014687 	.word	0x08014687
 801460c:	080146db 	.word	0x080146db
 8014610:	080146b7 	.word	0x080146b7
   {
      case REMOTE_NDIS_INITIALIZE_MSG:
         {
            rndis_initialize_cmplt_t *m;
            m = ((rndis_initialize_cmplt_t *)encapsulated_buffer);
 8014614:	4b34      	ldr	r3, [pc, #208]	@ (80146e8 <USBD_RNDIS_EP0_RxReady+0x108>)
 8014616:	60fb      	str	r3, [r7, #12]
            // m->MessageID is same as before
            m->MessageType = REMOTE_NDIS_INITIALIZE_CMPLT;
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	4a34      	ldr	r2, [pc, #208]	@ (80146ec <USBD_RNDIS_EP0_RxReady+0x10c>)
 801461c:	601a      	str	r2, [r3, #0]
            m->MessageLength = sizeof(rndis_initialize_cmplt_t);
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	2234      	movs	r2, #52	@ 0x34
 8014622:	605a      	str	r2, [r3, #4]
            m->MajorVersion = RNDIS_MAJOR_VERSION;
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	2201      	movs	r2, #1
 8014628:	611a      	str	r2, [r3, #16]
            m->MinorVersion = RNDIS_MINOR_VERSION;
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	2200      	movs	r2, #0
 801462e:	615a      	str	r2, [r3, #20]
            m->Status = RNDIS_STATUS_SUCCESS;
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	2200      	movs	r2, #0
 8014634:	60da      	str	r2, [r3, #12]
            m->DeviceFlags = RNDIS_DF_CONNECTIONLESS;
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	2201      	movs	r2, #1
 801463a:	619a      	str	r2, [r3, #24]
            m->Medium = RNDIS_MEDIUM_802_3;
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	2200      	movs	r2, #0
 8014640:	61da      	str	r2, [r3, #28]
            m->MaxPacketsPerTransfer = 1;
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	2201      	movs	r2, #1
 8014646:	621a      	str	r2, [r3, #32]
            m->MaxTransferSize = RNDIS_RX_BUFFER_SIZE;
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	f240 6216 	movw	r2, #1558	@ 0x616
 801464e:	625a      	str	r2, [r3, #36]	@ 0x24
            m->PacketAlignmentFactor = 0;
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	2200      	movs	r2, #0
 8014654:	629a      	str	r2, [r3, #40]	@ 0x28
            m->AfListOffset = 0;
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	2200      	movs	r2, #0
 801465a:	62da      	str	r2, [r3, #44]	@ 0x2c
            m->AfListSize = 0;
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	2200      	movs	r2, #0
 8014660:	631a      	str	r2, [r3, #48]	@ 0x30
            rndis_state = rndis_initialized;
 8014662:	4b23      	ldr	r3, [pc, #140]	@ (80146f0 <USBD_RNDIS_EP0_RxReady+0x110>)
 8014664:	2201      	movs	r2, #1
 8014666:	701a      	strb	r2, [r3, #0]
            USBD_LL_Transmit(&hUsbDeviceFS, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 8014668:	2308      	movs	r3, #8
 801466a:	4a22      	ldr	r2, [pc, #136]	@ (80146f4 <USBD_RNDIS_EP0_RxReady+0x114>)
 801466c:	2181      	movs	r1, #129	@ 0x81
 801466e:	4822      	ldr	r0, [pc, #136]	@ (80146f8 <USBD_RNDIS_EP0_RxReady+0x118>)
 8014670:	f001 f8ae 	bl	80157d0 <USBD_LL_Transmit>
         }
         break;
 8014674:	e032      	b.n	80146dc <USBD_RNDIS_EP0_RxReady+0xfc>
   
      case REMOTE_NDIS_QUERY_MSG:
         USBD_RNDIS_query(pdev);
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f000 fa14 	bl	8014aa4 <USBD_RNDIS_query>
         break;
 801467c:	e02e      	b.n	80146dc <USBD_RNDIS_EP0_RxReady+0xfc>
         
      case REMOTE_NDIS_SET_MSG:
         USBD_RNDIS_handleSetMsg(pdev);
 801467e:	6878      	ldr	r0, [r7, #4]
 8014680:	f000 fba6 	bl	8014dd0 <USBD_RNDIS_handleSetMsg>
         break;
 8014684:	e02a      	b.n	80146dc <USBD_RNDIS_EP0_RxReady+0xfc>
   
      case REMOTE_NDIS_RESET_MSG:
         {
            rndis_reset_cmplt_t * m;
            m = ((rndis_reset_cmplt_t *)encapsulated_buffer);
 8014686:	4b18      	ldr	r3, [pc, #96]	@ (80146e8 <USBD_RNDIS_EP0_RxReady+0x108>)
 8014688:	613b      	str	r3, [r7, #16]
            rndis_state = rndis_uninitialized;
 801468a:	4b19      	ldr	r3, [pc, #100]	@ (80146f0 <USBD_RNDIS_EP0_RxReady+0x110>)
 801468c:	2200      	movs	r2, #0
 801468e:	701a      	strb	r2, [r3, #0]
            m->MessageType = REMOTE_NDIS_RESET_CMPLT;
 8014690:	693b      	ldr	r3, [r7, #16]
 8014692:	4a1a      	ldr	r2, [pc, #104]	@ (80146fc <USBD_RNDIS_EP0_RxReady+0x11c>)
 8014694:	601a      	str	r2, [r3, #0]
            m->MessageLength = sizeof(rndis_reset_cmplt_t);
 8014696:	693b      	ldr	r3, [r7, #16]
 8014698:	2210      	movs	r2, #16
 801469a:	605a      	str	r2, [r3, #4]
            m->Status = RNDIS_STATUS_SUCCESS;
 801469c:	693b      	ldr	r3, [r7, #16]
 801469e:	2200      	movs	r2, #0
 80146a0:	609a      	str	r2, [r3, #8]
            m->AddressingReset = 1; // Make it look like we did something
 80146a2:	693b      	ldr	r3, [r7, #16]
 80146a4:	2201      	movs	r2, #1
 80146a6:	60da      	str	r2, [r3, #12]
            // m->AddressingReset = 0; - Windows halts if set to 1 for some reason
            USBD_LL_Transmit(&hUsbDeviceFS, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 80146a8:	2308      	movs	r3, #8
 80146aa:	4a12      	ldr	r2, [pc, #72]	@ (80146f4 <USBD_RNDIS_EP0_RxReady+0x114>)
 80146ac:	2181      	movs	r1, #129	@ 0x81
 80146ae:	4812      	ldr	r0, [pc, #72]	@ (80146f8 <USBD_RNDIS_EP0_RxReady+0x118>)
 80146b0:	f001 f88e 	bl	80157d0 <USBD_LL_Transmit>
         }
         break;
 80146b4:	e012      	b.n	80146dc <USBD_RNDIS_EP0_RxReady+0xfc>
   
      case REMOTE_NDIS_KEEPALIVE_MSG:
         {
            rndis_keepalive_cmplt_t * m;
            m = (rndis_keepalive_cmplt_t *)encapsulated_buffer;
 80146b6:	4b0c      	ldr	r3, [pc, #48]	@ (80146e8 <USBD_RNDIS_EP0_RxReady+0x108>)
 80146b8:	617b      	str	r3, [r7, #20]
            m->MessageType = REMOTE_NDIS_KEEPALIVE_CMPLT;
 80146ba:	697b      	ldr	r3, [r7, #20]
 80146bc:	4a10      	ldr	r2, [pc, #64]	@ (8014700 <USBD_RNDIS_EP0_RxReady+0x120>)
 80146be:	601a      	str	r2, [r3, #0]
            m->MessageLength = sizeof(rndis_keepalive_cmplt_t);
 80146c0:	697b      	ldr	r3, [r7, #20]
 80146c2:	2210      	movs	r2, #16
 80146c4:	605a      	str	r2, [r3, #4]
            m->Status = RNDIS_STATUS_SUCCESS;
 80146c6:	697b      	ldr	r3, [r7, #20]
 80146c8:	2200      	movs	r2, #0
 80146ca:	60da      	str	r2, [r3, #12]
         }
         // We have data to send back
         USBD_LL_Transmit(&hUsbDeviceFS, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 80146cc:	2308      	movs	r3, #8
 80146ce:	4a09      	ldr	r2, [pc, #36]	@ (80146f4 <USBD_RNDIS_EP0_RxReady+0x114>)
 80146d0:	2181      	movs	r1, #129	@ 0x81
 80146d2:	4809      	ldr	r0, [pc, #36]	@ (80146f8 <USBD_RNDIS_EP0_RxReady+0x118>)
 80146d4:	f001 f87c 	bl	80157d0 <USBD_LL_Transmit>
         break;
 80146d8:	e000      	b.n	80146dc <USBD_RNDIS_EP0_RxReady+0xfc>
   
      default:
         break;
 80146da:	bf00      	nop
   }
   return USBD_OK;
 80146dc:	2300      	movs	r3, #0
}
 80146de:	4618      	mov	r0, r3
 80146e0:	3718      	adds	r7, #24
 80146e2:	46bd      	mov	sp, r7
 80146e4:	bd80      	pop	{r7, pc}
 80146e6:	bf00      	nop
 80146e8:	200242f8 	.word	0x200242f8
 80146ec:	80000002 	.word	0x80000002
 80146f0:	200242f4 	.word	0x200242f4
 80146f4:	08016dfc 	.word	0x08016dfc
 80146f8:	20024380 	.word	0x20024380
 80146fc:	80000006 	.word	0x80000006
 8014700:	80000008 	.word	0x80000008

08014704 <USBD_RNDIS_DataIn>:
/// \param     [in/out] USBD_HandleTypeDef *pdev
/// \param     [in]     uint8_t epnum
///
/// \return    status
static uint8_t USBD_RNDIS_DataIn( USBD_HandleTypeDef *pdev, uint8_t epnum )
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b082      	sub	sp, #8
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
 801470c:	460b      	mov	r3, r1
 801470e:	70fb      	strb	r3, [r7, #3]
   UNUSED(pdev);
   
	epnum &= 0x0F;
 8014710:	78fb      	ldrb	r3, [r7, #3]
 8014712:	f003 030f 	and.w	r3, r3, #15
 8014716:	70fb      	strb	r3, [r7, #3]
	if( epnum == (RNDIS_DATA_IN_EP & 0x0F) )
 8014718:	78fb      	ldrb	r3, [r7, #3]
 801471a:	2b02      	cmp	r3, #2
 801471c:	d124      	bne.n	8014768 <USBD_RNDIS_DataIn+0x64>
	{
		if( tx.state == TX_STATE_SENDING_DATA )
 801471e:	4b15      	ldr	r3, [pc, #84]	@ (8014774 <USBD_RNDIS_DataIn+0x70>)
 8014720:	88db      	ldrh	r3, [r3, #6]
 8014722:	2b03      	cmp	r3, #3
 8014724:	d115      	bne.n	8014752 <USBD_RNDIS_DataIn+0x4e>
		{
			if( tx.need_padding )
 8014726:	4b13      	ldr	r3, [pc, #76]	@ (8014774 <USBD_RNDIS_DataIn+0x70>)
 8014728:	7a1b      	ldrb	r3, [r3, #8]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d00a      	beq.n	8014744 <USBD_RNDIS_DataIn+0x40>
			{
				USBD_LL_Transmit(&hUsbDeviceFS, RNDIS_DATA_IN_EP, (uint8_t *)"\0", 1);
 801472e:	2301      	movs	r3, #1
 8014730:	4a11      	ldr	r2, [pc, #68]	@ (8014778 <USBD_RNDIS_DataIn+0x74>)
 8014732:	2182      	movs	r1, #130	@ 0x82
 8014734:	4811      	ldr	r0, [pc, #68]	@ (801477c <USBD_RNDIS_DataIn+0x78>)
 8014736:	f001 f84b 	bl	80157d0 <USBD_LL_Transmit>
				tx.state = TX_STATE_SENDING_PADDING;
 801473a:	4b0e      	ldr	r3, [pc, #56]	@ (8014774 <USBD_RNDIS_DataIn+0x70>)
 801473c:	2204      	movs	r2, #4
 801473e:	80da      	strh	r2, [r3, #6]
				return USBD_OK;
 8014740:	2300      	movs	r3, #0
 8014742:	e012      	b.n	801476a <USBD_RNDIS_DataIn+0x66>
			}
			tx.state = TX_STATE_READY;
 8014744:	4b0b      	ldr	r3, [pc, #44]	@ (8014774 <USBD_RNDIS_DataIn+0x70>)
 8014746:	2200      	movs	r2, #0
 8014748:	80da      	strh	r2, [r3, #6]
         on_usbInTxCplt();
 801474a:	f000 fc27 	bl	8014f9c <on_usbInTxCplt>
			return USBD_OK;
 801474e:	2300      	movs	r3, #0
 8014750:	e00b      	b.n	801476a <USBD_RNDIS_DataIn+0x66>
		}
		
		if( tx.state == TX_STATE_SENDING_PADDING )
 8014752:	4b08      	ldr	r3, [pc, #32]	@ (8014774 <USBD_RNDIS_DataIn+0x70>)
 8014754:	88db      	ldrh	r3, [r3, #6]
 8014756:	2b04      	cmp	r3, #4
 8014758:	d106      	bne.n	8014768 <USBD_RNDIS_DataIn+0x64>
		{
			tx.state = TX_STATE_READY;
 801475a:	4b06      	ldr	r3, [pc, #24]	@ (8014774 <USBD_RNDIS_DataIn+0x70>)
 801475c:	2200      	movs	r2, #0
 801475e:	80da      	strh	r2, [r3, #6]
         on_usbInTxCplt();
 8014760:	f000 fc1c 	bl	8014f9c <on_usbInTxCplt>
			return USBD_OK;
 8014764:	2300      	movs	r3, #0
 8014766:	e000      	b.n	801476a <USBD_RNDIS_DataIn+0x66>
		}
	}
	return USBD_OK;
 8014768:	2300      	movs	r3, #0
}
 801476a:	4618      	mov	r0, r3
 801476c:	3708      	adds	r7, #8
 801476e:	46bd      	mov	sp, r7
 8014770:	bd80      	pop	{r7, pc}
 8014772:	bf00      	nop
 8014774:	200000a4 	.word	0x200000a4
 8014778:	08016e08 	.word	0x08016e08
 801477c:	20024380 	.word	0x20024380

08014780 <USBD_RNDIS_handlePacket>:
/// \param     [in]  const char *data
/// \param     [in]  uint16_t size
///
/// \return    none
static void USBD_RNDIS_handlePacket(const char *data, uint16_t size)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b084      	sub	sp, #16
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
 8014788:	460b      	mov	r3, r1
 801478a:	807b      	strh	r3, [r7, #2]
	rndis_data_packet_t *p;
	p = (rndis_data_packet_t *)data;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	60fb      	str	r3, [r7, #12]
	if (size < sizeof(rndis_data_packet_t) || size > QUEUEBUFFERLENGTH)
 8014790:	887b      	ldrh	r3, [r7, #2]
 8014792:	2b2b      	cmp	r3, #43	@ 0x2b
 8014794:	d904      	bls.n	80147a0 <USBD_RNDIS_handlePacket+0x20>
 8014796:	887b      	ldrh	r3, [r7, #2]
 8014798:	f240 621a 	movw	r2, #1562	@ 0x61a
 801479c:	4293      	cmp	r3, r2
 801479e:	d905      	bls.n	80147ac <USBD_RNDIS_handlePacket+0x2c>
   {
		usb_eth_stat.rxbad++;
 80147a0:	4b1c      	ldr	r3, [pc, #112]	@ (8014814 <USBD_RNDIS_handlePacket+0x94>)
 80147a2:	68db      	ldr	r3, [r3, #12]
 80147a4:	3301      	adds	r3, #1
 80147a6:	4a1b      	ldr	r2, [pc, #108]	@ (8014814 <USBD_RNDIS_handlePacket+0x94>)
 80147a8:	60d3      	str	r3, [r2, #12]
		return;
 80147aa:	e030      	b.n	801480e <USBD_RNDIS_handlePacket+0x8e>
   }
	if (p->MessageType != REMOTE_NDIS_PACKET_MSG)
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	2b01      	cmp	r3, #1
 80147b2:	d005      	beq.n	80147c0 <USBD_RNDIS_handlePacket+0x40>
   {
		usb_eth_stat.rxbad++;
 80147b4:	4b17      	ldr	r3, [pc, #92]	@ (8014814 <USBD_RNDIS_handlePacket+0x94>)
 80147b6:	68db      	ldr	r3, [r3, #12]
 80147b8:	3301      	adds	r3, #1
 80147ba:	4a16      	ldr	r2, [pc, #88]	@ (8014814 <USBD_RNDIS_handlePacket+0x94>)
 80147bc:	60d3      	str	r3, [r2, #12]
		return;
 80147be:	e026      	b.n	801480e <USBD_RNDIS_handlePacket+0x8e>
   }
	if (p->DataOffset + offsetof(rndis_data_packet_t, DataOffset) + p->DataLength != size)
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	689a      	ldr	r2, [r3, #8]
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	68db      	ldr	r3, [r3, #12]
 80147c8:	4413      	add	r3, r2
 80147ca:	f103 0208 	add.w	r2, r3, #8
 80147ce:	887b      	ldrh	r3, [r7, #2]
 80147d0:	429a      	cmp	r2, r3
 80147d2:	d00b      	beq.n	80147ec <USBD_RNDIS_handlePacket+0x6c>
	{
      // padding?
      if( p->MessageLength != size-1u )
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	685a      	ldr	r2, [r3, #4]
 80147d8:	887b      	ldrh	r3, [r7, #2]
 80147da:	3b01      	subs	r3, #1
 80147dc:	429a      	cmp	r2, r3
 80147de:	d005      	beq.n	80147ec <USBD_RNDIS_handlePacket+0x6c>
      {
         usb_eth_stat.rxbad++;
 80147e0:	4b0c      	ldr	r3, [pc, #48]	@ (8014814 <USBD_RNDIS_handlePacket+0x94>)
 80147e2:	68db      	ldr	r3, [r3, #12]
 80147e4:	3301      	adds	r3, #1
 80147e6:	4a0b      	ldr	r2, [pc, #44]	@ (8014814 <USBD_RNDIS_handlePacket+0x94>)
 80147e8:	60d3      	str	r3, [r2, #12]
         return;
 80147ea:	e010      	b.n	801480e <USBD_RNDIS_handlePacket+0x8e>
      }
	}
	usb_eth_stat.rxok++;
 80147ec:	4b09      	ldr	r3, [pc, #36]	@ (8014814 <USBD_RNDIS_handlePacket+0x94>)
 80147ee:	685b      	ldr	r3, [r3, #4]
 80147f0:	3301      	adds	r3, #1
 80147f2:	4a08      	ldr	r2, [pc, #32]	@ (8014814 <USBD_RNDIS_handlePacket+0x94>)
 80147f4:	6053      	str	r3, [r2, #4]
   on_usbOutRxPacket( &rndis_rx_buffer[p->DataOffset + offsetof(rndis_data_packet_t, DataOffset)], p->DataLength );
 80147f6:	4b08      	ldr	r3, [pc, #32]	@ (8014818 <USBD_RNDIS_handlePacket+0x98>)
 80147f8:	681a      	ldr	r2, [r3, #0]
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	689b      	ldr	r3, [r3, #8]
 80147fe:	3308      	adds	r3, #8
 8014800:	441a      	add	r2, r3
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	68db      	ldr	r3, [r3, #12]
 8014806:	4619      	mov	r1, r3
 8014808:	4610      	mov	r0, r2
 801480a:	f000 fba1 	bl	8014f50 <on_usbOutRxPacket>
}
 801480e:	3710      	adds	r7, #16
 8014810:	46bd      	mov	sp, r7
 8014812:	bd80      	pop	{r7, pc}
 8014814:	200242dc 	.word	0x200242dc
 8014818:	200242f0 	.word	0x200242f0

0801481c <USBD_RNDIS_DataOut>:
/// \param     [in/out] USBD_HandleTypeDef *pdev
/// \param     [in]     uint8_t epnum
///
/// \return    status
static uint8_t USBD_RNDIS_DataOut( USBD_HandleTypeDef *pdev, uint8_t epnum )
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b084      	sub	sp, #16
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
 8014824:	460b      	mov	r3, r1
 8014826:	70fb      	strb	r3, [r7, #3]
   UNUSED(pdev);
   
	if( epnum == RNDIS_DATA_OUT_EP )
 8014828:	78fb      	ldrb	r3, [r7, #3]
 801482a:	2b03      	cmp	r3, #3
 801482c:	d11d      	bne.n	801486a <USBD_RNDIS_DataOut+0x4e>
	{  
      PCD_EPTypeDef *ep = &((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum]; 
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	f8d3 12c4 	ldr.w	r1, [r3, #708]	@ 0x2c4
 8014834:	78fa      	ldrb	r2, [r7, #3]
 8014836:	4613      	mov	r3, r2
 8014838:	00db      	lsls	r3, r3, #3
 801483a:	4413      	add	r3, r2
 801483c:	009b      	lsls	r3, r3, #2
 801483e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8014842:	440b      	add	r3, r1
 8014844:	3304      	adds	r3, #4
 8014846:	60fb      	str	r3, [r7, #12]
      USBD_RNDIS_handlePacket(rndis_rx_buffer, ep->xfer_count);
 8014848:	4b0a      	ldr	r3, [pc, #40]	@ (8014874 <USBD_RNDIS_DataOut+0x58>)
 801484a:	681a      	ldr	r2, [r3, #0]
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	695b      	ldr	r3, [r3, #20]
 8014850:	b29b      	uxth	r3, r3
 8014852:	4619      	mov	r1, r3
 8014854:	4610      	mov	r0, r2
 8014856:	f7ff ff93 	bl	8014780 <USBD_RNDIS_handlePacket>
		USBD_LL_PrepareReceive(&hUsbDeviceFS, RNDIS_DATA_OUT_EP, (uint8_t*)(rndis_rx_buffer), QUEUEBUFFERLENGTH);
 801485a:	4b06      	ldr	r3, [pc, #24]	@ (8014874 <USBD_RNDIS_DataOut+0x58>)
 801485c:	681a      	ldr	r2, [r3, #0]
 801485e:	f240 631a 	movw	r3, #1562	@ 0x61a
 8014862:	2103      	movs	r1, #3
 8014864:	4804      	ldr	r0, [pc, #16]	@ (8014878 <USBD_RNDIS_DataOut+0x5c>)
 8014866:	f000 ffd4 	bl	8015812 <USBD_LL_PrepareReceive>
	}
   return USBD_OK;
 801486a:	2300      	movs	r3, #0
}
 801486c:	4618      	mov	r0, r3
 801486e:	3710      	adds	r7, #16
 8014870:	46bd      	mov	sp, r7
 8014872:	bd80      	pop	{r7, pc}
 8014874:	200242f0 	.word	0x200242f0
 8014878:	20024380 	.word	0x20024380

0801487c <USBD_RNDIS_send>:
/// \param     [in]  const void *data
/// \param     [in]  uint16_t size
///
/// \return    bool
bool USBD_RNDIS_send( const void *data, uint16_t size )
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b084      	sub	sp, #16
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	460b      	mov	r3, r1
 8014886:	807b      	strh	r3, [r7, #2]
	if( tx.state != TX_STATE_READY )
 8014888:	4b2e      	ldr	r3, [pc, #184]	@ (8014944 <USBD_RNDIS_send+0xc8>)
 801488a:	88db      	ldrh	r3, [r3, #6]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d001      	beq.n	8014894 <USBD_RNDIS_send+0x18>
   {
      return false;
 8014890:	2300      	movs	r3, #0
 8014892:	e052      	b.n	801493a <USBD_RNDIS_send+0xbe>
   }
   if( size > ETH_MAX_PACKET_SIZE || size == 0 )
 8014894:	887b      	ldrh	r3, [r7, #2]
 8014896:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 801489a:	4293      	cmp	r3, r2
 801489c:	d802      	bhi.n	80148a4 <USBD_RNDIS_send+0x28>
 801489e:	887b      	ldrh	r3, [r7, #2]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d101      	bne.n	80148a8 <USBD_RNDIS_send+0x2c>
   {
      return false;
 80148a4:	2300      	movs	r3, #0
 80148a6:	e048      	b.n	801493a <USBD_RNDIS_send+0xbe>
  __ASM volatile ("cpsid i" : : : "memory");
 80148a8:	b672      	cpsid	i
}
 80148aa:	bf00      	nop
   }

	__disable_irq();
   
   tx.ptr = (uint8_t *)data-44u;    // there is allocated memory in front of data for the usb header
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	3b2c      	subs	r3, #44	@ 0x2c
 80148b0:	4a24      	ldr	r2, [pc, #144]	@ (8014944 <USBD_RNDIS_send+0xc8>)
 80148b2:	6013      	str	r3, [r2, #0]
	tx.size = size+44u;              // add 44 byte of header for the complete length
 80148b4:	887b      	ldrh	r3, [r7, #2]
 80148b6:	332c      	adds	r3, #44	@ 0x2c
 80148b8:	b29a      	uxth	r2, r3
 80148ba:	4b22      	ldr	r3, [pc, #136]	@ (8014944 <USBD_RNDIS_send+0xc8>)
 80148bc:	809a      	strh	r2, [r3, #4]
	tx.state = TX_STATE_NEED_SENDING;
 80148be:	4b21      	ldr	r3, [pc, #132]	@ (8014944 <USBD_RNDIS_send+0xc8>)
 80148c0:	2201      	movs	r2, #1
 80148c2:	80da      	strh	r2, [r3, #6]

   rndis_data_packet_t *hdr;
   hdr = (rndis_data_packet_t *)tx.ptr;
 80148c4:	4b1f      	ldr	r3, [pc, #124]	@ (8014944 <USBD_RNDIS_send+0xc8>)
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	60fb      	str	r3, [r7, #12]
   memset(hdr, 0, sizeof(rndis_data_packet_t));
 80148ca:	222c      	movs	r2, #44	@ 0x2c
 80148cc:	2100      	movs	r1, #0
 80148ce:	68f8      	ldr	r0, [r7, #12]
 80148d0:	f001 f9bb 	bl	8015c4a <memset>
   hdr->MessageType     = REMOTE_NDIS_PACKET_MSG;
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	2201      	movs	r2, #1
 80148d8:	601a      	str	r2, [r3, #0]
   hdr->MessageLength   = sizeof(rndis_data_packet_t) + tx.size-44u; // substract header size
 80148da:	4b1a      	ldr	r3, [pc, #104]	@ (8014944 <USBD_RNDIS_send+0xc8>)
 80148dc:	889b      	ldrh	r3, [r3, #4]
 80148de:	461a      	mov	r2, r3
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	605a      	str	r2, [r3, #4]
   hdr->DataOffset      = sizeof(rndis_data_packet_t) - offsetof(rndis_data_packet_t, DataOffset);
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	2224      	movs	r2, #36	@ 0x24
 80148e8:	609a      	str	r2, [r3, #8]
   hdr->DataLength      = tx.size-44u; // substract header size
 80148ea:	4b16      	ldr	r3, [pc, #88]	@ (8014944 <USBD_RNDIS_send+0xc8>)
 80148ec:	889b      	ldrh	r3, [r3, #4]
 80148ee:	f1a3 022c 	sub.w	r2, r3, #44	@ 0x2c
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	60da      	str	r2, [r3, #12]
   
   tx.need_padding = (hdr->MessageLength & (RNDIS_DATA_IN_SZ - 1)) == 0;
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	685b      	ldr	r3, [r3, #4]
 80148fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80148fe:	2b00      	cmp	r3, #0
 8014900:	bf0c      	ite	eq
 8014902:	2301      	moveq	r3, #1
 8014904:	2300      	movne	r3, #0
 8014906:	b2da      	uxtb	r2, r3
 8014908:	4b0e      	ldr	r3, [pc, #56]	@ (8014944 <USBD_RNDIS_send+0xc8>)
 801490a:	721a      	strb	r2, [r3, #8]
   if (tx.need_padding)
 801490c:	4b0d      	ldr	r3, [pc, #52]	@ (8014944 <USBD_RNDIS_send+0xc8>)
 801490e:	7a1b      	ldrb	r3, [r3, #8]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d004      	beq.n	801491e <USBD_RNDIS_send+0xa2>
   {
      hdr->MessageLength++;
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	685b      	ldr	r3, [r3, #4]
 8014918:	1c5a      	adds	r2, r3, #1
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	605a      	str	r2, [r3, #4]
   }
   
   USBD_LL_Transmit(&hUsbDeviceFS, RNDIS_DATA_IN_EP, tx.ptr, (uint32_t)tx.size);
 801491e:	4b09      	ldr	r3, [pc, #36]	@ (8014944 <USBD_RNDIS_send+0xc8>)
 8014920:	681a      	ldr	r2, [r3, #0]
 8014922:	4b08      	ldr	r3, [pc, #32]	@ (8014944 <USBD_RNDIS_send+0xc8>)
 8014924:	889b      	ldrh	r3, [r3, #4]
 8014926:	2182      	movs	r1, #130	@ 0x82
 8014928:	4807      	ldr	r0, [pc, #28]	@ (8014948 <USBD_RNDIS_send+0xcc>)
 801492a:	f000 ff51 	bl	80157d0 <USBD_LL_Transmit>
   tx.state = TX_STATE_SENDING_DATA;
 801492e:	4b05      	ldr	r3, [pc, #20]	@ (8014944 <USBD_RNDIS_send+0xc8>)
 8014930:	2203      	movs	r2, #3
 8014932:	80da      	strh	r2, [r3, #6]
  __ASM volatile ("cpsie i" : : : "memory");
 8014934:	b662      	cpsie	i
}
 8014936:	bf00      	nop

	__enable_irq();

	return true;
 8014938:	2301      	movs	r3, #1
}
 801493a:	4618      	mov	r0, r3
 801493c:	3710      	adds	r7, #16
 801493e:	46bd      	mov	sp, r7
 8014940:	bd80      	pop	{r7, pc}
 8014942:	bf00      	nop
 8014944:	200000a4 	.word	0x200000a4
 8014948:	20024380 	.word	0x20024380

0801494c <USBD_RNDIS_setBuffer>:
///
/// \param     [in]  uint8_t* buffer
///
/// \return    none
void USBD_RNDIS_setBuffer( uint8_t* buffer )
{
 801494c:	b480      	push	{r7}
 801494e:	b083      	sub	sp, #12
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
   rndis_rx_buffer = (char*)buffer;
 8014954:	4a04      	ldr	r2, [pc, #16]	@ (8014968 <USBD_RNDIS_setBuffer+0x1c>)
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	6013      	str	r3, [r2, #0]
}
 801495a:	bf00      	nop
 801495c:	370c      	adds	r7, #12
 801495e:	46bd      	mov	sp, r7
 8014960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014964:	4770      	bx	lr
 8014966:	bf00      	nop
 8014968:	200242f0 	.word	0x200242f0

0801496c <USBD_RNDIS_GetFSCfgDesc>:
///
/// \param     [in]  uint16_t *length
///
/// \return    pointer to descriptor buffer
static uint8_t *USBD_RNDIS_GetFSCfgDesc( uint16_t *length )
{
 801496c:	b480      	push	{r7}
 801496e:	b083      	sub	sp, #12
 8014970:	af00      	add	r7, sp, #0
 8014972:	6078      	str	r0, [r7, #4]
   *length = (uint16_t)sizeof(USBD_RNDIS_CfgDesc);
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	224b      	movs	r2, #75	@ 0x4b
 8014978:	801a      	strh	r2, [r3, #0]
   USBD_RNDIS_CfgDesc[2] = sizeof(USBD_RNDIS_CfgDesc) & 0xFF;
 801497a:	4b06      	ldr	r3, [pc, #24]	@ (8014994 <USBD_RNDIS_GetFSCfgDesc+0x28>)
 801497c:	224b      	movs	r2, #75	@ 0x4b
 801497e:	709a      	strb	r2, [r3, #2]
   USBD_RNDIS_CfgDesc[3] = (sizeof(USBD_RNDIS_CfgDesc) >> 8) & 0xFF;
 8014980:	4b04      	ldr	r3, [pc, #16]	@ (8014994 <USBD_RNDIS_GetFSCfgDesc+0x28>)
 8014982:	2200      	movs	r2, #0
 8014984:	70da      	strb	r2, [r3, #3]
   return USBD_RNDIS_CfgDesc;
 8014986:	4b03      	ldr	r3, [pc, #12]	@ (8014994 <USBD_RNDIS_GetFSCfgDesc+0x28>)
}
 8014988:	4618      	mov	r0, r3
 801498a:	370c      	adds	r7, #12
 801498c:	46bd      	mov	sp, r7
 801498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014992:	4770      	bx	lr
 8014994:	200000bc 	.word	0x200000bc

08014998 <USBD_RNDIS_GetHSCfgDesc>:
///
/// \param     [in]  uint16_t *length
///
/// \return    pointer to descriptor buffer
static uint8_t *USBD_RNDIS_GetHSCfgDesc( uint16_t *length )
{
 8014998:	b480      	push	{r7}
 801499a:	b083      	sub	sp, #12
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]
  return NULL;
 80149a0:	2300      	movs	r3, #0
}
 80149a2:	4618      	mov	r0, r3
 80149a4:	370c      	adds	r7, #12
 80149a6:	46bd      	mov	sp, r7
 80149a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ac:	4770      	bx	lr

080149ae <USBD_RNDIS_GetOtherSpeedCfgDesc>:
///
/// \param     [in]  uint16_t *length
///
/// \return    pointer to descriptor buffer
static uint8_t *USBD_RNDIS_GetOtherSpeedCfgDesc( uint16_t *length )
{
 80149ae:	b480      	push	{r7}
 80149b0:	b083      	sub	sp, #12
 80149b2:	af00      	add	r7, sp, #0
 80149b4:	6078      	str	r0, [r7, #4]
  return NULL;
 80149b6:	2300      	movs	r3, #0
}
 80149b8:	4618      	mov	r0, r3
 80149ba:	370c      	adds	r7, #12
 80149bc:	46bd      	mov	sp, r7
 80149be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c2:	4770      	bx	lr

080149c4 <USBD_RNDIS_GetDeviceQualifierDescriptor>:
///
/// \param     [in]  uint16_t *length
///
/// \return    pointer to descriptor buffer
static uint8_t *USBD_RNDIS_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80149c4:	b480      	push	{r7}
 80149c6:	b083      	sub	sp, #12
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_RNDIS_DeviceQualifierDesc);
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	220a      	movs	r2, #10
 80149d0:	801a      	strh	r2, [r3, #0]

  return USBD_RNDIS_DeviceQualifierDesc;
 80149d2:	4b03      	ldr	r3, [pc, #12]	@ (80149e0 <USBD_RNDIS_GetDeviceQualifierDescriptor+0x1c>)
}
 80149d4:	4618      	mov	r0, r3
 80149d6:	370c      	adds	r7, #12
 80149d8:	46bd      	mov	sp, r7
 80149da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149de:	4770      	bx	lr
 80149e0:	200000b0 	.word	0x200000b0

080149e4 <USBD_RNDIS_query_cmplt32>:
/// \param     [in]  uint32_t status
/// \param     [in]  uint32_t data
///
/// \return    none
void USBD_RNDIS_query_cmplt32( uint32_t status, uint32_t data )
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b084      	sub	sp, #16
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
 80149ec:	6039      	str	r1, [r7, #0]
   rndis_query_cmplt_t *c;
   c = (rndis_query_cmplt_t *)encapsulated_buffer;
 80149ee:	4b0f      	ldr	r3, [pc, #60]	@ (8014a2c <USBD_RNDIS_query_cmplt32+0x48>)
 80149f0:	60fb      	str	r3, [r7, #12]
   c->MessageType = REMOTE_NDIS_QUERY_CMPLT;
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	4a0e      	ldr	r2, [pc, #56]	@ (8014a30 <USBD_RNDIS_query_cmplt32+0x4c>)
 80149f6:	601a      	str	r2, [r3, #0]
   c->MessageLength = sizeof(rndis_query_cmplt_t) + 4;
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	221c      	movs	r2, #28
 80149fc:	605a      	str	r2, [r3, #4]
   c->InformationBufferLength = 4;
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	2204      	movs	r2, #4
 8014a02:	611a      	str	r2, [r3, #16]
   c->InformationBufferOffset = 16;
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	2210      	movs	r2, #16
 8014a08:	615a      	str	r2, [r3, #20]
   c->Status = status;
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	687a      	ldr	r2, [r7, #4]
 8014a0e:	60da      	str	r2, [r3, #12]
   *(uint32_t *)(c + 1) = data;
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	3318      	adds	r3, #24
 8014a14:	683a      	ldr	r2, [r7, #0]
 8014a16:	601a      	str	r2, [r3, #0]
   USBD_LL_Transmit(&hUsbDeviceFS, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 8014a18:	2308      	movs	r3, #8
 8014a1a:	4a06      	ldr	r2, [pc, #24]	@ (8014a34 <USBD_RNDIS_query_cmplt32+0x50>)
 8014a1c:	2181      	movs	r1, #129	@ 0x81
 8014a1e:	4806      	ldr	r0, [pc, #24]	@ (8014a38 <USBD_RNDIS_query_cmplt32+0x54>)
 8014a20:	f000 fed6 	bl	80157d0 <USBD_LL_Transmit>
}
 8014a24:	bf00      	nop
 8014a26:	3710      	adds	r7, #16
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	bd80      	pop	{r7, pc}
 8014a2c:	200242f8 	.word	0x200242f8
 8014a30:	80000004 	.word	0x80000004
 8014a34:	08016dfc 	.word	0x08016dfc
 8014a38:	20024380 	.word	0x20024380

08014a3c <USBD_RNDIS_query_cmplt>:
/// \param     [in]  const void *data
/// \param     [in]  uint16_t size
///
/// \return    none
static void USBD_RNDIS_query_cmplt( uint32_t status, const void *data, uint16_t size )
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b086      	sub	sp, #24
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	60f8      	str	r0, [r7, #12]
 8014a44:	60b9      	str	r1, [r7, #8]
 8014a46:	4613      	mov	r3, r2
 8014a48:	80fb      	strh	r3, [r7, #6]
	rndis_query_cmplt_t *c;
	c = (rndis_query_cmplt_t *)encapsulated_buffer;
 8014a4a:	4b12      	ldr	r3, [pc, #72]	@ (8014a94 <USBD_RNDIS_query_cmplt+0x58>)
 8014a4c:	617b      	str	r3, [r7, #20]
	c->MessageType = REMOTE_NDIS_QUERY_CMPLT;
 8014a4e:	697b      	ldr	r3, [r7, #20]
 8014a50:	4a11      	ldr	r2, [pc, #68]	@ (8014a98 <USBD_RNDIS_query_cmplt+0x5c>)
 8014a52:	601a      	str	r2, [r3, #0]
	c->MessageLength = sizeof(rndis_query_cmplt_t) + size;
 8014a54:	88fb      	ldrh	r3, [r7, #6]
 8014a56:	f103 0218 	add.w	r2, r3, #24
 8014a5a:	697b      	ldr	r3, [r7, #20]
 8014a5c:	605a      	str	r2, [r3, #4]
	c->InformationBufferLength = size;
 8014a5e:	88fa      	ldrh	r2, [r7, #6]
 8014a60:	697b      	ldr	r3, [r7, #20]
 8014a62:	611a      	str	r2, [r3, #16]
	c->InformationBufferOffset = 16;
 8014a64:	697b      	ldr	r3, [r7, #20]
 8014a66:	2210      	movs	r2, #16
 8014a68:	615a      	str	r2, [r3, #20]
	c->Status = status;
 8014a6a:	697b      	ldr	r3, [r7, #20]
 8014a6c:	68fa      	ldr	r2, [r7, #12]
 8014a6e:	60da      	str	r2, [r3, #12]
	memcpy(c + 1, data, size);
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	3318      	adds	r3, #24
 8014a74:	88fa      	ldrh	r2, [r7, #6]
 8014a76:	68b9      	ldr	r1, [r7, #8]
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f001 f962 	bl	8015d42 <memcpy>
	USBD_LL_Transmit(&hUsbDeviceFS, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 8014a7e:	2308      	movs	r3, #8
 8014a80:	4a06      	ldr	r2, [pc, #24]	@ (8014a9c <USBD_RNDIS_query_cmplt+0x60>)
 8014a82:	2181      	movs	r1, #129	@ 0x81
 8014a84:	4806      	ldr	r0, [pc, #24]	@ (8014aa0 <USBD_RNDIS_query_cmplt+0x64>)
 8014a86:	f000 fea3 	bl	80157d0 <USBD_LL_Transmit>
}
 8014a8a:	bf00      	nop
 8014a8c:	3718      	adds	r7, #24
 8014a8e:	46bd      	mov	sp, r7
 8014a90:	bd80      	pop	{r7, pc}
 8014a92:	bf00      	nop
 8014a94:	200242f8 	.word	0x200242f8
 8014a98:	80000004 	.word	0x80000004
 8014a9c:	08016dfc 	.word	0x08016dfc
 8014aa0:	20024380 	.word	0x20024380

08014aa4 <USBD_RNDIS_query>:
///
/// \param     [in]  void *pdev
///
/// \return    none
static void USBD_RNDIS_query( void *pdev )
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b082      	sub	sp, #8
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
	switch (((rndis_query_msg_t *)encapsulated_buffer)->Oid)
 8014aac:	4ba3      	ldr	r3, [pc, #652]	@ (8014d3c <USBD_RNDIS_query+0x298>)
 8014aae:	68db      	ldr	r3, [r3, #12]
 8014ab0:	4aa3      	ldr	r2, [pc, #652]	@ (8014d40 <USBD_RNDIS_query+0x29c>)
 8014ab2:	4293      	cmp	r3, r2
 8014ab4:	f000 8112 	beq.w	8014cdc <USBD_RNDIS_query+0x238>
 8014ab8:	4aa1      	ldr	r2, [pc, #644]	@ (8014d40 <USBD_RNDIS_query+0x29c>)
 8014aba:	4293      	cmp	r3, r2
 8014abc:	f200 8134 	bhi.w	8014d28 <USBD_RNDIS_query+0x284>
 8014ac0:	4aa0      	ldr	r2, [pc, #640]	@ (8014d44 <USBD_RNDIS_query+0x2a0>)
 8014ac2:	4293      	cmp	r3, r2
 8014ac4:	f000 8105 	beq.w	8014cd2 <USBD_RNDIS_query+0x22e>
 8014ac8:	4a9e      	ldr	r2, [pc, #632]	@ (8014d44 <USBD_RNDIS_query+0x2a0>)
 8014aca:	4293      	cmp	r3, r2
 8014acc:	f200 812c 	bhi.w	8014d28 <USBD_RNDIS_query+0x284>
 8014ad0:	4a9d      	ldr	r2, [pc, #628]	@ (8014d48 <USBD_RNDIS_query+0x2a4>)
 8014ad2:	4293      	cmp	r3, r2
 8014ad4:	f000 80f8 	beq.w	8014cc8 <USBD_RNDIS_query+0x224>
 8014ad8:	4a9b      	ldr	r2, [pc, #620]	@ (8014d48 <USBD_RNDIS_query+0x2a4>)
 8014ada:	4293      	cmp	r3, r2
 8014adc:	f200 8124 	bhi.w	8014d28 <USBD_RNDIS_query+0x284>
 8014ae0:	4a9a      	ldr	r2, [pc, #616]	@ (8014d4c <USBD_RNDIS_query+0x2a8>)
 8014ae2:	4293      	cmp	r3, r2
 8014ae4:	f200 8120 	bhi.w	8014d28 <USBD_RNDIS_query+0x284>
 8014ae8:	f1b3 3f01 	cmp.w	r3, #16843009	@ 0x1010101
 8014aec:	d215      	bcs.n	8014b1a <USBD_RNDIS_query+0x76>
 8014aee:	4a98      	ldr	r2, [pc, #608]	@ (8014d50 <USBD_RNDIS_query+0x2ac>)
 8014af0:	4293      	cmp	r3, r2
 8014af2:	f200 8119 	bhi.w	8014d28 <USBD_RNDIS_query+0x284>
 8014af6:	4a97      	ldr	r2, [pc, #604]	@ (8014d54 <USBD_RNDIS_query+0x2b0>)
 8014af8:	4293      	cmp	r3, r2
 8014afa:	d221      	bcs.n	8014b40 <USBD_RNDIS_query+0x9c>
 8014afc:	4a96      	ldr	r2, [pc, #600]	@ (8014d58 <USBD_RNDIS_query+0x2b4>)
 8014afe:	4293      	cmp	r3, r2
 8014b00:	f000 80c9 	beq.w	8014c96 <USBD_RNDIS_query+0x1f2>
 8014b04:	4a94      	ldr	r2, [pc, #592]	@ (8014d58 <USBD_RNDIS_query+0x2b4>)
 8014b06:	4293      	cmp	r3, r2
 8014b08:	f200 810e 	bhi.w	8014d28 <USBD_RNDIS_query+0x284>
 8014b0c:	4a93      	ldr	r2, [pc, #588]	@ (8014d5c <USBD_RNDIS_query+0x2b8>)
 8014b0e:	4293      	cmp	r3, r2
 8014b10:	d85c      	bhi.n	8014bcc <USBD_RNDIS_query+0x128>
 8014b12:	4a93      	ldr	r2, [pc, #588]	@ (8014d60 <USBD_RNDIS_query+0x2bc>)
 8014b14:	4293      	cmp	r3, r2
 8014b16:	d225      	bcs.n	8014b64 <USBD_RNDIS_query+0xc0>
 8014b18:	e106      	b.n	8014d28 <USBD_RNDIS_query+0x284>
 8014b1a:	f1a3 3301 	sub.w	r3, r3, #16843009	@ 0x1010101
 8014b1e:	2b04      	cmp	r3, #4
 8014b20:	f200 8102 	bhi.w	8014d28 <USBD_RNDIS_query+0x284>
 8014b24:	a201      	add	r2, pc, #4	@ (adr r2, 8014b2c <USBD_RNDIS_query+0x88>)
 8014b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b2a:	bf00      	nop
 8014b2c:	08014bf9 	.word	0x08014bf9
 8014b30:	08014bed 	.word	0x08014bed
 8014b34:	08014cab 	.word	0x08014cab
 8014b38:	08014ca1 	.word	0x08014ca1
 8014b3c:	08014cb5 	.word	0x08014cb5
 8014b40:	4a88      	ldr	r2, [pc, #544]	@ (8014d64 <USBD_RNDIS_query+0x2c0>)
 8014b42:	441a      	add	r2, r3
 8014b44:	2a04      	cmp	r2, #4
 8014b46:	f200 80ef 	bhi.w	8014d28 <USBD_RNDIS_query+0x284>
 8014b4a:	a301      	add	r3, pc, #4	@ (adr r3, 8014b50 <USBD_RNDIS_query+0xac>)
 8014b4c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8014b50:	08014ce7 	.word	0x08014ce7
 8014b54:	08014cf5 	.word	0x08014cf5
 8014b58:	08014d11 	.word	0x08014d11
 8014b5c:	08014d03 	.word	0x08014d03
 8014b60:	08014d1f 	.word	0x08014d1f
 8014b64:	4a80      	ldr	r2, [pc, #512]	@ (8014d68 <USBD_RNDIS_query+0x2c4>)
 8014b66:	441a      	add	r2, r3
 8014b68:	2a15      	cmp	r2, #21
 8014b6a:	f200 80dd 	bhi.w	8014d28 <USBD_RNDIS_query+0x284>
 8014b6e:	a301      	add	r3, pc, #4	@ (adr r3, 8014b74 <USBD_RNDIS_query+0xd0>)
 8014b70:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8014b74:	08014bd5 	.word	0x08014bd5
 8014b78:	08014c23 	.word	0x08014c23
 8014b7c:	08014c05 	.word	0x08014c05
 8014b80:	08014c0f 	.word	0x08014c0f
 8014b84:	08014d29 	.word	0x08014d29
 8014b88:	08014c5d 	.word	0x08014c5d
 8014b8c:	08014c2d 	.word	0x08014c2d
 8014b90:	08014d29 	.word	0x08014d29
 8014b94:	08014d29 	.word	0x08014d29
 8014b98:	08014c75 	.word	0x08014c75
 8014b9c:	08014c81 	.word	0x08014c81
 8014ba0:	08014c37 	.word	0x08014c37
 8014ba4:	08014c43 	.word	0x08014c43
 8014ba8:	08014c4f 	.word	0x08014c4f
 8014bac:	08014d29 	.word	0x08014d29
 8014bb0:	08014d29 	.word	0x08014d29
 8014bb4:	08014c69 	.word	0x08014c69
 8014bb8:	08014d29 	.word	0x08014d29
 8014bbc:	08014cbf 	.word	0x08014cbf
 8014bc0:	08014c8d 	.word	0x08014c8d
 8014bc4:	08014d29 	.word	0x08014d29
 8014bc8:	08014be1 	.word	0x08014be1
 8014bcc:	4a67      	ldr	r2, [pc, #412]	@ (8014d6c <USBD_RNDIS_query+0x2c8>)
 8014bce:	4293      	cmp	r3, r2
 8014bd0:	d022      	beq.n	8014c18 <USBD_RNDIS_query+0x174>
 8014bd2:	e0a9      	b.n	8014d28 <USBD_RNDIS_query+0x284>
	{
		case OID_GEN_SUPPORTED_LIST:         USBD_RNDIS_query_cmplt(RNDIS_STATUS_SUCCESS, OIDSupportedList, 4 * OID_LIST_LENGTH); return;
 8014bd4:	2258      	movs	r2, #88	@ 0x58
 8014bd6:	4966      	ldr	r1, [pc, #408]	@ (8014d70 <USBD_RNDIS_query+0x2cc>)
 8014bd8:	2000      	movs	r0, #0
 8014bda:	f7ff ff2f 	bl	8014a3c <USBD_RNDIS_query_cmplt>
 8014bde:	e0a9      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_GEN_VENDOR_DRIVER_VERSION:  USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, 0x00001000);  return;
 8014be0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8014be4:	2000      	movs	r0, #0
 8014be6:	f7ff fefd 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014bea:	e0a3      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_802_3_CURRENT_ADDRESS:      USBD_RNDIS_query_cmplt(RNDIS_STATUS_SUCCESS, &station_hwaddr, 6); return;
 8014bec:	2206      	movs	r2, #6
 8014bee:	4961      	ldr	r1, [pc, #388]	@ (8014d74 <USBD_RNDIS_query+0x2d0>)
 8014bf0:	2000      	movs	r0, #0
 8014bf2:	f7ff ff23 	bl	8014a3c <USBD_RNDIS_query_cmplt>
 8014bf6:	e09d      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_802_3_PERMANENT_ADDRESS:    USBD_RNDIS_query_cmplt(RNDIS_STATUS_SUCCESS, &permanent_hwaddr, 6); return;
 8014bf8:	2206      	movs	r2, #6
 8014bfa:	495f      	ldr	r1, [pc, #380]	@ (8014d78 <USBD_RNDIS_query+0x2d4>)
 8014bfc:	2000      	movs	r0, #0
 8014bfe:	f7ff ff1d 	bl	8014a3c <USBD_RNDIS_query_cmplt>
 8014c02:	e097      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_GEN_MEDIA_SUPPORTED:        USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, NDIS_MEDIUM_802_3); return;
 8014c04:	2100      	movs	r1, #0
 8014c06:	2000      	movs	r0, #0
 8014c08:	f7ff feec 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014c0c:	e092      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_GEN_MEDIA_IN_USE:           USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, NDIS_MEDIUM_802_3); return;
 8014c0e:	2100      	movs	r1, #0
 8014c10:	2000      	movs	r0, #0
 8014c12:	f7ff fee7 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014c16:	e08d      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_GEN_PHYSICAL_MEDIUM:        USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, NDIS_MEDIUM_802_3); return;
 8014c18:	2100      	movs	r1, #0
 8014c1a:	2000      	movs	r0, #0
 8014c1c:	f7ff fee2 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014c20:	e088      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_GEN_HARDWARE_STATUS:        USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, 0); return;
 8014c22:	2100      	movs	r1, #0
 8014c24:	2000      	movs	r0, #0
 8014c26:	f7ff fedd 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014c2a:	e083      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_GEN_LINK_SPEED:             USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, RNDIS_LINK_SPEED / 100); return;
 8014c2c:	4953      	ldr	r1, [pc, #332]	@ (8014d7c <USBD_RNDIS_query+0x2d8>)
 8014c2e:	2000      	movs	r0, #0
 8014c30:	f7ff fed8 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014c34:	e07e      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_GEN_VENDOR_ID:              USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, 0x00FFFFFF); return;
 8014c36:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8014c3a:	2000      	movs	r0, #0
 8014c3c:	f7ff fed2 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014c40:	e078      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_GEN_VENDOR_DESCRIPTION:     USBD_RNDIS_query_cmplt(RNDIS_STATUS_SUCCESS, RNDIS_VENDOR, strlen(RNDIS_VENDOR) + 1); return;
 8014c42:	2208      	movs	r2, #8
 8014c44:	494e      	ldr	r1, [pc, #312]	@ (8014d80 <USBD_RNDIS_query+0x2dc>)
 8014c46:	2000      	movs	r0, #0
 8014c48:	f7ff fef8 	bl	8014a3c <USBD_RNDIS_query_cmplt>
 8014c4c:	e072      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_GEN_CURRENT_PACKET_FILTER:  USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, oid_packet_filter); return;
 8014c4e:	4b4d      	ldr	r3, [pc, #308]	@ (8014d84 <USBD_RNDIS_query+0x2e0>)
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	4619      	mov	r1, r3
 8014c54:	2000      	movs	r0, #0
 8014c56:	f7ff fec5 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014c5a:	e06b      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_GEN_MAXIMUM_FRAME_SIZE:     USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE - ETH_HEADER_SIZE); return;
 8014c5c:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8014c60:	2000      	movs	r0, #0
 8014c62:	f7ff febf 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014c66:	e065      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_GEN_MAXIMUM_TOTAL_SIZE:     USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE); return;
 8014c68:	f240 51ea 	movw	r1, #1514	@ 0x5ea
 8014c6c:	2000      	movs	r0, #0
 8014c6e:	f7ff feb9 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014c72:	e05f      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_GEN_TRANSMIT_BLOCK_SIZE:    USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE); return;
 8014c74:	f240 51ea 	movw	r1, #1514	@ 0x5ea
 8014c78:	2000      	movs	r0, #0
 8014c7a:	f7ff feb3 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014c7e:	e059      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_GEN_RECEIVE_BLOCK_SIZE:     USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, ETH_MAX_PACKET_SIZE); return;
 8014c80:	f240 51ea 	movw	r1, #1514	@ 0x5ea
 8014c84:	2000      	movs	r0, #0
 8014c86:	f7ff fead 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014c8a:	e053      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_GEN_MEDIA_CONNECT_STATUS:   USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, NDIS_MEDIA_STATE_CONNECTED); return;
 8014c8c:	2100      	movs	r1, #0
 8014c8e:	2000      	movs	r0, #0
 8014c90:	f7ff fea8 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014c94:	e04e      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_GEN_RNDIS_CONFIG_PARAMETER: USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, 0); return;
 8014c96:	2100      	movs	r1, #0
 8014c98:	2000      	movs	r0, #0
 8014c9a:	f7ff fea3 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014c9e:	e049      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_802_3_MAXIMUM_LIST_SIZE:    USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, 1); return;
 8014ca0:	2101      	movs	r1, #1
 8014ca2:	2000      	movs	r0, #0
 8014ca4:	f7ff fe9e 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014ca8:	e044      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_802_3_MULTICAST_LIST:       USBD_RNDIS_query_cmplt32(RNDIS_STATUS_NOT_SUPPORTED, 0); return;
 8014caa:	2100      	movs	r1, #0
 8014cac:	4836      	ldr	r0, [pc, #216]	@ (8014d88 <USBD_RNDIS_query+0x2e4>)
 8014cae:	f7ff fe99 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014cb2:	e03f      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_802_3_MAC_OPTIONS:          USBD_RNDIS_query_cmplt32(RNDIS_STATUS_NOT_SUPPORTED, 0); return;
 8014cb4:	2100      	movs	r1, #0
 8014cb6:	4834      	ldr	r0, [pc, #208]	@ (8014d88 <USBD_RNDIS_query+0x2e4>)
 8014cb8:	f7ff fe94 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014cbc:	e03a      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_GEN_MAC_OPTIONS:            USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, /*MAC_OPT*/ 0); return;
 8014cbe:	2100      	movs	r1, #0
 8014cc0:	2000      	movs	r0, #0
 8014cc2:	f7ff fe8f 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014cc6:	e035      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_802_3_RCV_ERROR_ALIGNMENT:  USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, 0); return;
 8014cc8:	2100      	movs	r1, #0
 8014cca:	2000      	movs	r0, #0
 8014ccc:	f7ff fe8a 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014cd0:	e030      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_802_3_XMIT_ONE_COLLISION:   USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, 0); return;
 8014cd2:	2100      	movs	r1, #0
 8014cd4:	2000      	movs	r0, #0
 8014cd6:	f7ff fe85 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014cda:	e02b      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_802_3_XMIT_MORE_COLLISIONS: USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, 0); return;
 8014cdc:	2100      	movs	r1, #0
 8014cde:	2000      	movs	r0, #0
 8014ce0:	f7ff fe80 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014ce4:	e026      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_GEN_XMIT_OK:                USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, usb_eth_stat.txok); return;
 8014ce6:	4b29      	ldr	r3, [pc, #164]	@ (8014d8c <USBD_RNDIS_query+0x2e8>)
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	4619      	mov	r1, r3
 8014cec:	2000      	movs	r0, #0
 8014cee:	f7ff fe79 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014cf2:	e01f      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_GEN_RCV_OK:                 USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, usb_eth_stat.rxok); return;
 8014cf4:	4b25      	ldr	r3, [pc, #148]	@ (8014d8c <USBD_RNDIS_query+0x2e8>)
 8014cf6:	685b      	ldr	r3, [r3, #4]
 8014cf8:	4619      	mov	r1, r3
 8014cfa:	2000      	movs	r0, #0
 8014cfc:	f7ff fe72 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014d00:	e018      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_GEN_RCV_ERROR:              USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, usb_eth_stat.rxbad); return;
 8014d02:	4b22      	ldr	r3, [pc, #136]	@ (8014d8c <USBD_RNDIS_query+0x2e8>)
 8014d04:	68db      	ldr	r3, [r3, #12]
 8014d06:	4619      	mov	r1, r3
 8014d08:	2000      	movs	r0, #0
 8014d0a:	f7ff fe6b 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014d0e:	e011      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_GEN_XMIT_ERROR:             USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, usb_eth_stat.txbad); return;
 8014d10:	4b1e      	ldr	r3, [pc, #120]	@ (8014d8c <USBD_RNDIS_query+0x2e8>)
 8014d12:	689b      	ldr	r3, [r3, #8]
 8014d14:	4619      	mov	r1, r3
 8014d16:	2000      	movs	r0, #0
 8014d18:	f7ff fe64 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014d1c:	e00a      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		case OID_GEN_RCV_NO_BUFFER:          USBD_RNDIS_query_cmplt32(RNDIS_STATUS_SUCCESS, 0); return;
 8014d1e:	2100      	movs	r1, #0
 8014d20:	2000      	movs	r0, #0
 8014d22:	f7ff fe5f 	bl	80149e4 <USBD_RNDIS_query_cmplt32>
 8014d26:	e005      	b.n	8014d34 <USBD_RNDIS_query+0x290>
		default:                             USBD_RNDIS_query_cmplt(RNDIS_STATUS_FAILURE, NULL, 0); return;
 8014d28:	2200      	movs	r2, #0
 8014d2a:	2100      	movs	r1, #0
 8014d2c:	4818      	ldr	r0, [pc, #96]	@ (8014d90 <USBD_RNDIS_query+0x2ec>)
 8014d2e:	f7ff fe85 	bl	8014a3c <USBD_RNDIS_query_cmplt>
 8014d32:	bf00      	nop
	}
}
 8014d34:	3708      	adds	r7, #8
 8014d36:	46bd      	mov	sp, r7
 8014d38:	bd80      	pop	{r7, pc}
 8014d3a:	bf00      	nop
 8014d3c:	200242f8 	.word	0x200242f8
 8014d40:	01020103 	.word	0x01020103
 8014d44:	01020102 	.word	0x01020102
 8014d48:	01020101 	.word	0x01020101
 8014d4c:	01010105 	.word	0x01010105
 8014d50:	00020105 	.word	0x00020105
 8014d54:	00020101 	.word	0x00020101
 8014d58:	0001021b 	.word	0x0001021b
 8014d5c:	00010116 	.word	0x00010116
 8014d60:	00010101 	.word	0x00010101
 8014d64:	fffdfeff 	.word	0xfffdfeff
 8014d68:	fffefeff 	.word	0xfffefeff
 8014d6c:	00010202 	.word	0x00010202
 8014d70:	08016f74 	.word	0x08016f74
 8014d74:	08016f64 	.word	0x08016f64
 8014d78:	08016f6c 	.word	0x08016f6c
 8014d7c:	0001d4c0 	.word	0x0001d4c0
 8014d80:	08016e0c 	.word	0x08016e0c
 8014d84:	200242ec 	.word	0x200242ec
 8014d88:	c00000bb 	.word	0xc00000bb
 8014d8c:	200242dc 	.word	0x200242dc
 8014d90:	c0000001 	.word	0xc0000001

08014d94 <USBD_RNDIS_handleConfigParm>:
/// \param     [in]  uint16_t keylen
/// \param     [in]  uint16_t vallen
///
/// \return    none
static void USBD_RNDIS_handleConfigParm( const char *data, uint16_t keyoffset, uint16_t valoffset, uint16_t keylen, uint16_t vallen )
{
 8014d94:	b480      	push	{r7}
 8014d96:	b085      	sub	sp, #20
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	60f8      	str	r0, [r7, #12]
 8014d9c:	4608      	mov	r0, r1
 8014d9e:	4611      	mov	r1, r2
 8014da0:	461a      	mov	r2, r3
 8014da2:	4603      	mov	r3, r0
 8014da4:	817b      	strh	r3, [r7, #10]
 8014da6:	460b      	mov	r3, r1
 8014da8:	813b      	strh	r3, [r7, #8]
 8014daa:	4613      	mov	r3, r2
 8014dac:	80fb      	strh	r3, [r7, #6]
    (void)data;
    (void)keyoffset;
    (void)valoffset;
    (void)keylen;
    (void)vallen;
}
 8014dae:	bf00      	nop
 8014db0:	3714      	adds	r7, #20
 8014db2:	46bd      	mov	sp, r7
 8014db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db8:	4770      	bx	lr

08014dba <USBD_RNDIS_packetFilter>:
///
/// \param     [in]  uint32_t newfilter
///
/// \return    none
static void USBD_RNDIS_packetFilter( uint32_t newfilter )
{
 8014dba:	b480      	push	{r7}
 8014dbc:	b083      	sub	sp, #12
 8014dbe:	af00      	add	r7, sp, #0
 8014dc0:	6078      	str	r0, [r7, #4]
    (void)newfilter;
}
 8014dc2:	bf00      	nop
 8014dc4:	370c      	adds	r7, #12
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dcc:	4770      	bx	lr
	...

08014dd0 <USBD_RNDIS_handleSetMsg>:
///
/// \param     [in]  void *pdev
///
/// \return    none
static void USBD_RNDIS_handleSetMsg( void *pdev )
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b08a      	sub	sp, #40	@ 0x28
 8014dd4:	af02      	add	r7, sp, #8
 8014dd6:	6078      	str	r0, [r7, #4]
	rndis_set_cmplt_t *c;
	rndis_set_msg_t *m;
	rndis_Oid_t oid;

	c = (rndis_set_cmplt_t *)encapsulated_buffer;
 8014dd8:	4b3d      	ldr	r3, [pc, #244]	@ (8014ed0 <USBD_RNDIS_handleSetMsg+0x100>)
 8014dda:	61fb      	str	r3, [r7, #28]
	m = (rndis_set_msg_t *)encapsulated_buffer;
 8014ddc:	4b3c      	ldr	r3, [pc, #240]	@ (8014ed0 <USBD_RNDIS_handleSetMsg+0x100>)
 8014dde:	61bb      	str	r3, [r7, #24]

	oid = m->Oid;
 8014de0:	69bb      	ldr	r3, [r7, #24]
 8014de2:	68db      	ldr	r3, [r3, #12]
 8014de4:	617b      	str	r3, [r7, #20]
	c->MessageType = REMOTE_NDIS_SET_CMPLT;
 8014de6:	69fb      	ldr	r3, [r7, #28]
 8014de8:	4a3a      	ldr	r2, [pc, #232]	@ (8014ed4 <USBD_RNDIS_handleSetMsg+0x104>)
 8014dea:	601a      	str	r2, [r3, #0]
	c->MessageLength = sizeof(rndis_set_cmplt_t);
 8014dec:	69fb      	ldr	r3, [r7, #28]
 8014dee:	2210      	movs	r2, #16
 8014df0:	605a      	str	r2, [r3, #4]
	c->Status = RNDIS_STATUS_SUCCESS;
 8014df2:	69fb      	ldr	r3, [r7, #28]
 8014df4:	2200      	movs	r2, #0
 8014df6:	60da      	str	r2, [r3, #12]

	switch (oid)
 8014df8:	697b      	ldr	r3, [r7, #20]
 8014dfa:	4a37      	ldr	r2, [pc, #220]	@ (8014ed8 <USBD_RNDIS_handleSetMsg+0x108>)
 8014dfc:	4293      	cmp	r3, r2
 8014dfe:	d058      	beq.n	8014eb2 <USBD_RNDIS_handleSetMsg+0xe2>
 8014e00:	697b      	ldr	r3, [r7, #20]
 8014e02:	4a35      	ldr	r2, [pc, #212]	@ (8014ed8 <USBD_RNDIS_handleSetMsg+0x108>)
 8014e04:	4293      	cmp	r3, r2
 8014e06:	d850      	bhi.n	8014eaa <USBD_RNDIS_handleSetMsg+0xda>
 8014e08:	697b      	ldr	r3, [r7, #20]
 8014e0a:	4a34      	ldr	r2, [pc, #208]	@ (8014edc <USBD_RNDIS_handleSetMsg+0x10c>)
 8014e0c:	4293      	cmp	r3, r2
 8014e0e:	d014      	beq.n	8014e3a <USBD_RNDIS_handleSetMsg+0x6a>
 8014e10:	697b      	ldr	r3, [r7, #20]
 8014e12:	4a32      	ldr	r2, [pc, #200]	@ (8014edc <USBD_RNDIS_handleSetMsg+0x10c>)
 8014e14:	4293      	cmp	r3, r2
 8014e16:	d848      	bhi.n	8014eaa <USBD_RNDIS_handleSetMsg+0xda>
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	4a31      	ldr	r2, [pc, #196]	@ (8014ee0 <USBD_RNDIS_handleSetMsg+0x110>)
 8014e1c:	4293      	cmp	r3, r2
 8014e1e:	d04a      	beq.n	8014eb6 <USBD_RNDIS_handleSetMsg+0xe6>
 8014e20:	697b      	ldr	r3, [r7, #20]
 8014e22:	4a2f      	ldr	r2, [pc, #188]	@ (8014ee0 <USBD_RNDIS_handleSetMsg+0x110>)
 8014e24:	4293      	cmp	r3, r2
 8014e26:	d840      	bhi.n	8014eaa <USBD_RNDIS_handleSetMsg+0xda>
 8014e28:	697b      	ldr	r3, [r7, #20]
 8014e2a:	4a2e      	ldr	r2, [pc, #184]	@ (8014ee4 <USBD_RNDIS_handleSetMsg+0x114>)
 8014e2c:	4293      	cmp	r3, r2
 8014e2e:	d022      	beq.n	8014e76 <USBD_RNDIS_handleSetMsg+0xa6>
 8014e30:	697b      	ldr	r3, [r7, #20]
 8014e32:	4a2d      	ldr	r2, [pc, #180]	@ (8014ee8 <USBD_RNDIS_handleSetMsg+0x118>)
 8014e34:	4293      	cmp	r3, r2
 8014e36:	d040      	beq.n	8014eba <USBD_RNDIS_handleSetMsg+0xea>
 8014e38:	e037      	b.n	8014eaa <USBD_RNDIS_handleSetMsg+0xda>
	{
		// Parameters set up in 'Advanced' tab
		case OID_GEN_RNDIS_CONFIG_PARAMETER:
			{
                rndis_config_parameter_t *p;
				char *ptr = (char *)m;
 8014e3a:	69bb      	ldr	r3, [r7, #24]
 8014e3c:	613b      	str	r3, [r7, #16]
				ptr += sizeof(rndis_generic_msg_t);
 8014e3e:	693b      	ldr	r3, [r7, #16]
 8014e40:	3308      	adds	r3, #8
 8014e42:	613b      	str	r3, [r7, #16]
				ptr += m->InformationBufferOffset;
 8014e44:	69bb      	ldr	r3, [r7, #24]
 8014e46:	695b      	ldr	r3, [r3, #20]
 8014e48:	693a      	ldr	r2, [r7, #16]
 8014e4a:	4413      	add	r3, r2
 8014e4c:	613b      	str	r3, [r7, #16]
				p = (rndis_config_parameter_t *)ptr;
 8014e4e:	693b      	ldr	r3, [r7, #16]
 8014e50:	60fb      	str	r3, [r7, #12]
				USBD_RNDIS_handleConfigParm(ptr, p->ParameterNameOffset, p->ParameterValueOffset, p->ParameterNameLength, p->ParameterValueLength);
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	b299      	uxth	r1, r3
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	68db      	ldr	r3, [r3, #12]
 8014e5c:	b29a      	uxth	r2, r3
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	685b      	ldr	r3, [r3, #4]
 8014e62:	b298      	uxth	r0, r3
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	691b      	ldr	r3, [r3, #16]
 8014e68:	b29b      	uxth	r3, r3
 8014e6a:	9300      	str	r3, [sp, #0]
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	6938      	ldr	r0, [r7, #16]
 8014e70:	f7ff ff90 	bl	8014d94 <USBD_RNDIS_handleConfigParm>
			}
			break;
 8014e74:	e022      	b.n	8014ebc <USBD_RNDIS_handleSetMsg+0xec>

		// Mandatory general OIDs
		case OID_GEN_CURRENT_PACKET_FILTER:
			oid_packet_filter = *INFBUF;
 8014e76:	69bb      	ldr	r3, [r7, #24]
 8014e78:	f103 0208 	add.w	r2, r3, #8
 8014e7c:	69bb      	ldr	r3, [r7, #24]
 8014e7e:	695b      	ldr	r3, [r3, #20]
 8014e80:	4413      	add	r3, r2
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	4a19      	ldr	r2, [pc, #100]	@ (8014eec <USBD_RNDIS_handleSetMsg+0x11c>)
 8014e86:	6013      	str	r3, [r2, #0]
			if (oid_packet_filter)
 8014e88:	4b18      	ldr	r3, [pc, #96]	@ (8014eec <USBD_RNDIS_handleSetMsg+0x11c>)
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d008      	beq.n	8014ea2 <USBD_RNDIS_handleSetMsg+0xd2>
			{
				USBD_RNDIS_packetFilter(oid_packet_filter);
 8014e90:	4b16      	ldr	r3, [pc, #88]	@ (8014eec <USBD_RNDIS_handleSetMsg+0x11c>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	4618      	mov	r0, r3
 8014e96:	f7ff ff90 	bl	8014dba <USBD_RNDIS_packetFilter>
				rndis_state = rndis_data_initialized;
 8014e9a:	4b15      	ldr	r3, [pc, #84]	@ (8014ef0 <USBD_RNDIS_handleSetMsg+0x120>)
 8014e9c:	2202      	movs	r2, #2
 8014e9e:	701a      	strb	r2, [r3, #0]
			} 
			else 
			{
				rndis_state = rndis_initialized;
			}
			break;
 8014ea0:	e00c      	b.n	8014ebc <USBD_RNDIS_handleSetMsg+0xec>
				rndis_state = rndis_initialized;
 8014ea2:	4b13      	ldr	r3, [pc, #76]	@ (8014ef0 <USBD_RNDIS_handleSetMsg+0x120>)
 8014ea4:	2201      	movs	r2, #1
 8014ea6:	701a      	strb	r2, [r3, #0]
			break;
 8014ea8:	e008      	b.n	8014ebc <USBD_RNDIS_handleSetMsg+0xec>
		// Power Managment: fails for now
		case OID_PNP_ADD_WAKE_UP_PATTERN:
		case OID_PNP_REMOVE_WAKE_UP_PATTERN:
		case OID_PNP_ENABLE_WAKE_UP:
		default:
			c->Status = RNDIS_STATUS_FAILURE;
 8014eaa:	69fb      	ldr	r3, [r7, #28]
 8014eac:	4a11      	ldr	r2, [pc, #68]	@ (8014ef4 <USBD_RNDIS_handleSetMsg+0x124>)
 8014eae:	60da      	str	r2, [r3, #12]
			break;
 8014eb0:	e004      	b.n	8014ebc <USBD_RNDIS_handleSetMsg+0xec>
			break;
 8014eb2:	bf00      	nop
 8014eb4:	e002      	b.n	8014ebc <USBD_RNDIS_handleSetMsg+0xec>
			break;
 8014eb6:	bf00      	nop
 8014eb8:	e000      	b.n	8014ebc <USBD_RNDIS_handleSetMsg+0xec>
			break;
 8014eba:	bf00      	nop
	}

	// c->MessageID is same as before
	USBD_LL_Transmit(&hUsbDeviceFS, RNDIS_NOTIFICATION_IN_EP, (uint8_t *)"\x01\x00\x00\x00\x00\x00\x00\x00", 8);
 8014ebc:	2308      	movs	r3, #8
 8014ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8014ef8 <USBD_RNDIS_handleSetMsg+0x128>)
 8014ec0:	2181      	movs	r1, #129	@ 0x81
 8014ec2:	480e      	ldr	r0, [pc, #56]	@ (8014efc <USBD_RNDIS_handleSetMsg+0x12c>)
 8014ec4:	f000 fc84 	bl	80157d0 <USBD_LL_Transmit>
	return;
 8014ec8:	bf00      	nop
}
 8014eca:	3720      	adds	r7, #32
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}
 8014ed0:	200242f8 	.word	0x200242f8
 8014ed4:	80000005 	.word	0x80000005
 8014ed8:	01010103 	.word	0x01010103
 8014edc:	0001021b 	.word	0x0001021b
 8014ee0:	00010112 	.word	0x00010112
 8014ee4:	0001010e 	.word	0x0001010e
 8014ee8:	0001010f 	.word	0x0001010f
 8014eec:	200242ec 	.word	0x200242ec
 8014ef0:	200242f4 	.word	0x200242f4
 8014ef4:	c0000001 	.word	0xc0000001
 8014ef8:	08016dfc 	.word	0x08016dfc
 8014efc:	20024380 	.word	0x20024380

08014f00 <usb_init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void usb_init( void )
{
 8014f00:	b580      	push	{r7, lr}
 8014f02:	af00      	add	r7, sp, #0
   // force enum
   usb_forceHostEnum();
 8014f04:	f000 f87a 	bl	8014ffc <usb_forceHostEnum>
   
   // Init Device Library, add supported class and start the library.
   if( USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK )
 8014f08:	2200      	movs	r2, #0
 8014f0a:	490f      	ldr	r1, [pc, #60]	@ (8014f48 <usb_init+0x48>)
 8014f0c:	480f      	ldr	r0, [pc, #60]	@ (8014f4c <usb_init+0x4c>)
 8014f0e:	f7f1 fc30 	bl	8006772 <USBD_Init>
 8014f12:	4603      	mov	r3, r0
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d001      	beq.n	8014f1c <usb_init+0x1c>
   {
      Error_Handler();
 8014f18:	f7ec fee0 	bl	8001cdc <Error_Handler>
   }
   if( USBD_RegisterClass(&hUsbDeviceFS, USBD_RNDIS_getClass() ) != USBD_OK )
 8014f1c:	f7ff fad4 	bl	80144c8 <USBD_RNDIS_getClass>
 8014f20:	4603      	mov	r3, r0
 8014f22:	4619      	mov	r1, r3
 8014f24:	4809      	ldr	r0, [pc, #36]	@ (8014f4c <usb_init+0x4c>)
 8014f26:	f7f1 fc54 	bl	80067d2 <USBD_RegisterClass>
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d001      	beq.n	8014f34 <usb_init+0x34>
   {
      Error_Handler();
 8014f30:	f7ec fed4 	bl	8001cdc <Error_Handler>
   }
   if( USBD_Start(&hUsbDeviceFS) != USBD_OK )
 8014f34:	4805      	ldr	r0, [pc, #20]	@ (8014f4c <usb_init+0x4c>)
 8014f36:	f7f1 fc73 	bl	8006820 <USBD_Start>
 8014f3a:	4603      	mov	r3, r0
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d001      	beq.n	8014f44 <usb_init+0x44>
   {
      Error_Handler();
 8014f40:	f7ec fecc 	bl	8001cdc <Error_Handler>
   }
}
 8014f44:	bf00      	nop
 8014f46:	bd80      	pop	{r7, pc}
 8014f48:	20000140 	.word	0x20000140
 8014f4c:	20024380 	.word	0x20024380

08014f50 <on_usbOutRxPacket>:
/// \param     [in]  const char *data
/// \param     [in]  int size
///
/// \return    none
inline void on_usbOutRxPacket(const char *data, int size)
{
 8014f50:	b580      	push	{r7, lr}
 8014f52:	b082      	sub	sp, #8
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
 8014f58:	6039      	str	r1, [r7, #0]
   rndis_statistic.counterRxFrame++;
 8014f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8014f94 <on_usbOutRxPacket+0x44>)
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	3301      	adds	r3, #1
 8014f60:	4a0c      	ldr	r2, [pc, #48]	@ (8014f94 <on_usbOutRxPacket+0x44>)
 8014f62:	6013      	str	r3, [r2, #0]
   rndis_statistic.counterRxData+=(uint32_t)size;
 8014f64:	4b0b      	ldr	r3, [pc, #44]	@ (8014f94 <on_usbOutRxPacket+0x44>)
 8014f66:	689a      	ldr	r2, [r3, #8]
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	4413      	add	r3, r2
 8014f6c:	4a09      	ldr	r2, [pc, #36]	@ (8014f94 <on_usbOutRxPacket+0x44>)
 8014f6e:	6093      	str	r3, [r2, #8]
   queue_enqueue( (uint8_t*)data, size, &usbQueue );
 8014f70:	683b      	ldr	r3, [r7, #0]
 8014f72:	b29b      	uxth	r3, r3
 8014f74:	4a08      	ldr	r2, [pc, #32]	@ (8014f98 <on_usbOutRxPacket+0x48>)
 8014f76:	4619      	mov	r1, r3
 8014f78:	6878      	ldr	r0, [r7, #4]
 8014f7a:	f7ec ffdb 	bl	8001f34 <queue_enqueue>
   USBD_RNDIS_setBuffer( queue_getHeadBuffer( &usbQueue ) );
 8014f7e:	4806      	ldr	r0, [pc, #24]	@ (8014f98 <on_usbOutRxPacket+0x48>)
 8014f80:	f7ed f8c6 	bl	8002110 <queue_getHeadBuffer>
 8014f84:	4603      	mov	r3, r0
 8014f86:	4618      	mov	r0, r3
 8014f88:	f7ff fce0 	bl	801494c <USBD_RNDIS_setBuffer>
}
 8014f8c:	bf00      	nop
 8014f8e:	3708      	adds	r7, #8
 8014f90:	46bd      	mov	sp, r7
 8014f92:	bd80      	pop	{r7, pc}
 8014f94:	20024370 	.word	0x20024370
 8014f98:	20002d7c 	.word	0x20002d7c

08014f9c <on_usbInTxCplt>:
///
/// \param     none
///
/// \return    none
inline void on_usbInTxCplt( void )
{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	af00      	add	r7, sp, #0
   queue_dequeue(&tcpQueue);
 8014fa0:	4802      	ldr	r0, [pc, #8]	@ (8014fac <on_usbInTxCplt+0x10>)
 8014fa2:	f7ec ff0b 	bl	8001dbc <queue_dequeue>
}
 8014fa6:	bf00      	nop
 8014fa8:	bd80      	pop	{r7, pc}
 8014faa:	bf00      	nop
 8014fac:	20000244 	.word	0x20000244

08014fb0 <usb_output>:
/// \param     [in]  uint8_t* dpointer
/// \param     [in]  uint16_t length
///
/// \return    none
uint8_t usb_output( uint8_t* dpointer, uint16_t length )
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b082      	sub	sp, #8
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
 8014fb8:	460b      	mov	r3, r1
 8014fba:	807b      	strh	r3, [r7, #2]
   if(!USBD_RNDIS_send(dpointer, length))
 8014fbc:	887b      	ldrh	r3, [r7, #2]
 8014fbe:	4619      	mov	r1, r3
 8014fc0:	6878      	ldr	r0, [r7, #4]
 8014fc2:	f7ff fc5b 	bl	801487c <USBD_RNDIS_send>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	f083 0301 	eor.w	r3, r3, #1
 8014fcc:	b2db      	uxtb	r3, r3
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d001      	beq.n	8014fd6 <usb_output+0x26>
   {
      return 0;
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	e00b      	b.n	8014fee <usb_output+0x3e>
   }
   rndis_statistic.counterTxFrame++;
 8014fd6:	4b08      	ldr	r3, [pc, #32]	@ (8014ff8 <usb_output+0x48>)
 8014fd8:	685b      	ldr	r3, [r3, #4]
 8014fda:	3301      	adds	r3, #1
 8014fdc:	4a06      	ldr	r2, [pc, #24]	@ (8014ff8 <usb_output+0x48>)
 8014fde:	6053      	str	r3, [r2, #4]
   rndis_statistic.counterTxData+=(uint32_t)length;
 8014fe0:	4b05      	ldr	r3, [pc, #20]	@ (8014ff8 <usb_output+0x48>)
 8014fe2:	68da      	ldr	r2, [r3, #12]
 8014fe4:	887b      	ldrh	r3, [r7, #2]
 8014fe6:	4413      	add	r3, r2
 8014fe8:	4a03      	ldr	r2, [pc, #12]	@ (8014ff8 <usb_output+0x48>)
 8014fea:	60d3      	str	r3, [r2, #12]
   return 1;
 8014fec:	2301      	movs	r3, #1
}
 8014fee:	4618      	mov	r0, r3
 8014ff0:	3708      	adds	r7, #8
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bd80      	pop	{r7, pc}
 8014ff6:	bf00      	nop
 8014ff8:	20024370 	.word	0x20024370

08014ffc <usb_forceHostEnum>:
///
/// \param     none
///
/// \return    none
void usb_forceHostEnum( void )
{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b088      	sub	sp, #32
 8015000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_Init_Struct; 
  
   // set GPIO preipheral clock
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8015002:	4b21      	ldr	r3, [pc, #132]	@ (8015088 <usb_forceHostEnum+0x8c>)
 8015004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015006:	4a20      	ldr	r2, [pc, #128]	@ (8015088 <usb_forceHostEnum+0x8c>)
 8015008:	f043 0301 	orr.w	r3, r3, #1
 801500c:	6313      	str	r3, [r2, #48]	@ 0x30
 801500e:	4b1e      	ldr	r3, [pc, #120]	@ (8015088 <usb_forceHostEnum+0x8c>)
 8015010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015012:	f003 0301 	and.w	r3, r3, #1
 8015016:	607b      	str	r3, [r7, #4]
 8015018:	687b      	ldr	r3, [r7, #4]

  // init as push pull
  GPIO_Init_Struct.Pin     = GPIO_PIN_12;
 801501a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801501e:	60bb      	str	r3, [r7, #8]
  GPIO_Init_Struct.Speed   = GPIO_SPEED_FREQ_HIGH;
 8015020:	2302      	movs	r3, #2
 8015022:	617b      	str	r3, [r7, #20]
  GPIO_Init_Struct.Mode    = GPIO_MODE_OUTPUT_PP;
 8015024:	2301      	movs	r3, #1
 8015026:	60fb      	str	r3, [r7, #12]
  GPIO_Init_Struct.Pull    = GPIO_PULLDOWN ;
 8015028:	2302      	movs	r3, #2
 801502a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_Init_Struct);  
 801502c:	f107 0308 	add.w	r3, r7, #8
 8015030:	4619      	mov	r1, r3
 8015032:	4816      	ldr	r0, [pc, #88]	@ (801508c <usb_forceHostEnum+0x90>)
 8015034:	f7ed fcbc 	bl	80029b0 <HAL_GPIO_Init>
   
   // set bit
   GPIOA->BSRR = (uint32_t)GPIO_PIN_12;
 8015038:	4b14      	ldr	r3, [pc, #80]	@ (801508c <usb_forceHostEnum+0x90>)
 801503a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801503e:	619a      	str	r2, [r3, #24]
 
   // delay to force host to start enummeration
   static uint32_t i=0;
   for(uint32_t t=0; t<100000; t++)
 8015040:	2300      	movs	r3, #0
 8015042:	61fb      	str	r3, [r7, #28]
 8015044:	e007      	b.n	8015056 <usb_forceHostEnum+0x5a>
   {
      i++;
 8015046:	4b12      	ldr	r3, [pc, #72]	@ (8015090 <usb_forceHostEnum+0x94>)
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	3301      	adds	r3, #1
 801504c:	4a10      	ldr	r2, [pc, #64]	@ (8015090 <usb_forceHostEnum+0x94>)
 801504e:	6013      	str	r3, [r2, #0]
   for(uint32_t t=0; t<100000; t++)
 8015050:	69fb      	ldr	r3, [r7, #28]
 8015052:	3301      	adds	r3, #1
 8015054:	61fb      	str	r3, [r7, #28]
 8015056:	69fb      	ldr	r3, [r7, #28]
 8015058:	4a0e      	ldr	r2, [pc, #56]	@ (8015094 <usb_forceHostEnum+0x98>)
 801505a:	4293      	cmp	r3, r2
 801505c:	d9f3      	bls.n	8015046 <usb_forceHostEnum+0x4a>
   }
   
   // reset bit
   GPIOA->BSRR = (uint32_t)GPIO_PIN_12<<16u;
 801505e:	4b0b      	ldr	r3, [pc, #44]	@ (801508c <usb_forceHostEnum+0x90>)
 8015060:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015064:	619a      	str	r2, [r3, #24]
   
   // init as opendrain
   GPIO_Init_Struct.Speed  = GPIO_SPEED_FREQ_HIGH;
 8015066:	2302      	movs	r3, #2
 8015068:	617b      	str	r3, [r7, #20]
   GPIO_Init_Struct.Mode   = GPIO_MODE_OUTPUT_OD;
 801506a:	2311      	movs	r3, #17
 801506c:	60fb      	str	r3, [r7, #12]
   GPIO_Init_Struct.Pull   = GPIO_PULLDOWN;
 801506e:	2302      	movs	r3, #2
 8015070:	613b      	str	r3, [r7, #16]
   HAL_GPIO_Init(GPIOA, &GPIO_Init_Struct);  
 8015072:	f107 0308 	add.w	r3, r7, #8
 8015076:	4619      	mov	r1, r3
 8015078:	4804      	ldr	r0, [pc, #16]	@ (801508c <usb_forceHostEnum+0x90>)
 801507a:	f7ed fc99 	bl	80029b0 <HAL_GPIO_Init>
}
 801507e:	bf00      	nop
 8015080:	3720      	adds	r7, #32
 8015082:	46bd      	mov	sp, r7
 8015084:	bd80      	pop	{r7, pc}
 8015086:	bf00      	nop
 8015088:	40023800 	.word	0x40023800
 801508c:	40020000 	.word	0x40020000
 8015090:	20024650 	.word	0x20024650
 8015094:	0001869f 	.word	0x0001869f

08015098 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015098:	b480      	push	{r7}
 801509a:	b083      	sub	sp, #12
 801509c:	af00      	add	r7, sp, #0
 801509e:	4603      	mov	r3, r0
 80150a0:	6039      	str	r1, [r7, #0]
 80150a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80150a4:	683b      	ldr	r3, [r7, #0]
 80150a6:	2212      	movs	r2, #18
 80150a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80150aa:	4b03      	ldr	r3, [pc, #12]	@ (80150b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80150ac:	4618      	mov	r0, r3
 80150ae:	370c      	adds	r7, #12
 80150b0:	46bd      	mov	sp, r7
 80150b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b6:	4770      	bx	lr
 80150b8:	2000015c 	.word	0x2000015c

080150bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150bc:	b480      	push	{r7}
 80150be:	b083      	sub	sp, #12
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	4603      	mov	r3, r0
 80150c4:	6039      	str	r1, [r7, #0]
 80150c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80150c8:	683b      	ldr	r3, [r7, #0]
 80150ca:	2204      	movs	r2, #4
 80150cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80150ce:	4b03      	ldr	r3, [pc, #12]	@ (80150dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80150d0:	4618      	mov	r0, r3
 80150d2:	370c      	adds	r7, #12
 80150d4:	46bd      	mov	sp, r7
 80150d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150da:	4770      	bx	lr
 80150dc:	20000170 	.word	0x20000170

080150e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b082      	sub	sp, #8
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	4603      	mov	r3, r0
 80150e8:	6039      	str	r1, [r7, #0]
 80150ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80150ec:	79fb      	ldrb	r3, [r7, #7]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d105      	bne.n	80150fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80150f2:	683a      	ldr	r2, [r7, #0]
 80150f4:	4907      	ldr	r1, [pc, #28]	@ (8015114 <USBD_FS_ProductStrDescriptor+0x34>)
 80150f6:	4808      	ldr	r0, [pc, #32]	@ (8015118 <USBD_FS_ProductStrDescriptor+0x38>)
 80150f8:	f7f2 fbcd 	bl	8007896 <USBD_GetString>
 80150fc:	e004      	b.n	8015108 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80150fe:	683a      	ldr	r2, [r7, #0]
 8015100:	4904      	ldr	r1, [pc, #16]	@ (8015114 <USBD_FS_ProductStrDescriptor+0x34>)
 8015102:	4805      	ldr	r0, [pc, #20]	@ (8015118 <USBD_FS_ProductStrDescriptor+0x38>)
 8015104:	f7f2 fbc7 	bl	8007896 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015108:	4b02      	ldr	r3, [pc, #8]	@ (8015114 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801510a:	4618      	mov	r0, r3
 801510c:	3708      	adds	r7, #8
 801510e:	46bd      	mov	sp, r7
 8015110:	bd80      	pop	{r7, pc}
 8015112:	bf00      	nop
 8015114:	20024654 	.word	0x20024654
 8015118:	08016e14 	.word	0x08016e14

0801511c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801511c:	b580      	push	{r7, lr}
 801511e:	b082      	sub	sp, #8
 8015120:	af00      	add	r7, sp, #0
 8015122:	4603      	mov	r3, r0
 8015124:	6039      	str	r1, [r7, #0]
 8015126:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015128:	683a      	ldr	r2, [r7, #0]
 801512a:	4904      	ldr	r1, [pc, #16]	@ (801513c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801512c:	4804      	ldr	r0, [pc, #16]	@ (8015140 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801512e:	f7f2 fbb2 	bl	8007896 <USBD_GetString>
  return USBD_StrDesc;
 8015132:	4b02      	ldr	r3, [pc, #8]	@ (801513c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015134:	4618      	mov	r0, r3
 8015136:	3708      	adds	r7, #8
 8015138:	46bd      	mov	sp, r7
 801513a:	bd80      	pop	{r7, pc}
 801513c:	20024654 	.word	0x20024654
 8015140:	08016e24 	.word	0x08016e24

08015144 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b082      	sub	sp, #8
 8015148:	af00      	add	r7, sp, #0
 801514a:	4603      	mov	r3, r0
 801514c:	6039      	str	r1, [r7, #0]
 801514e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015150:	683b      	ldr	r3, [r7, #0]
 8015152:	221a      	movs	r2, #26
 8015154:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015156:	f000 f843 	bl	80151e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801515a:	4b02      	ldr	r3, [pc, #8]	@ (8015164 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801515c:	4618      	mov	r0, r3
 801515e:	3708      	adds	r7, #8
 8015160:	46bd      	mov	sp, r7
 8015162:	bd80      	pop	{r7, pc}
 8015164:	20000174 	.word	0x20000174

08015168 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015168:	b580      	push	{r7, lr}
 801516a:	b082      	sub	sp, #8
 801516c:	af00      	add	r7, sp, #0
 801516e:	4603      	mov	r3, r0
 8015170:	6039      	str	r1, [r7, #0]
 8015172:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015174:	79fb      	ldrb	r3, [r7, #7]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d105      	bne.n	8015186 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801517a:	683a      	ldr	r2, [r7, #0]
 801517c:	4907      	ldr	r1, [pc, #28]	@ (801519c <USBD_FS_ConfigStrDescriptor+0x34>)
 801517e:	4808      	ldr	r0, [pc, #32]	@ (80151a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015180:	f7f2 fb89 	bl	8007896 <USBD_GetString>
 8015184:	e004      	b.n	8015190 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015186:	683a      	ldr	r2, [r7, #0]
 8015188:	4904      	ldr	r1, [pc, #16]	@ (801519c <USBD_FS_ConfigStrDescriptor+0x34>)
 801518a:	4805      	ldr	r0, [pc, #20]	@ (80151a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801518c:	f7f2 fb83 	bl	8007896 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015190:	4b02      	ldr	r3, [pc, #8]	@ (801519c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015192:	4618      	mov	r0, r3
 8015194:	3708      	adds	r7, #8
 8015196:	46bd      	mov	sp, r7
 8015198:	bd80      	pop	{r7, pc}
 801519a:	bf00      	nop
 801519c:	20024654 	.word	0x20024654
 80151a0:	08016e28 	.word	0x08016e28

080151a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b082      	sub	sp, #8
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	4603      	mov	r3, r0
 80151ac:	6039      	str	r1, [r7, #0]
 80151ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80151b0:	79fb      	ldrb	r3, [r7, #7]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d105      	bne.n	80151c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80151b6:	683a      	ldr	r2, [r7, #0]
 80151b8:	4907      	ldr	r1, [pc, #28]	@ (80151d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80151ba:	4808      	ldr	r0, [pc, #32]	@ (80151dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80151bc:	f7f2 fb6b 	bl	8007896 <USBD_GetString>
 80151c0:	e004      	b.n	80151cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80151c2:	683a      	ldr	r2, [r7, #0]
 80151c4:	4904      	ldr	r1, [pc, #16]	@ (80151d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80151c6:	4805      	ldr	r0, [pc, #20]	@ (80151dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80151c8:	f7f2 fb65 	bl	8007896 <USBD_GetString>
  }
  return USBD_StrDesc;
 80151cc:	4b02      	ldr	r3, [pc, #8]	@ (80151d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80151ce:	4618      	mov	r0, r3
 80151d0:	3708      	adds	r7, #8
 80151d2:	46bd      	mov	sp, r7
 80151d4:	bd80      	pop	{r7, pc}
 80151d6:	bf00      	nop
 80151d8:	20024654 	.word	0x20024654
 80151dc:	08016e38 	.word	0x08016e38

080151e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80151e0:	b580      	push	{r7, lr}
 80151e2:	b084      	sub	sp, #16
 80151e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80151e6:	4b0f      	ldr	r3, [pc, #60]	@ (8015224 <Get_SerialNum+0x44>)
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80151ec:	4b0e      	ldr	r3, [pc, #56]	@ (8015228 <Get_SerialNum+0x48>)
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80151f2:	4b0e      	ldr	r3, [pc, #56]	@ (801522c <Get_SerialNum+0x4c>)
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80151f8:	68fa      	ldr	r2, [r7, #12]
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	4413      	add	r3, r2
 80151fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d009      	beq.n	801521a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015206:	2208      	movs	r2, #8
 8015208:	4909      	ldr	r1, [pc, #36]	@ (8015230 <Get_SerialNum+0x50>)
 801520a:	68f8      	ldr	r0, [r7, #12]
 801520c:	f000 f814 	bl	8015238 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015210:	2204      	movs	r2, #4
 8015212:	4908      	ldr	r1, [pc, #32]	@ (8015234 <Get_SerialNum+0x54>)
 8015214:	68b8      	ldr	r0, [r7, #8]
 8015216:	f000 f80f 	bl	8015238 <IntToUnicode>
  }
}
 801521a:	bf00      	nop
 801521c:	3710      	adds	r7, #16
 801521e:	46bd      	mov	sp, r7
 8015220:	bd80      	pop	{r7, pc}
 8015222:	bf00      	nop
 8015224:	1ff0f420 	.word	0x1ff0f420
 8015228:	1ff0f424 	.word	0x1ff0f424
 801522c:	1ff0f428 	.word	0x1ff0f428
 8015230:	20000176 	.word	0x20000176
 8015234:	20000186 	.word	0x20000186

08015238 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015238:	b480      	push	{r7}
 801523a:	b087      	sub	sp, #28
 801523c:	af00      	add	r7, sp, #0
 801523e:	60f8      	str	r0, [r7, #12]
 8015240:	60b9      	str	r1, [r7, #8]
 8015242:	4613      	mov	r3, r2
 8015244:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015246:	2300      	movs	r3, #0
 8015248:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801524a:	2300      	movs	r3, #0
 801524c:	75fb      	strb	r3, [r7, #23]
 801524e:	e027      	b.n	80152a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	0f1b      	lsrs	r3, r3, #28
 8015254:	2b09      	cmp	r3, #9
 8015256:	d80b      	bhi.n	8015270 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	0f1b      	lsrs	r3, r3, #28
 801525c:	b2da      	uxtb	r2, r3
 801525e:	7dfb      	ldrb	r3, [r7, #23]
 8015260:	005b      	lsls	r3, r3, #1
 8015262:	4619      	mov	r1, r3
 8015264:	68bb      	ldr	r3, [r7, #8]
 8015266:	440b      	add	r3, r1
 8015268:	3230      	adds	r2, #48	@ 0x30
 801526a:	b2d2      	uxtb	r2, r2
 801526c:	701a      	strb	r2, [r3, #0]
 801526e:	e00a      	b.n	8015286 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	0f1b      	lsrs	r3, r3, #28
 8015274:	b2da      	uxtb	r2, r3
 8015276:	7dfb      	ldrb	r3, [r7, #23]
 8015278:	005b      	lsls	r3, r3, #1
 801527a:	4619      	mov	r1, r3
 801527c:	68bb      	ldr	r3, [r7, #8]
 801527e:	440b      	add	r3, r1
 8015280:	3237      	adds	r2, #55	@ 0x37
 8015282:	b2d2      	uxtb	r2, r2
 8015284:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	011b      	lsls	r3, r3, #4
 801528a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801528c:	7dfb      	ldrb	r3, [r7, #23]
 801528e:	005b      	lsls	r3, r3, #1
 8015290:	3301      	adds	r3, #1
 8015292:	68ba      	ldr	r2, [r7, #8]
 8015294:	4413      	add	r3, r2
 8015296:	2200      	movs	r2, #0
 8015298:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801529a:	7dfb      	ldrb	r3, [r7, #23]
 801529c:	3301      	adds	r3, #1
 801529e:	75fb      	strb	r3, [r7, #23]
 80152a0:	7dfa      	ldrb	r2, [r7, #23]
 80152a2:	79fb      	ldrb	r3, [r7, #7]
 80152a4:	429a      	cmp	r2, r3
 80152a6:	d3d3      	bcc.n	8015250 <IntToUnicode+0x18>
  }
}
 80152a8:	bf00      	nop
 80152aa:	bf00      	nop
 80152ac:	371c      	adds	r7, #28
 80152ae:	46bd      	mov	sp, r7
 80152b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b4:	4770      	bx	lr
	...

080152b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80152b8:	b580      	push	{r7, lr}
 80152ba:	b08a      	sub	sp, #40	@ 0x28
 80152bc:	af00      	add	r7, sp, #0
 80152be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80152c0:	f107 0314 	add.w	r3, r7, #20
 80152c4:	2200      	movs	r2, #0
 80152c6:	601a      	str	r2, [r3, #0]
 80152c8:	605a      	str	r2, [r3, #4]
 80152ca:	609a      	str	r2, [r3, #8]
 80152cc:	60da      	str	r2, [r3, #12]
 80152ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80152d8:	d13c      	bne.n	8015354 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80152da:	4b20      	ldr	r3, [pc, #128]	@ (801535c <HAL_PCD_MspInit+0xa4>)
 80152dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80152de:	4a1f      	ldr	r2, [pc, #124]	@ (801535c <HAL_PCD_MspInit+0xa4>)
 80152e0:	f043 0301 	orr.w	r3, r3, #1
 80152e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80152e6:	4b1d      	ldr	r3, [pc, #116]	@ (801535c <HAL_PCD_MspInit+0xa4>)
 80152e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80152ea:	f003 0301 	and.w	r3, r3, #1
 80152ee:	613b      	str	r3, [r7, #16]
 80152f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80152f2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80152f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80152f8:	2302      	movs	r3, #2
 80152fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80152fc:	2300      	movs	r3, #0
 80152fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015300:	2303      	movs	r3, #3
 8015302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015304:	230a      	movs	r3, #10
 8015306:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015308:	f107 0314 	add.w	r3, r7, #20
 801530c:	4619      	mov	r1, r3
 801530e:	4814      	ldr	r0, [pc, #80]	@ (8015360 <HAL_PCD_MspInit+0xa8>)
 8015310:	f7ed fb4e 	bl	80029b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015314:	4b11      	ldr	r3, [pc, #68]	@ (801535c <HAL_PCD_MspInit+0xa4>)
 8015316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015318:	4a10      	ldr	r2, [pc, #64]	@ (801535c <HAL_PCD_MspInit+0xa4>)
 801531a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801531e:	6353      	str	r3, [r2, #52]	@ 0x34
 8015320:	4b0e      	ldr	r3, [pc, #56]	@ (801535c <HAL_PCD_MspInit+0xa4>)
 8015322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015328:	60fb      	str	r3, [r7, #12]
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	4b0b      	ldr	r3, [pc, #44]	@ (801535c <HAL_PCD_MspInit+0xa4>)
 801532e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015330:	4a0a      	ldr	r2, [pc, #40]	@ (801535c <HAL_PCD_MspInit+0xa4>)
 8015332:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8015336:	6453      	str	r3, [r2, #68]	@ 0x44
 8015338:	4b08      	ldr	r3, [pc, #32]	@ (801535c <HAL_PCD_MspInit+0xa4>)
 801533a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801533c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8015340:	60bb      	str	r3, [r7, #8]
 8015342:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015344:	2200      	movs	r2, #0
 8015346:	2105      	movs	r1, #5
 8015348:	2043      	movs	r0, #67	@ 0x43
 801534a:	f7ed fb07 	bl	800295c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801534e:	2043      	movs	r0, #67	@ 0x43
 8015350:	f7ed fb20 	bl	8002994 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015354:	bf00      	nop
 8015356:	3728      	adds	r7, #40	@ 0x28
 8015358:	46bd      	mov	sp, r7
 801535a:	bd80      	pop	{r7, pc}
 801535c:	40023800 	.word	0x40023800
 8015360:	40020000 	.word	0x40020000

08015364 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b082      	sub	sp, #8
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8015378:	4619      	mov	r1, r3
 801537a:	4610      	mov	r0, r2
 801537c:	f7f1 fa9b 	bl	80068b6 <USBD_LL_SetupStage>
}
 8015380:	bf00      	nop
 8015382:	3708      	adds	r7, #8
 8015384:	46bd      	mov	sp, r7
 8015386:	bd80      	pop	{r7, pc}

08015388 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b082      	sub	sp, #8
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
 8015390:	460b      	mov	r3, r1
 8015392:	70fb      	strb	r3, [r7, #3]
   static uint32_t llCbDataOut;
   llCbDataOut++;
 8015394:	4b0c      	ldr	r3, [pc, #48]	@ (80153c8 <HAL_PCD_DataOutStageCallback+0x40>)
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	3301      	adds	r3, #1
 801539a:	4a0b      	ldr	r2, [pc, #44]	@ (80153c8 <HAL_PCD_DataOutStageCallback+0x40>)
 801539c:	6013      	str	r3, [r2, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 80153a4:	78fa      	ldrb	r2, [r7, #3]
 80153a6:	6879      	ldr	r1, [r7, #4]
 80153a8:	4613      	mov	r3, r2
 80153aa:	00db      	lsls	r3, r3, #3
 80153ac:	4413      	add	r3, r2
 80153ae:	009b      	lsls	r3, r3, #2
 80153b0:	440b      	add	r3, r1
 80153b2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80153b6:	681a      	ldr	r2, [r3, #0]
 80153b8:	78fb      	ldrb	r3, [r7, #3]
 80153ba:	4619      	mov	r1, r3
 80153bc:	f7f1 fad0 	bl	8006960 <USBD_LL_DataOutStage>
}
 80153c0:	bf00      	nop
 80153c2:	3708      	adds	r7, #8
 80153c4:	46bd      	mov	sp, r7
 80153c6:	bd80      	pop	{r7, pc}
 80153c8:	20024d34 	.word	0x20024d34

080153cc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80153cc:	b580      	push	{r7, lr}
 80153ce:	b082      	sub	sp, #8
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	6078      	str	r0, [r7, #4]
 80153d4:	460b      	mov	r3, r1
 80153d6:	70fb      	strb	r3, [r7, #3]
   static uint32_t llCbDataIn;
   llCbDataIn++;
 80153d8:	4b0c      	ldr	r3, [pc, #48]	@ (801540c <HAL_PCD_DataInStageCallback+0x40>)
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	3301      	adds	r3, #1
 80153de:	4a0b      	ldr	r2, [pc, #44]	@ (801540c <HAL_PCD_DataInStageCallback+0x40>)
 80153e0:	6013      	str	r3, [r2, #0]
   
   USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 80153e8:	78fa      	ldrb	r2, [r7, #3]
 80153ea:	6879      	ldr	r1, [r7, #4]
 80153ec:	4613      	mov	r3, r2
 80153ee:	00db      	lsls	r3, r3, #3
 80153f0:	4413      	add	r3, r2
 80153f2:	009b      	lsls	r3, r3, #2
 80153f4:	440b      	add	r3, r1
 80153f6:	3320      	adds	r3, #32
 80153f8:	681a      	ldr	r2, [r3, #0]
 80153fa:	78fb      	ldrb	r3, [r7, #3]
 80153fc:	4619      	mov	r1, r3
 80153fe:	f7f1 fb13 	bl	8006a28 <USBD_LL_DataInStage>
}
 8015402:	bf00      	nop
 8015404:	3708      	adds	r7, #8
 8015406:	46bd      	mov	sp, r7
 8015408:	bd80      	pop	{r7, pc}
 801540a:	bf00      	nop
 801540c:	20024d38 	.word	0x20024d38

08015410 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015410:	b580      	push	{r7, lr}
 8015412:	b082      	sub	sp, #8
 8015414:	af00      	add	r7, sp, #0
 8015416:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801541e:	4618      	mov	r0, r3
 8015420:	f7f1 fc2c 	bl	8006c7c <USBD_LL_SOF>
}
 8015424:	bf00      	nop
 8015426:	3708      	adds	r7, #8
 8015428:	46bd      	mov	sp, r7
 801542a:	bd80      	pop	{r7, pc}

0801542c <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801542c:	b580      	push	{r7, lr}
 801542e:	b084      	sub	sp, #16
 8015430:	af00      	add	r7, sp, #0
 8015432:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015434:	2301      	movs	r3, #1
 8015436:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	79db      	ldrb	r3, [r3, #7]
 801543c:	2b02      	cmp	r3, #2
 801543e:	d001      	beq.n	8015444 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015440:	f7ec fc4c 	bl	8001cdc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801544a:	7bfa      	ldrb	r2, [r7, #15]
 801544c:	4611      	mov	r1, r2
 801544e:	4618      	mov	r0, r3
 8015450:	f7f1 fbd6 	bl	8006c00 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801545a:	4618      	mov	r0, r3
 801545c:	f7f1 fb82 	bl	8006b64 <USBD_LL_Reset>
}
 8015460:	bf00      	nop
 8015462:	3710      	adds	r7, #16
 8015464:	46bd      	mov	sp, r7
 8015466:	bd80      	pop	{r7, pc}

08015468 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b082      	sub	sp, #8
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8015476:	4618      	mov	r0, r3
 8015478:	f7f1 fbd2 	bl	8006c20 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	687a      	ldr	r2, [r7, #4]
 8015488:	6812      	ldr	r2, [r2, #0]
 801548a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801548e:	f043 0301 	orr.w	r3, r3, #1
 8015492:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	7adb      	ldrb	r3, [r3, #11]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d005      	beq.n	80154a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801549c:	4b04      	ldr	r3, [pc, #16]	@ (80154b0 <HAL_PCD_SuspendCallback+0x48>)
 801549e:	691b      	ldr	r3, [r3, #16]
 80154a0:	4a03      	ldr	r2, [pc, #12]	@ (80154b0 <HAL_PCD_SuspendCallback+0x48>)
 80154a2:	f043 0306 	orr.w	r3, r3, #6
 80154a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80154a8:	bf00      	nop
 80154aa:	3708      	adds	r7, #8
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd80      	pop	{r7, pc}
 80154b0:	e000ed00 	.word	0xe000ed00

080154b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80154b4:	b580      	push	{r7, lr}
 80154b6:	b082      	sub	sp, #8
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 80154c2:	4618      	mov	r0, r3
 80154c4:	f7f1 fbc2 	bl	8006c4c <USBD_LL_Resume>
}
 80154c8:	bf00      	nop
 80154ca:	3708      	adds	r7, #8
 80154cc:	46bd      	mov	sp, r7
 80154ce:	bd80      	pop	{r7, pc}

080154d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	b082      	sub	sp, #8
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
 80154d8:	460b      	mov	r3, r1
 80154da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 80154e2:	78fa      	ldrb	r2, [r7, #3]
 80154e4:	4611      	mov	r1, r2
 80154e6:	4618      	mov	r0, r3
 80154e8:	f7f1 fc10 	bl	8006d0c <USBD_LL_IsoOUTIncomplete>
}
 80154ec:	bf00      	nop
 80154ee:	3708      	adds	r7, #8
 80154f0:	46bd      	mov	sp, r7
 80154f2:	bd80      	pop	{r7, pc}

080154f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b082      	sub	sp, #8
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	6078      	str	r0, [r7, #4]
 80154fc:	460b      	mov	r3, r1
 80154fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8015506:	78fa      	ldrb	r2, [r7, #3]
 8015508:	4611      	mov	r1, r2
 801550a:	4618      	mov	r0, r3
 801550c:	f7f1 fbd8 	bl	8006cc0 <USBD_LL_IsoINIncomplete>
}
 8015510:	bf00      	nop
 8015512:	3708      	adds	r7, #8
 8015514:	46bd      	mov	sp, r7
 8015516:	bd80      	pop	{r7, pc}

08015518 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b082      	sub	sp, #8
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8015526:	4618      	mov	r0, r3
 8015528:	f7f1 fc16 	bl	8006d58 <USBD_LL_DevConnected>
}
 801552c:	bf00      	nop
 801552e:	3708      	adds	r7, #8
 8015530:	46bd      	mov	sp, r7
 8015532:	bd80      	pop	{r7, pc}

08015534 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b082      	sub	sp, #8
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8015542:	4618      	mov	r0, r3
 8015544:	f7f1 fc13 	bl	8006d6e <USBD_LL_DevDisconnected>
}
 8015548:	bf00      	nop
 801554a:	3708      	adds	r7, #8
 801554c:	46bd      	mov	sp, r7
 801554e:	bd80      	pop	{r7, pc}

08015550 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015550:	b580      	push	{r7, lr}
 8015552:	b082      	sub	sp, #8
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	781b      	ldrb	r3, [r3, #0]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d141      	bne.n	80155e4 <USBD_LL_Init+0x94>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015560:	4a23      	ldr	r2, [pc, #140]	@ (80155f0 <USBD_LL_Init+0xa0>)
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	4a21      	ldr	r2, [pc, #132]	@ (80155f0 <USBD_LL_Init+0xa0>)
 801556c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015570:	4b1f      	ldr	r3, [pc, #124]	@ (80155f0 <USBD_LL_Init+0xa0>)
 8015572:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8015576:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8015578:	4b1d      	ldr	r3, [pc, #116]	@ (80155f0 <USBD_LL_Init+0xa0>)
 801557a:	2204      	movs	r2, #4
 801557c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801557e:	4b1c      	ldr	r3, [pc, #112]	@ (80155f0 <USBD_LL_Init+0xa0>)
 8015580:	2202      	movs	r2, #2
 8015582:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015584:	4b1a      	ldr	r3, [pc, #104]	@ (80155f0 <USBD_LL_Init+0xa0>)
 8015586:	2200      	movs	r2, #0
 8015588:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801558a:	4b19      	ldr	r3, [pc, #100]	@ (80155f0 <USBD_LL_Init+0xa0>)
 801558c:	2202      	movs	r2, #2
 801558e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015590:	4b17      	ldr	r3, [pc, #92]	@ (80155f0 <USBD_LL_Init+0xa0>)
 8015592:	2200      	movs	r2, #0
 8015594:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015596:	4b16      	ldr	r3, [pc, #88]	@ (80155f0 <USBD_LL_Init+0xa0>)
 8015598:	2200      	movs	r2, #0
 801559a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801559c:	4b14      	ldr	r3, [pc, #80]	@ (80155f0 <USBD_LL_Init+0xa0>)
 801559e:	2200      	movs	r2, #0
 80155a0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80155a2:	4b13      	ldr	r3, [pc, #76]	@ (80155f0 <USBD_LL_Init+0xa0>)
 80155a4:	2200      	movs	r2, #0
 80155a6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80155a8:	4b11      	ldr	r3, [pc, #68]	@ (80155f0 <USBD_LL_Init+0xa0>)
 80155aa:	2200      	movs	r2, #0
 80155ac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80155ae:	4810      	ldr	r0, [pc, #64]	@ (80155f0 <USBD_LL_Init+0xa0>)
 80155b0:	f7ed fbaa 	bl	8002d08 <HAL_PCD_Init>
 80155b4:	4603      	mov	r3, r0
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d001      	beq.n	80155be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80155ba:	f7ec fb8f 	bl	8001cdc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 128u);
 80155be:	2180      	movs	r1, #128	@ 0x80
 80155c0:	480b      	ldr	r0, [pc, #44]	@ (80155f0 <USBD_LL_Init+0xa0>)
 80155c2:	f7ee fdde 	bl	8004182 <HAL_PCDEx_SetRxFiFo>
  //HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 64u);
 80155c6:	2240      	movs	r2, #64	@ 0x40
 80155c8:	2100      	movs	r1, #0
 80155ca:	4809      	ldr	r0, [pc, #36]	@ (80155f0 <USBD_LL_Init+0xa0>)
 80155cc:	f7ee fd92 	bl	80040f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 64u);
 80155d0:	2240      	movs	r2, #64	@ 0x40
 80155d2:	2101      	movs	r1, #1
 80155d4:	4806      	ldr	r0, [pc, #24]	@ (80155f0 <USBD_LL_Init+0xa0>)
 80155d6:	f7ee fd8d 	bl	80040f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 2, 64u);
 80155da:	2240      	movs	r2, #64	@ 0x40
 80155dc:	2102      	movs	r1, #2
 80155de:	4804      	ldr	r0, [pc, #16]	@ (80155f0 <USBD_LL_Init+0xa0>)
 80155e0:	f7ee fd88 	bl	80040f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80155e4:	2300      	movs	r3, #0
}
 80155e6:	4618      	mov	r0, r3
 80155e8:	3708      	adds	r7, #8
 80155ea:	46bd      	mov	sp, r7
 80155ec:	bd80      	pop	{r7, pc}
 80155ee:	bf00      	nop
 80155f0:	20024854 	.word	0x20024854

080155f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b084      	sub	sp, #16
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80155fc:	2300      	movs	r3, #0
 80155fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015600:	2300      	movs	r3, #0
 8015602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801560a:	4618      	mov	r0, r3
 801560c:	f7ed fc92 	bl	8002f34 <HAL_PCD_Start>
 8015610:	4603      	mov	r3, r0
 8015612:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015614:	7bfb      	ldrb	r3, [r7, #15]
 8015616:	4618      	mov	r0, r3
 8015618:	f000 f91c 	bl	8015854 <USBD_Get_USB_Status>
 801561c:	4603      	mov	r3, r0
 801561e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015620:	7bbb      	ldrb	r3, [r7, #14]
}
 8015622:	4618      	mov	r0, r3
 8015624:	3710      	adds	r7, #16
 8015626:	46bd      	mov	sp, r7
 8015628:	bd80      	pop	{r7, pc}

0801562a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801562a:	b580      	push	{r7, lr}
 801562c:	b084      	sub	sp, #16
 801562e:	af00      	add	r7, sp, #0
 8015630:	6078      	str	r0, [r7, #4]
 8015632:	4608      	mov	r0, r1
 8015634:	4611      	mov	r1, r2
 8015636:	461a      	mov	r2, r3
 8015638:	4603      	mov	r3, r0
 801563a:	70fb      	strb	r3, [r7, #3]
 801563c:	460b      	mov	r3, r1
 801563e:	70bb      	strb	r3, [r7, #2]
 8015640:	4613      	mov	r3, r2
 8015642:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015644:	2300      	movs	r3, #0
 8015646:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015648:	2300      	movs	r3, #0
 801564a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8015652:	78bb      	ldrb	r3, [r7, #2]
 8015654:	883a      	ldrh	r2, [r7, #0]
 8015656:	78f9      	ldrb	r1, [r7, #3]
 8015658:	f7ee f980 	bl	800395c <HAL_PCD_EP_Open>
 801565c:	4603      	mov	r3, r0
 801565e:	73fb      	strb	r3, [r7, #15]
  
  if( hal_status != HAL_OK )
 8015660:	7bfb      	ldrb	r3, [r7, #15]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d001      	beq.n	801566a <USBD_LL_OpenEP+0x40>
  {
     while(1);
 8015666:	bf00      	nop
 8015668:	e7fd      	b.n	8015666 <USBD_LL_OpenEP+0x3c>
  }

  usb_status =  USBD_Get_USB_Status(hal_status);
 801566a:	7bfb      	ldrb	r3, [r7, #15]
 801566c:	4618      	mov	r0, r3
 801566e:	f000 f8f1 	bl	8015854 <USBD_Get_USB_Status>
 8015672:	4603      	mov	r3, r0
 8015674:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015676:	7bbb      	ldrb	r3, [r7, #14]
}
 8015678:	4618      	mov	r0, r3
 801567a:	3710      	adds	r7, #16
 801567c:	46bd      	mov	sp, r7
 801567e:	bd80      	pop	{r7, pc}

08015680 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b084      	sub	sp, #16
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
 8015688:	460b      	mov	r3, r1
 801568a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801568c:	2300      	movs	r3, #0
 801568e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015690:	2300      	movs	r3, #0
 8015692:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801569a:	78fa      	ldrb	r2, [r7, #3]
 801569c:	4611      	mov	r1, r2
 801569e:	4618      	mov	r0, r3
 80156a0:	f7ee f9c4 	bl	8003a2c <HAL_PCD_EP_Close>
 80156a4:	4603      	mov	r3, r0
 80156a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80156a8:	7bfb      	ldrb	r3, [r7, #15]
 80156aa:	4618      	mov	r0, r3
 80156ac:	f000 f8d2 	bl	8015854 <USBD_Get_USB_Status>
 80156b0:	4603      	mov	r3, r0
 80156b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80156b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80156b6:	4618      	mov	r0, r3
 80156b8:	3710      	adds	r7, #16
 80156ba:	46bd      	mov	sp, r7
 80156bc:	bd80      	pop	{r7, pc}

080156be <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80156be:	b580      	push	{r7, lr}
 80156c0:	b084      	sub	sp, #16
 80156c2:	af00      	add	r7, sp, #0
 80156c4:	6078      	str	r0, [r7, #4]
 80156c6:	460b      	mov	r3, r1
 80156c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80156ca:	2300      	movs	r3, #0
 80156cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80156ce:	2300      	movs	r3, #0
 80156d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80156d8:	78fa      	ldrb	r2, [r7, #3]
 80156da:	4611      	mov	r1, r2
 80156dc:	4618      	mov	r0, r3
 80156de:	f7ee fa64 	bl	8003baa <HAL_PCD_EP_SetStall>
 80156e2:	4603      	mov	r3, r0
 80156e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80156e6:	7bfb      	ldrb	r3, [r7, #15]
 80156e8:	4618      	mov	r0, r3
 80156ea:	f000 f8b3 	bl	8015854 <USBD_Get_USB_Status>
 80156ee:	4603      	mov	r3, r0
 80156f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80156f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80156f4:	4618      	mov	r0, r3
 80156f6:	3710      	adds	r7, #16
 80156f8:	46bd      	mov	sp, r7
 80156fa:	bd80      	pop	{r7, pc}

080156fc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b084      	sub	sp, #16
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
 8015704:	460b      	mov	r3, r1
 8015706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015708:	2300      	movs	r3, #0
 801570a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801570c:	2300      	movs	r3, #0
 801570e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8015716:	78fa      	ldrb	r2, [r7, #3]
 8015718:	4611      	mov	r1, r2
 801571a:	4618      	mov	r0, r3
 801571c:	f7ee faa8 	bl	8003c70 <HAL_PCD_EP_ClrStall>
 8015720:	4603      	mov	r3, r0
 8015722:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015724:	7bfb      	ldrb	r3, [r7, #15]
 8015726:	4618      	mov	r0, r3
 8015728:	f000 f894 	bl	8015854 <USBD_Get_USB_Status>
 801572c:	4603      	mov	r3, r0
 801572e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015730:	7bbb      	ldrb	r3, [r7, #14]
}
 8015732:	4618      	mov	r0, r3
 8015734:	3710      	adds	r7, #16
 8015736:	46bd      	mov	sp, r7
 8015738:	bd80      	pop	{r7, pc}

0801573a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801573a:	b480      	push	{r7}
 801573c:	b085      	sub	sp, #20
 801573e:	af00      	add	r7, sp, #0
 8015740:	6078      	str	r0, [r7, #4]
 8015742:	460b      	mov	r3, r1
 8015744:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801574c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801574e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015752:	2b00      	cmp	r3, #0
 8015754:	da0b      	bge.n	801576e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015756:	78fb      	ldrb	r3, [r7, #3]
 8015758:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801575c:	68f9      	ldr	r1, [r7, #12]
 801575e:	4613      	mov	r3, r2
 8015760:	00db      	lsls	r3, r3, #3
 8015762:	4413      	add	r3, r2
 8015764:	009b      	lsls	r3, r3, #2
 8015766:	440b      	add	r3, r1
 8015768:	3316      	adds	r3, #22
 801576a:	781b      	ldrb	r3, [r3, #0]
 801576c:	e00b      	b.n	8015786 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801576e:	78fb      	ldrb	r3, [r7, #3]
 8015770:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015774:	68f9      	ldr	r1, [r7, #12]
 8015776:	4613      	mov	r3, r2
 8015778:	00db      	lsls	r3, r3, #3
 801577a:	4413      	add	r3, r2
 801577c:	009b      	lsls	r3, r3, #2
 801577e:	440b      	add	r3, r1
 8015780:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8015784:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015786:	4618      	mov	r0, r3
 8015788:	3714      	adds	r7, #20
 801578a:	46bd      	mov	sp, r7
 801578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015790:	4770      	bx	lr

08015792 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015792:	b580      	push	{r7, lr}
 8015794:	b084      	sub	sp, #16
 8015796:	af00      	add	r7, sp, #0
 8015798:	6078      	str	r0, [r7, #4]
 801579a:	460b      	mov	r3, r1
 801579c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801579e:	2300      	movs	r3, #0
 80157a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157a2:	2300      	movs	r3, #0
 80157a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80157ac:	78fa      	ldrb	r2, [r7, #3]
 80157ae:	4611      	mov	r1, r2
 80157b0:	4618      	mov	r0, r3
 80157b2:	f7ee f8af 	bl	8003914 <HAL_PCD_SetAddress>
 80157b6:	4603      	mov	r3, r0
 80157b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80157ba:	7bfb      	ldrb	r3, [r7, #15]
 80157bc:	4618      	mov	r0, r3
 80157be:	f000 f849 	bl	8015854 <USBD_Get_USB_Status>
 80157c2:	4603      	mov	r3, r0
 80157c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80157c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80157c8:	4618      	mov	r0, r3
 80157ca:	3710      	adds	r7, #16
 80157cc:	46bd      	mov	sp, r7
 80157ce:	bd80      	pop	{r7, pc}

080157d0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b086      	sub	sp, #24
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	60f8      	str	r0, [r7, #12]
 80157d8:	607a      	str	r2, [r7, #4]
 80157da:	603b      	str	r3, [r7, #0]
 80157dc:	460b      	mov	r3, r1
 80157de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157e0:	2300      	movs	r3, #0
 80157e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157e4:	2300      	movs	r3, #0
 80157e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80157ee:	7af9      	ldrb	r1, [r7, #11]
 80157f0:	683b      	ldr	r3, [r7, #0]
 80157f2:	687a      	ldr	r2, [r7, #4]
 80157f4:	f7ee f99f 	bl	8003b36 <HAL_PCD_EP_Transmit>
 80157f8:	4603      	mov	r3, r0
 80157fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80157fc:	7dfb      	ldrb	r3, [r7, #23]
 80157fe:	4618      	mov	r0, r3
 8015800:	f000 f828 	bl	8015854 <USBD_Get_USB_Status>
 8015804:	4603      	mov	r3, r0
 8015806:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015808:	7dbb      	ldrb	r3, [r7, #22]
}
 801580a:	4618      	mov	r0, r3
 801580c:	3718      	adds	r7, #24
 801580e:	46bd      	mov	sp, r7
 8015810:	bd80      	pop	{r7, pc}

08015812 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015812:	b580      	push	{r7, lr}
 8015814:	b086      	sub	sp, #24
 8015816:	af00      	add	r7, sp, #0
 8015818:	60f8      	str	r0, [r7, #12]
 801581a:	607a      	str	r2, [r7, #4]
 801581c:	603b      	str	r3, [r7, #0]
 801581e:	460b      	mov	r3, r1
 8015820:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015822:	2300      	movs	r3, #0
 8015824:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015826:	2300      	movs	r3, #0
 8015828:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8015830:	7af9      	ldrb	r1, [r7, #11]
 8015832:	683b      	ldr	r3, [r7, #0]
 8015834:	687a      	ldr	r2, [r7, #4]
 8015836:	f7ee f943 	bl	8003ac0 <HAL_PCD_EP_Receive>
 801583a:	4603      	mov	r3, r0
 801583c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801583e:	7dfb      	ldrb	r3, [r7, #23]
 8015840:	4618      	mov	r0, r3
 8015842:	f000 f807 	bl	8015854 <USBD_Get_USB_Status>
 8015846:	4603      	mov	r3, r0
 8015848:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801584a:	7dbb      	ldrb	r3, [r7, #22]
}
 801584c:	4618      	mov	r0, r3
 801584e:	3718      	adds	r7, #24
 8015850:	46bd      	mov	sp, r7
 8015852:	bd80      	pop	{r7, pc}

08015854 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015854:	b480      	push	{r7}
 8015856:	b085      	sub	sp, #20
 8015858:	af00      	add	r7, sp, #0
 801585a:	4603      	mov	r3, r0
 801585c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801585e:	2300      	movs	r3, #0
 8015860:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015862:	79fb      	ldrb	r3, [r7, #7]
 8015864:	2b03      	cmp	r3, #3
 8015866:	d817      	bhi.n	8015898 <USBD_Get_USB_Status+0x44>
 8015868:	a201      	add	r2, pc, #4	@ (adr r2, 8015870 <USBD_Get_USB_Status+0x1c>)
 801586a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801586e:	bf00      	nop
 8015870:	08015881 	.word	0x08015881
 8015874:	08015887 	.word	0x08015887
 8015878:	0801588d 	.word	0x0801588d
 801587c:	08015893 	.word	0x08015893
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015880:	2300      	movs	r3, #0
 8015882:	73fb      	strb	r3, [r7, #15]
    break;
 8015884:	e00b      	b.n	801589e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015886:	2303      	movs	r3, #3
 8015888:	73fb      	strb	r3, [r7, #15]
    break;
 801588a:	e008      	b.n	801589e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801588c:	2301      	movs	r3, #1
 801588e:	73fb      	strb	r3, [r7, #15]
    break;
 8015890:	e005      	b.n	801589e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015892:	2303      	movs	r3, #3
 8015894:	73fb      	strb	r3, [r7, #15]
    break;
 8015896:	e002      	b.n	801589e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015898:	2303      	movs	r3, #3
 801589a:	73fb      	strb	r3, [r7, #15]
    break;
 801589c:	bf00      	nop
  }
  return usb_status;
 801589e:	7bfb      	ldrb	r3, [r7, #15]
}
 80158a0:	4618      	mov	r0, r3
 80158a2:	3714      	adds	r7, #20
 80158a4:	46bd      	mov	sp, r7
 80158a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158aa:	4770      	bx	lr

080158ac <srand>:
 80158ac:	b538      	push	{r3, r4, r5, lr}
 80158ae:	4b10      	ldr	r3, [pc, #64]	@ (80158f0 <srand+0x44>)
 80158b0:	681d      	ldr	r5, [r3, #0]
 80158b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80158b4:	4604      	mov	r4, r0
 80158b6:	b9b3      	cbnz	r3, 80158e6 <srand+0x3a>
 80158b8:	2018      	movs	r0, #24
 80158ba:	f000 fab9 	bl	8015e30 <malloc>
 80158be:	4602      	mov	r2, r0
 80158c0:	6328      	str	r0, [r5, #48]	@ 0x30
 80158c2:	b920      	cbnz	r0, 80158ce <srand+0x22>
 80158c4:	4b0b      	ldr	r3, [pc, #44]	@ (80158f4 <srand+0x48>)
 80158c6:	480c      	ldr	r0, [pc, #48]	@ (80158f8 <srand+0x4c>)
 80158c8:	2146      	movs	r1, #70	@ 0x46
 80158ca:	f000 fa49 	bl	8015d60 <__assert_func>
 80158ce:	490b      	ldr	r1, [pc, #44]	@ (80158fc <srand+0x50>)
 80158d0:	4b0b      	ldr	r3, [pc, #44]	@ (8015900 <srand+0x54>)
 80158d2:	e9c0 1300 	strd	r1, r3, [r0]
 80158d6:	4b0b      	ldr	r3, [pc, #44]	@ (8015904 <srand+0x58>)
 80158d8:	6083      	str	r3, [r0, #8]
 80158da:	230b      	movs	r3, #11
 80158dc:	8183      	strh	r3, [r0, #12]
 80158de:	2100      	movs	r1, #0
 80158e0:	2001      	movs	r0, #1
 80158e2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80158e6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80158e8:	2200      	movs	r2, #0
 80158ea:	611c      	str	r4, [r3, #16]
 80158ec:	615a      	str	r2, [r3, #20]
 80158ee:	bd38      	pop	{r3, r4, r5, pc}
 80158f0:	2000019c 	.word	0x2000019c
 80158f4:	08016fcc 	.word	0x08016fcc
 80158f8:	08016fe3 	.word	0x08016fe3
 80158fc:	abcd330e 	.word	0xabcd330e
 8015900:	e66d1234 	.word	0xe66d1234
 8015904:	0005deec 	.word	0x0005deec

08015908 <rand>:
 8015908:	4b16      	ldr	r3, [pc, #88]	@ (8015964 <rand+0x5c>)
 801590a:	b510      	push	{r4, lr}
 801590c:	681c      	ldr	r4, [r3, #0]
 801590e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015910:	b9b3      	cbnz	r3, 8015940 <rand+0x38>
 8015912:	2018      	movs	r0, #24
 8015914:	f000 fa8c 	bl	8015e30 <malloc>
 8015918:	4602      	mov	r2, r0
 801591a:	6320      	str	r0, [r4, #48]	@ 0x30
 801591c:	b920      	cbnz	r0, 8015928 <rand+0x20>
 801591e:	4b12      	ldr	r3, [pc, #72]	@ (8015968 <rand+0x60>)
 8015920:	4812      	ldr	r0, [pc, #72]	@ (801596c <rand+0x64>)
 8015922:	2152      	movs	r1, #82	@ 0x52
 8015924:	f000 fa1c 	bl	8015d60 <__assert_func>
 8015928:	4911      	ldr	r1, [pc, #68]	@ (8015970 <rand+0x68>)
 801592a:	4b12      	ldr	r3, [pc, #72]	@ (8015974 <rand+0x6c>)
 801592c:	e9c0 1300 	strd	r1, r3, [r0]
 8015930:	4b11      	ldr	r3, [pc, #68]	@ (8015978 <rand+0x70>)
 8015932:	6083      	str	r3, [r0, #8]
 8015934:	230b      	movs	r3, #11
 8015936:	8183      	strh	r3, [r0, #12]
 8015938:	2100      	movs	r1, #0
 801593a:	2001      	movs	r0, #1
 801593c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015940:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015942:	480e      	ldr	r0, [pc, #56]	@ (801597c <rand+0x74>)
 8015944:	690b      	ldr	r3, [r1, #16]
 8015946:	694c      	ldr	r4, [r1, #20]
 8015948:	4a0d      	ldr	r2, [pc, #52]	@ (8015980 <rand+0x78>)
 801594a:	4358      	muls	r0, r3
 801594c:	fb02 0004 	mla	r0, r2, r4, r0
 8015950:	fba3 3202 	umull	r3, r2, r3, r2
 8015954:	3301      	adds	r3, #1
 8015956:	eb40 0002 	adc.w	r0, r0, r2
 801595a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801595e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8015962:	bd10      	pop	{r4, pc}
 8015964:	2000019c 	.word	0x2000019c
 8015968:	08016fcc 	.word	0x08016fcc
 801596c:	08016fe3 	.word	0x08016fe3
 8015970:	abcd330e 	.word	0xabcd330e
 8015974:	e66d1234 	.word	0xe66d1234
 8015978:	0005deec 	.word	0x0005deec
 801597c:	5851f42d 	.word	0x5851f42d
 8015980:	4c957f2d 	.word	0x4c957f2d

08015984 <std>:
 8015984:	2300      	movs	r3, #0
 8015986:	b510      	push	{r4, lr}
 8015988:	4604      	mov	r4, r0
 801598a:	e9c0 3300 	strd	r3, r3, [r0]
 801598e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015992:	6083      	str	r3, [r0, #8]
 8015994:	8181      	strh	r1, [r0, #12]
 8015996:	6643      	str	r3, [r0, #100]	@ 0x64
 8015998:	81c2      	strh	r2, [r0, #14]
 801599a:	6183      	str	r3, [r0, #24]
 801599c:	4619      	mov	r1, r3
 801599e:	2208      	movs	r2, #8
 80159a0:	305c      	adds	r0, #92	@ 0x5c
 80159a2:	f000 f952 	bl	8015c4a <memset>
 80159a6:	4b0d      	ldr	r3, [pc, #52]	@ (80159dc <std+0x58>)
 80159a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80159aa:	4b0d      	ldr	r3, [pc, #52]	@ (80159e0 <std+0x5c>)
 80159ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80159ae:	4b0d      	ldr	r3, [pc, #52]	@ (80159e4 <std+0x60>)
 80159b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80159b2:	4b0d      	ldr	r3, [pc, #52]	@ (80159e8 <std+0x64>)
 80159b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80159b6:	4b0d      	ldr	r3, [pc, #52]	@ (80159ec <std+0x68>)
 80159b8:	6224      	str	r4, [r4, #32]
 80159ba:	429c      	cmp	r4, r3
 80159bc:	d006      	beq.n	80159cc <std+0x48>
 80159be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80159c2:	4294      	cmp	r4, r2
 80159c4:	d002      	beq.n	80159cc <std+0x48>
 80159c6:	33d0      	adds	r3, #208	@ 0xd0
 80159c8:	429c      	cmp	r4, r3
 80159ca:	d105      	bne.n	80159d8 <std+0x54>
 80159cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80159d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159d4:	f000 b9b2 	b.w	8015d3c <__retarget_lock_init_recursive>
 80159d8:	bd10      	pop	{r4, pc}
 80159da:	bf00      	nop
 80159dc:	08015b71 	.word	0x08015b71
 80159e0:	08015b93 	.word	0x08015b93
 80159e4:	08015bcb 	.word	0x08015bcb
 80159e8:	08015bef 	.word	0x08015bef
 80159ec:	20024d3c 	.word	0x20024d3c

080159f0 <stdio_exit_handler>:
 80159f0:	4a02      	ldr	r2, [pc, #8]	@ (80159fc <stdio_exit_handler+0xc>)
 80159f2:	4903      	ldr	r1, [pc, #12]	@ (8015a00 <stdio_exit_handler+0x10>)
 80159f4:	4803      	ldr	r0, [pc, #12]	@ (8015a04 <stdio_exit_handler+0x14>)
 80159f6:	f000 b869 	b.w	8015acc <_fwalk_sglue>
 80159fa:	bf00      	nop
 80159fc:	20000190 	.word	0x20000190
 8015a00:	08016671 	.word	0x08016671
 8015a04:	200001a0 	.word	0x200001a0

08015a08 <cleanup_stdio>:
 8015a08:	6841      	ldr	r1, [r0, #4]
 8015a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8015a3c <cleanup_stdio+0x34>)
 8015a0c:	4299      	cmp	r1, r3
 8015a0e:	b510      	push	{r4, lr}
 8015a10:	4604      	mov	r4, r0
 8015a12:	d001      	beq.n	8015a18 <cleanup_stdio+0x10>
 8015a14:	f000 fe2c 	bl	8016670 <_fflush_r>
 8015a18:	68a1      	ldr	r1, [r4, #8]
 8015a1a:	4b09      	ldr	r3, [pc, #36]	@ (8015a40 <cleanup_stdio+0x38>)
 8015a1c:	4299      	cmp	r1, r3
 8015a1e:	d002      	beq.n	8015a26 <cleanup_stdio+0x1e>
 8015a20:	4620      	mov	r0, r4
 8015a22:	f000 fe25 	bl	8016670 <_fflush_r>
 8015a26:	68e1      	ldr	r1, [r4, #12]
 8015a28:	4b06      	ldr	r3, [pc, #24]	@ (8015a44 <cleanup_stdio+0x3c>)
 8015a2a:	4299      	cmp	r1, r3
 8015a2c:	d004      	beq.n	8015a38 <cleanup_stdio+0x30>
 8015a2e:	4620      	mov	r0, r4
 8015a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a34:	f000 be1c 	b.w	8016670 <_fflush_r>
 8015a38:	bd10      	pop	{r4, pc}
 8015a3a:	bf00      	nop
 8015a3c:	20024d3c 	.word	0x20024d3c
 8015a40:	20024da4 	.word	0x20024da4
 8015a44:	20024e0c 	.word	0x20024e0c

08015a48 <global_stdio_init.part.0>:
 8015a48:	b510      	push	{r4, lr}
 8015a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8015a78 <global_stdio_init.part.0+0x30>)
 8015a4c:	4c0b      	ldr	r4, [pc, #44]	@ (8015a7c <global_stdio_init.part.0+0x34>)
 8015a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8015a80 <global_stdio_init.part.0+0x38>)
 8015a50:	601a      	str	r2, [r3, #0]
 8015a52:	4620      	mov	r0, r4
 8015a54:	2200      	movs	r2, #0
 8015a56:	2104      	movs	r1, #4
 8015a58:	f7ff ff94 	bl	8015984 <std>
 8015a5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015a60:	2201      	movs	r2, #1
 8015a62:	2109      	movs	r1, #9
 8015a64:	f7ff ff8e 	bl	8015984 <std>
 8015a68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015a6c:	2202      	movs	r2, #2
 8015a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a72:	2112      	movs	r1, #18
 8015a74:	f7ff bf86 	b.w	8015984 <std>
 8015a78:	20024e74 	.word	0x20024e74
 8015a7c:	20024d3c 	.word	0x20024d3c
 8015a80:	080159f1 	.word	0x080159f1

08015a84 <__sfp_lock_acquire>:
 8015a84:	4801      	ldr	r0, [pc, #4]	@ (8015a8c <__sfp_lock_acquire+0x8>)
 8015a86:	f000 b95a 	b.w	8015d3e <__retarget_lock_acquire_recursive>
 8015a8a:	bf00      	nop
 8015a8c:	20024e7d 	.word	0x20024e7d

08015a90 <__sfp_lock_release>:
 8015a90:	4801      	ldr	r0, [pc, #4]	@ (8015a98 <__sfp_lock_release+0x8>)
 8015a92:	f000 b955 	b.w	8015d40 <__retarget_lock_release_recursive>
 8015a96:	bf00      	nop
 8015a98:	20024e7d 	.word	0x20024e7d

08015a9c <__sinit>:
 8015a9c:	b510      	push	{r4, lr}
 8015a9e:	4604      	mov	r4, r0
 8015aa0:	f7ff fff0 	bl	8015a84 <__sfp_lock_acquire>
 8015aa4:	6a23      	ldr	r3, [r4, #32]
 8015aa6:	b11b      	cbz	r3, 8015ab0 <__sinit+0x14>
 8015aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015aac:	f7ff bff0 	b.w	8015a90 <__sfp_lock_release>
 8015ab0:	4b04      	ldr	r3, [pc, #16]	@ (8015ac4 <__sinit+0x28>)
 8015ab2:	6223      	str	r3, [r4, #32]
 8015ab4:	4b04      	ldr	r3, [pc, #16]	@ (8015ac8 <__sinit+0x2c>)
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d1f5      	bne.n	8015aa8 <__sinit+0xc>
 8015abc:	f7ff ffc4 	bl	8015a48 <global_stdio_init.part.0>
 8015ac0:	e7f2      	b.n	8015aa8 <__sinit+0xc>
 8015ac2:	bf00      	nop
 8015ac4:	08015a09 	.word	0x08015a09
 8015ac8:	20024e74 	.word	0x20024e74

08015acc <_fwalk_sglue>:
 8015acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ad0:	4607      	mov	r7, r0
 8015ad2:	4688      	mov	r8, r1
 8015ad4:	4614      	mov	r4, r2
 8015ad6:	2600      	movs	r6, #0
 8015ad8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015adc:	f1b9 0901 	subs.w	r9, r9, #1
 8015ae0:	d505      	bpl.n	8015aee <_fwalk_sglue+0x22>
 8015ae2:	6824      	ldr	r4, [r4, #0]
 8015ae4:	2c00      	cmp	r4, #0
 8015ae6:	d1f7      	bne.n	8015ad8 <_fwalk_sglue+0xc>
 8015ae8:	4630      	mov	r0, r6
 8015aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015aee:	89ab      	ldrh	r3, [r5, #12]
 8015af0:	2b01      	cmp	r3, #1
 8015af2:	d907      	bls.n	8015b04 <_fwalk_sglue+0x38>
 8015af4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015af8:	3301      	adds	r3, #1
 8015afa:	d003      	beq.n	8015b04 <_fwalk_sglue+0x38>
 8015afc:	4629      	mov	r1, r5
 8015afe:	4638      	mov	r0, r7
 8015b00:	47c0      	blx	r8
 8015b02:	4306      	orrs	r6, r0
 8015b04:	3568      	adds	r5, #104	@ 0x68
 8015b06:	e7e9      	b.n	8015adc <_fwalk_sglue+0x10>

08015b08 <sniprintf>:
 8015b08:	b40c      	push	{r2, r3}
 8015b0a:	b530      	push	{r4, r5, lr}
 8015b0c:	4b17      	ldr	r3, [pc, #92]	@ (8015b6c <sniprintf+0x64>)
 8015b0e:	1e0c      	subs	r4, r1, #0
 8015b10:	681d      	ldr	r5, [r3, #0]
 8015b12:	b09d      	sub	sp, #116	@ 0x74
 8015b14:	da08      	bge.n	8015b28 <sniprintf+0x20>
 8015b16:	238b      	movs	r3, #139	@ 0x8b
 8015b18:	602b      	str	r3, [r5, #0]
 8015b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8015b1e:	b01d      	add	sp, #116	@ 0x74
 8015b20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015b24:	b002      	add	sp, #8
 8015b26:	4770      	bx	lr
 8015b28:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015b2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015b30:	bf14      	ite	ne
 8015b32:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015b36:	4623      	moveq	r3, r4
 8015b38:	9304      	str	r3, [sp, #16]
 8015b3a:	9307      	str	r3, [sp, #28]
 8015b3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015b40:	9002      	str	r0, [sp, #8]
 8015b42:	9006      	str	r0, [sp, #24]
 8015b44:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015b48:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015b4a:	ab21      	add	r3, sp, #132	@ 0x84
 8015b4c:	a902      	add	r1, sp, #8
 8015b4e:	4628      	mov	r0, r5
 8015b50:	9301      	str	r3, [sp, #4]
 8015b52:	f000 fa7f 	bl	8016054 <_svfiprintf_r>
 8015b56:	1c43      	adds	r3, r0, #1
 8015b58:	bfbc      	itt	lt
 8015b5a:	238b      	movlt	r3, #139	@ 0x8b
 8015b5c:	602b      	strlt	r3, [r5, #0]
 8015b5e:	2c00      	cmp	r4, #0
 8015b60:	d0dd      	beq.n	8015b1e <sniprintf+0x16>
 8015b62:	9b02      	ldr	r3, [sp, #8]
 8015b64:	2200      	movs	r2, #0
 8015b66:	701a      	strb	r2, [r3, #0]
 8015b68:	e7d9      	b.n	8015b1e <sniprintf+0x16>
 8015b6a:	bf00      	nop
 8015b6c:	2000019c 	.word	0x2000019c

08015b70 <__sread>:
 8015b70:	b510      	push	{r4, lr}
 8015b72:	460c      	mov	r4, r1
 8015b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b78:	f000 f892 	bl	8015ca0 <_read_r>
 8015b7c:	2800      	cmp	r0, #0
 8015b7e:	bfab      	itete	ge
 8015b80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015b82:	89a3      	ldrhlt	r3, [r4, #12]
 8015b84:	181b      	addge	r3, r3, r0
 8015b86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015b8a:	bfac      	ite	ge
 8015b8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015b8e:	81a3      	strhlt	r3, [r4, #12]
 8015b90:	bd10      	pop	{r4, pc}

08015b92 <__swrite>:
 8015b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b96:	461f      	mov	r7, r3
 8015b98:	898b      	ldrh	r3, [r1, #12]
 8015b9a:	05db      	lsls	r3, r3, #23
 8015b9c:	4605      	mov	r5, r0
 8015b9e:	460c      	mov	r4, r1
 8015ba0:	4616      	mov	r6, r2
 8015ba2:	d505      	bpl.n	8015bb0 <__swrite+0x1e>
 8015ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ba8:	2302      	movs	r3, #2
 8015baa:	2200      	movs	r2, #0
 8015bac:	f000 f866 	bl	8015c7c <_lseek_r>
 8015bb0:	89a3      	ldrh	r3, [r4, #12]
 8015bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015bb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015bba:	81a3      	strh	r3, [r4, #12]
 8015bbc:	4632      	mov	r2, r6
 8015bbe:	463b      	mov	r3, r7
 8015bc0:	4628      	mov	r0, r5
 8015bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015bc6:	f000 b87d 	b.w	8015cc4 <_write_r>

08015bca <__sseek>:
 8015bca:	b510      	push	{r4, lr}
 8015bcc:	460c      	mov	r4, r1
 8015bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bd2:	f000 f853 	bl	8015c7c <_lseek_r>
 8015bd6:	1c43      	adds	r3, r0, #1
 8015bd8:	89a3      	ldrh	r3, [r4, #12]
 8015bda:	bf15      	itete	ne
 8015bdc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015bde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015be2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015be6:	81a3      	strheq	r3, [r4, #12]
 8015be8:	bf18      	it	ne
 8015bea:	81a3      	strhne	r3, [r4, #12]
 8015bec:	bd10      	pop	{r4, pc}

08015bee <__sclose>:
 8015bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bf2:	f000 b833 	b.w	8015c5c <_close_r>

08015bf6 <memcmp>:
 8015bf6:	b510      	push	{r4, lr}
 8015bf8:	3901      	subs	r1, #1
 8015bfa:	4402      	add	r2, r0
 8015bfc:	4290      	cmp	r0, r2
 8015bfe:	d101      	bne.n	8015c04 <memcmp+0xe>
 8015c00:	2000      	movs	r0, #0
 8015c02:	e005      	b.n	8015c10 <memcmp+0x1a>
 8015c04:	7803      	ldrb	r3, [r0, #0]
 8015c06:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015c0a:	42a3      	cmp	r3, r4
 8015c0c:	d001      	beq.n	8015c12 <memcmp+0x1c>
 8015c0e:	1b18      	subs	r0, r3, r4
 8015c10:	bd10      	pop	{r4, pc}
 8015c12:	3001      	adds	r0, #1
 8015c14:	e7f2      	b.n	8015bfc <memcmp+0x6>

08015c16 <memmove>:
 8015c16:	4288      	cmp	r0, r1
 8015c18:	b510      	push	{r4, lr}
 8015c1a:	eb01 0402 	add.w	r4, r1, r2
 8015c1e:	d902      	bls.n	8015c26 <memmove+0x10>
 8015c20:	4284      	cmp	r4, r0
 8015c22:	4623      	mov	r3, r4
 8015c24:	d807      	bhi.n	8015c36 <memmove+0x20>
 8015c26:	1e43      	subs	r3, r0, #1
 8015c28:	42a1      	cmp	r1, r4
 8015c2a:	d008      	beq.n	8015c3e <memmove+0x28>
 8015c2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015c30:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015c34:	e7f8      	b.n	8015c28 <memmove+0x12>
 8015c36:	4402      	add	r2, r0
 8015c38:	4601      	mov	r1, r0
 8015c3a:	428a      	cmp	r2, r1
 8015c3c:	d100      	bne.n	8015c40 <memmove+0x2a>
 8015c3e:	bd10      	pop	{r4, pc}
 8015c40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015c44:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015c48:	e7f7      	b.n	8015c3a <memmove+0x24>

08015c4a <memset>:
 8015c4a:	4402      	add	r2, r0
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	4293      	cmp	r3, r2
 8015c50:	d100      	bne.n	8015c54 <memset+0xa>
 8015c52:	4770      	bx	lr
 8015c54:	f803 1b01 	strb.w	r1, [r3], #1
 8015c58:	e7f9      	b.n	8015c4e <memset+0x4>
	...

08015c5c <_close_r>:
 8015c5c:	b538      	push	{r3, r4, r5, lr}
 8015c5e:	4d06      	ldr	r5, [pc, #24]	@ (8015c78 <_close_r+0x1c>)
 8015c60:	2300      	movs	r3, #0
 8015c62:	4604      	mov	r4, r0
 8015c64:	4608      	mov	r0, r1
 8015c66:	602b      	str	r3, [r5, #0]
 8015c68:	f7ec fb9c 	bl	80023a4 <_close>
 8015c6c:	1c43      	adds	r3, r0, #1
 8015c6e:	d102      	bne.n	8015c76 <_close_r+0x1a>
 8015c70:	682b      	ldr	r3, [r5, #0]
 8015c72:	b103      	cbz	r3, 8015c76 <_close_r+0x1a>
 8015c74:	6023      	str	r3, [r4, #0]
 8015c76:	bd38      	pop	{r3, r4, r5, pc}
 8015c78:	20024e78 	.word	0x20024e78

08015c7c <_lseek_r>:
 8015c7c:	b538      	push	{r3, r4, r5, lr}
 8015c7e:	4d07      	ldr	r5, [pc, #28]	@ (8015c9c <_lseek_r+0x20>)
 8015c80:	4604      	mov	r4, r0
 8015c82:	4608      	mov	r0, r1
 8015c84:	4611      	mov	r1, r2
 8015c86:	2200      	movs	r2, #0
 8015c88:	602a      	str	r2, [r5, #0]
 8015c8a:	461a      	mov	r2, r3
 8015c8c:	f7ec fbb1 	bl	80023f2 <_lseek>
 8015c90:	1c43      	adds	r3, r0, #1
 8015c92:	d102      	bne.n	8015c9a <_lseek_r+0x1e>
 8015c94:	682b      	ldr	r3, [r5, #0]
 8015c96:	b103      	cbz	r3, 8015c9a <_lseek_r+0x1e>
 8015c98:	6023      	str	r3, [r4, #0]
 8015c9a:	bd38      	pop	{r3, r4, r5, pc}
 8015c9c:	20024e78 	.word	0x20024e78

08015ca0 <_read_r>:
 8015ca0:	b538      	push	{r3, r4, r5, lr}
 8015ca2:	4d07      	ldr	r5, [pc, #28]	@ (8015cc0 <_read_r+0x20>)
 8015ca4:	4604      	mov	r4, r0
 8015ca6:	4608      	mov	r0, r1
 8015ca8:	4611      	mov	r1, r2
 8015caa:	2200      	movs	r2, #0
 8015cac:	602a      	str	r2, [r5, #0]
 8015cae:	461a      	mov	r2, r3
 8015cb0:	f7ec fb3f 	bl	8002332 <_read>
 8015cb4:	1c43      	adds	r3, r0, #1
 8015cb6:	d102      	bne.n	8015cbe <_read_r+0x1e>
 8015cb8:	682b      	ldr	r3, [r5, #0]
 8015cba:	b103      	cbz	r3, 8015cbe <_read_r+0x1e>
 8015cbc:	6023      	str	r3, [r4, #0]
 8015cbe:	bd38      	pop	{r3, r4, r5, pc}
 8015cc0:	20024e78 	.word	0x20024e78

08015cc4 <_write_r>:
 8015cc4:	b538      	push	{r3, r4, r5, lr}
 8015cc6:	4d07      	ldr	r5, [pc, #28]	@ (8015ce4 <_write_r+0x20>)
 8015cc8:	4604      	mov	r4, r0
 8015cca:	4608      	mov	r0, r1
 8015ccc:	4611      	mov	r1, r2
 8015cce:	2200      	movs	r2, #0
 8015cd0:	602a      	str	r2, [r5, #0]
 8015cd2:	461a      	mov	r2, r3
 8015cd4:	f7ec fb4a 	bl	800236c <_write>
 8015cd8:	1c43      	adds	r3, r0, #1
 8015cda:	d102      	bne.n	8015ce2 <_write_r+0x1e>
 8015cdc:	682b      	ldr	r3, [r5, #0]
 8015cde:	b103      	cbz	r3, 8015ce2 <_write_r+0x1e>
 8015ce0:	6023      	str	r3, [r4, #0]
 8015ce2:	bd38      	pop	{r3, r4, r5, pc}
 8015ce4:	20024e78 	.word	0x20024e78

08015ce8 <__errno>:
 8015ce8:	4b01      	ldr	r3, [pc, #4]	@ (8015cf0 <__errno+0x8>)
 8015cea:	6818      	ldr	r0, [r3, #0]
 8015cec:	4770      	bx	lr
 8015cee:	bf00      	nop
 8015cf0:	2000019c 	.word	0x2000019c

08015cf4 <__libc_init_array>:
 8015cf4:	b570      	push	{r4, r5, r6, lr}
 8015cf6:	4d0d      	ldr	r5, [pc, #52]	@ (8015d2c <__libc_init_array+0x38>)
 8015cf8:	4c0d      	ldr	r4, [pc, #52]	@ (8015d30 <__libc_init_array+0x3c>)
 8015cfa:	1b64      	subs	r4, r4, r5
 8015cfc:	10a4      	asrs	r4, r4, #2
 8015cfe:	2600      	movs	r6, #0
 8015d00:	42a6      	cmp	r6, r4
 8015d02:	d109      	bne.n	8015d18 <__libc_init_array+0x24>
 8015d04:	4d0b      	ldr	r5, [pc, #44]	@ (8015d34 <__libc_init_array+0x40>)
 8015d06:	4c0c      	ldr	r4, [pc, #48]	@ (8015d38 <__libc_init_array+0x44>)
 8015d08:	f000 ffd6 	bl	8016cb8 <_init>
 8015d0c:	1b64      	subs	r4, r4, r5
 8015d0e:	10a4      	asrs	r4, r4, #2
 8015d10:	2600      	movs	r6, #0
 8015d12:	42a6      	cmp	r6, r4
 8015d14:	d105      	bne.n	8015d22 <__libc_init_array+0x2e>
 8015d16:	bd70      	pop	{r4, r5, r6, pc}
 8015d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8015d1c:	4798      	blx	r3
 8015d1e:	3601      	adds	r6, #1
 8015d20:	e7ee      	b.n	8015d00 <__libc_init_array+0xc>
 8015d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8015d26:	4798      	blx	r3
 8015d28:	3601      	adds	r6, #1
 8015d2a:	e7f2      	b.n	8015d12 <__libc_init_array+0x1e>
 8015d2c:	080170b4 	.word	0x080170b4
 8015d30:	080170b4 	.word	0x080170b4
 8015d34:	080170b4 	.word	0x080170b4
 8015d38:	080170b8 	.word	0x080170b8

08015d3c <__retarget_lock_init_recursive>:
 8015d3c:	4770      	bx	lr

08015d3e <__retarget_lock_acquire_recursive>:
 8015d3e:	4770      	bx	lr

08015d40 <__retarget_lock_release_recursive>:
 8015d40:	4770      	bx	lr

08015d42 <memcpy>:
 8015d42:	440a      	add	r2, r1
 8015d44:	4291      	cmp	r1, r2
 8015d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8015d4a:	d100      	bne.n	8015d4e <memcpy+0xc>
 8015d4c:	4770      	bx	lr
 8015d4e:	b510      	push	{r4, lr}
 8015d50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015d54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015d58:	4291      	cmp	r1, r2
 8015d5a:	d1f9      	bne.n	8015d50 <memcpy+0xe>
 8015d5c:	bd10      	pop	{r4, pc}
	...

08015d60 <__assert_func>:
 8015d60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015d62:	4614      	mov	r4, r2
 8015d64:	461a      	mov	r2, r3
 8015d66:	4b09      	ldr	r3, [pc, #36]	@ (8015d8c <__assert_func+0x2c>)
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	4605      	mov	r5, r0
 8015d6c:	68d8      	ldr	r0, [r3, #12]
 8015d6e:	b954      	cbnz	r4, 8015d86 <__assert_func+0x26>
 8015d70:	4b07      	ldr	r3, [pc, #28]	@ (8015d90 <__assert_func+0x30>)
 8015d72:	461c      	mov	r4, r3
 8015d74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015d78:	9100      	str	r1, [sp, #0]
 8015d7a:	462b      	mov	r3, r5
 8015d7c:	4905      	ldr	r1, [pc, #20]	@ (8015d94 <__assert_func+0x34>)
 8015d7e:	f000 fc9f 	bl	80166c0 <fiprintf>
 8015d82:	f000 fcbf 	bl	8016704 <abort>
 8015d86:	4b04      	ldr	r3, [pc, #16]	@ (8015d98 <__assert_func+0x38>)
 8015d88:	e7f4      	b.n	8015d74 <__assert_func+0x14>
 8015d8a:	bf00      	nop
 8015d8c:	2000019c 	.word	0x2000019c
 8015d90:	08017076 	.word	0x08017076
 8015d94:	08017048 	.word	0x08017048
 8015d98:	0801703b 	.word	0x0801703b

08015d9c <_free_r>:
 8015d9c:	b538      	push	{r3, r4, r5, lr}
 8015d9e:	4605      	mov	r5, r0
 8015da0:	2900      	cmp	r1, #0
 8015da2:	d041      	beq.n	8015e28 <_free_r+0x8c>
 8015da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015da8:	1f0c      	subs	r4, r1, #4
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	bfb8      	it	lt
 8015dae:	18e4      	addlt	r4, r4, r3
 8015db0:	f000 f8e8 	bl	8015f84 <__malloc_lock>
 8015db4:	4a1d      	ldr	r2, [pc, #116]	@ (8015e2c <_free_r+0x90>)
 8015db6:	6813      	ldr	r3, [r2, #0]
 8015db8:	b933      	cbnz	r3, 8015dc8 <_free_r+0x2c>
 8015dba:	6063      	str	r3, [r4, #4]
 8015dbc:	6014      	str	r4, [r2, #0]
 8015dbe:	4628      	mov	r0, r5
 8015dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015dc4:	f000 b8e4 	b.w	8015f90 <__malloc_unlock>
 8015dc8:	42a3      	cmp	r3, r4
 8015dca:	d908      	bls.n	8015dde <_free_r+0x42>
 8015dcc:	6820      	ldr	r0, [r4, #0]
 8015dce:	1821      	adds	r1, r4, r0
 8015dd0:	428b      	cmp	r3, r1
 8015dd2:	bf01      	itttt	eq
 8015dd4:	6819      	ldreq	r1, [r3, #0]
 8015dd6:	685b      	ldreq	r3, [r3, #4]
 8015dd8:	1809      	addeq	r1, r1, r0
 8015dda:	6021      	streq	r1, [r4, #0]
 8015ddc:	e7ed      	b.n	8015dba <_free_r+0x1e>
 8015dde:	461a      	mov	r2, r3
 8015de0:	685b      	ldr	r3, [r3, #4]
 8015de2:	b10b      	cbz	r3, 8015de8 <_free_r+0x4c>
 8015de4:	42a3      	cmp	r3, r4
 8015de6:	d9fa      	bls.n	8015dde <_free_r+0x42>
 8015de8:	6811      	ldr	r1, [r2, #0]
 8015dea:	1850      	adds	r0, r2, r1
 8015dec:	42a0      	cmp	r0, r4
 8015dee:	d10b      	bne.n	8015e08 <_free_r+0x6c>
 8015df0:	6820      	ldr	r0, [r4, #0]
 8015df2:	4401      	add	r1, r0
 8015df4:	1850      	adds	r0, r2, r1
 8015df6:	4283      	cmp	r3, r0
 8015df8:	6011      	str	r1, [r2, #0]
 8015dfa:	d1e0      	bne.n	8015dbe <_free_r+0x22>
 8015dfc:	6818      	ldr	r0, [r3, #0]
 8015dfe:	685b      	ldr	r3, [r3, #4]
 8015e00:	6053      	str	r3, [r2, #4]
 8015e02:	4408      	add	r0, r1
 8015e04:	6010      	str	r0, [r2, #0]
 8015e06:	e7da      	b.n	8015dbe <_free_r+0x22>
 8015e08:	d902      	bls.n	8015e10 <_free_r+0x74>
 8015e0a:	230c      	movs	r3, #12
 8015e0c:	602b      	str	r3, [r5, #0]
 8015e0e:	e7d6      	b.n	8015dbe <_free_r+0x22>
 8015e10:	6820      	ldr	r0, [r4, #0]
 8015e12:	1821      	adds	r1, r4, r0
 8015e14:	428b      	cmp	r3, r1
 8015e16:	bf04      	itt	eq
 8015e18:	6819      	ldreq	r1, [r3, #0]
 8015e1a:	685b      	ldreq	r3, [r3, #4]
 8015e1c:	6063      	str	r3, [r4, #4]
 8015e1e:	bf04      	itt	eq
 8015e20:	1809      	addeq	r1, r1, r0
 8015e22:	6021      	streq	r1, [r4, #0]
 8015e24:	6054      	str	r4, [r2, #4]
 8015e26:	e7ca      	b.n	8015dbe <_free_r+0x22>
 8015e28:	bd38      	pop	{r3, r4, r5, pc}
 8015e2a:	bf00      	nop
 8015e2c:	20024e84 	.word	0x20024e84

08015e30 <malloc>:
 8015e30:	4b02      	ldr	r3, [pc, #8]	@ (8015e3c <malloc+0xc>)
 8015e32:	4601      	mov	r1, r0
 8015e34:	6818      	ldr	r0, [r3, #0]
 8015e36:	f000 b825 	b.w	8015e84 <_malloc_r>
 8015e3a:	bf00      	nop
 8015e3c:	2000019c 	.word	0x2000019c

08015e40 <sbrk_aligned>:
 8015e40:	b570      	push	{r4, r5, r6, lr}
 8015e42:	4e0f      	ldr	r6, [pc, #60]	@ (8015e80 <sbrk_aligned+0x40>)
 8015e44:	460c      	mov	r4, r1
 8015e46:	6831      	ldr	r1, [r6, #0]
 8015e48:	4605      	mov	r5, r0
 8015e4a:	b911      	cbnz	r1, 8015e52 <sbrk_aligned+0x12>
 8015e4c:	f000 fc4a 	bl	80166e4 <_sbrk_r>
 8015e50:	6030      	str	r0, [r6, #0]
 8015e52:	4621      	mov	r1, r4
 8015e54:	4628      	mov	r0, r5
 8015e56:	f000 fc45 	bl	80166e4 <_sbrk_r>
 8015e5a:	1c43      	adds	r3, r0, #1
 8015e5c:	d103      	bne.n	8015e66 <sbrk_aligned+0x26>
 8015e5e:	f04f 34ff 	mov.w	r4, #4294967295
 8015e62:	4620      	mov	r0, r4
 8015e64:	bd70      	pop	{r4, r5, r6, pc}
 8015e66:	1cc4      	adds	r4, r0, #3
 8015e68:	f024 0403 	bic.w	r4, r4, #3
 8015e6c:	42a0      	cmp	r0, r4
 8015e6e:	d0f8      	beq.n	8015e62 <sbrk_aligned+0x22>
 8015e70:	1a21      	subs	r1, r4, r0
 8015e72:	4628      	mov	r0, r5
 8015e74:	f000 fc36 	bl	80166e4 <_sbrk_r>
 8015e78:	3001      	adds	r0, #1
 8015e7a:	d1f2      	bne.n	8015e62 <sbrk_aligned+0x22>
 8015e7c:	e7ef      	b.n	8015e5e <sbrk_aligned+0x1e>
 8015e7e:	bf00      	nop
 8015e80:	20024e80 	.word	0x20024e80

08015e84 <_malloc_r>:
 8015e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e88:	1ccd      	adds	r5, r1, #3
 8015e8a:	f025 0503 	bic.w	r5, r5, #3
 8015e8e:	3508      	adds	r5, #8
 8015e90:	2d0c      	cmp	r5, #12
 8015e92:	bf38      	it	cc
 8015e94:	250c      	movcc	r5, #12
 8015e96:	2d00      	cmp	r5, #0
 8015e98:	4606      	mov	r6, r0
 8015e9a:	db01      	blt.n	8015ea0 <_malloc_r+0x1c>
 8015e9c:	42a9      	cmp	r1, r5
 8015e9e:	d904      	bls.n	8015eaa <_malloc_r+0x26>
 8015ea0:	230c      	movs	r3, #12
 8015ea2:	6033      	str	r3, [r6, #0]
 8015ea4:	2000      	movs	r0, #0
 8015ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015eaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015f80 <_malloc_r+0xfc>
 8015eae:	f000 f869 	bl	8015f84 <__malloc_lock>
 8015eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8015eb6:	461c      	mov	r4, r3
 8015eb8:	bb44      	cbnz	r4, 8015f0c <_malloc_r+0x88>
 8015eba:	4629      	mov	r1, r5
 8015ebc:	4630      	mov	r0, r6
 8015ebe:	f7ff ffbf 	bl	8015e40 <sbrk_aligned>
 8015ec2:	1c43      	adds	r3, r0, #1
 8015ec4:	4604      	mov	r4, r0
 8015ec6:	d158      	bne.n	8015f7a <_malloc_r+0xf6>
 8015ec8:	f8d8 4000 	ldr.w	r4, [r8]
 8015ecc:	4627      	mov	r7, r4
 8015ece:	2f00      	cmp	r7, #0
 8015ed0:	d143      	bne.n	8015f5a <_malloc_r+0xd6>
 8015ed2:	2c00      	cmp	r4, #0
 8015ed4:	d04b      	beq.n	8015f6e <_malloc_r+0xea>
 8015ed6:	6823      	ldr	r3, [r4, #0]
 8015ed8:	4639      	mov	r1, r7
 8015eda:	4630      	mov	r0, r6
 8015edc:	eb04 0903 	add.w	r9, r4, r3
 8015ee0:	f000 fc00 	bl	80166e4 <_sbrk_r>
 8015ee4:	4581      	cmp	r9, r0
 8015ee6:	d142      	bne.n	8015f6e <_malloc_r+0xea>
 8015ee8:	6821      	ldr	r1, [r4, #0]
 8015eea:	1a6d      	subs	r5, r5, r1
 8015eec:	4629      	mov	r1, r5
 8015eee:	4630      	mov	r0, r6
 8015ef0:	f7ff ffa6 	bl	8015e40 <sbrk_aligned>
 8015ef4:	3001      	adds	r0, #1
 8015ef6:	d03a      	beq.n	8015f6e <_malloc_r+0xea>
 8015ef8:	6823      	ldr	r3, [r4, #0]
 8015efa:	442b      	add	r3, r5
 8015efc:	6023      	str	r3, [r4, #0]
 8015efe:	f8d8 3000 	ldr.w	r3, [r8]
 8015f02:	685a      	ldr	r2, [r3, #4]
 8015f04:	bb62      	cbnz	r2, 8015f60 <_malloc_r+0xdc>
 8015f06:	f8c8 7000 	str.w	r7, [r8]
 8015f0a:	e00f      	b.n	8015f2c <_malloc_r+0xa8>
 8015f0c:	6822      	ldr	r2, [r4, #0]
 8015f0e:	1b52      	subs	r2, r2, r5
 8015f10:	d420      	bmi.n	8015f54 <_malloc_r+0xd0>
 8015f12:	2a0b      	cmp	r2, #11
 8015f14:	d917      	bls.n	8015f46 <_malloc_r+0xc2>
 8015f16:	1961      	adds	r1, r4, r5
 8015f18:	42a3      	cmp	r3, r4
 8015f1a:	6025      	str	r5, [r4, #0]
 8015f1c:	bf18      	it	ne
 8015f1e:	6059      	strne	r1, [r3, #4]
 8015f20:	6863      	ldr	r3, [r4, #4]
 8015f22:	bf08      	it	eq
 8015f24:	f8c8 1000 	streq.w	r1, [r8]
 8015f28:	5162      	str	r2, [r4, r5]
 8015f2a:	604b      	str	r3, [r1, #4]
 8015f2c:	4630      	mov	r0, r6
 8015f2e:	f000 f82f 	bl	8015f90 <__malloc_unlock>
 8015f32:	f104 000b 	add.w	r0, r4, #11
 8015f36:	1d23      	adds	r3, r4, #4
 8015f38:	f020 0007 	bic.w	r0, r0, #7
 8015f3c:	1ac2      	subs	r2, r0, r3
 8015f3e:	bf1c      	itt	ne
 8015f40:	1a1b      	subne	r3, r3, r0
 8015f42:	50a3      	strne	r3, [r4, r2]
 8015f44:	e7af      	b.n	8015ea6 <_malloc_r+0x22>
 8015f46:	6862      	ldr	r2, [r4, #4]
 8015f48:	42a3      	cmp	r3, r4
 8015f4a:	bf0c      	ite	eq
 8015f4c:	f8c8 2000 	streq.w	r2, [r8]
 8015f50:	605a      	strne	r2, [r3, #4]
 8015f52:	e7eb      	b.n	8015f2c <_malloc_r+0xa8>
 8015f54:	4623      	mov	r3, r4
 8015f56:	6864      	ldr	r4, [r4, #4]
 8015f58:	e7ae      	b.n	8015eb8 <_malloc_r+0x34>
 8015f5a:	463c      	mov	r4, r7
 8015f5c:	687f      	ldr	r7, [r7, #4]
 8015f5e:	e7b6      	b.n	8015ece <_malloc_r+0x4a>
 8015f60:	461a      	mov	r2, r3
 8015f62:	685b      	ldr	r3, [r3, #4]
 8015f64:	42a3      	cmp	r3, r4
 8015f66:	d1fb      	bne.n	8015f60 <_malloc_r+0xdc>
 8015f68:	2300      	movs	r3, #0
 8015f6a:	6053      	str	r3, [r2, #4]
 8015f6c:	e7de      	b.n	8015f2c <_malloc_r+0xa8>
 8015f6e:	230c      	movs	r3, #12
 8015f70:	6033      	str	r3, [r6, #0]
 8015f72:	4630      	mov	r0, r6
 8015f74:	f000 f80c 	bl	8015f90 <__malloc_unlock>
 8015f78:	e794      	b.n	8015ea4 <_malloc_r+0x20>
 8015f7a:	6005      	str	r5, [r0, #0]
 8015f7c:	e7d6      	b.n	8015f2c <_malloc_r+0xa8>
 8015f7e:	bf00      	nop
 8015f80:	20024e84 	.word	0x20024e84

08015f84 <__malloc_lock>:
 8015f84:	4801      	ldr	r0, [pc, #4]	@ (8015f8c <__malloc_lock+0x8>)
 8015f86:	f7ff beda 	b.w	8015d3e <__retarget_lock_acquire_recursive>
 8015f8a:	bf00      	nop
 8015f8c:	20024e7c 	.word	0x20024e7c

08015f90 <__malloc_unlock>:
 8015f90:	4801      	ldr	r0, [pc, #4]	@ (8015f98 <__malloc_unlock+0x8>)
 8015f92:	f7ff bed5 	b.w	8015d40 <__retarget_lock_release_recursive>
 8015f96:	bf00      	nop
 8015f98:	20024e7c 	.word	0x20024e7c

08015f9c <__ssputs_r>:
 8015f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fa0:	688e      	ldr	r6, [r1, #8]
 8015fa2:	461f      	mov	r7, r3
 8015fa4:	42be      	cmp	r6, r7
 8015fa6:	680b      	ldr	r3, [r1, #0]
 8015fa8:	4682      	mov	sl, r0
 8015faa:	460c      	mov	r4, r1
 8015fac:	4690      	mov	r8, r2
 8015fae:	d82d      	bhi.n	801600c <__ssputs_r+0x70>
 8015fb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015fb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015fb8:	d026      	beq.n	8016008 <__ssputs_r+0x6c>
 8015fba:	6965      	ldr	r5, [r4, #20]
 8015fbc:	6909      	ldr	r1, [r1, #16]
 8015fbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015fc2:	eba3 0901 	sub.w	r9, r3, r1
 8015fc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015fca:	1c7b      	adds	r3, r7, #1
 8015fcc:	444b      	add	r3, r9
 8015fce:	106d      	asrs	r5, r5, #1
 8015fd0:	429d      	cmp	r5, r3
 8015fd2:	bf38      	it	cc
 8015fd4:	461d      	movcc	r5, r3
 8015fd6:	0553      	lsls	r3, r2, #21
 8015fd8:	d527      	bpl.n	801602a <__ssputs_r+0x8e>
 8015fda:	4629      	mov	r1, r5
 8015fdc:	f7ff ff52 	bl	8015e84 <_malloc_r>
 8015fe0:	4606      	mov	r6, r0
 8015fe2:	b360      	cbz	r0, 801603e <__ssputs_r+0xa2>
 8015fe4:	6921      	ldr	r1, [r4, #16]
 8015fe6:	464a      	mov	r2, r9
 8015fe8:	f7ff feab 	bl	8015d42 <memcpy>
 8015fec:	89a3      	ldrh	r3, [r4, #12]
 8015fee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015ff6:	81a3      	strh	r3, [r4, #12]
 8015ff8:	6126      	str	r6, [r4, #16]
 8015ffa:	6165      	str	r5, [r4, #20]
 8015ffc:	444e      	add	r6, r9
 8015ffe:	eba5 0509 	sub.w	r5, r5, r9
 8016002:	6026      	str	r6, [r4, #0]
 8016004:	60a5      	str	r5, [r4, #8]
 8016006:	463e      	mov	r6, r7
 8016008:	42be      	cmp	r6, r7
 801600a:	d900      	bls.n	801600e <__ssputs_r+0x72>
 801600c:	463e      	mov	r6, r7
 801600e:	6820      	ldr	r0, [r4, #0]
 8016010:	4632      	mov	r2, r6
 8016012:	4641      	mov	r1, r8
 8016014:	f7ff fdff 	bl	8015c16 <memmove>
 8016018:	68a3      	ldr	r3, [r4, #8]
 801601a:	1b9b      	subs	r3, r3, r6
 801601c:	60a3      	str	r3, [r4, #8]
 801601e:	6823      	ldr	r3, [r4, #0]
 8016020:	4433      	add	r3, r6
 8016022:	6023      	str	r3, [r4, #0]
 8016024:	2000      	movs	r0, #0
 8016026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801602a:	462a      	mov	r2, r5
 801602c:	f000 fb71 	bl	8016712 <_realloc_r>
 8016030:	4606      	mov	r6, r0
 8016032:	2800      	cmp	r0, #0
 8016034:	d1e0      	bne.n	8015ff8 <__ssputs_r+0x5c>
 8016036:	6921      	ldr	r1, [r4, #16]
 8016038:	4650      	mov	r0, sl
 801603a:	f7ff feaf 	bl	8015d9c <_free_r>
 801603e:	230c      	movs	r3, #12
 8016040:	f8ca 3000 	str.w	r3, [sl]
 8016044:	89a3      	ldrh	r3, [r4, #12]
 8016046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801604a:	81a3      	strh	r3, [r4, #12]
 801604c:	f04f 30ff 	mov.w	r0, #4294967295
 8016050:	e7e9      	b.n	8016026 <__ssputs_r+0x8a>
	...

08016054 <_svfiprintf_r>:
 8016054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016058:	4698      	mov	r8, r3
 801605a:	898b      	ldrh	r3, [r1, #12]
 801605c:	061b      	lsls	r3, r3, #24
 801605e:	b09d      	sub	sp, #116	@ 0x74
 8016060:	4607      	mov	r7, r0
 8016062:	460d      	mov	r5, r1
 8016064:	4614      	mov	r4, r2
 8016066:	d510      	bpl.n	801608a <_svfiprintf_r+0x36>
 8016068:	690b      	ldr	r3, [r1, #16]
 801606a:	b973      	cbnz	r3, 801608a <_svfiprintf_r+0x36>
 801606c:	2140      	movs	r1, #64	@ 0x40
 801606e:	f7ff ff09 	bl	8015e84 <_malloc_r>
 8016072:	6028      	str	r0, [r5, #0]
 8016074:	6128      	str	r0, [r5, #16]
 8016076:	b930      	cbnz	r0, 8016086 <_svfiprintf_r+0x32>
 8016078:	230c      	movs	r3, #12
 801607a:	603b      	str	r3, [r7, #0]
 801607c:	f04f 30ff 	mov.w	r0, #4294967295
 8016080:	b01d      	add	sp, #116	@ 0x74
 8016082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016086:	2340      	movs	r3, #64	@ 0x40
 8016088:	616b      	str	r3, [r5, #20]
 801608a:	2300      	movs	r3, #0
 801608c:	9309      	str	r3, [sp, #36]	@ 0x24
 801608e:	2320      	movs	r3, #32
 8016090:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016094:	f8cd 800c 	str.w	r8, [sp, #12]
 8016098:	2330      	movs	r3, #48	@ 0x30
 801609a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016238 <_svfiprintf_r+0x1e4>
 801609e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80160a2:	f04f 0901 	mov.w	r9, #1
 80160a6:	4623      	mov	r3, r4
 80160a8:	469a      	mov	sl, r3
 80160aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80160ae:	b10a      	cbz	r2, 80160b4 <_svfiprintf_r+0x60>
 80160b0:	2a25      	cmp	r2, #37	@ 0x25
 80160b2:	d1f9      	bne.n	80160a8 <_svfiprintf_r+0x54>
 80160b4:	ebba 0b04 	subs.w	fp, sl, r4
 80160b8:	d00b      	beq.n	80160d2 <_svfiprintf_r+0x7e>
 80160ba:	465b      	mov	r3, fp
 80160bc:	4622      	mov	r2, r4
 80160be:	4629      	mov	r1, r5
 80160c0:	4638      	mov	r0, r7
 80160c2:	f7ff ff6b 	bl	8015f9c <__ssputs_r>
 80160c6:	3001      	adds	r0, #1
 80160c8:	f000 80a7 	beq.w	801621a <_svfiprintf_r+0x1c6>
 80160cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80160ce:	445a      	add	r2, fp
 80160d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80160d2:	f89a 3000 	ldrb.w	r3, [sl]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	f000 809f 	beq.w	801621a <_svfiprintf_r+0x1c6>
 80160dc:	2300      	movs	r3, #0
 80160de:	f04f 32ff 	mov.w	r2, #4294967295
 80160e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80160e6:	f10a 0a01 	add.w	sl, sl, #1
 80160ea:	9304      	str	r3, [sp, #16]
 80160ec:	9307      	str	r3, [sp, #28]
 80160ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80160f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80160f4:	4654      	mov	r4, sl
 80160f6:	2205      	movs	r2, #5
 80160f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160fc:	484e      	ldr	r0, [pc, #312]	@ (8016238 <_svfiprintf_r+0x1e4>)
 80160fe:	f7ea f88f 	bl	8000220 <memchr>
 8016102:	9a04      	ldr	r2, [sp, #16]
 8016104:	b9d8      	cbnz	r0, 801613e <_svfiprintf_r+0xea>
 8016106:	06d0      	lsls	r0, r2, #27
 8016108:	bf44      	itt	mi
 801610a:	2320      	movmi	r3, #32
 801610c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016110:	0711      	lsls	r1, r2, #28
 8016112:	bf44      	itt	mi
 8016114:	232b      	movmi	r3, #43	@ 0x2b
 8016116:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801611a:	f89a 3000 	ldrb.w	r3, [sl]
 801611e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016120:	d015      	beq.n	801614e <_svfiprintf_r+0xfa>
 8016122:	9a07      	ldr	r2, [sp, #28]
 8016124:	4654      	mov	r4, sl
 8016126:	2000      	movs	r0, #0
 8016128:	f04f 0c0a 	mov.w	ip, #10
 801612c:	4621      	mov	r1, r4
 801612e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016132:	3b30      	subs	r3, #48	@ 0x30
 8016134:	2b09      	cmp	r3, #9
 8016136:	d94b      	bls.n	80161d0 <_svfiprintf_r+0x17c>
 8016138:	b1b0      	cbz	r0, 8016168 <_svfiprintf_r+0x114>
 801613a:	9207      	str	r2, [sp, #28]
 801613c:	e014      	b.n	8016168 <_svfiprintf_r+0x114>
 801613e:	eba0 0308 	sub.w	r3, r0, r8
 8016142:	fa09 f303 	lsl.w	r3, r9, r3
 8016146:	4313      	orrs	r3, r2
 8016148:	9304      	str	r3, [sp, #16]
 801614a:	46a2      	mov	sl, r4
 801614c:	e7d2      	b.n	80160f4 <_svfiprintf_r+0xa0>
 801614e:	9b03      	ldr	r3, [sp, #12]
 8016150:	1d19      	adds	r1, r3, #4
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	9103      	str	r1, [sp, #12]
 8016156:	2b00      	cmp	r3, #0
 8016158:	bfbb      	ittet	lt
 801615a:	425b      	neglt	r3, r3
 801615c:	f042 0202 	orrlt.w	r2, r2, #2
 8016160:	9307      	strge	r3, [sp, #28]
 8016162:	9307      	strlt	r3, [sp, #28]
 8016164:	bfb8      	it	lt
 8016166:	9204      	strlt	r2, [sp, #16]
 8016168:	7823      	ldrb	r3, [r4, #0]
 801616a:	2b2e      	cmp	r3, #46	@ 0x2e
 801616c:	d10a      	bne.n	8016184 <_svfiprintf_r+0x130>
 801616e:	7863      	ldrb	r3, [r4, #1]
 8016170:	2b2a      	cmp	r3, #42	@ 0x2a
 8016172:	d132      	bne.n	80161da <_svfiprintf_r+0x186>
 8016174:	9b03      	ldr	r3, [sp, #12]
 8016176:	1d1a      	adds	r2, r3, #4
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	9203      	str	r2, [sp, #12]
 801617c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016180:	3402      	adds	r4, #2
 8016182:	9305      	str	r3, [sp, #20]
 8016184:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016248 <_svfiprintf_r+0x1f4>
 8016188:	7821      	ldrb	r1, [r4, #0]
 801618a:	2203      	movs	r2, #3
 801618c:	4650      	mov	r0, sl
 801618e:	f7ea f847 	bl	8000220 <memchr>
 8016192:	b138      	cbz	r0, 80161a4 <_svfiprintf_r+0x150>
 8016194:	9b04      	ldr	r3, [sp, #16]
 8016196:	eba0 000a 	sub.w	r0, r0, sl
 801619a:	2240      	movs	r2, #64	@ 0x40
 801619c:	4082      	lsls	r2, r0
 801619e:	4313      	orrs	r3, r2
 80161a0:	3401      	adds	r4, #1
 80161a2:	9304      	str	r3, [sp, #16]
 80161a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161a8:	4824      	ldr	r0, [pc, #144]	@ (801623c <_svfiprintf_r+0x1e8>)
 80161aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80161ae:	2206      	movs	r2, #6
 80161b0:	f7ea f836 	bl	8000220 <memchr>
 80161b4:	2800      	cmp	r0, #0
 80161b6:	d036      	beq.n	8016226 <_svfiprintf_r+0x1d2>
 80161b8:	4b21      	ldr	r3, [pc, #132]	@ (8016240 <_svfiprintf_r+0x1ec>)
 80161ba:	bb1b      	cbnz	r3, 8016204 <_svfiprintf_r+0x1b0>
 80161bc:	9b03      	ldr	r3, [sp, #12]
 80161be:	3307      	adds	r3, #7
 80161c0:	f023 0307 	bic.w	r3, r3, #7
 80161c4:	3308      	adds	r3, #8
 80161c6:	9303      	str	r3, [sp, #12]
 80161c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80161ca:	4433      	add	r3, r6
 80161cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80161ce:	e76a      	b.n	80160a6 <_svfiprintf_r+0x52>
 80161d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80161d4:	460c      	mov	r4, r1
 80161d6:	2001      	movs	r0, #1
 80161d8:	e7a8      	b.n	801612c <_svfiprintf_r+0xd8>
 80161da:	2300      	movs	r3, #0
 80161dc:	3401      	adds	r4, #1
 80161de:	9305      	str	r3, [sp, #20]
 80161e0:	4619      	mov	r1, r3
 80161e2:	f04f 0c0a 	mov.w	ip, #10
 80161e6:	4620      	mov	r0, r4
 80161e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80161ec:	3a30      	subs	r2, #48	@ 0x30
 80161ee:	2a09      	cmp	r2, #9
 80161f0:	d903      	bls.n	80161fa <_svfiprintf_r+0x1a6>
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d0c6      	beq.n	8016184 <_svfiprintf_r+0x130>
 80161f6:	9105      	str	r1, [sp, #20]
 80161f8:	e7c4      	b.n	8016184 <_svfiprintf_r+0x130>
 80161fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80161fe:	4604      	mov	r4, r0
 8016200:	2301      	movs	r3, #1
 8016202:	e7f0      	b.n	80161e6 <_svfiprintf_r+0x192>
 8016204:	ab03      	add	r3, sp, #12
 8016206:	9300      	str	r3, [sp, #0]
 8016208:	462a      	mov	r2, r5
 801620a:	4b0e      	ldr	r3, [pc, #56]	@ (8016244 <_svfiprintf_r+0x1f0>)
 801620c:	a904      	add	r1, sp, #16
 801620e:	4638      	mov	r0, r7
 8016210:	f3af 8000 	nop.w
 8016214:	1c42      	adds	r2, r0, #1
 8016216:	4606      	mov	r6, r0
 8016218:	d1d6      	bne.n	80161c8 <_svfiprintf_r+0x174>
 801621a:	89ab      	ldrh	r3, [r5, #12]
 801621c:	065b      	lsls	r3, r3, #25
 801621e:	f53f af2d 	bmi.w	801607c <_svfiprintf_r+0x28>
 8016222:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016224:	e72c      	b.n	8016080 <_svfiprintf_r+0x2c>
 8016226:	ab03      	add	r3, sp, #12
 8016228:	9300      	str	r3, [sp, #0]
 801622a:	462a      	mov	r2, r5
 801622c:	4b05      	ldr	r3, [pc, #20]	@ (8016244 <_svfiprintf_r+0x1f0>)
 801622e:	a904      	add	r1, sp, #16
 8016230:	4638      	mov	r0, r7
 8016232:	f000 f879 	bl	8016328 <_printf_i>
 8016236:	e7ed      	b.n	8016214 <_svfiprintf_r+0x1c0>
 8016238:	08017077 	.word	0x08017077
 801623c:	08017081 	.word	0x08017081
 8016240:	00000000 	.word	0x00000000
 8016244:	08015f9d 	.word	0x08015f9d
 8016248:	0801707d 	.word	0x0801707d

0801624c <_printf_common>:
 801624c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016250:	4616      	mov	r6, r2
 8016252:	4698      	mov	r8, r3
 8016254:	688a      	ldr	r2, [r1, #8]
 8016256:	690b      	ldr	r3, [r1, #16]
 8016258:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801625c:	4293      	cmp	r3, r2
 801625e:	bfb8      	it	lt
 8016260:	4613      	movlt	r3, r2
 8016262:	6033      	str	r3, [r6, #0]
 8016264:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016268:	4607      	mov	r7, r0
 801626a:	460c      	mov	r4, r1
 801626c:	b10a      	cbz	r2, 8016272 <_printf_common+0x26>
 801626e:	3301      	adds	r3, #1
 8016270:	6033      	str	r3, [r6, #0]
 8016272:	6823      	ldr	r3, [r4, #0]
 8016274:	0699      	lsls	r1, r3, #26
 8016276:	bf42      	ittt	mi
 8016278:	6833      	ldrmi	r3, [r6, #0]
 801627a:	3302      	addmi	r3, #2
 801627c:	6033      	strmi	r3, [r6, #0]
 801627e:	6825      	ldr	r5, [r4, #0]
 8016280:	f015 0506 	ands.w	r5, r5, #6
 8016284:	d106      	bne.n	8016294 <_printf_common+0x48>
 8016286:	f104 0a19 	add.w	sl, r4, #25
 801628a:	68e3      	ldr	r3, [r4, #12]
 801628c:	6832      	ldr	r2, [r6, #0]
 801628e:	1a9b      	subs	r3, r3, r2
 8016290:	42ab      	cmp	r3, r5
 8016292:	dc26      	bgt.n	80162e2 <_printf_common+0x96>
 8016294:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016298:	6822      	ldr	r2, [r4, #0]
 801629a:	3b00      	subs	r3, #0
 801629c:	bf18      	it	ne
 801629e:	2301      	movne	r3, #1
 80162a0:	0692      	lsls	r2, r2, #26
 80162a2:	d42b      	bmi.n	80162fc <_printf_common+0xb0>
 80162a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80162a8:	4641      	mov	r1, r8
 80162aa:	4638      	mov	r0, r7
 80162ac:	47c8      	blx	r9
 80162ae:	3001      	adds	r0, #1
 80162b0:	d01e      	beq.n	80162f0 <_printf_common+0xa4>
 80162b2:	6823      	ldr	r3, [r4, #0]
 80162b4:	6922      	ldr	r2, [r4, #16]
 80162b6:	f003 0306 	and.w	r3, r3, #6
 80162ba:	2b04      	cmp	r3, #4
 80162bc:	bf02      	ittt	eq
 80162be:	68e5      	ldreq	r5, [r4, #12]
 80162c0:	6833      	ldreq	r3, [r6, #0]
 80162c2:	1aed      	subeq	r5, r5, r3
 80162c4:	68a3      	ldr	r3, [r4, #8]
 80162c6:	bf0c      	ite	eq
 80162c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80162cc:	2500      	movne	r5, #0
 80162ce:	4293      	cmp	r3, r2
 80162d0:	bfc4      	itt	gt
 80162d2:	1a9b      	subgt	r3, r3, r2
 80162d4:	18ed      	addgt	r5, r5, r3
 80162d6:	2600      	movs	r6, #0
 80162d8:	341a      	adds	r4, #26
 80162da:	42b5      	cmp	r5, r6
 80162dc:	d11a      	bne.n	8016314 <_printf_common+0xc8>
 80162de:	2000      	movs	r0, #0
 80162e0:	e008      	b.n	80162f4 <_printf_common+0xa8>
 80162e2:	2301      	movs	r3, #1
 80162e4:	4652      	mov	r2, sl
 80162e6:	4641      	mov	r1, r8
 80162e8:	4638      	mov	r0, r7
 80162ea:	47c8      	blx	r9
 80162ec:	3001      	adds	r0, #1
 80162ee:	d103      	bne.n	80162f8 <_printf_common+0xac>
 80162f0:	f04f 30ff 	mov.w	r0, #4294967295
 80162f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162f8:	3501      	adds	r5, #1
 80162fa:	e7c6      	b.n	801628a <_printf_common+0x3e>
 80162fc:	18e1      	adds	r1, r4, r3
 80162fe:	1c5a      	adds	r2, r3, #1
 8016300:	2030      	movs	r0, #48	@ 0x30
 8016302:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016306:	4422      	add	r2, r4
 8016308:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801630c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016310:	3302      	adds	r3, #2
 8016312:	e7c7      	b.n	80162a4 <_printf_common+0x58>
 8016314:	2301      	movs	r3, #1
 8016316:	4622      	mov	r2, r4
 8016318:	4641      	mov	r1, r8
 801631a:	4638      	mov	r0, r7
 801631c:	47c8      	blx	r9
 801631e:	3001      	adds	r0, #1
 8016320:	d0e6      	beq.n	80162f0 <_printf_common+0xa4>
 8016322:	3601      	adds	r6, #1
 8016324:	e7d9      	b.n	80162da <_printf_common+0x8e>
	...

08016328 <_printf_i>:
 8016328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801632c:	7e0f      	ldrb	r7, [r1, #24]
 801632e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016330:	2f78      	cmp	r7, #120	@ 0x78
 8016332:	4691      	mov	r9, r2
 8016334:	4680      	mov	r8, r0
 8016336:	460c      	mov	r4, r1
 8016338:	469a      	mov	sl, r3
 801633a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801633e:	d807      	bhi.n	8016350 <_printf_i+0x28>
 8016340:	2f62      	cmp	r7, #98	@ 0x62
 8016342:	d80a      	bhi.n	801635a <_printf_i+0x32>
 8016344:	2f00      	cmp	r7, #0
 8016346:	f000 80d2 	beq.w	80164ee <_printf_i+0x1c6>
 801634a:	2f58      	cmp	r7, #88	@ 0x58
 801634c:	f000 80b9 	beq.w	80164c2 <_printf_i+0x19a>
 8016350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016354:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016358:	e03a      	b.n	80163d0 <_printf_i+0xa8>
 801635a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801635e:	2b15      	cmp	r3, #21
 8016360:	d8f6      	bhi.n	8016350 <_printf_i+0x28>
 8016362:	a101      	add	r1, pc, #4	@ (adr r1, 8016368 <_printf_i+0x40>)
 8016364:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016368:	080163c1 	.word	0x080163c1
 801636c:	080163d5 	.word	0x080163d5
 8016370:	08016351 	.word	0x08016351
 8016374:	08016351 	.word	0x08016351
 8016378:	08016351 	.word	0x08016351
 801637c:	08016351 	.word	0x08016351
 8016380:	080163d5 	.word	0x080163d5
 8016384:	08016351 	.word	0x08016351
 8016388:	08016351 	.word	0x08016351
 801638c:	08016351 	.word	0x08016351
 8016390:	08016351 	.word	0x08016351
 8016394:	080164d5 	.word	0x080164d5
 8016398:	080163ff 	.word	0x080163ff
 801639c:	0801648f 	.word	0x0801648f
 80163a0:	08016351 	.word	0x08016351
 80163a4:	08016351 	.word	0x08016351
 80163a8:	080164f7 	.word	0x080164f7
 80163ac:	08016351 	.word	0x08016351
 80163b0:	080163ff 	.word	0x080163ff
 80163b4:	08016351 	.word	0x08016351
 80163b8:	08016351 	.word	0x08016351
 80163bc:	08016497 	.word	0x08016497
 80163c0:	6833      	ldr	r3, [r6, #0]
 80163c2:	1d1a      	adds	r2, r3, #4
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	6032      	str	r2, [r6, #0]
 80163c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80163cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80163d0:	2301      	movs	r3, #1
 80163d2:	e09d      	b.n	8016510 <_printf_i+0x1e8>
 80163d4:	6833      	ldr	r3, [r6, #0]
 80163d6:	6820      	ldr	r0, [r4, #0]
 80163d8:	1d19      	adds	r1, r3, #4
 80163da:	6031      	str	r1, [r6, #0]
 80163dc:	0606      	lsls	r6, r0, #24
 80163de:	d501      	bpl.n	80163e4 <_printf_i+0xbc>
 80163e0:	681d      	ldr	r5, [r3, #0]
 80163e2:	e003      	b.n	80163ec <_printf_i+0xc4>
 80163e4:	0645      	lsls	r5, r0, #25
 80163e6:	d5fb      	bpl.n	80163e0 <_printf_i+0xb8>
 80163e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80163ec:	2d00      	cmp	r5, #0
 80163ee:	da03      	bge.n	80163f8 <_printf_i+0xd0>
 80163f0:	232d      	movs	r3, #45	@ 0x2d
 80163f2:	426d      	negs	r5, r5
 80163f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80163f8:	4859      	ldr	r0, [pc, #356]	@ (8016560 <_printf_i+0x238>)
 80163fa:	230a      	movs	r3, #10
 80163fc:	e011      	b.n	8016422 <_printf_i+0xfa>
 80163fe:	6821      	ldr	r1, [r4, #0]
 8016400:	6833      	ldr	r3, [r6, #0]
 8016402:	0608      	lsls	r0, r1, #24
 8016404:	f853 5b04 	ldr.w	r5, [r3], #4
 8016408:	d402      	bmi.n	8016410 <_printf_i+0xe8>
 801640a:	0649      	lsls	r1, r1, #25
 801640c:	bf48      	it	mi
 801640e:	b2ad      	uxthmi	r5, r5
 8016410:	2f6f      	cmp	r7, #111	@ 0x6f
 8016412:	4853      	ldr	r0, [pc, #332]	@ (8016560 <_printf_i+0x238>)
 8016414:	6033      	str	r3, [r6, #0]
 8016416:	bf14      	ite	ne
 8016418:	230a      	movne	r3, #10
 801641a:	2308      	moveq	r3, #8
 801641c:	2100      	movs	r1, #0
 801641e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016422:	6866      	ldr	r6, [r4, #4]
 8016424:	60a6      	str	r6, [r4, #8]
 8016426:	2e00      	cmp	r6, #0
 8016428:	bfa2      	ittt	ge
 801642a:	6821      	ldrge	r1, [r4, #0]
 801642c:	f021 0104 	bicge.w	r1, r1, #4
 8016430:	6021      	strge	r1, [r4, #0]
 8016432:	b90d      	cbnz	r5, 8016438 <_printf_i+0x110>
 8016434:	2e00      	cmp	r6, #0
 8016436:	d04b      	beq.n	80164d0 <_printf_i+0x1a8>
 8016438:	4616      	mov	r6, r2
 801643a:	fbb5 f1f3 	udiv	r1, r5, r3
 801643e:	fb03 5711 	mls	r7, r3, r1, r5
 8016442:	5dc7      	ldrb	r7, [r0, r7]
 8016444:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016448:	462f      	mov	r7, r5
 801644a:	42bb      	cmp	r3, r7
 801644c:	460d      	mov	r5, r1
 801644e:	d9f4      	bls.n	801643a <_printf_i+0x112>
 8016450:	2b08      	cmp	r3, #8
 8016452:	d10b      	bne.n	801646c <_printf_i+0x144>
 8016454:	6823      	ldr	r3, [r4, #0]
 8016456:	07df      	lsls	r7, r3, #31
 8016458:	d508      	bpl.n	801646c <_printf_i+0x144>
 801645a:	6923      	ldr	r3, [r4, #16]
 801645c:	6861      	ldr	r1, [r4, #4]
 801645e:	4299      	cmp	r1, r3
 8016460:	bfde      	ittt	le
 8016462:	2330      	movle	r3, #48	@ 0x30
 8016464:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016468:	f106 36ff 	addle.w	r6, r6, #4294967295
 801646c:	1b92      	subs	r2, r2, r6
 801646e:	6122      	str	r2, [r4, #16]
 8016470:	f8cd a000 	str.w	sl, [sp]
 8016474:	464b      	mov	r3, r9
 8016476:	aa03      	add	r2, sp, #12
 8016478:	4621      	mov	r1, r4
 801647a:	4640      	mov	r0, r8
 801647c:	f7ff fee6 	bl	801624c <_printf_common>
 8016480:	3001      	adds	r0, #1
 8016482:	d14a      	bne.n	801651a <_printf_i+0x1f2>
 8016484:	f04f 30ff 	mov.w	r0, #4294967295
 8016488:	b004      	add	sp, #16
 801648a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801648e:	6823      	ldr	r3, [r4, #0]
 8016490:	f043 0320 	orr.w	r3, r3, #32
 8016494:	6023      	str	r3, [r4, #0]
 8016496:	4833      	ldr	r0, [pc, #204]	@ (8016564 <_printf_i+0x23c>)
 8016498:	2778      	movs	r7, #120	@ 0x78
 801649a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801649e:	6823      	ldr	r3, [r4, #0]
 80164a0:	6831      	ldr	r1, [r6, #0]
 80164a2:	061f      	lsls	r7, r3, #24
 80164a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80164a8:	d402      	bmi.n	80164b0 <_printf_i+0x188>
 80164aa:	065f      	lsls	r7, r3, #25
 80164ac:	bf48      	it	mi
 80164ae:	b2ad      	uxthmi	r5, r5
 80164b0:	6031      	str	r1, [r6, #0]
 80164b2:	07d9      	lsls	r1, r3, #31
 80164b4:	bf44      	itt	mi
 80164b6:	f043 0320 	orrmi.w	r3, r3, #32
 80164ba:	6023      	strmi	r3, [r4, #0]
 80164bc:	b11d      	cbz	r5, 80164c6 <_printf_i+0x19e>
 80164be:	2310      	movs	r3, #16
 80164c0:	e7ac      	b.n	801641c <_printf_i+0xf4>
 80164c2:	4827      	ldr	r0, [pc, #156]	@ (8016560 <_printf_i+0x238>)
 80164c4:	e7e9      	b.n	801649a <_printf_i+0x172>
 80164c6:	6823      	ldr	r3, [r4, #0]
 80164c8:	f023 0320 	bic.w	r3, r3, #32
 80164cc:	6023      	str	r3, [r4, #0]
 80164ce:	e7f6      	b.n	80164be <_printf_i+0x196>
 80164d0:	4616      	mov	r6, r2
 80164d2:	e7bd      	b.n	8016450 <_printf_i+0x128>
 80164d4:	6833      	ldr	r3, [r6, #0]
 80164d6:	6825      	ldr	r5, [r4, #0]
 80164d8:	6961      	ldr	r1, [r4, #20]
 80164da:	1d18      	adds	r0, r3, #4
 80164dc:	6030      	str	r0, [r6, #0]
 80164de:	062e      	lsls	r6, r5, #24
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	d501      	bpl.n	80164e8 <_printf_i+0x1c0>
 80164e4:	6019      	str	r1, [r3, #0]
 80164e6:	e002      	b.n	80164ee <_printf_i+0x1c6>
 80164e8:	0668      	lsls	r0, r5, #25
 80164ea:	d5fb      	bpl.n	80164e4 <_printf_i+0x1bc>
 80164ec:	8019      	strh	r1, [r3, #0]
 80164ee:	2300      	movs	r3, #0
 80164f0:	6123      	str	r3, [r4, #16]
 80164f2:	4616      	mov	r6, r2
 80164f4:	e7bc      	b.n	8016470 <_printf_i+0x148>
 80164f6:	6833      	ldr	r3, [r6, #0]
 80164f8:	1d1a      	adds	r2, r3, #4
 80164fa:	6032      	str	r2, [r6, #0]
 80164fc:	681e      	ldr	r6, [r3, #0]
 80164fe:	6862      	ldr	r2, [r4, #4]
 8016500:	2100      	movs	r1, #0
 8016502:	4630      	mov	r0, r6
 8016504:	f7e9 fe8c 	bl	8000220 <memchr>
 8016508:	b108      	cbz	r0, 801650e <_printf_i+0x1e6>
 801650a:	1b80      	subs	r0, r0, r6
 801650c:	6060      	str	r0, [r4, #4]
 801650e:	6863      	ldr	r3, [r4, #4]
 8016510:	6123      	str	r3, [r4, #16]
 8016512:	2300      	movs	r3, #0
 8016514:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016518:	e7aa      	b.n	8016470 <_printf_i+0x148>
 801651a:	6923      	ldr	r3, [r4, #16]
 801651c:	4632      	mov	r2, r6
 801651e:	4649      	mov	r1, r9
 8016520:	4640      	mov	r0, r8
 8016522:	47d0      	blx	sl
 8016524:	3001      	adds	r0, #1
 8016526:	d0ad      	beq.n	8016484 <_printf_i+0x15c>
 8016528:	6823      	ldr	r3, [r4, #0]
 801652a:	079b      	lsls	r3, r3, #30
 801652c:	d413      	bmi.n	8016556 <_printf_i+0x22e>
 801652e:	68e0      	ldr	r0, [r4, #12]
 8016530:	9b03      	ldr	r3, [sp, #12]
 8016532:	4298      	cmp	r0, r3
 8016534:	bfb8      	it	lt
 8016536:	4618      	movlt	r0, r3
 8016538:	e7a6      	b.n	8016488 <_printf_i+0x160>
 801653a:	2301      	movs	r3, #1
 801653c:	4632      	mov	r2, r6
 801653e:	4649      	mov	r1, r9
 8016540:	4640      	mov	r0, r8
 8016542:	47d0      	blx	sl
 8016544:	3001      	adds	r0, #1
 8016546:	d09d      	beq.n	8016484 <_printf_i+0x15c>
 8016548:	3501      	adds	r5, #1
 801654a:	68e3      	ldr	r3, [r4, #12]
 801654c:	9903      	ldr	r1, [sp, #12]
 801654e:	1a5b      	subs	r3, r3, r1
 8016550:	42ab      	cmp	r3, r5
 8016552:	dcf2      	bgt.n	801653a <_printf_i+0x212>
 8016554:	e7eb      	b.n	801652e <_printf_i+0x206>
 8016556:	2500      	movs	r5, #0
 8016558:	f104 0619 	add.w	r6, r4, #25
 801655c:	e7f5      	b.n	801654a <_printf_i+0x222>
 801655e:	bf00      	nop
 8016560:	08017088 	.word	0x08017088
 8016564:	08017099 	.word	0x08017099

08016568 <__sflush_r>:
 8016568:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801656c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016570:	0716      	lsls	r6, r2, #28
 8016572:	4605      	mov	r5, r0
 8016574:	460c      	mov	r4, r1
 8016576:	d454      	bmi.n	8016622 <__sflush_r+0xba>
 8016578:	684b      	ldr	r3, [r1, #4]
 801657a:	2b00      	cmp	r3, #0
 801657c:	dc02      	bgt.n	8016584 <__sflush_r+0x1c>
 801657e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016580:	2b00      	cmp	r3, #0
 8016582:	dd48      	ble.n	8016616 <__sflush_r+0xae>
 8016584:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016586:	2e00      	cmp	r6, #0
 8016588:	d045      	beq.n	8016616 <__sflush_r+0xae>
 801658a:	2300      	movs	r3, #0
 801658c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016590:	682f      	ldr	r7, [r5, #0]
 8016592:	6a21      	ldr	r1, [r4, #32]
 8016594:	602b      	str	r3, [r5, #0]
 8016596:	d030      	beq.n	80165fa <__sflush_r+0x92>
 8016598:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801659a:	89a3      	ldrh	r3, [r4, #12]
 801659c:	0759      	lsls	r1, r3, #29
 801659e:	d505      	bpl.n	80165ac <__sflush_r+0x44>
 80165a0:	6863      	ldr	r3, [r4, #4]
 80165a2:	1ad2      	subs	r2, r2, r3
 80165a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80165a6:	b10b      	cbz	r3, 80165ac <__sflush_r+0x44>
 80165a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80165aa:	1ad2      	subs	r2, r2, r3
 80165ac:	2300      	movs	r3, #0
 80165ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80165b0:	6a21      	ldr	r1, [r4, #32]
 80165b2:	4628      	mov	r0, r5
 80165b4:	47b0      	blx	r6
 80165b6:	1c43      	adds	r3, r0, #1
 80165b8:	89a3      	ldrh	r3, [r4, #12]
 80165ba:	d106      	bne.n	80165ca <__sflush_r+0x62>
 80165bc:	6829      	ldr	r1, [r5, #0]
 80165be:	291d      	cmp	r1, #29
 80165c0:	d82b      	bhi.n	801661a <__sflush_r+0xb2>
 80165c2:	4a2a      	ldr	r2, [pc, #168]	@ (801666c <__sflush_r+0x104>)
 80165c4:	410a      	asrs	r2, r1
 80165c6:	07d6      	lsls	r6, r2, #31
 80165c8:	d427      	bmi.n	801661a <__sflush_r+0xb2>
 80165ca:	2200      	movs	r2, #0
 80165cc:	6062      	str	r2, [r4, #4]
 80165ce:	04d9      	lsls	r1, r3, #19
 80165d0:	6922      	ldr	r2, [r4, #16]
 80165d2:	6022      	str	r2, [r4, #0]
 80165d4:	d504      	bpl.n	80165e0 <__sflush_r+0x78>
 80165d6:	1c42      	adds	r2, r0, #1
 80165d8:	d101      	bne.n	80165de <__sflush_r+0x76>
 80165da:	682b      	ldr	r3, [r5, #0]
 80165dc:	b903      	cbnz	r3, 80165e0 <__sflush_r+0x78>
 80165de:	6560      	str	r0, [r4, #84]	@ 0x54
 80165e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80165e2:	602f      	str	r7, [r5, #0]
 80165e4:	b1b9      	cbz	r1, 8016616 <__sflush_r+0xae>
 80165e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80165ea:	4299      	cmp	r1, r3
 80165ec:	d002      	beq.n	80165f4 <__sflush_r+0x8c>
 80165ee:	4628      	mov	r0, r5
 80165f0:	f7ff fbd4 	bl	8015d9c <_free_r>
 80165f4:	2300      	movs	r3, #0
 80165f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80165f8:	e00d      	b.n	8016616 <__sflush_r+0xae>
 80165fa:	2301      	movs	r3, #1
 80165fc:	4628      	mov	r0, r5
 80165fe:	47b0      	blx	r6
 8016600:	4602      	mov	r2, r0
 8016602:	1c50      	adds	r0, r2, #1
 8016604:	d1c9      	bne.n	801659a <__sflush_r+0x32>
 8016606:	682b      	ldr	r3, [r5, #0]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d0c6      	beq.n	801659a <__sflush_r+0x32>
 801660c:	2b1d      	cmp	r3, #29
 801660e:	d001      	beq.n	8016614 <__sflush_r+0xac>
 8016610:	2b16      	cmp	r3, #22
 8016612:	d11e      	bne.n	8016652 <__sflush_r+0xea>
 8016614:	602f      	str	r7, [r5, #0]
 8016616:	2000      	movs	r0, #0
 8016618:	e022      	b.n	8016660 <__sflush_r+0xf8>
 801661a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801661e:	b21b      	sxth	r3, r3
 8016620:	e01b      	b.n	801665a <__sflush_r+0xf2>
 8016622:	690f      	ldr	r7, [r1, #16]
 8016624:	2f00      	cmp	r7, #0
 8016626:	d0f6      	beq.n	8016616 <__sflush_r+0xae>
 8016628:	0793      	lsls	r3, r2, #30
 801662a:	680e      	ldr	r6, [r1, #0]
 801662c:	bf08      	it	eq
 801662e:	694b      	ldreq	r3, [r1, #20]
 8016630:	600f      	str	r7, [r1, #0]
 8016632:	bf18      	it	ne
 8016634:	2300      	movne	r3, #0
 8016636:	eba6 0807 	sub.w	r8, r6, r7
 801663a:	608b      	str	r3, [r1, #8]
 801663c:	f1b8 0f00 	cmp.w	r8, #0
 8016640:	dde9      	ble.n	8016616 <__sflush_r+0xae>
 8016642:	6a21      	ldr	r1, [r4, #32]
 8016644:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016646:	4643      	mov	r3, r8
 8016648:	463a      	mov	r2, r7
 801664a:	4628      	mov	r0, r5
 801664c:	47b0      	blx	r6
 801664e:	2800      	cmp	r0, #0
 8016650:	dc08      	bgt.n	8016664 <__sflush_r+0xfc>
 8016652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801665a:	81a3      	strh	r3, [r4, #12]
 801665c:	f04f 30ff 	mov.w	r0, #4294967295
 8016660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016664:	4407      	add	r7, r0
 8016666:	eba8 0800 	sub.w	r8, r8, r0
 801666a:	e7e7      	b.n	801663c <__sflush_r+0xd4>
 801666c:	dfbffffe 	.word	0xdfbffffe

08016670 <_fflush_r>:
 8016670:	b538      	push	{r3, r4, r5, lr}
 8016672:	690b      	ldr	r3, [r1, #16]
 8016674:	4605      	mov	r5, r0
 8016676:	460c      	mov	r4, r1
 8016678:	b913      	cbnz	r3, 8016680 <_fflush_r+0x10>
 801667a:	2500      	movs	r5, #0
 801667c:	4628      	mov	r0, r5
 801667e:	bd38      	pop	{r3, r4, r5, pc}
 8016680:	b118      	cbz	r0, 801668a <_fflush_r+0x1a>
 8016682:	6a03      	ldr	r3, [r0, #32]
 8016684:	b90b      	cbnz	r3, 801668a <_fflush_r+0x1a>
 8016686:	f7ff fa09 	bl	8015a9c <__sinit>
 801668a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d0f3      	beq.n	801667a <_fflush_r+0xa>
 8016692:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016694:	07d0      	lsls	r0, r2, #31
 8016696:	d404      	bmi.n	80166a2 <_fflush_r+0x32>
 8016698:	0599      	lsls	r1, r3, #22
 801669a:	d402      	bmi.n	80166a2 <_fflush_r+0x32>
 801669c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801669e:	f7ff fb4e 	bl	8015d3e <__retarget_lock_acquire_recursive>
 80166a2:	4628      	mov	r0, r5
 80166a4:	4621      	mov	r1, r4
 80166a6:	f7ff ff5f 	bl	8016568 <__sflush_r>
 80166aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80166ac:	07da      	lsls	r2, r3, #31
 80166ae:	4605      	mov	r5, r0
 80166b0:	d4e4      	bmi.n	801667c <_fflush_r+0xc>
 80166b2:	89a3      	ldrh	r3, [r4, #12]
 80166b4:	059b      	lsls	r3, r3, #22
 80166b6:	d4e1      	bmi.n	801667c <_fflush_r+0xc>
 80166b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80166ba:	f7ff fb41 	bl	8015d40 <__retarget_lock_release_recursive>
 80166be:	e7dd      	b.n	801667c <_fflush_r+0xc>

080166c0 <fiprintf>:
 80166c0:	b40e      	push	{r1, r2, r3}
 80166c2:	b503      	push	{r0, r1, lr}
 80166c4:	4601      	mov	r1, r0
 80166c6:	ab03      	add	r3, sp, #12
 80166c8:	4805      	ldr	r0, [pc, #20]	@ (80166e0 <fiprintf+0x20>)
 80166ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80166ce:	6800      	ldr	r0, [r0, #0]
 80166d0:	9301      	str	r3, [sp, #4]
 80166d2:	f000 f875 	bl	80167c0 <_vfiprintf_r>
 80166d6:	b002      	add	sp, #8
 80166d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80166dc:	b003      	add	sp, #12
 80166de:	4770      	bx	lr
 80166e0:	2000019c 	.word	0x2000019c

080166e4 <_sbrk_r>:
 80166e4:	b538      	push	{r3, r4, r5, lr}
 80166e6:	4d06      	ldr	r5, [pc, #24]	@ (8016700 <_sbrk_r+0x1c>)
 80166e8:	2300      	movs	r3, #0
 80166ea:	4604      	mov	r4, r0
 80166ec:	4608      	mov	r0, r1
 80166ee:	602b      	str	r3, [r5, #0]
 80166f0:	f7eb fe8c 	bl	800240c <_sbrk>
 80166f4:	1c43      	adds	r3, r0, #1
 80166f6:	d102      	bne.n	80166fe <_sbrk_r+0x1a>
 80166f8:	682b      	ldr	r3, [r5, #0]
 80166fa:	b103      	cbz	r3, 80166fe <_sbrk_r+0x1a>
 80166fc:	6023      	str	r3, [r4, #0]
 80166fe:	bd38      	pop	{r3, r4, r5, pc}
 8016700:	20024e78 	.word	0x20024e78

08016704 <abort>:
 8016704:	b508      	push	{r3, lr}
 8016706:	2006      	movs	r0, #6
 8016708:	f000 fa2e 	bl	8016b68 <raise>
 801670c:	2001      	movs	r0, #1
 801670e:	f7eb fe05 	bl	800231c <_exit>

08016712 <_realloc_r>:
 8016712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016716:	4680      	mov	r8, r0
 8016718:	4615      	mov	r5, r2
 801671a:	460c      	mov	r4, r1
 801671c:	b921      	cbnz	r1, 8016728 <_realloc_r+0x16>
 801671e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016722:	4611      	mov	r1, r2
 8016724:	f7ff bbae 	b.w	8015e84 <_malloc_r>
 8016728:	b92a      	cbnz	r2, 8016736 <_realloc_r+0x24>
 801672a:	f7ff fb37 	bl	8015d9c <_free_r>
 801672e:	2400      	movs	r4, #0
 8016730:	4620      	mov	r0, r4
 8016732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016736:	f000 fa33 	bl	8016ba0 <_malloc_usable_size_r>
 801673a:	4285      	cmp	r5, r0
 801673c:	4606      	mov	r6, r0
 801673e:	d802      	bhi.n	8016746 <_realloc_r+0x34>
 8016740:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016744:	d8f4      	bhi.n	8016730 <_realloc_r+0x1e>
 8016746:	4629      	mov	r1, r5
 8016748:	4640      	mov	r0, r8
 801674a:	f7ff fb9b 	bl	8015e84 <_malloc_r>
 801674e:	4607      	mov	r7, r0
 8016750:	2800      	cmp	r0, #0
 8016752:	d0ec      	beq.n	801672e <_realloc_r+0x1c>
 8016754:	42b5      	cmp	r5, r6
 8016756:	462a      	mov	r2, r5
 8016758:	4621      	mov	r1, r4
 801675a:	bf28      	it	cs
 801675c:	4632      	movcs	r2, r6
 801675e:	f7ff faf0 	bl	8015d42 <memcpy>
 8016762:	4621      	mov	r1, r4
 8016764:	4640      	mov	r0, r8
 8016766:	f7ff fb19 	bl	8015d9c <_free_r>
 801676a:	463c      	mov	r4, r7
 801676c:	e7e0      	b.n	8016730 <_realloc_r+0x1e>

0801676e <__sfputc_r>:
 801676e:	6893      	ldr	r3, [r2, #8]
 8016770:	3b01      	subs	r3, #1
 8016772:	2b00      	cmp	r3, #0
 8016774:	b410      	push	{r4}
 8016776:	6093      	str	r3, [r2, #8]
 8016778:	da08      	bge.n	801678c <__sfputc_r+0x1e>
 801677a:	6994      	ldr	r4, [r2, #24]
 801677c:	42a3      	cmp	r3, r4
 801677e:	db01      	blt.n	8016784 <__sfputc_r+0x16>
 8016780:	290a      	cmp	r1, #10
 8016782:	d103      	bne.n	801678c <__sfputc_r+0x1e>
 8016784:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016788:	f000 b932 	b.w	80169f0 <__swbuf_r>
 801678c:	6813      	ldr	r3, [r2, #0]
 801678e:	1c58      	adds	r0, r3, #1
 8016790:	6010      	str	r0, [r2, #0]
 8016792:	7019      	strb	r1, [r3, #0]
 8016794:	4608      	mov	r0, r1
 8016796:	f85d 4b04 	ldr.w	r4, [sp], #4
 801679a:	4770      	bx	lr

0801679c <__sfputs_r>:
 801679c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801679e:	4606      	mov	r6, r0
 80167a0:	460f      	mov	r7, r1
 80167a2:	4614      	mov	r4, r2
 80167a4:	18d5      	adds	r5, r2, r3
 80167a6:	42ac      	cmp	r4, r5
 80167a8:	d101      	bne.n	80167ae <__sfputs_r+0x12>
 80167aa:	2000      	movs	r0, #0
 80167ac:	e007      	b.n	80167be <__sfputs_r+0x22>
 80167ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80167b2:	463a      	mov	r2, r7
 80167b4:	4630      	mov	r0, r6
 80167b6:	f7ff ffda 	bl	801676e <__sfputc_r>
 80167ba:	1c43      	adds	r3, r0, #1
 80167bc:	d1f3      	bne.n	80167a6 <__sfputs_r+0xa>
 80167be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080167c0 <_vfiprintf_r>:
 80167c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167c4:	460d      	mov	r5, r1
 80167c6:	b09d      	sub	sp, #116	@ 0x74
 80167c8:	4614      	mov	r4, r2
 80167ca:	4698      	mov	r8, r3
 80167cc:	4606      	mov	r6, r0
 80167ce:	b118      	cbz	r0, 80167d8 <_vfiprintf_r+0x18>
 80167d0:	6a03      	ldr	r3, [r0, #32]
 80167d2:	b90b      	cbnz	r3, 80167d8 <_vfiprintf_r+0x18>
 80167d4:	f7ff f962 	bl	8015a9c <__sinit>
 80167d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80167da:	07d9      	lsls	r1, r3, #31
 80167dc:	d405      	bmi.n	80167ea <_vfiprintf_r+0x2a>
 80167de:	89ab      	ldrh	r3, [r5, #12]
 80167e0:	059a      	lsls	r2, r3, #22
 80167e2:	d402      	bmi.n	80167ea <_vfiprintf_r+0x2a>
 80167e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80167e6:	f7ff faaa 	bl	8015d3e <__retarget_lock_acquire_recursive>
 80167ea:	89ab      	ldrh	r3, [r5, #12]
 80167ec:	071b      	lsls	r3, r3, #28
 80167ee:	d501      	bpl.n	80167f4 <_vfiprintf_r+0x34>
 80167f0:	692b      	ldr	r3, [r5, #16]
 80167f2:	b99b      	cbnz	r3, 801681c <_vfiprintf_r+0x5c>
 80167f4:	4629      	mov	r1, r5
 80167f6:	4630      	mov	r0, r6
 80167f8:	f000 f938 	bl	8016a6c <__swsetup_r>
 80167fc:	b170      	cbz	r0, 801681c <_vfiprintf_r+0x5c>
 80167fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016800:	07dc      	lsls	r4, r3, #31
 8016802:	d504      	bpl.n	801680e <_vfiprintf_r+0x4e>
 8016804:	f04f 30ff 	mov.w	r0, #4294967295
 8016808:	b01d      	add	sp, #116	@ 0x74
 801680a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801680e:	89ab      	ldrh	r3, [r5, #12]
 8016810:	0598      	lsls	r0, r3, #22
 8016812:	d4f7      	bmi.n	8016804 <_vfiprintf_r+0x44>
 8016814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016816:	f7ff fa93 	bl	8015d40 <__retarget_lock_release_recursive>
 801681a:	e7f3      	b.n	8016804 <_vfiprintf_r+0x44>
 801681c:	2300      	movs	r3, #0
 801681e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016820:	2320      	movs	r3, #32
 8016822:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016826:	f8cd 800c 	str.w	r8, [sp, #12]
 801682a:	2330      	movs	r3, #48	@ 0x30
 801682c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80169dc <_vfiprintf_r+0x21c>
 8016830:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016834:	f04f 0901 	mov.w	r9, #1
 8016838:	4623      	mov	r3, r4
 801683a:	469a      	mov	sl, r3
 801683c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016840:	b10a      	cbz	r2, 8016846 <_vfiprintf_r+0x86>
 8016842:	2a25      	cmp	r2, #37	@ 0x25
 8016844:	d1f9      	bne.n	801683a <_vfiprintf_r+0x7a>
 8016846:	ebba 0b04 	subs.w	fp, sl, r4
 801684a:	d00b      	beq.n	8016864 <_vfiprintf_r+0xa4>
 801684c:	465b      	mov	r3, fp
 801684e:	4622      	mov	r2, r4
 8016850:	4629      	mov	r1, r5
 8016852:	4630      	mov	r0, r6
 8016854:	f7ff ffa2 	bl	801679c <__sfputs_r>
 8016858:	3001      	adds	r0, #1
 801685a:	f000 80a7 	beq.w	80169ac <_vfiprintf_r+0x1ec>
 801685e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016860:	445a      	add	r2, fp
 8016862:	9209      	str	r2, [sp, #36]	@ 0x24
 8016864:	f89a 3000 	ldrb.w	r3, [sl]
 8016868:	2b00      	cmp	r3, #0
 801686a:	f000 809f 	beq.w	80169ac <_vfiprintf_r+0x1ec>
 801686e:	2300      	movs	r3, #0
 8016870:	f04f 32ff 	mov.w	r2, #4294967295
 8016874:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016878:	f10a 0a01 	add.w	sl, sl, #1
 801687c:	9304      	str	r3, [sp, #16]
 801687e:	9307      	str	r3, [sp, #28]
 8016880:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016884:	931a      	str	r3, [sp, #104]	@ 0x68
 8016886:	4654      	mov	r4, sl
 8016888:	2205      	movs	r2, #5
 801688a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801688e:	4853      	ldr	r0, [pc, #332]	@ (80169dc <_vfiprintf_r+0x21c>)
 8016890:	f7e9 fcc6 	bl	8000220 <memchr>
 8016894:	9a04      	ldr	r2, [sp, #16]
 8016896:	b9d8      	cbnz	r0, 80168d0 <_vfiprintf_r+0x110>
 8016898:	06d1      	lsls	r1, r2, #27
 801689a:	bf44      	itt	mi
 801689c:	2320      	movmi	r3, #32
 801689e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80168a2:	0713      	lsls	r3, r2, #28
 80168a4:	bf44      	itt	mi
 80168a6:	232b      	movmi	r3, #43	@ 0x2b
 80168a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80168ac:	f89a 3000 	ldrb.w	r3, [sl]
 80168b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80168b2:	d015      	beq.n	80168e0 <_vfiprintf_r+0x120>
 80168b4:	9a07      	ldr	r2, [sp, #28]
 80168b6:	4654      	mov	r4, sl
 80168b8:	2000      	movs	r0, #0
 80168ba:	f04f 0c0a 	mov.w	ip, #10
 80168be:	4621      	mov	r1, r4
 80168c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80168c4:	3b30      	subs	r3, #48	@ 0x30
 80168c6:	2b09      	cmp	r3, #9
 80168c8:	d94b      	bls.n	8016962 <_vfiprintf_r+0x1a2>
 80168ca:	b1b0      	cbz	r0, 80168fa <_vfiprintf_r+0x13a>
 80168cc:	9207      	str	r2, [sp, #28]
 80168ce:	e014      	b.n	80168fa <_vfiprintf_r+0x13a>
 80168d0:	eba0 0308 	sub.w	r3, r0, r8
 80168d4:	fa09 f303 	lsl.w	r3, r9, r3
 80168d8:	4313      	orrs	r3, r2
 80168da:	9304      	str	r3, [sp, #16]
 80168dc:	46a2      	mov	sl, r4
 80168de:	e7d2      	b.n	8016886 <_vfiprintf_r+0xc6>
 80168e0:	9b03      	ldr	r3, [sp, #12]
 80168e2:	1d19      	adds	r1, r3, #4
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	9103      	str	r1, [sp, #12]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	bfbb      	ittet	lt
 80168ec:	425b      	neglt	r3, r3
 80168ee:	f042 0202 	orrlt.w	r2, r2, #2
 80168f2:	9307      	strge	r3, [sp, #28]
 80168f4:	9307      	strlt	r3, [sp, #28]
 80168f6:	bfb8      	it	lt
 80168f8:	9204      	strlt	r2, [sp, #16]
 80168fa:	7823      	ldrb	r3, [r4, #0]
 80168fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80168fe:	d10a      	bne.n	8016916 <_vfiprintf_r+0x156>
 8016900:	7863      	ldrb	r3, [r4, #1]
 8016902:	2b2a      	cmp	r3, #42	@ 0x2a
 8016904:	d132      	bne.n	801696c <_vfiprintf_r+0x1ac>
 8016906:	9b03      	ldr	r3, [sp, #12]
 8016908:	1d1a      	adds	r2, r3, #4
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	9203      	str	r2, [sp, #12]
 801690e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016912:	3402      	adds	r4, #2
 8016914:	9305      	str	r3, [sp, #20]
 8016916:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80169ec <_vfiprintf_r+0x22c>
 801691a:	7821      	ldrb	r1, [r4, #0]
 801691c:	2203      	movs	r2, #3
 801691e:	4650      	mov	r0, sl
 8016920:	f7e9 fc7e 	bl	8000220 <memchr>
 8016924:	b138      	cbz	r0, 8016936 <_vfiprintf_r+0x176>
 8016926:	9b04      	ldr	r3, [sp, #16]
 8016928:	eba0 000a 	sub.w	r0, r0, sl
 801692c:	2240      	movs	r2, #64	@ 0x40
 801692e:	4082      	lsls	r2, r0
 8016930:	4313      	orrs	r3, r2
 8016932:	3401      	adds	r4, #1
 8016934:	9304      	str	r3, [sp, #16]
 8016936:	f814 1b01 	ldrb.w	r1, [r4], #1
 801693a:	4829      	ldr	r0, [pc, #164]	@ (80169e0 <_vfiprintf_r+0x220>)
 801693c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016940:	2206      	movs	r2, #6
 8016942:	f7e9 fc6d 	bl	8000220 <memchr>
 8016946:	2800      	cmp	r0, #0
 8016948:	d03f      	beq.n	80169ca <_vfiprintf_r+0x20a>
 801694a:	4b26      	ldr	r3, [pc, #152]	@ (80169e4 <_vfiprintf_r+0x224>)
 801694c:	bb1b      	cbnz	r3, 8016996 <_vfiprintf_r+0x1d6>
 801694e:	9b03      	ldr	r3, [sp, #12]
 8016950:	3307      	adds	r3, #7
 8016952:	f023 0307 	bic.w	r3, r3, #7
 8016956:	3308      	adds	r3, #8
 8016958:	9303      	str	r3, [sp, #12]
 801695a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801695c:	443b      	add	r3, r7
 801695e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016960:	e76a      	b.n	8016838 <_vfiprintf_r+0x78>
 8016962:	fb0c 3202 	mla	r2, ip, r2, r3
 8016966:	460c      	mov	r4, r1
 8016968:	2001      	movs	r0, #1
 801696a:	e7a8      	b.n	80168be <_vfiprintf_r+0xfe>
 801696c:	2300      	movs	r3, #0
 801696e:	3401      	adds	r4, #1
 8016970:	9305      	str	r3, [sp, #20]
 8016972:	4619      	mov	r1, r3
 8016974:	f04f 0c0a 	mov.w	ip, #10
 8016978:	4620      	mov	r0, r4
 801697a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801697e:	3a30      	subs	r2, #48	@ 0x30
 8016980:	2a09      	cmp	r2, #9
 8016982:	d903      	bls.n	801698c <_vfiprintf_r+0x1cc>
 8016984:	2b00      	cmp	r3, #0
 8016986:	d0c6      	beq.n	8016916 <_vfiprintf_r+0x156>
 8016988:	9105      	str	r1, [sp, #20]
 801698a:	e7c4      	b.n	8016916 <_vfiprintf_r+0x156>
 801698c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016990:	4604      	mov	r4, r0
 8016992:	2301      	movs	r3, #1
 8016994:	e7f0      	b.n	8016978 <_vfiprintf_r+0x1b8>
 8016996:	ab03      	add	r3, sp, #12
 8016998:	9300      	str	r3, [sp, #0]
 801699a:	462a      	mov	r2, r5
 801699c:	4b12      	ldr	r3, [pc, #72]	@ (80169e8 <_vfiprintf_r+0x228>)
 801699e:	a904      	add	r1, sp, #16
 80169a0:	4630      	mov	r0, r6
 80169a2:	f3af 8000 	nop.w
 80169a6:	4607      	mov	r7, r0
 80169a8:	1c78      	adds	r0, r7, #1
 80169aa:	d1d6      	bne.n	801695a <_vfiprintf_r+0x19a>
 80169ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80169ae:	07d9      	lsls	r1, r3, #31
 80169b0:	d405      	bmi.n	80169be <_vfiprintf_r+0x1fe>
 80169b2:	89ab      	ldrh	r3, [r5, #12]
 80169b4:	059a      	lsls	r2, r3, #22
 80169b6:	d402      	bmi.n	80169be <_vfiprintf_r+0x1fe>
 80169b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80169ba:	f7ff f9c1 	bl	8015d40 <__retarget_lock_release_recursive>
 80169be:	89ab      	ldrh	r3, [r5, #12]
 80169c0:	065b      	lsls	r3, r3, #25
 80169c2:	f53f af1f 	bmi.w	8016804 <_vfiprintf_r+0x44>
 80169c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80169c8:	e71e      	b.n	8016808 <_vfiprintf_r+0x48>
 80169ca:	ab03      	add	r3, sp, #12
 80169cc:	9300      	str	r3, [sp, #0]
 80169ce:	462a      	mov	r2, r5
 80169d0:	4b05      	ldr	r3, [pc, #20]	@ (80169e8 <_vfiprintf_r+0x228>)
 80169d2:	a904      	add	r1, sp, #16
 80169d4:	4630      	mov	r0, r6
 80169d6:	f7ff fca7 	bl	8016328 <_printf_i>
 80169da:	e7e4      	b.n	80169a6 <_vfiprintf_r+0x1e6>
 80169dc:	08017077 	.word	0x08017077
 80169e0:	08017081 	.word	0x08017081
 80169e4:	00000000 	.word	0x00000000
 80169e8:	0801679d 	.word	0x0801679d
 80169ec:	0801707d 	.word	0x0801707d

080169f0 <__swbuf_r>:
 80169f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169f2:	460e      	mov	r6, r1
 80169f4:	4614      	mov	r4, r2
 80169f6:	4605      	mov	r5, r0
 80169f8:	b118      	cbz	r0, 8016a02 <__swbuf_r+0x12>
 80169fa:	6a03      	ldr	r3, [r0, #32]
 80169fc:	b90b      	cbnz	r3, 8016a02 <__swbuf_r+0x12>
 80169fe:	f7ff f84d 	bl	8015a9c <__sinit>
 8016a02:	69a3      	ldr	r3, [r4, #24]
 8016a04:	60a3      	str	r3, [r4, #8]
 8016a06:	89a3      	ldrh	r3, [r4, #12]
 8016a08:	071a      	lsls	r2, r3, #28
 8016a0a:	d501      	bpl.n	8016a10 <__swbuf_r+0x20>
 8016a0c:	6923      	ldr	r3, [r4, #16]
 8016a0e:	b943      	cbnz	r3, 8016a22 <__swbuf_r+0x32>
 8016a10:	4621      	mov	r1, r4
 8016a12:	4628      	mov	r0, r5
 8016a14:	f000 f82a 	bl	8016a6c <__swsetup_r>
 8016a18:	b118      	cbz	r0, 8016a22 <__swbuf_r+0x32>
 8016a1a:	f04f 37ff 	mov.w	r7, #4294967295
 8016a1e:	4638      	mov	r0, r7
 8016a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a22:	6823      	ldr	r3, [r4, #0]
 8016a24:	6922      	ldr	r2, [r4, #16]
 8016a26:	1a98      	subs	r0, r3, r2
 8016a28:	6963      	ldr	r3, [r4, #20]
 8016a2a:	b2f6      	uxtb	r6, r6
 8016a2c:	4283      	cmp	r3, r0
 8016a2e:	4637      	mov	r7, r6
 8016a30:	dc05      	bgt.n	8016a3e <__swbuf_r+0x4e>
 8016a32:	4621      	mov	r1, r4
 8016a34:	4628      	mov	r0, r5
 8016a36:	f7ff fe1b 	bl	8016670 <_fflush_r>
 8016a3a:	2800      	cmp	r0, #0
 8016a3c:	d1ed      	bne.n	8016a1a <__swbuf_r+0x2a>
 8016a3e:	68a3      	ldr	r3, [r4, #8]
 8016a40:	3b01      	subs	r3, #1
 8016a42:	60a3      	str	r3, [r4, #8]
 8016a44:	6823      	ldr	r3, [r4, #0]
 8016a46:	1c5a      	adds	r2, r3, #1
 8016a48:	6022      	str	r2, [r4, #0]
 8016a4a:	701e      	strb	r6, [r3, #0]
 8016a4c:	6962      	ldr	r2, [r4, #20]
 8016a4e:	1c43      	adds	r3, r0, #1
 8016a50:	429a      	cmp	r2, r3
 8016a52:	d004      	beq.n	8016a5e <__swbuf_r+0x6e>
 8016a54:	89a3      	ldrh	r3, [r4, #12]
 8016a56:	07db      	lsls	r3, r3, #31
 8016a58:	d5e1      	bpl.n	8016a1e <__swbuf_r+0x2e>
 8016a5a:	2e0a      	cmp	r6, #10
 8016a5c:	d1df      	bne.n	8016a1e <__swbuf_r+0x2e>
 8016a5e:	4621      	mov	r1, r4
 8016a60:	4628      	mov	r0, r5
 8016a62:	f7ff fe05 	bl	8016670 <_fflush_r>
 8016a66:	2800      	cmp	r0, #0
 8016a68:	d0d9      	beq.n	8016a1e <__swbuf_r+0x2e>
 8016a6a:	e7d6      	b.n	8016a1a <__swbuf_r+0x2a>

08016a6c <__swsetup_r>:
 8016a6c:	b538      	push	{r3, r4, r5, lr}
 8016a6e:	4b29      	ldr	r3, [pc, #164]	@ (8016b14 <__swsetup_r+0xa8>)
 8016a70:	4605      	mov	r5, r0
 8016a72:	6818      	ldr	r0, [r3, #0]
 8016a74:	460c      	mov	r4, r1
 8016a76:	b118      	cbz	r0, 8016a80 <__swsetup_r+0x14>
 8016a78:	6a03      	ldr	r3, [r0, #32]
 8016a7a:	b90b      	cbnz	r3, 8016a80 <__swsetup_r+0x14>
 8016a7c:	f7ff f80e 	bl	8015a9c <__sinit>
 8016a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a84:	0719      	lsls	r1, r3, #28
 8016a86:	d422      	bmi.n	8016ace <__swsetup_r+0x62>
 8016a88:	06da      	lsls	r2, r3, #27
 8016a8a:	d407      	bmi.n	8016a9c <__swsetup_r+0x30>
 8016a8c:	2209      	movs	r2, #9
 8016a8e:	602a      	str	r2, [r5, #0]
 8016a90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016a94:	81a3      	strh	r3, [r4, #12]
 8016a96:	f04f 30ff 	mov.w	r0, #4294967295
 8016a9a:	e033      	b.n	8016b04 <__swsetup_r+0x98>
 8016a9c:	0758      	lsls	r0, r3, #29
 8016a9e:	d512      	bpl.n	8016ac6 <__swsetup_r+0x5a>
 8016aa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016aa2:	b141      	cbz	r1, 8016ab6 <__swsetup_r+0x4a>
 8016aa4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016aa8:	4299      	cmp	r1, r3
 8016aaa:	d002      	beq.n	8016ab2 <__swsetup_r+0x46>
 8016aac:	4628      	mov	r0, r5
 8016aae:	f7ff f975 	bl	8015d9c <_free_r>
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	6363      	str	r3, [r4, #52]	@ 0x34
 8016ab6:	89a3      	ldrh	r3, [r4, #12]
 8016ab8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016abc:	81a3      	strh	r3, [r4, #12]
 8016abe:	2300      	movs	r3, #0
 8016ac0:	6063      	str	r3, [r4, #4]
 8016ac2:	6923      	ldr	r3, [r4, #16]
 8016ac4:	6023      	str	r3, [r4, #0]
 8016ac6:	89a3      	ldrh	r3, [r4, #12]
 8016ac8:	f043 0308 	orr.w	r3, r3, #8
 8016acc:	81a3      	strh	r3, [r4, #12]
 8016ace:	6923      	ldr	r3, [r4, #16]
 8016ad0:	b94b      	cbnz	r3, 8016ae6 <__swsetup_r+0x7a>
 8016ad2:	89a3      	ldrh	r3, [r4, #12]
 8016ad4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016ad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016adc:	d003      	beq.n	8016ae6 <__swsetup_r+0x7a>
 8016ade:	4621      	mov	r1, r4
 8016ae0:	4628      	mov	r0, r5
 8016ae2:	f000 f88b 	bl	8016bfc <__smakebuf_r>
 8016ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016aea:	f013 0201 	ands.w	r2, r3, #1
 8016aee:	d00a      	beq.n	8016b06 <__swsetup_r+0x9a>
 8016af0:	2200      	movs	r2, #0
 8016af2:	60a2      	str	r2, [r4, #8]
 8016af4:	6962      	ldr	r2, [r4, #20]
 8016af6:	4252      	negs	r2, r2
 8016af8:	61a2      	str	r2, [r4, #24]
 8016afa:	6922      	ldr	r2, [r4, #16]
 8016afc:	b942      	cbnz	r2, 8016b10 <__swsetup_r+0xa4>
 8016afe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016b02:	d1c5      	bne.n	8016a90 <__swsetup_r+0x24>
 8016b04:	bd38      	pop	{r3, r4, r5, pc}
 8016b06:	0799      	lsls	r1, r3, #30
 8016b08:	bf58      	it	pl
 8016b0a:	6962      	ldrpl	r2, [r4, #20]
 8016b0c:	60a2      	str	r2, [r4, #8]
 8016b0e:	e7f4      	b.n	8016afa <__swsetup_r+0x8e>
 8016b10:	2000      	movs	r0, #0
 8016b12:	e7f7      	b.n	8016b04 <__swsetup_r+0x98>
 8016b14:	2000019c 	.word	0x2000019c

08016b18 <_raise_r>:
 8016b18:	291f      	cmp	r1, #31
 8016b1a:	b538      	push	{r3, r4, r5, lr}
 8016b1c:	4605      	mov	r5, r0
 8016b1e:	460c      	mov	r4, r1
 8016b20:	d904      	bls.n	8016b2c <_raise_r+0x14>
 8016b22:	2316      	movs	r3, #22
 8016b24:	6003      	str	r3, [r0, #0]
 8016b26:	f04f 30ff 	mov.w	r0, #4294967295
 8016b2a:	bd38      	pop	{r3, r4, r5, pc}
 8016b2c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016b2e:	b112      	cbz	r2, 8016b36 <_raise_r+0x1e>
 8016b30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016b34:	b94b      	cbnz	r3, 8016b4a <_raise_r+0x32>
 8016b36:	4628      	mov	r0, r5
 8016b38:	f000 f830 	bl	8016b9c <_getpid_r>
 8016b3c:	4622      	mov	r2, r4
 8016b3e:	4601      	mov	r1, r0
 8016b40:	4628      	mov	r0, r5
 8016b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016b46:	f000 b817 	b.w	8016b78 <_kill_r>
 8016b4a:	2b01      	cmp	r3, #1
 8016b4c:	d00a      	beq.n	8016b64 <_raise_r+0x4c>
 8016b4e:	1c59      	adds	r1, r3, #1
 8016b50:	d103      	bne.n	8016b5a <_raise_r+0x42>
 8016b52:	2316      	movs	r3, #22
 8016b54:	6003      	str	r3, [r0, #0]
 8016b56:	2001      	movs	r0, #1
 8016b58:	e7e7      	b.n	8016b2a <_raise_r+0x12>
 8016b5a:	2100      	movs	r1, #0
 8016b5c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016b60:	4620      	mov	r0, r4
 8016b62:	4798      	blx	r3
 8016b64:	2000      	movs	r0, #0
 8016b66:	e7e0      	b.n	8016b2a <_raise_r+0x12>

08016b68 <raise>:
 8016b68:	4b02      	ldr	r3, [pc, #8]	@ (8016b74 <raise+0xc>)
 8016b6a:	4601      	mov	r1, r0
 8016b6c:	6818      	ldr	r0, [r3, #0]
 8016b6e:	f7ff bfd3 	b.w	8016b18 <_raise_r>
 8016b72:	bf00      	nop
 8016b74:	2000019c 	.word	0x2000019c

08016b78 <_kill_r>:
 8016b78:	b538      	push	{r3, r4, r5, lr}
 8016b7a:	4d07      	ldr	r5, [pc, #28]	@ (8016b98 <_kill_r+0x20>)
 8016b7c:	2300      	movs	r3, #0
 8016b7e:	4604      	mov	r4, r0
 8016b80:	4608      	mov	r0, r1
 8016b82:	4611      	mov	r1, r2
 8016b84:	602b      	str	r3, [r5, #0]
 8016b86:	f7eb fbb9 	bl	80022fc <_kill>
 8016b8a:	1c43      	adds	r3, r0, #1
 8016b8c:	d102      	bne.n	8016b94 <_kill_r+0x1c>
 8016b8e:	682b      	ldr	r3, [r5, #0]
 8016b90:	b103      	cbz	r3, 8016b94 <_kill_r+0x1c>
 8016b92:	6023      	str	r3, [r4, #0]
 8016b94:	bd38      	pop	{r3, r4, r5, pc}
 8016b96:	bf00      	nop
 8016b98:	20024e78 	.word	0x20024e78

08016b9c <_getpid_r>:
 8016b9c:	f7eb bba6 	b.w	80022ec <_getpid>

08016ba0 <_malloc_usable_size_r>:
 8016ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ba4:	1f18      	subs	r0, r3, #4
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	bfbc      	itt	lt
 8016baa:	580b      	ldrlt	r3, [r1, r0]
 8016bac:	18c0      	addlt	r0, r0, r3
 8016bae:	4770      	bx	lr

08016bb0 <__swhatbuf_r>:
 8016bb0:	b570      	push	{r4, r5, r6, lr}
 8016bb2:	460c      	mov	r4, r1
 8016bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bb8:	2900      	cmp	r1, #0
 8016bba:	b096      	sub	sp, #88	@ 0x58
 8016bbc:	4615      	mov	r5, r2
 8016bbe:	461e      	mov	r6, r3
 8016bc0:	da0d      	bge.n	8016bde <__swhatbuf_r+0x2e>
 8016bc2:	89a3      	ldrh	r3, [r4, #12]
 8016bc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016bc8:	f04f 0100 	mov.w	r1, #0
 8016bcc:	bf14      	ite	ne
 8016bce:	2340      	movne	r3, #64	@ 0x40
 8016bd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016bd4:	2000      	movs	r0, #0
 8016bd6:	6031      	str	r1, [r6, #0]
 8016bd8:	602b      	str	r3, [r5, #0]
 8016bda:	b016      	add	sp, #88	@ 0x58
 8016bdc:	bd70      	pop	{r4, r5, r6, pc}
 8016bde:	466a      	mov	r2, sp
 8016be0:	f000 f848 	bl	8016c74 <_fstat_r>
 8016be4:	2800      	cmp	r0, #0
 8016be6:	dbec      	blt.n	8016bc2 <__swhatbuf_r+0x12>
 8016be8:	9901      	ldr	r1, [sp, #4]
 8016bea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016bee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016bf2:	4259      	negs	r1, r3
 8016bf4:	4159      	adcs	r1, r3
 8016bf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016bfa:	e7eb      	b.n	8016bd4 <__swhatbuf_r+0x24>

08016bfc <__smakebuf_r>:
 8016bfc:	898b      	ldrh	r3, [r1, #12]
 8016bfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016c00:	079d      	lsls	r5, r3, #30
 8016c02:	4606      	mov	r6, r0
 8016c04:	460c      	mov	r4, r1
 8016c06:	d507      	bpl.n	8016c18 <__smakebuf_r+0x1c>
 8016c08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016c0c:	6023      	str	r3, [r4, #0]
 8016c0e:	6123      	str	r3, [r4, #16]
 8016c10:	2301      	movs	r3, #1
 8016c12:	6163      	str	r3, [r4, #20]
 8016c14:	b003      	add	sp, #12
 8016c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c18:	ab01      	add	r3, sp, #4
 8016c1a:	466a      	mov	r2, sp
 8016c1c:	f7ff ffc8 	bl	8016bb0 <__swhatbuf_r>
 8016c20:	9f00      	ldr	r7, [sp, #0]
 8016c22:	4605      	mov	r5, r0
 8016c24:	4639      	mov	r1, r7
 8016c26:	4630      	mov	r0, r6
 8016c28:	f7ff f92c 	bl	8015e84 <_malloc_r>
 8016c2c:	b948      	cbnz	r0, 8016c42 <__smakebuf_r+0x46>
 8016c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c32:	059a      	lsls	r2, r3, #22
 8016c34:	d4ee      	bmi.n	8016c14 <__smakebuf_r+0x18>
 8016c36:	f023 0303 	bic.w	r3, r3, #3
 8016c3a:	f043 0302 	orr.w	r3, r3, #2
 8016c3e:	81a3      	strh	r3, [r4, #12]
 8016c40:	e7e2      	b.n	8016c08 <__smakebuf_r+0xc>
 8016c42:	89a3      	ldrh	r3, [r4, #12]
 8016c44:	6020      	str	r0, [r4, #0]
 8016c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016c4a:	81a3      	strh	r3, [r4, #12]
 8016c4c:	9b01      	ldr	r3, [sp, #4]
 8016c4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016c52:	b15b      	cbz	r3, 8016c6c <__smakebuf_r+0x70>
 8016c54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c58:	4630      	mov	r0, r6
 8016c5a:	f000 f81d 	bl	8016c98 <_isatty_r>
 8016c5e:	b128      	cbz	r0, 8016c6c <__smakebuf_r+0x70>
 8016c60:	89a3      	ldrh	r3, [r4, #12]
 8016c62:	f023 0303 	bic.w	r3, r3, #3
 8016c66:	f043 0301 	orr.w	r3, r3, #1
 8016c6a:	81a3      	strh	r3, [r4, #12]
 8016c6c:	89a3      	ldrh	r3, [r4, #12]
 8016c6e:	431d      	orrs	r5, r3
 8016c70:	81a5      	strh	r5, [r4, #12]
 8016c72:	e7cf      	b.n	8016c14 <__smakebuf_r+0x18>

08016c74 <_fstat_r>:
 8016c74:	b538      	push	{r3, r4, r5, lr}
 8016c76:	4d07      	ldr	r5, [pc, #28]	@ (8016c94 <_fstat_r+0x20>)
 8016c78:	2300      	movs	r3, #0
 8016c7a:	4604      	mov	r4, r0
 8016c7c:	4608      	mov	r0, r1
 8016c7e:	4611      	mov	r1, r2
 8016c80:	602b      	str	r3, [r5, #0]
 8016c82:	f7eb fb9b 	bl	80023bc <_fstat>
 8016c86:	1c43      	adds	r3, r0, #1
 8016c88:	d102      	bne.n	8016c90 <_fstat_r+0x1c>
 8016c8a:	682b      	ldr	r3, [r5, #0]
 8016c8c:	b103      	cbz	r3, 8016c90 <_fstat_r+0x1c>
 8016c8e:	6023      	str	r3, [r4, #0]
 8016c90:	bd38      	pop	{r3, r4, r5, pc}
 8016c92:	bf00      	nop
 8016c94:	20024e78 	.word	0x20024e78

08016c98 <_isatty_r>:
 8016c98:	b538      	push	{r3, r4, r5, lr}
 8016c9a:	4d06      	ldr	r5, [pc, #24]	@ (8016cb4 <_isatty_r+0x1c>)
 8016c9c:	2300      	movs	r3, #0
 8016c9e:	4604      	mov	r4, r0
 8016ca0:	4608      	mov	r0, r1
 8016ca2:	602b      	str	r3, [r5, #0]
 8016ca4:	f7eb fb9a 	bl	80023dc <_isatty>
 8016ca8:	1c43      	adds	r3, r0, #1
 8016caa:	d102      	bne.n	8016cb2 <_isatty_r+0x1a>
 8016cac:	682b      	ldr	r3, [r5, #0]
 8016cae:	b103      	cbz	r3, 8016cb2 <_isatty_r+0x1a>
 8016cb0:	6023      	str	r3, [r4, #0]
 8016cb2:	bd38      	pop	{r3, r4, r5, pc}
 8016cb4:	20024e78 	.word	0x20024e78

08016cb8 <_init>:
 8016cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cba:	bf00      	nop
 8016cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cbe:	bc08      	pop	{r3}
 8016cc0:	469e      	mov	lr, r3
 8016cc2:	4770      	bx	lr

08016cc4 <_fini>:
 8016cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cc6:	bf00      	nop
 8016cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cca:	bc08      	pop	{r3}
 8016ccc:	469e      	mov	lr, r3
 8016cce:	4770      	bx	lr
